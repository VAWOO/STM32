
RTC_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b318  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800b4c8  0800b4c8  0001b4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b990  0800b990  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b990  0800b990  0001b990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b998  0800b998  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b998  0800b998  0001b998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b99c  0800b99c  0001b99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b9a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000aac  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c88  20000c88  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001bd60  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041d4  00000000  00000000  0003bfaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018c0  00000000  00000000  00040188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000133e  00000000  00000000  00041a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aa41  00000000  00000000  00042d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021b70  00000000  00000000  0006d7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb153  00000000  00000000  0008f337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007d88  00000000  00000000  0018a48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00192214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b4b0 	.word	0x0800b4b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800b4b0 	.word	0x0800b4b0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <MX_ADC1_Init+0x9c>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_ADC1_Init+0x98>)
 800104a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_ADC1_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001072:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <MX_ADC1_Init+0xa0>)
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_ADC1_Init+0x98>)
 800107e:	2201      	movs	r2, #1
 8001080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_ADC1_Init+0x98>)
 800108c:	2201      	movs	r2, #1
 800108e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001092:	f001 fad9 	bl	8002648 <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800109c:	f000 fed6 	bl	8001e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_ADC1_Init+0xa4>)
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_ADC1_Init+0x98>)
 80010b2:	f001 fb0d 	bl	80026d0 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010bc:	f000 fec6 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200001f8 	.word	0x200001f8
 80010cc:	40012000 	.word	0x40012000
 80010d0:	0f000001 	.word	0x0f000001
 80010d4:	10000012 	.word	0x10000012

080010d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_ADC_MspInit+0x3c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10d      	bne.n	8001106 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_ADC_MspInit+0x40>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_ADC_MspInit+0x40>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <HAL_ADC_MspInit+0x40>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40012000 	.word	0x40012000
 8001118:	40023800 	.word	0x40023800

0800111c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_DAC_Init+0x4c>)
 800112c:	4a0f      	ldr	r2, [pc, #60]	; (800116c <MX_DAC_Init+0x50>)
 800112e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_DAC_Init+0x4c>)
 8001132:	f001 fe0c 	bl	8002d4e <HAL_DAC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800113c:	f000 fe86 	bl	8001e4c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_DAC_Init+0x4c>)
 8001150:	f001 fe1f 	bl	8002d92 <HAL_DAC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800115a:	f000 fe77 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000240 	.word	0x20000240
 800116c:	40007400 	.word	0x40007400

08001170 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_DAC_MspInit+0x7c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d127      	bne.n	80011e2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 800119c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011ca:	2310      	movs	r3, #16
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ce:	2303      	movs	r3, #3
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_DAC_MspInit+0x84>)
 80011de:	f002 f94f 	bl	8003480 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40007400 	.word	0x40007400
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020000 	.word	0x40020000

080011f8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_ETH_Init+0x84>)
 80011fe:	4a20      	ldr	r2, [pc, #128]	; (8001280 <MX_ETH_Init+0x88>)
 8001200:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <MX_ETH_Init+0x8c>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_ETH_Init+0x8c>)
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_ETH_Init+0x8c>)
 8001210:	22e1      	movs	r2, #225	; 0xe1
 8001212:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_ETH_Init+0x8c>)
 8001216:	2200      	movs	r2, #0
 8001218:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_ETH_Init+0x8c>)
 800121c:	2200      	movs	r2, #0
 800121e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_ETH_Init+0x8c>)
 8001222:	2200      	movs	r2, #0
 8001224:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_ETH_Init+0x84>)
 8001228:	4a16      	ldr	r2, [pc, #88]	; (8001284 <MX_ETH_Init+0x8c>)
 800122a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_ETH_Init+0x84>)
 800122e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001232:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_ETH_Init+0x84>)
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <MX_ETH_Init+0x90>)
 8001238:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_ETH_Init+0x84>)
 800123c:	4a13      	ldr	r2, [pc, #76]	; (800128c <MX_ETH_Init+0x94>)
 800123e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_ETH_Init+0x84>)
 8001242:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001246:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <MX_ETH_Init+0x84>)
 800124a:	f001 fdf1 	bl	8002e30 <HAL_ETH_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001254:	f000 fdfa 	bl	8001e4c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001258:	2238      	movs	r2, #56	; 0x38
 800125a:	2100      	movs	r1, #0
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <MX_ETH_Init+0x98>)
 800125e:	f006 fcea 	bl	8007c36 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_ETH_Init+0x98>)
 8001264:	2221      	movs	r2, #33	; 0x21
 8001266:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_ETH_Init+0x98>)
 800126a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800126e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MX_ETH_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200003cc 	.word	0x200003cc
 8001280:	40028000 	.word	0x40028000
 8001284:	2000047c 	.word	0x2000047c
 8001288:	200002f4 	.word	0x200002f4
 800128c:	20000254 	.word	0x20000254
 8001290:	20000394 	.word	0x20000394

08001294 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	; 0x38
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a55      	ldr	r2, [pc, #340]	; (8001408 <HAL_ETH_MspInit+0x174>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	f040 80a4 	bne.w	8001400 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a52      	ldr	r2, [pc, #328]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	623b      	str	r3, [r7, #32]
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	4b4c      	ldr	r3, [pc, #304]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b49      	ldr	r3, [pc, #292]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	4a44      	ldr	r2, [pc, #272]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001300:	4b42      	ldr	r3, [pc, #264]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	4b3e      	ldr	r3, [pc, #248]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a3d      	ldr	r2, [pc, #244]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b3b      	ldr	r3, [pc, #236]	; (800140c <HAL_ETH_MspInit+0x178>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_ETH_MspInit+0x178>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a36      	ldr	r2, [pc, #216]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b34      	ldr	r3, [pc, #208]	; (800140c <HAL_ETH_MspInit+0x178>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_ETH_MspInit+0x178>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	4a2f      	ldr	r2, [pc, #188]	; (800140c <HAL_ETH_MspInit+0x178>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	6313      	str	r3, [r2, #48]	; 0x30
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	4a28      	ldr	r2, [pc, #160]	; (800140c <HAL_ETH_MspInit+0x178>)
 800136a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136e:	6313      	str	r3, [r2, #48]	; 0x30
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800137c:	2332      	movs	r3, #50	; 0x32
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800138c:	230b      	movs	r3, #11
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	481e      	ldr	r0, [pc, #120]	; (8001410 <HAL_ETH_MspInit+0x17c>)
 8001398:	f002 f872 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800139c:	2386      	movs	r3, #134	; 0x86
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ac:	230b      	movs	r3, #11
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4817      	ldr	r0, [pc, #92]	; (8001414 <HAL_ETH_MspInit+0x180>)
 80013b8:	f002 f862 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ce:	230b      	movs	r3, #11
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	480f      	ldr	r0, [pc, #60]	; (8001418 <HAL_ETH_MspInit+0x184>)
 80013da:	f002 f851 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f0:	230b      	movs	r3, #11
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <HAL_ETH_MspInit+0x188>)
 80013fc:	f002 f840 	bl	8003480 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001400:	bf00      	nop
 8001402:	3738      	adds	r7, #56	; 0x38
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40028000 	.word	0x40028000
 800140c:	40023800 	.word	0x40023800
 8001410:	40020800 	.word	0x40020800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40021800 	.word	0x40021800

08001420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	4b62      	ldr	r3, [pc, #392]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a61      	ldr	r2, [pc, #388]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b5f      	ldr	r3, [pc, #380]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a53      	ldr	r2, [pc, #332]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b4d      	ldr	r3, [pc, #308]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a4c      	ldr	r2, [pc, #304]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a45      	ldr	r2, [pc, #276]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a3e      	ldr	r2, [pc, #248]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2108      	movs	r1, #8
 80014e2:	4839      	ldr	r0, [pc, #228]	; (80015c8 <MX_GPIO_Init+0x1a8>)
 80014e4:	f002 f978 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f244 0181 	movw	r1, #16513	; 0x4081
 80014ee:	4837      	ldr	r0, [pc, #220]	; (80015cc <MX_GPIO_Init+0x1ac>)
 80014f0:	f002 f972 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2140      	movs	r1, #64	; 0x40
 80014f8:	4835      	ldr	r0, [pc, #212]	; (80015d0 <MX_GPIO_Init+0x1b0>)
 80014fa:	f002 f96d 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80014fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001504:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	482f      	ldr	r0, [pc, #188]	; (80015d4 <MX_GPIO_Init+0x1b4>)
 8001516:	f001 ffb3 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800151a:	2308      	movs	r3, #8
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4619      	mov	r1, r3
 8001530:	4825      	ldr	r0, [pc, #148]	; (80015c8 <MX_GPIO_Init+0x1a8>)
 8001532:	f001 ffa5 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001536:	f244 0381 	movw	r3, #16513	; 0x4081
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	481f      	ldr	r0, [pc, #124]	; (80015cc <MX_GPIO_Init+0x1ac>)
 8001550:	f001 ff96 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001554:	2302      	movs	r3, #2
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001558:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155e:	2301      	movs	r3, #1
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4819      	ldr	r0, [pc, #100]	; (80015d0 <MX_GPIO_Init+0x1b0>)
 800156a:	f001 ff89 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <MX_GPIO_Init+0x1b0>)
 8001586:	f001 ff7b 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <MX_GPIO_Init+0x1b0>)
 800159e:	f001 ff6f 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BTN_down_Pin|BTN_up_Pin|BTN_select_Pin;
 80015a2:	23e0      	movs	r3, #224	; 0xe0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <MX_GPIO_Init+0x1b8>)
 80015b8:	f001 ff62 	bl	8003480 <HAL_GPIO_Init>

}
 80015bc:	bf00      	nop
 80015be:	3730      	adds	r7, #48	; 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40021800 	.word	0x40021800
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00

080015dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_I2C1_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <MX_I2C1_Init+0x7c>)
 80015ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_I2C1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_I2C1_Init+0x74>)
 80015fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_I2C1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_I2C1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2C1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <MX_I2C1_Init+0x74>)
 800161a:	f002 f90f 	bl	800383c <HAL_I2C_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001624:	f000 fc12 	bl	8001e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001628:	2100      	movs	r1, #0
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <MX_I2C1_Init+0x74>)
 800162c:	f002 fe7f 	bl	800432e <HAL_I2CEx_ConfigAnalogFilter>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001636:	f000 fc09 	bl	8001e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800163a:	2100      	movs	r1, #0
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_I2C1_Init+0x74>)
 800163e:	f002 feb2 	bl	80043a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001648:	f000 fc00 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000484 	.word	0x20000484
 8001654:	40005400 	.word	0x40005400
 8001658:	000186a0 	.word	0x000186a0

0800165c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <HAL_I2C_MspInit+0x84>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12c      	bne.n	80016d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800169a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a0:	2312      	movs	r3, #18
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ac:	2304      	movs	r3, #4
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	480c      	ldr	r0, [pc, #48]	; (80016e8 <HAL_I2C_MspInit+0x8c>)
 80016b8:	f001 fee2 	bl	8003480 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40005400 	.word	0x40005400
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020400 	.word	0x40020400

080016ec <LCD_SendInternal>:
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	460b      	mov	r3, r1
 80016f8:	71bb      	strb	r3, [r7, #6]
 80016fa:	4613      	mov	r3, r2
 80016fc:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	b299      	uxth	r1, r3
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	2201      	movs	r2, #1
 8001708:	4822      	ldr	r0, [pc, #136]	; (8001794 <LCD_SendInternal+0xa8>)
 800170a:	f002 fad9 	bl	8003cc0 <HAL_I2C_IsDeviceReady>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d000      	beq.n	800171a <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8001718:	e7f1      	b.n	80016fe <LCD_SendInternal+0x12>
            break;
 800171a:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	f023 030f 	bic.w	r3, r3, #15
 8001722:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 800172a:	7bba      	ldrb	r2, [r7, #14]
 800172c:	797b      	ldrb	r3, [r7, #5]
 800172e:	4313      	orrs	r3, r2
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f043 030c 	orr.w	r3, r3, #12
 8001736:	b2db      	uxtb	r3, r3
 8001738:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 800173a:	7bba      	ldrb	r2, [r7, #14]
 800173c:	797b      	ldrb	r3, [r7, #5]
 800173e:	4313      	orrs	r3, r2
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	b2db      	uxtb	r3, r3
 8001748:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 800174a:	7b7a      	ldrb	r2, [r7, #13]
 800174c:	797b      	ldrb	r3, [r7, #5]
 800174e:	4313      	orrs	r3, r2
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f043 030c 	orr.w	r3, r3, #12
 8001756:	b2db      	uxtb	r3, r3
 8001758:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 800175a:	7b7a      	ldrb	r2, [r7, #13]
 800175c:	797b      	ldrb	r3, [r7, #5]
 800175e:	4313      	orrs	r3, r2
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f043 0308 	orr.w	r3, r3, #8
 8001766:	b2db      	uxtb	r3, r3
 8001768:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	b299      	uxth	r1, r3
 800176e:	f107 0208 	add.w	r2, r7, #8
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2304      	movs	r3, #4
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <LCD_SendInternal+0xa8>)
 800177c:	f002 f9a2 	bl	8003ac4 <HAL_I2C_Master_Transmit>
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8001784:	2005      	movs	r0, #5
 8001786:	f000 ff3b 	bl	8002600 <HAL_Delay>
    return res;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000484 	.word	0x20000484

08001798 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 80017a8:	79b9      	ldrb	r1, [r7, #6]
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2200      	movs	r2, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff9c 	bl	80016ec <LCD_SendInternal>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 80017cc:	79b9      	ldrb	r1, [r7, #6]
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2201      	movs	r2, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff8a 	bl	80016ec <LCD_SendInternal>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2130      	movs	r1, #48	; 0x30
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ffd2 	bl	8001798 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2102      	movs	r1, #2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ffcd 	bl	8001798 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	210c      	movs	r1, #12
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ffc8 	bl	8001798 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2101      	movs	r1, #1
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ffc3 	bl	8001798 <LCD_SendCommand>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	6039      	str	r1, [r7, #0]
 8001824:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 8001826:	e009      	b.n	800183c <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ffc3 	bl	80017bc <LCD_SendData>
        str++;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f1      	bne.n	8001828 <LCD_SendString+0xe>
    }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <get_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001856:	2200      	movs	r2, #0
 8001858:	4943      	ldr	r1, [pc, #268]	; (8001968 <get_time+0x118>)
 800185a:	4844      	ldr	r0, [pc, #272]	; (800196c <get_time+0x11c>)
 800185c:	f003 fe68 	bl	8005530 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001860:	2200      	movs	r2, #0
 8001862:	4943      	ldr	r1, [pc, #268]	; (8001970 <get_time+0x120>)
 8001864:	4841      	ldr	r0, [pc, #260]	; (800196c <get_time+0x11c>)
 8001866:	f003 ff45 	bl	80056f4 <HAL_RTC_GetDate>

	if (strcmp(ampm[sTime.TimeFormat], "AM") == 0 && sTime.Hours == 12)
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <get_time+0x118>)
 800186c:	78db      	ldrb	r3, [r3, #3]
 800186e:	461a      	mov	r2, r3
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	4a3f      	ldr	r2, [pc, #252]	; (8001974 <get_time+0x124>)
 8001878:	4413      	add	r3, r2
 800187a:	493f      	ldr	r1, [pc, #252]	; (8001978 <get_time+0x128>)
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fcb7 	bl	80001f0 <strcmp>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d106      	bne.n	8001896 <get_time+0x46>
 8001888:	4b37      	ldr	r3, [pc, #220]	; (8001968 <get_time+0x118>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d102      	bne.n	8001896 <get_time+0x46>
	{
		sTime.Hours = 0;
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <get_time+0x118>)
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	}

	if (selection == 0)
 8001896:	4b39      	ldr	r3, [pc, #228]	; (800197c <get_time+0x12c>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <get_time+0x6e>
		sprintf((char*)showDate, "%04d-%02d-%02d      ", 2000+sDate.Year, sDate.Month, sDate.Date);
 800189e:	4b34      	ldr	r3, [pc, #208]	; (8001970 <get_time+0x120>)
 80018a0:	78db      	ldrb	r3, [r3, #3]
 80018a2:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <get_time+0x120>)
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <get_time+0x120>)
 80018ae:	789b      	ldrb	r3, [r3, #2]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	460b      	mov	r3, r1
 80018b4:	4932      	ldr	r1, [pc, #200]	; (8001980 <get_time+0x130>)
 80018b6:	4833      	ldr	r0, [pc, #204]	; (8001984 <get_time+0x134>)
 80018b8:	f006 f95a 	bl	8007b70 <siprintf>
 80018bc:	e03a      	b.n	8001934 <get_time+0xe4>
	else if (selection == 1)
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <get_time+0x12c>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d10f      	bne.n	80018e6 <get_time+0x96>
		sprintf((char*)showDate, "%04d-%02d-%02d[HOUR]", 2000+sDate.Year, sDate.Month, sDate.Date);
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <get_time+0x120>)
 80018c8:	78db      	ldrb	r3, [r3, #3]
 80018ca:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <get_time+0x120>)
 80018d0:	785b      	ldrb	r3, [r3, #1]
 80018d2:	4619      	mov	r1, r3
 80018d4:	4b26      	ldr	r3, [pc, #152]	; (8001970 <get_time+0x120>)
 80018d6:	789b      	ldrb	r3, [r3, #2]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	460b      	mov	r3, r1
 80018dc:	492a      	ldr	r1, [pc, #168]	; (8001988 <get_time+0x138>)
 80018de:	4829      	ldr	r0, [pc, #164]	; (8001984 <get_time+0x134>)
 80018e0:	f006 f946 	bl	8007b70 <siprintf>
 80018e4:	e026      	b.n	8001934 <get_time+0xe4>
	else if (selection == 2)
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <get_time+0x12c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d10f      	bne.n	800190e <get_time+0xbe>
	    sprintf((char*)showDate, "%04d-%02d-%02d[MIN] ", 2000+sDate.Year, sDate.Month, sDate.Date);
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <get_time+0x120>)
 80018f0:	78db      	ldrb	r3, [r3, #3]
 80018f2:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <get_time+0x120>)
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <get_time+0x120>)
 80018fe:	789b      	ldrb	r3, [r3, #2]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	460b      	mov	r3, r1
 8001904:	4921      	ldr	r1, [pc, #132]	; (800198c <get_time+0x13c>)
 8001906:	481f      	ldr	r0, [pc, #124]	; (8001984 <get_time+0x134>)
 8001908:	f006 f932 	bl	8007b70 <siprintf>
 800190c:	e012      	b.n	8001934 <get_time+0xe4>
	else if (selection == 3)
 800190e:	4b1b      	ldr	r3, [pc, #108]	; (800197c <get_time+0x12c>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d10e      	bne.n	8001934 <get_time+0xe4>
	    sprintf((char*)showDate, "%04d-%02d-%02d[SEC] ", 2000+sDate.Year, sDate.Month, sDate.Date);
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <get_time+0x120>)
 8001918:	78db      	ldrb	r3, [r3, #3]
 800191a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <get_time+0x120>)
 8001920:	785b      	ldrb	r3, [r3, #1]
 8001922:	4619      	mov	r1, r3
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <get_time+0x120>)
 8001926:	789b      	ldrb	r3, [r3, #2]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	460b      	mov	r3, r1
 800192c:	4918      	ldr	r1, [pc, #96]	; (8001990 <get_time+0x140>)
 800192e:	4815      	ldr	r0, [pc, #84]	; (8001984 <get_time+0x134>)
 8001930:	f006 f91e 	bl	8007b70 <siprintf>

	sprintf((char *)showTime, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <get_time+0x118>)
 8001936:	78db      	ldrb	r3, [r3, #3]
 8001938:	461a      	mov	r2, r3
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <get_time+0x124>)
 8001942:	441a      	add	r2, r3
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <get_time+0x118>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <get_time+0x118>)
 800194c:	785b      	ldrb	r3, [r3, #1]
 800194e:	4619      	mov	r1, r3
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <get_time+0x118>)
 8001952:	789b      	ldrb	r3, [r3, #2]
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	9100      	str	r1, [sp, #0]
 8001958:	4603      	mov	r3, r0
 800195a:	490e      	ldr	r1, [pc, #56]	; (8001994 <get_time+0x144>)
 800195c:	480e      	ldr	r0, [pc, #56]	; (8001998 <get_time+0x148>)
 800195e:	f006 f907 	bl	8007b70 <siprintf>
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200004dc 	.word	0x200004dc
 800196c:	2000057c 	.word	0x2000057c
 8001970:	200004d8 	.word	0x200004d8
 8001974:	20000000 	.word	0x20000000
 8001978:	0800b4c8 	.word	0x0800b4c8
 800197c:	20000576 	.word	0x20000576
 8001980:	0800b4cc 	.word	0x0800b4cc
 8001984:	20000558 	.word	0x20000558
 8001988:	0800b4e4 	.word	0x0800b4e4
 800198c:	0800b4fc 	.word	0x0800b4fc
 8001990:	0800b514 	.word	0x0800b514
 8001994:	0800b52c 	.word	0x0800b52c
 8001998:	20000538 	.word	0x20000538

0800199c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019a0:	f000 fdbc 	bl	800251c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a4:	f000 f850 	bl	8001a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a8:	f7ff fd3a 	bl	8001420 <MX_GPIO_Init>
  MX_ETH_Init();
 80019ac:	f7ff fc24 	bl	80011f8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80019b0:	f000 fc90 	bl	80022d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80019b4:	f000 fd00 	bl	80023b8 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80019b8:	f000 fa4e 	bl	8001e58 <MX_RTC_Init>
  MX_I2C1_Init();
 80019bc:	f7ff fe0e 	bl	80015dc <MX_I2C1_Init>
  MX_ADC1_Init();
 80019c0:	f7ff fb36 	bl	8001030 <MX_ADC1_Init>
  MX_TIM1_Init();
 80019c4:	f000 fc14 	bl	80021f0 <MX_TIM1_Init>
  MX_DAC_Init();
 80019c8:	f7ff fba8 	bl	800111c <MX_DAC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80019cc:	f000 f8a8 	bl	8001b20 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(LCD_ADDR);
 80019d0:	204e      	movs	r0, #78	; 0x4e
 80019d2:	f7ff ff05 	bl	80017e0 <LCD_Init>
  HAL_TIM_Base_Start(&htim1);
 80019d6:	4816      	ldr	r0, [pc, #88]	; (8001a30 <main+0x94>)
 80019d8:	f003 ffe8 	bl	80059ac <HAL_TIM_Base_Start>
//
//
//	  LCD_SendCommand(LCD_ADDR, 0b11000000);
//	  LCD_SendString(LCD_ADDR, showTime);

	  get_time();
 80019dc:	f7ff ff38 	bl	8001850 <get_time>

	  memset(uart_buf, 0, sizeof(uart_buf));
 80019e0:	2246      	movs	r2, #70	; 0x46
 80019e2:	2100      	movs	r1, #0
 80019e4:	4813      	ldr	r0, [pc, #76]	; (8001a34 <main+0x98>)
 80019e6:	f006 f926 	bl	8007c36 <memset>
	  sprintf(uart_buf, "%s\t\r\n%s\t\r\n", showDate, showTime);
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <main+0x9c>)
 80019ec:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <main+0xa0>)
 80019ee:	4914      	ldr	r1, [pc, #80]	; (8001a40 <main+0xa4>)
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <main+0x98>)
 80019f2:	f006 f8bd 	bl	8007b70 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, strlen(uart_buf), 10000);
 80019f6:	480f      	ldr	r0, [pc, #60]	; (8001a34 <main+0x98>)
 80019f8:	f7fe fc5a 	bl	80002b0 <strlen>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a04:	490b      	ldr	r1, [pc, #44]	; (8001a34 <main+0x98>)
 8001a06:	480f      	ldr	r0, [pc, #60]	; (8001a44 <main+0xa8>)
 8001a08:	f004 fb03 	bl	8006012 <HAL_UART_Transmit>

	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	204e      	movs	r0, #78	; 0x4e
 8001a10:	f7ff fec2 	bl	8001798 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showDate);
 8001a14:	4909      	ldr	r1, [pc, #36]	; (8001a3c <main+0xa0>)
 8001a16:	204e      	movs	r0, #78	; 0x4e
 8001a18:	f7ff feff 	bl	800181a <LCD_SendString>

	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001a1c:	21c0      	movs	r1, #192	; 0xc0
 8001a1e:	204e      	movs	r0, #78	; 0x4e
 8001a20:	f7ff feba 	bl	8001798 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 8001a24:	4904      	ldr	r1, [pc, #16]	; (8001a38 <main+0x9c>)
 8001a26:	204e      	movs	r0, #78	; 0x4e
 8001a28:	f7ff fef7 	bl	800181a <LCD_SendString>
	  get_time();
 8001a2c:	e7d6      	b.n	80019dc <main+0x40>
 8001a2e:	bf00      	nop
 8001a30:	200005a0 	.word	0x200005a0
 8001a34:	200004f0 	.word	0x200004f0
 8001a38:	20000538 	.word	0x20000538
 8001a3c:	20000558 	.word	0x20000558
 8001a40:	0800b540 	.word	0x0800b540
 8001a44:	200005e8 	.word	0x200005e8

08001a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b094      	sub	sp, #80	; 0x50
 8001a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4e:	f107 0320 	add.w	r3, r7, #32
 8001a52:	2230      	movs	r2, #48	; 0x30
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f006 f8ed 	bl	8007c36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <SystemClock_Config+0xd0>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a28      	ldr	r2, [pc, #160]	; (8001b18 <SystemClock_Config+0xd0>)
 8001a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7c:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <SystemClock_Config+0xd0>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <SystemClock_Config+0xd4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <SystemClock_Config+0xd4>)
 8001a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <SystemClock_Config+0xd4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001aa4:	2305      	movs	r3, #5
 8001aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001aa8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ab6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001abc:	2304      	movs	r3, #4
 8001abe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ac0:	23a8      	movs	r3, #168	; 0xa8
 8001ac2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ac8:	2307      	movs	r3, #7
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001acc:	f107 0320 	add.w	r3, r7, #32
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fdc5 	bl	8004660 <HAL_RCC_OscConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001adc:	f000 f9b6 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	2105      	movs	r1, #5
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 f826 	bl	8004b50 <HAL_RCC_ClockConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b0a:	f000 f99f 	bl	8001e4c <Error_Handler>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3750      	adds	r7, #80	; 0x50
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40007000 	.word	0x40007000

08001b20 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	2007      	movs	r0, #7
 8001b2a:	f001 f8da 	bl	8002ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b2e:	2007      	movs	r0, #7
 8001b30:	f001 f8f3 	bl	8002d1a <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2017      	movs	r0, #23
 8001b3a:	f001 f8d2 	bl	8002ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b3e:	2017      	movs	r0, #23
 8001b40:	f001 f8eb 	bl	8002d1a <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	2028      	movs	r0, #40	; 0x28
 8001b4a:	f001 f8ca 	bl	8002ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b4e:	2028      	movs	r0, #40	; 0x28
 8001b50:	f001 f8e3 	bl	8002d1a <HAL_NVIC_EnableIRQ>
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick = 0;

	if (GPIO_Pin == GPIO_PIN_1)
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d11d      	bne.n	8001ba4 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		if (HAL_GetTick() - before_tick >= 300)
 8001b68:	f000 fd3e 	bl	80025e8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b9f      	ldr	r3, [pc, #636]	; (8001dec <HAL_GPIO_EXTI_Callback+0x294>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b78:	f0c0 815d 	bcc.w	8001e36 <HAL_GPIO_EXTI_Callback+0x2de>
		{
			before_tick = HAL_GetTick();
 8001b7c:	f000 fd34 	bl	80025e8 <HAL_GetTick>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a9a      	ldr	r2, [pc, #616]	; (8001dec <HAL_GPIO_EXTI_Callback+0x294>)
 8001b84:	6013      	str	r3, [r2, #0]

			selection++;
 8001b86:	4b9a      	ldr	r3, [pc, #616]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x298>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b98      	ldr	r3, [pc, #608]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x298>)
 8001b90:	701a      	strb	r2, [r3, #0]

			if (selection > 3)
 8001b92:	4b97      	ldr	r3, [pc, #604]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x298>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	f240 814d 	bls.w	8001e36 <HAL_GPIO_EXTI_Callback+0x2de>
				selection = 0;
 8001b9c:	4b94      	ldr	r3, [pc, #592]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x298>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
					sTime.Seconds--;
			}
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		}
	}
}
 8001ba2:	e148      	b.n	8001e36 <HAL_GPIO_EXTI_Callback+0x2de>
	else if (GPIO_Pin == GPIO_PIN_6)
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	2b40      	cmp	r3, #64	; 0x40
 8001ba8:	d17e      	bne.n	8001ca8 <HAL_GPIO_EXTI_Callback+0x150>
		if (HAL_GetTick() - before_tick >= 300)
 8001baa:	f000 fd1d 	bl	80025e8 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	4b8e      	ldr	r3, [pc, #568]	; (8001dec <HAL_GPIO_EXTI_Callback+0x294>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bba:	f0c0 813c 	bcc.w	8001e36 <HAL_GPIO_EXTI_Callback+0x2de>
			before_tick = HAL_GetTick();
 8001bbe:	f000 fd13 	bl	80025e8 <HAL_GetTick>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a89      	ldr	r2, [pc, #548]	; (8001dec <HAL_GPIO_EXTI_Callback+0x294>)
 8001bc6:	6013      	str	r3, [r2, #0]
			if (selection == 1) // hour select
 8001bc8:	4b89      	ldr	r3, [pc, #548]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x298>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d142      	bne.n	8001c56 <HAL_GPIO_EXTI_Callback+0xfe>
				sTime.Hours++;
 8001bd0:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b86      	ldr	r3, [pc, #536]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001bda:	701a      	strb	r2, [r3, #0]
				if (sTime.Hours == 12)
 8001bdc:	4b85      	ldr	r3, [pc, #532]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d130      	bne.n	8001c46 <HAL_GPIO_EXTI_Callback+0xee>
					if (strcmp(ampm[sTime.TimeFormat], "AM") == 0)
 8001be4:	4b83      	ldr	r3, [pc, #524]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001be6:	78db      	ldrb	r3, [r3, #3]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a81      	ldr	r2, [pc, #516]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4981      	ldr	r1, [pc, #516]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fafa 	bl	80001f0 <strcmp>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d110      	bne.n	8001c24 <HAL_GPIO_EXTI_Callback+0xcc>
						strcpy(ampm[sTime.TimeFormat], "PM");
 8001c02:	4b7c      	ldr	r3, [pc, #496]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c04:	78db      	ldrb	r3, [r3, #3]
 8001c06:	461a      	mov	r2, r3
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a7a      	ldr	r2, [pc, #488]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001c10:	4413      	add	r3, r2
 8001c12:	4a7b      	ldr	r2, [pc, #492]	; (8001e00 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c14:	8811      	ldrh	r1, [r2, #0]
 8001c16:	7892      	ldrb	r2, [r2, #2]
 8001c18:	8019      	strh	r1, [r3, #0]
 8001c1a:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 12;
 8001c1c:	4b75      	ldr	r3, [pc, #468]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c1e:	220c      	movs	r2, #12
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e03b      	b.n	8001c9c <HAL_GPIO_EXTI_Callback+0x144>
						strcpy(ampm[sTime.TimeFormat], "AM");
 8001c24:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c26:	78db      	ldrb	r3, [r3, #3]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a71      	ldr	r2, [pc, #452]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001c32:	4413      	add	r3, r2
 8001c34:	4a71      	ldr	r2, [pc, #452]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001c36:	8811      	ldrh	r1, [r2, #0]
 8001c38:	7892      	ldrb	r2, [r2, #2]
 8001c3a:	8019      	strh	r1, [r3, #0]
 8001c3c:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 0;
 8001c3e:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e02a      	b.n	8001c9c <HAL_GPIO_EXTI_Callback+0x144>
				else if (sTime.Hours > 12)
 8001c46:	4b6b      	ldr	r3, [pc, #428]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d926      	bls.n	8001c9c <HAL_GPIO_EXTI_Callback+0x144>
					sTime.Hours = 1;
 8001c4e:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	e022      	b.n	8001c9c <HAL_GPIO_EXTI_Callback+0x144>
			else if (selection == 2) // minutes select
 8001c56:	4b66      	ldr	r3, [pc, #408]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x298>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d10d      	bne.n	8001c7a <HAL_GPIO_EXTI_Callback+0x122>
				sTime.Minutes++;
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	3301      	adds	r3, #1
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c68:	705a      	strb	r2, [r3, #1]
				if (sTime.Minutes > 59)
 8001c6a:	4b62      	ldr	r3, [pc, #392]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c6c:	785b      	ldrb	r3, [r3, #1]
 8001c6e:	2b3b      	cmp	r3, #59	; 0x3b
 8001c70:	d914      	bls.n	8001c9c <HAL_GPIO_EXTI_Callback+0x144>
					sTime.Minutes = 0;
 8001c72:	4b60      	ldr	r3, [pc, #384]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	705a      	strb	r2, [r3, #1]
 8001c78:	e010      	b.n	8001c9c <HAL_GPIO_EXTI_Callback+0x144>
			else if (selection == 3) // second select
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x298>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d10c      	bne.n	8001c9c <HAL_GPIO_EXTI_Callback+0x144>
				sTime.Seconds++;
 8001c82:	4b5c      	ldr	r3, [pc, #368]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c84:	789b      	ldrb	r3, [r3, #2]
 8001c86:	3301      	adds	r3, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b5a      	ldr	r3, [pc, #360]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c8c:	709a      	strb	r2, [r3, #2]
				if (sTime.Seconds > 59)
 8001c8e:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c90:	789b      	ldrb	r3, [r3, #2]
 8001c92:	2b3b      	cmp	r3, #59	; 0x3b
 8001c94:	d902      	bls.n	8001c9c <HAL_GPIO_EXTI_Callback+0x144>
					sTime.Seconds = 0;
 8001c96:	4b57      	ldr	r3, [pc, #348]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4955      	ldr	r1, [pc, #340]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001ca0:	4858      	ldr	r0, [pc, #352]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001ca2:	f003 fbab 	bl	80053fc <HAL_RTC_SetTime>
}
 8001ca6:	e0c6      	b.n	8001e36 <HAL_GPIO_EXTI_Callback+0x2de>
	else if (GPIO_Pin == GPIO_PIN_5)
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	f040 80c3 	bne.w	8001e36 <HAL_GPIO_EXTI_Callback+0x2de>
		if (HAL_GetTick() - before_tick >= 300)
 8001cb0:	f000 fc9a 	bl	80025e8 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <HAL_GPIO_EXTI_Callback+0x294>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001cc0:	f0c0 80b9 	bcc.w	8001e36 <HAL_GPIO_EXTI_Callback+0x2de>
			before_tick = HAL_GetTick();
 8001cc4:	f000 fc90 	bl	80025e8 <HAL_GetTick>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a48      	ldr	r2, [pc, #288]	; (8001dec <HAL_GPIO_EXTI_Callback+0x294>)
 8001ccc:	6013      	str	r3, [r2, #0]
			if (selection == 1)
 8001cce:	4b48      	ldr	r3, [pc, #288]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x298>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d176      	bne.n	8001dc4 <HAL_GPIO_EXTI_Callback+0x26c>
				if (sTime.Hours == 0)
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d130      	bne.n	8001d40 <HAL_GPIO_EXTI_Callback+0x1e8>
					if (strcmp(ampm[sTime.TimeFormat], "AM") == 0)
 8001cde:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001ce0:	78db      	ldrb	r3, [r3, #3]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a43      	ldr	r2, [pc, #268]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001cec:	4413      	add	r3, r2
 8001cee:	4943      	ldr	r1, [pc, #268]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fa7d 	bl	80001f0 <strcmp>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d110      	bne.n	8001d1e <HAL_GPIO_EXTI_Callback+0x1c6>
						strcpy(ampm[sTime.TimeFormat], "PM");
 8001cfc:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001cfe:	78db      	ldrb	r3, [r3, #3]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	4a3b      	ldr	r2, [pc, #236]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a3c      	ldr	r2, [pc, #240]	; (8001e00 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001d0e:	8811      	ldrh	r1, [r2, #0]
 8001d10:	7892      	ldrb	r2, [r2, #2]
 8001d12:	8019      	strh	r1, [r3, #0]
 8001d14:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 11;
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001d18:	220b      	movs	r2, #11
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e086      	b.n	8001e2c <HAL_GPIO_EXTI_Callback+0x2d4>
						strcpy(ampm[sTime.TimeFormat], "AM");
 8001d1e:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001d20:	78db      	ldrb	r3, [r3, #3]
 8001d22:	461a      	mov	r2, r3
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a33      	ldr	r2, [pc, #204]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a33      	ldr	r2, [pc, #204]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001d30:	8811      	ldrh	r1, [r2, #0]
 8001d32:	7892      	ldrb	r2, [r2, #2]
 8001d34:	8019      	strh	r1, [r3, #0]
 8001d36:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 11;
 8001d38:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001d3a:	220b      	movs	r2, #11
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	e075      	b.n	8001e2c <HAL_GPIO_EXTI_Callback+0x2d4>
				else if (strcmp(ampm[sTime.TimeFormat], "PM") == 0 && sTime.Hours == 1)
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	492b      	ldr	r1, [pc, #172]	; (8001e00 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fa4c 	bl	80001f0 <strcmp>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d107      	bne.n	8001d6e <HAL_GPIO_EXTI_Callback+0x216>
 8001d5e:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d103      	bne.n	8001d6e <HAL_GPIO_EXTI_Callback+0x216>
					sTime.Hours = 12;
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001d68:	220c      	movs	r2, #12
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e05e      	b.n	8001e2c <HAL_GPIO_EXTI_Callback+0x2d4>
				else if (strcmp(ampm[sTime.TimeFormat], "PM") == 0 && sTime.Hours == 12)
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001d70:	78db      	ldrb	r3, [r3, #3]
 8001d72:	461a      	mov	r2, r3
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4920      	ldr	r1, [pc, #128]	; (8001e00 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fa35 	bl	80001f0 <strcmp>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d114      	bne.n	8001db6 <HAL_GPIO_EXTI_Callback+0x25e>
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	d110      	bne.n	8001db6 <HAL_GPIO_EXTI_Callback+0x25e>
					strcpy(ampm[sTime.TimeFormat], "AM");
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001d96:	78db      	ldrb	r3, [r3, #3]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001da2:	4413      	add	r3, r2
 8001da4:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001da6:	8811      	ldrh	r1, [r2, #0]
 8001da8:	7892      	ldrb	r2, [r2, #2]
 8001daa:	8019      	strh	r1, [r3, #0]
 8001dac:	709a      	strb	r2, [r3, #2]
					sTime.Hours = 11;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001db0:	220b      	movs	r2, #11
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	e03a      	b.n	8001e2c <HAL_GPIO_EXTI_Callback+0x2d4>
					sTime.Hours--;
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e033      	b.n	8001e2c <HAL_GPIO_EXTI_Callback+0x2d4>
			else if (selection == 2)
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x298>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d11d      	bne.n	8001e08 <HAL_GPIO_EXTI_Callback+0x2b0>
				if (sTime.Minutes == 0)
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d103      	bne.n	8001ddc <HAL_GPIO_EXTI_Callback+0x284>
					sTime.Minutes = 59;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001dd6:	223b      	movs	r2, #59	; 0x3b
 8001dd8:	705a      	strb	r2, [r3, #1]
 8001dda:	e027      	b.n	8001e2c <HAL_GPIO_EXTI_Callback+0x2d4>
					sTime.Minutes--;
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001dde:	785b      	ldrb	r3, [r3, #1]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001de6:	705a      	strb	r2, [r3, #1]
 8001de8:	e020      	b.n	8001e2c <HAL_GPIO_EXTI_Callback+0x2d4>
 8001dea:	bf00      	nop
 8001dec:	20000578 	.word	0x20000578
 8001df0:	20000576 	.word	0x20000576
 8001df4:	200004dc 	.word	0x200004dc
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	0800b4c8 	.word	0x0800b4c8
 8001e00:	0800b54c 	.word	0x0800b54c
 8001e04:	2000057c 	.word	0x2000057c
			else if (selection == 3)
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d10d      	bne.n	8001e2c <HAL_GPIO_EXTI_Callback+0x2d4>
				if (sTime.Seconds == 0)
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001e12:	789b      	ldrb	r3, [r3, #2]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d103      	bne.n	8001e20 <HAL_GPIO_EXTI_Callback+0x2c8>
					sTime.Seconds = 59;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001e1a:	223b      	movs	r2, #59	; 0x3b
 8001e1c:	709a      	strb	r2, [r3, #2]
 8001e1e:	e005      	b.n	8001e2c <HAL_GPIO_EXTI_Callback+0x2d4>
					sTime.Seconds--;
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001e22:	789b      	ldrb	r3, [r3, #2]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001e2a:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4905      	ldr	r1, [pc, #20]	; (8001e44 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001e30:	4805      	ldr	r0, [pc, #20]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001e32:	f003 fae3 	bl	80053fc <HAL_RTC_SetTime>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000576 	.word	0x20000576
 8001e44:	200004dc 	.word	0x200004dc
 8001e48:	2000057c 	.word	0x2000057c

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <Error_Handler+0x8>
	...

08001e58 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <MX_RTC_Init+0xb0>)
 8001e72:	4a26      	ldr	r2, [pc, #152]	; (8001f0c <MX_RTC_Init+0xb4>)
 8001e74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <MX_RTC_Init+0xb0>)
 8001e78:	2240      	movs	r2, #64	; 0x40
 8001e7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <MX_RTC_Init+0xb0>)
 8001e7e:	227f      	movs	r2, #127	; 0x7f
 8001e80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <MX_RTC_Init+0xb0>)
 8001e84:	22ff      	movs	r2, #255	; 0xff
 8001e86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <MX_RTC_Init+0xb0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <MX_RTC_Init+0xb0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <MX_RTC_Init+0xb0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e9a:	481b      	ldr	r0, [pc, #108]	; (8001f08 <MX_RTC_Init+0xb0>)
 8001e9c:	f003 fa38 	bl	8005310 <HAL_RTC_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ea6:	f7ff ffd1 	bl	8001e4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8001eaa:	230c      	movs	r3, #12
 8001eac:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480f      	ldr	r0, [pc, #60]	; (8001f08 <MX_RTC_Init+0xb0>)
 8001eca:	f003 fa97 	bl	80053fc <HAL_RTC_SetTime>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001ed4:	f7ff ffba 	bl	8001e4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8001edc:	2311      	movs	r3, #17
 8001ede:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001ee4:	2323      	movs	r3, #35	; 0x23
 8001ee6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ee8:	463b      	mov	r3, r7
 8001eea:	2201      	movs	r2, #1
 8001eec:	4619      	mov	r1, r3
 8001eee:	4806      	ldr	r0, [pc, #24]	; (8001f08 <MX_RTC_Init+0xb0>)
 8001ef0:	f003 fb7c 	bl	80055ec <HAL_RTC_SetDate>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001efa:	f7ff ffa7 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000057c 	.word	0x2000057c
 8001f0c:	40002800 	.word	0x40002800

08001f10 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	; 0x38
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	2230      	movs	r2, #48	; 0x30
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f005 fe88 	bl	8007c36 <memset>
  if(rtcHandle->Instance==RTC)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0c      	ldr	r2, [pc, #48]	; (8001f5c <HAL_RTC_MspInit+0x4c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d111      	bne.n	8001f54 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f30:	2320      	movs	r3, #32
 8001f32:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 f826 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f4a:	f7ff ff7f 	bl	8001e4c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_RTC_MspInit+0x50>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f54:	bf00      	nop
 8001f56:	3738      	adds	r7, #56	; 0x38
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40002800 	.word	0x40002800
 8001f60:	42470e3c 	.word	0x42470e3c

08001f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f78:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <NMI_Handler+0x4>

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002000:	f000 fade 	bl	80025c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800200c:	2002      	movs	r0, #2
 800200e:	f001 fbfd 	bl	800380c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}

08002016 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_down_Pin);
 800201a:	2020      	movs	r0, #32
 800201c:	f001 fbf6 	bl	800380c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_up_Pin);
 8002020:	2040      	movs	r0, #64	; 0x40
 8002022:	f001 fbf3 	bl	800380c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_select_Pin);
 8002026:	2080      	movs	r0, #128	; 0x80
 8002028:	f001 fbf0 	bl	800380c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}

08002030 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002034:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002038:	f001 fbe8 	bl	800380c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return 1;
 8002044:	2301      	movs	r3, #1
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_kill>:

int _kill(int pid, int sig)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800205a:	f005 fe3f 	bl	8007cdc <__errno>
 800205e:	4603      	mov	r3, r0
 8002060:	2216      	movs	r2, #22
 8002062:	601a      	str	r2, [r3, #0]
  return -1;
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_exit>:

void _exit (int status)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ffe7 	bl	8002050 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002082:	e7fe      	b.n	8002082 <_exit+0x12>

08002084 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	e00a      	b.n	80020ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002096:	f3af 8000 	nop.w
 800209a:	4601      	mov	r1, r0
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	60ba      	str	r2, [r7, #8]
 80020a2:	b2ca      	uxtb	r2, r1
 80020a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3301      	adds	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	dbf0      	blt.n	8002096 <_read+0x12>
  }

  return len;
 80020b4:	687b      	ldr	r3, [r7, #4]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e009      	b.n	80020e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	60ba      	str	r2, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dbf1      	blt.n	80020d0 <_write+0x12>
  }
  return len;
 80020ec:	687b      	ldr	r3, [r7, #4]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_close>:

int _close(int file)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800211e:	605a      	str	r2, [r3, #4]
  return 0;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <_isatty>:

int _isatty(int file)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <_sbrk+0x5c>)
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <_sbrk+0x60>)
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <_sbrk+0x64>)
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <_sbrk+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002190:	f005 fda4 	bl	8007cdc <__errno>
 8002194:	4603      	mov	r3, r0
 8002196:	220c      	movs	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e009      	b.n	80021b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <_sbrk+0x64>)
 80021b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20030000 	.word	0x20030000
 80021c0:	00000400 	.word	0x00000400
 80021c4:	2000059c 	.word	0x2000059c
 80021c8:	20000c88 	.word	0x20000c88

080021cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	463b      	mov	r3, r7
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800220c:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <MX_TIM1_Init+0x98>)
 800220e:	4a1f      	ldr	r2, [pc, #124]	; (800228c <MX_TIM1_Init+0x9c>)
 8002210:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <MX_TIM1_Init+0x98>)
 8002214:	22a7      	movs	r2, #167	; 0xa7
 8002216:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <MX_TIM1_Init+0x98>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_TIM1_Init+0x98>)
 8002220:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002224:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_TIM1_Init+0x98>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <MX_TIM1_Init+0x98>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_TIM1_Init+0x98>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002238:	4813      	ldr	r0, [pc, #76]	; (8002288 <MX_TIM1_Init+0x98>)
 800223a:	f003 fb67 	bl	800590c <HAL_TIM_Base_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002244:	f7ff fe02 	bl	8001e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	4619      	mov	r1, r3
 8002254:	480c      	ldr	r0, [pc, #48]	; (8002288 <MX_TIM1_Init+0x98>)
 8002256:	f003 fc11 	bl	8005a7c <HAL_TIM_ConfigClockSource>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002260:	f7ff fdf4 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800226c:	463b      	mov	r3, r7
 800226e:	4619      	mov	r1, r3
 8002270:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_TIM1_Init+0x98>)
 8002272:	f003 fe05 	bl	8005e80 <HAL_TIMEx_MasterConfigSynchronization>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800227c:	f7ff fde6 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200005a0 	.word	0x200005a0
 800228c:	40010000 	.word	0x40010000

08002290 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_TIM_Base_MspInit+0x3c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d10d      	bne.n	80022be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_TIM_Base_MspInit+0x40>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_TIM_Base_MspInit+0x40>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_TIM_Base_MspInit+0x40>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40010000 	.word	0x40010000
 80022d0:	40023800 	.word	0x40023800

080022d4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <MX_USART3_UART_Init+0x4c>)
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <MX_USART3_UART_Init+0x50>)
 80022dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <MX_USART3_UART_Init+0x4c>)
 80022e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <MX_USART3_UART_Init+0x4c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <MX_USART3_UART_Init+0x4c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <MX_USART3_UART_Init+0x4c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <MX_USART3_UART_Init+0x4c>)
 80022fa:	220c      	movs	r2, #12
 80022fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <MX_USART3_UART_Init+0x4c>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <MX_USART3_UART_Init+0x4c>)
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800230a:	4805      	ldr	r0, [pc, #20]	; (8002320 <MX_USART3_UART_Init+0x4c>)
 800230c:	f003 fe34 	bl	8005f78 <HAL_UART_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002316:	f7ff fd99 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200005e8 	.word	0x200005e8
 8002324:	40004800 	.word	0x40004800

08002328 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a19      	ldr	r2, [pc, #100]	; (80023ac <HAL_UART_MspInit+0x84>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d12c      	bne.n	80023a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_UART_MspInit+0x88>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_UART_MspInit+0x88>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_UART_MspInit+0x88>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_UART_MspInit+0x88>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_UART_MspInit+0x88>)
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_UART_MspInit+0x88>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002382:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002390:	2303      	movs	r3, #3
 8002392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002394:	2307      	movs	r3, #7
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	4619      	mov	r1, r3
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <HAL_UART_MspInit+0x8c>)
 80023a0:	f001 f86e 	bl	8003480 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023a4:	bf00      	nop
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40004800 	.word	0x40004800
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40020c00 	.word	0x40020c00

080023b8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023c6:	2204      	movs	r2, #4
 80023c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023cc:	2202      	movs	r2, #2
 80023ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023d8:	2202      	movs	r2, #2
 80023da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023de:	2201      	movs	r2, #1
 80023e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023fc:	f002 f812 	bl	8004424 <HAL_PCD_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002406:	f7ff fd21 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000062c 	.word	0x2000062c

08002414 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002434:	d13f      	bne.n	80024b6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <HAL_PCD_MspInit+0xac>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <HAL_PCD_MspInit+0xac>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_PCD_MspInit+0xac>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002452:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002460:	2303      	movs	r3, #3
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002464:	230a      	movs	r3, #10
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	4815      	ldr	r0, [pc, #84]	; (80024c4 <HAL_PCD_MspInit+0xb0>)
 8002470:	f001 f806 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002474:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	4619      	mov	r1, r3
 8002488:	480e      	ldr	r0, [pc, #56]	; (80024c4 <HAL_PCD_MspInit+0xb0>)
 800248a:	f000 fff9 	bl	8003480 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_PCD_MspInit+0xac>)
 8002490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <HAL_PCD_MspInit+0xac>)
 8002494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002498:	6353      	str	r3, [r2, #52]	; 0x34
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_PCD_MspInit+0xac>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <HAL_PCD_MspInit+0xac>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_PCD_MspInit+0xac>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	; 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020000 	.word	0x40020000

080024c8 <Reset_Handler>:
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002500 <LoopFillZerobss+0x12>
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <LoopFillZerobss+0x16>)
 80024ce:	490e      	ldr	r1, [pc, #56]	; (8002508 <LoopFillZerobss+0x1a>)
 80024d0:	4a0e      	ldr	r2, [pc, #56]	; (800250c <LoopFillZerobss+0x1e>)
 80024d2:	2300      	movs	r3, #0
 80024d4:	e002      	b.n	80024dc <LoopCopyDataInit>

080024d6 <CopyDataInit>:
 80024d6:	58d4      	ldr	r4, [r2, r3]
 80024d8:	50c4      	str	r4, [r0, r3]
 80024da:	3304      	adds	r3, #4

080024dc <LoopCopyDataInit>:
 80024dc:	18c4      	adds	r4, r0, r3
 80024de:	428c      	cmp	r4, r1
 80024e0:	d3f9      	bcc.n	80024d6 <CopyDataInit>
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <LoopFillZerobss+0x22>)
 80024e4:	4c0b      	ldr	r4, [pc, #44]	; (8002514 <LoopFillZerobss+0x26>)
 80024e6:	2300      	movs	r3, #0
 80024e8:	e001      	b.n	80024ee <LoopFillZerobss>

080024ea <FillZerobss>:
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	3204      	adds	r2, #4

080024ee <LoopFillZerobss>:
 80024ee:	42a2      	cmp	r2, r4
 80024f0:	d3fb      	bcc.n	80024ea <FillZerobss>
 80024f2:	f7ff fe6b 	bl	80021cc <SystemInit>
 80024f6:	f005 fbf7 	bl	8007ce8 <__libc_init_array>
 80024fa:	f7ff fa4f 	bl	800199c <main>
 80024fe:	4770      	bx	lr
 8002500:	20030000 	.word	0x20030000
 8002504:	20000000 	.word	0x20000000
 8002508:	200001dc 	.word	0x200001dc
 800250c:	0800b9a0 	.word	0x0800b9a0
 8002510:	200001dc 	.word	0x200001dc
 8002514:	20000c88 	.word	0x20000c88

08002518 <ADC_IRQHandler>:
 8002518:	e7fe      	b.n	8002518 <ADC_IRQHandler>
	...

0800251c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0d      	ldr	r2, [pc, #52]	; (800255c <HAL_Init+0x40>)
 8002526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800252a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_Init+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <HAL_Init+0x40>)
 8002532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <HAL_Init+0x40>)
 800253e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002544:	2003      	movs	r0, #3
 8002546:	f000 fbc1 	bl	8002ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800254a:	2000      	movs	r0, #0
 800254c:	f000 f808 	bl	8002560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002550:	f7ff fd08 	bl	8001f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023c00 	.word	0x40023c00

08002560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_InitTick+0x54>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_InitTick+0x58>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002576:	fbb3 f3f1 	udiv	r3, r3, r1
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fbd9 	bl	8002d36 <HAL_SYSTICK_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e00e      	b.n	80025ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b0f      	cmp	r3, #15
 8002592:	d80a      	bhi.n	80025aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002594:	2200      	movs	r2, #0
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	f000 fba1 	bl	8002ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a0:	4a06      	ldr	r2, [pc, #24]	; (80025bc <HAL_InitTick+0x5c>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000008 	.word	0x20000008
 80025b8:	20000010 	.word	0x20000010
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_IncTick+0x20>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_IncTick+0x24>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <HAL_IncTick+0x24>)
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000010 	.word	0x20000010
 80025e4:	20000b38 	.word	0x20000b38

080025e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return uwTick;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_GetTick+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000b38 	.word	0x20000b38

08002600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff ffee 	bl	80025e8 <HAL_GetTick>
 800260c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d005      	beq.n	8002626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_Delay+0x44>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002626:	bf00      	nop
 8002628:	f7ff ffde 	bl	80025e8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	429a      	cmp	r2, r3
 8002636:	d8f7      	bhi.n	8002628 <HAL_Delay+0x28>
  {
  }
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000010 	.word	0x20000010

08002648 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e033      	b.n	80026c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe fd36 	bl	80010d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800268e:	f023 0302 	bic.w	r3, r3, #2
 8002692:	f043 0202 	orr.w	r2, r3, #2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f94a 	bl	8002934 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f023 0303 	bic.w	r3, r3, #3
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
 80026b6:	e001      	b.n	80026bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x1c>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e113      	b.n	8002914 <HAL_ADC_ConfigChannel+0x244>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b09      	cmp	r3, #9
 80026fa:	d925      	bls.n	8002748 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68d9      	ldr	r1, [r3, #12]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	3b1e      	subs	r3, #30
 8002712:	2207      	movs	r2, #7
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43da      	mvns	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	400a      	ands	r2, r1
 8002720:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68d9      	ldr	r1, [r3, #12]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	4618      	mov	r0, r3
 8002734:	4603      	mov	r3, r0
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4403      	add	r3, r0
 800273a:	3b1e      	subs	r3, #30
 800273c:	409a      	lsls	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	e022      	b.n	800278e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6919      	ldr	r1, [r3, #16]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	2207      	movs	r2, #7
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	400a      	ands	r2, r1
 800276a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6919      	ldr	r1, [r3, #16]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	4618      	mov	r0, r3
 800277e:	4603      	mov	r3, r0
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4403      	add	r3, r0
 8002784:	409a      	lsls	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b06      	cmp	r3, #6
 8002794:	d824      	bhi.n	80027e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b05      	subs	r3, #5
 80027a8:	221f      	movs	r2, #31
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	400a      	ands	r2, r1
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4618      	mov	r0, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	3b05      	subs	r3, #5
 80027d2:	fa00 f203 	lsl.w	r2, r0, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	635a      	str	r2, [r3, #52]	; 0x34
 80027de:	e04c      	b.n	800287a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	d824      	bhi.n	8002832 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3b23      	subs	r3, #35	; 0x23
 80027fa:	221f      	movs	r2, #31
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43da      	mvns	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	400a      	ands	r2, r1
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b23      	subs	r3, #35	; 0x23
 8002824:	fa00 f203 	lsl.w	r2, r0, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
 8002830:	e023      	b.n	800287a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	3b41      	subs	r3, #65	; 0x41
 8002844:	221f      	movs	r2, #31
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	400a      	ands	r2, r1
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3b41      	subs	r3, #65	; 0x41
 800286e:	fa00 f203 	lsl.w	r2, r0, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800287a:	4b29      	ldr	r3, [pc, #164]	; (8002920 <HAL_ADC_ConfigChannel+0x250>)
 800287c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a28      	ldr	r2, [pc, #160]	; (8002924 <HAL_ADC_ConfigChannel+0x254>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d10f      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b12      	cmp	r3, #18
 800288e:	d10b      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1d      	ldr	r2, [pc, #116]	; (8002924 <HAL_ADC_ConfigChannel+0x254>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12b      	bne.n	800290a <HAL_ADC_ConfigChannel+0x23a>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <HAL_ADC_ConfigChannel+0x258>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d003      	beq.n	80028c4 <HAL_ADC_ConfigChannel+0x1f4>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b11      	cmp	r3, #17
 80028c2:	d122      	bne.n	800290a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a11      	ldr	r2, [pc, #68]	; (8002928 <HAL_ADC_ConfigChannel+0x258>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d111      	bne.n	800290a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_ADC_ConfigChannel+0x25c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_ADC_ConfigChannel+0x260>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	0c9a      	lsrs	r2, r3, #18
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028fc:	e002      	b.n	8002904 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3b01      	subs	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f9      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40012300 	.word	0x40012300
 8002924:	40012000 	.word	0x40012000
 8002928:	10000012 	.word	0x10000012
 800292c:	20000008 	.word	0x20000008
 8002930:	431bde83 	.word	0x431bde83

08002934 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800293c:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <ADC_Init+0x1f0>)
 800293e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	431a      	orrs	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	021a      	lsls	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800298c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <ADC_Init+0x1f4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d022      	beq.n	8002a12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6899      	ldr	r1, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6899      	ldr	r1, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	e00f      	b.n	8002a32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0202 	bic.w	r2, r2, #2
 8002a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6899      	ldr	r1, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7e1b      	ldrb	r3, [r3, #24]
 8002a4c:	005a      	lsls	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	035a      	lsls	r2, r3, #13
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	e007      	b.n	8002aa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	051a      	lsls	r2, r3, #20
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aea:	025a      	lsls	r2, r3, #9
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	029a      	lsls	r2, r3, #10
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40012300 	.word	0x40012300
 8002b28:	0f000001 	.word	0x0f000001

08002b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <__NVIC_GetPriorityGrouping+0x18>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0307 	and.w	r3, r3, #7
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db0b      	blt.n	8002bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <__NVIC_EnableIRQ+0x38>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000e100 	.word	0xe000e100

08002bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	db0a      	blt.n	8002bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	490c      	ldr	r1, [pc, #48]	; (8002c18 <__NVIC_SetPriority+0x4c>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf4:	e00a      	b.n	8002c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4908      	ldr	r1, [pc, #32]	; (8002c1c <__NVIC_SetPriority+0x50>)
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	3b04      	subs	r3, #4
 8002c04:	0112      	lsls	r2, r2, #4
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	440b      	add	r3, r1
 8002c0a:	761a      	strb	r2, [r3, #24]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000e100 	.word	0xe000e100
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f1c3 0307 	rsb	r3, r3, #7
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	bf28      	it	cs
 8002c3e:	2304      	movcs	r3, #4
 8002c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d902      	bls.n	8002c50 <NVIC_EncodePriority+0x30>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3b03      	subs	r3, #3
 8002c4e:	e000      	b.n	8002c52 <NVIC_EncodePriority+0x32>
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	401a      	ands	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c68:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43d9      	mvns	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	4313      	orrs	r3, r2
         );
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3724      	adds	r7, #36	; 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c98:	d301      	bcc.n	8002c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00f      	b.n	8002cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <SysTick_Config+0x40>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca6:	210f      	movs	r1, #15
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	f7ff ff8e 	bl	8002bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb8:	2207      	movs	r2, #7
 8002cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	e000e010 	.word	0xe000e010

08002ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ff29 	bl	8002b2c <__NVIC_SetPriorityGrouping>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf4:	f7ff ff3e 	bl	8002b74 <__NVIC_GetPriorityGrouping>
 8002cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f7ff ff8e 	bl	8002c20 <NVIC_EncodePriority>
 8002d04:	4602      	mov	r2, r0
 8002d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff5d 	bl	8002bcc <__NVIC_SetPriority>
}
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff31 	bl	8002b90 <__NVIC_EnableIRQ>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ffa2 	bl	8002c88 <SysTick_Config>
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e014      	b.n	8002d8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	791b      	ldrb	r3, [r3, #4]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fe f9fd 	bl	8001170 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b087      	sub	sp, #28
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	795b      	ldrb	r3, [r3, #5]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_DAC_ConfigChannel+0x18>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e03c      	b.n	8002e24 <HAL_DAC_ConfigChannel+0x92>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2202      	movs	r2, #2
 8002db4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	22c0      	movs	r2, #192	; 0xc0
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43da      	mvns	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	400a      	ands	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e06c      	b.n	8002f1c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2223      	movs	r2, #35	; 0x23
 8002e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fe fa1d 	bl	8001294 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_ETH_Init+0xf4>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	4a30      	ldr	r2, [pc, #192]	; (8002f24 <HAL_ETH_Init+0xf4>)
 8002e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e68:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6a:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_ETH_Init+0xf4>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e76:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <HAL_ETH_Init+0xf8>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <HAL_ETH_Init+0xf8>)
 8002e7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e80:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_ETH_Init+0xf8>)
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	4927      	ldr	r1, [pc, #156]	; (8002f28 <HAL_ETH_Init+0xf8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <HAL_ETH_Init+0xf8>)
 8002e92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002eaa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eac:	f7ff fb9c 	bl	80025e8 <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002eb2:	e011      	b.n	8002ed8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002eb4:	f7ff fb98 	bl	80025e8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ec2:	d909      	bls.n	8002ed8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	22e0      	movs	r2, #224	; 0xe0
 8002ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e021      	b.n	8002f1c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1e4      	bne.n	8002eb4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f958 	bl	80031a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f9ff 	bl	80032f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fa55 	bl	80033a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	461a      	mov	r2, r3
 8002f02:	2100      	movs	r1, #0
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f9bd 	bl	8003284 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2210      	movs	r2, #16
 8002f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40013800 	.word	0x40013800

08002f2c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4b51      	ldr	r3, [pc, #324]	; (8003088 <ETH_SetMACConfig+0x15c>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	7c1b      	ldrb	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <ETH_SetMACConfig+0x28>
 8002f4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f52:	e000      	b.n	8002f56 <ETH_SetMACConfig+0x2a>
 8002f54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	7c5b      	ldrb	r3, [r3, #17]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <ETH_SetMACConfig+0x38>
 8002f5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f62:	e000      	b.n	8002f66 <ETH_SetMACConfig+0x3a>
 8002f64:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	7fdb      	ldrb	r3, [r3, #31]
 8002f72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	7f92      	ldrb	r2, [r2, #30]
 8002f80:	2a00      	cmp	r2, #0
 8002f82:	d102      	bne.n	8002f8a <ETH_SetMACConfig+0x5e>
 8002f84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f88:	e000      	b.n	8002f8c <ETH_SetMACConfig+0x60>
 8002f8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	7f1b      	ldrb	r3, [r3, #28]
 8002f92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	791b      	ldrb	r3, [r3, #4]
 8002fa0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002fa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002faa:	2a00      	cmp	r2, #0
 8002fac:	d102      	bne.n	8002fb4 <ETH_SetMACConfig+0x88>
 8002fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb2:	e000      	b.n	8002fb6 <ETH_SetMACConfig+0x8a>
 8002fb4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002fb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	7bdb      	ldrb	r3, [r3, #15]
 8002fbc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002fbe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002fc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fcc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7ff fb0a 	bl	8002600 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003002:	4013      	ands	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003012:	2a00      	cmp	r2, #0
 8003014:	d101      	bne.n	800301a <ETH_SetMACConfig+0xee>
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	e000      	b.n	800301c <ETH_SetMACConfig+0xf0>
 800301a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800301c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003022:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800302a:	2a01      	cmp	r2, #1
 800302c:	d101      	bne.n	8003032 <ETH_SetMACConfig+0x106>
 800302e:	2208      	movs	r2, #8
 8003030:	e000      	b.n	8003034 <ETH_SetMACConfig+0x108>
 8003032:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003034:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800303c:	2a01      	cmp	r2, #1
 800303e:	d101      	bne.n	8003044 <ETH_SetMACConfig+0x118>
 8003040:	2204      	movs	r2, #4
 8003042:	e000      	b.n	8003046 <ETH_SetMACConfig+0x11a>
 8003044:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003046:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800304e:	2a01      	cmp	r2, #1
 8003050:	d101      	bne.n	8003056 <ETH_SetMACConfig+0x12a>
 8003052:	2202      	movs	r2, #2
 8003054:	e000      	b.n	8003058 <ETH_SetMACConfig+0x12c>
 8003056:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003058:	4313      	orrs	r3, r2
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003070:	2001      	movs	r0, #1
 8003072:	f7ff fac5 	bl	8002600 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	619a      	str	r2, [r3, #24]
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	ff20810f 	.word	0xff20810f

0800308c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4b3d      	ldr	r3, [pc, #244]	; (800319c <ETH_SetDMAConfig+0x110>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	7b1b      	ldrb	r3, [r3, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <ETH_SetDMAConfig+0x2c>
 80030b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030b6:	e000      	b.n	80030ba <ETH_SetDMAConfig+0x2e>
 80030b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	7b5b      	ldrb	r3, [r3, #13]
 80030be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	7f52      	ldrb	r2, [r2, #29]
 80030c6:	2a00      	cmp	r2, #0
 80030c8:	d102      	bne.n	80030d0 <ETH_SetDMAConfig+0x44>
 80030ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030ce:	e000      	b.n	80030d2 <ETH_SetDMAConfig+0x46>
 80030d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80030d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	7b9b      	ldrb	r3, [r3, #14]
 80030d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	7f1b      	ldrb	r3, [r3, #28]
 80030e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80030e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	7f9b      	ldrb	r3, [r3, #30]
 80030ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003100:	4313      	orrs	r3, r2
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003110:	461a      	mov	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003122:	2001      	movs	r0, #1
 8003124:	f7ff fa6c 	bl	8002600 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003130:	461a      	mov	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	791b      	ldrb	r3, [r3, #4]
 800313a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003140:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003146:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800314c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003154:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003156:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800315e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003164:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800316e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003172:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003180:	2001      	movs	r0, #1
 8003182:	f7ff fa3d 	bl	8002600 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	f8de3f23 	.word	0xf8de3f23

080031a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b0a6      	sub	sp, #152	; 0x98
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80031b4:	2300      	movs	r3, #0
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80031be:	2301      	movs	r3, #1
 80031c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031dc:	2300      	movs	r3, #0
 80031de:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003202:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003206:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800320c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800320e:	2300      	movs	r3, #0
 8003210:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003214:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003218:	4619      	mov	r1, r3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fe86 	bl	8002f2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003220:	2301      	movs	r3, #1
 8003222:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003224:	2301      	movs	r3, #1
 8003226:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800322e:	2301      	movs	r3, #1
 8003230:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003242:	2300      	movs	r3, #0
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800324c:	2301      	movs	r3, #1
 800324e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003254:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003256:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800325a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800325c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003260:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003262:	2301      	movs	r3, #1
 8003264:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003268:	2300      	movs	r3, #0
 800326a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003270:	f107 0308 	add.w	r3, r7, #8
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff ff08 	bl	800308c <ETH_SetDMAConfig>
}
 800327c:	bf00      	nop
 800327e:	3798      	adds	r7, #152	; 0x98
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3305      	adds	r3, #5
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	3204      	adds	r2, #4
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <ETH_MACAddressConfig+0x68>)
 80032a6:	4413      	add	r3, r2
 80032a8:	461a      	mov	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3303      	adds	r3, #3
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	061a      	lsls	r2, r3, #24
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3302      	adds	r3, #2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3301      	adds	r3, #1
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	4313      	orrs	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	7812      	ldrb	r2, [r2, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <ETH_MACAddressConfig+0x6c>)
 80032d6:	4413      	add	r3, r2
 80032d8:	461a      	mov	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	6013      	str	r3, [r2, #0]
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40028040 	.word	0x40028040
 80032f0:	40028044 	.word	0x40028044

080032f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e03e      	b.n	8003380 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2200      	movs	r2, #0
 800331e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2200      	movs	r2, #0
 800332a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	3206      	adds	r2, #6
 8003334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d80c      	bhi.n	8003364 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68d9      	ldr	r1, [r3, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	440b      	add	r3, r1
 800335c:	461a      	mov	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	e004      	b.n	800336e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3301      	adds	r3, #1
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d9bd      	bls.n	8003302 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003398:	611a      	str	r2, [r3, #16]
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e046      	b.n	8003442 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6919      	ldr	r1, [r3, #16]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2200      	movs	r2, #0
 80033d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2200      	movs	r2, #0
 80033dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2200      	movs	r2, #0
 80033e2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2200      	movs	r2, #0
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80033f8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	3212      	adds	r2, #18
 800340e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d80c      	bhi.n	8003432 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6919      	ldr	r1, [r3, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
 800342a:	461a      	mov	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	60da      	str	r2, [r3, #12]
 8003430:	e004      	b.n	800343c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	461a      	mov	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3301      	adds	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d9b5      	bls.n	80033b4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003472:	60da      	str	r2, [r3, #12]
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
 800349a:	e177      	b.n	800378c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800349c:	2201      	movs	r2, #1
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	f040 8166 	bne.w	8003786 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d005      	beq.n	80034d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d130      	bne.n	8003534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	2203      	movs	r2, #3
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003508:	2201      	movs	r2, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 0201 	and.w	r2, r3, #1
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b03      	cmp	r3, #3
 800353e:	d017      	beq.n	8003570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	2203      	movs	r2, #3
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d123      	bne.n	80035c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	08da      	lsrs	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3208      	adds	r2, #8
 8003584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	220f      	movs	r2, #15
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	08da      	lsrs	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3208      	adds	r2, #8
 80035be:	69b9      	ldr	r1, [r7, #24]
 80035c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0203 	and.w	r2, r3, #3
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80c0 	beq.w	8003786 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <HAL_GPIO_Init+0x324>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	4a65      	ldr	r2, [pc, #404]	; (80037a4 <HAL_GPIO_Init+0x324>)
 8003610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003614:	6453      	str	r3, [r2, #68]	; 0x44
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_GPIO_Init+0x324>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003622:	4a61      	ldr	r2, [pc, #388]	; (80037a8 <HAL_GPIO_Init+0x328>)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3302      	adds	r3, #2
 800362a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	220f      	movs	r2, #15
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a58      	ldr	r2, [pc, #352]	; (80037ac <HAL_GPIO_Init+0x32c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d037      	beq.n	80036be <HAL_GPIO_Init+0x23e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a57      	ldr	r2, [pc, #348]	; (80037b0 <HAL_GPIO_Init+0x330>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d031      	beq.n	80036ba <HAL_GPIO_Init+0x23a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a56      	ldr	r2, [pc, #344]	; (80037b4 <HAL_GPIO_Init+0x334>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d02b      	beq.n	80036b6 <HAL_GPIO_Init+0x236>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a55      	ldr	r2, [pc, #340]	; (80037b8 <HAL_GPIO_Init+0x338>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d025      	beq.n	80036b2 <HAL_GPIO_Init+0x232>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a54      	ldr	r2, [pc, #336]	; (80037bc <HAL_GPIO_Init+0x33c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01f      	beq.n	80036ae <HAL_GPIO_Init+0x22e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a53      	ldr	r2, [pc, #332]	; (80037c0 <HAL_GPIO_Init+0x340>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d019      	beq.n	80036aa <HAL_GPIO_Init+0x22a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_GPIO_Init+0x344>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_GPIO_Init+0x226>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_GPIO_Init+0x348>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00d      	beq.n	80036a2 <HAL_GPIO_Init+0x222>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a50      	ldr	r2, [pc, #320]	; (80037cc <HAL_GPIO_Init+0x34c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <HAL_GPIO_Init+0x21e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_GPIO_Init+0x350>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_GPIO_Init+0x21a>
 8003696:	2309      	movs	r3, #9
 8003698:	e012      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 800369a:	230a      	movs	r3, #10
 800369c:	e010      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 800369e:	2308      	movs	r3, #8
 80036a0:	e00e      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036a2:	2307      	movs	r3, #7
 80036a4:	e00c      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036a6:	2306      	movs	r3, #6
 80036a8:	e00a      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036aa:	2305      	movs	r3, #5
 80036ac:	e008      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036ae:	2304      	movs	r3, #4
 80036b0:	e006      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036b2:	2303      	movs	r3, #3
 80036b4:	e004      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e002      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_GPIO_Init+0x240>
 80036be:	2300      	movs	r3, #0
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	f002 0203 	and.w	r2, r2, #3
 80036c6:	0092      	lsls	r2, r2, #2
 80036c8:	4093      	lsls	r3, r2
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d0:	4935      	ldr	r1, [pc, #212]	; (80037a8 <HAL_GPIO_Init+0x328>)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_GPIO_Init+0x354>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003702:	4a34      	ldr	r2, [pc, #208]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003708:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <HAL_GPIO_Init+0x354>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800372c:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <HAL_GPIO_Init+0x354>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003732:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003756:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HAL_GPIO_Init+0x354>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <HAL_GPIO_Init+0x354>)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3301      	adds	r3, #1
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	f67f ae84 	bls.w	800349c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	3724      	adds	r7, #36	; 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40013800 	.word	0x40013800
 80037ac:	40020000 	.word	0x40020000
 80037b0:	40020400 	.word	0x40020400
 80037b4:	40020800 	.word	0x40020800
 80037b8:	40020c00 	.word	0x40020c00
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40021400 	.word	0x40021400
 80037c4:	40021800 	.word	0x40021800
 80037c8:	40021c00 	.word	0x40021c00
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40022400 	.word	0x40022400
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	4613      	mov	r3, r2
 80037e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e8:	787b      	ldrb	r3, [r7, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f4:	e003      	b.n	80037fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	041a      	lsls	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003822:	4a05      	ldr	r2, [pc, #20]	; (8003838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe f994 	bl	8001b58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40013c00 	.word	0x40013c00

0800383c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e12b      	b.n	8003aa6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd fefa 	bl	800165c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2224      	movs	r2, #36	; 0x24
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800388e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800389e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038a0:	f001 fb4e 	bl	8004f40 <HAL_RCC_GetPCLK1Freq>
 80038a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4a81      	ldr	r2, [pc, #516]	; (8003ab0 <HAL_I2C_Init+0x274>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d807      	bhi.n	80038c0 <HAL_I2C_Init+0x84>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a80      	ldr	r2, [pc, #512]	; (8003ab4 <HAL_I2C_Init+0x278>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	bf94      	ite	ls
 80038b8:	2301      	movls	r3, #1
 80038ba:	2300      	movhi	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e006      	b.n	80038ce <HAL_I2C_Init+0x92>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a7d      	ldr	r2, [pc, #500]	; (8003ab8 <HAL_I2C_Init+0x27c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	bf94      	ite	ls
 80038c8:	2301      	movls	r3, #1
 80038ca:	2300      	movhi	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0e7      	b.n	8003aa6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4a78      	ldr	r2, [pc, #480]	; (8003abc <HAL_I2C_Init+0x280>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	0c9b      	lsrs	r3, r3, #18
 80038e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a6a      	ldr	r2, [pc, #424]	; (8003ab0 <HAL_I2C_Init+0x274>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d802      	bhi.n	8003910 <HAL_I2C_Init+0xd4>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3301      	adds	r3, #1
 800390e:	e009      	b.n	8003924 <HAL_I2C_Init+0xe8>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	4a69      	ldr	r2, [pc, #420]	; (8003ac0 <HAL_I2C_Init+0x284>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	099b      	lsrs	r3, r3, #6
 8003922:	3301      	adds	r3, #1
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	430b      	orrs	r3, r1
 800392a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003936:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	495c      	ldr	r1, [pc, #368]	; (8003ab0 <HAL_I2C_Init+0x274>)
 8003940:	428b      	cmp	r3, r1
 8003942:	d819      	bhi.n	8003978 <HAL_I2C_Init+0x13c>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1e59      	subs	r1, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003952:	1c59      	adds	r1, r3, #1
 8003954:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003958:	400b      	ands	r3, r1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_I2C_Init+0x138>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1e59      	subs	r1, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fbb1 f3f3 	udiv	r3, r1, r3
 800396c:	3301      	adds	r3, #1
 800396e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003972:	e051      	b.n	8003a18 <HAL_I2C_Init+0x1dc>
 8003974:	2304      	movs	r3, #4
 8003976:	e04f      	b.n	8003a18 <HAL_I2C_Init+0x1dc>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d111      	bne.n	80039a4 <HAL_I2C_Init+0x168>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1e58      	subs	r0, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	440b      	add	r3, r1
 800398e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e012      	b.n	80039ca <HAL_I2C_Init+0x18e>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1e58      	subs	r0, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	0099      	lsls	r1, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_I2C_Init+0x196>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e022      	b.n	8003a18 <HAL_I2C_Init+0x1dc>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10e      	bne.n	80039f8 <HAL_I2C_Init+0x1bc>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1e58      	subs	r0, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	440b      	add	r3, r1
 80039e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f6:	e00f      	b.n	8003a18 <HAL_I2C_Init+0x1dc>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e58      	subs	r0, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	0099      	lsls	r1, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	6809      	ldr	r1, [r1, #0]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69da      	ldr	r2, [r3, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6911      	ldr	r1, [r2, #16]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68d2      	ldr	r2, [r2, #12]
 8003a52:	4311      	orrs	r1, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	000186a0 	.word	0x000186a0
 8003ab4:	001e847f 	.word	0x001e847f
 8003ab8:	003d08ff 	.word	0x003d08ff
 8003abc:	431bde83 	.word	0x431bde83
 8003ac0:	10624dd3 	.word	0x10624dd3

08003ac4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	817b      	strh	r3, [r7, #10]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ad8:	f7fe fd86 	bl	80025e8 <HAL_GetTick>
 8003adc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	f040 80e0 	bne.w	8003cac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	2319      	movs	r3, #25
 8003af2:	2201      	movs	r2, #1
 8003af4:	4970      	ldr	r1, [pc, #448]	; (8003cb8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fa92 	bl	8004020 <I2C_WaitOnFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
 8003b04:	e0d3      	b.n	8003cae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_I2C_Master_Transmit+0x50>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e0cc      	b.n	8003cae <HAL_I2C_Master_Transmit+0x1ea>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d007      	beq.n	8003b3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2221      	movs	r2, #33	; 0x21
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2210      	movs	r2, #16
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	893a      	ldrh	r2, [r7, #8]
 8003b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a50      	ldr	r2, [pc, #320]	; (8003cbc <HAL_I2C_Master_Transmit+0x1f8>)
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b7c:	8979      	ldrh	r1, [r7, #10]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f9ca 	bl	8003f1c <I2C_MasterRequestWrite>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e08d      	b.n	8003cae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ba8:	e066      	b.n	8003c78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	6a39      	ldr	r1, [r7, #32]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fb0c 	bl	80041cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d107      	bne.n	8003bd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e06b      	b.n	8003cae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	781a      	ldrb	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d11b      	bne.n	8003c4c <HAL_I2C_Master_Transmit+0x188>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d017      	beq.n	8003c4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	781a      	ldrb	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	6a39      	ldr	r1, [r7, #32]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fafc 	bl	800424e <I2C_WaitOnBTFFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d107      	bne.n	8003c74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e01a      	b.n	8003cae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d194      	bne.n	8003baa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	00100002 	.word	0x00100002
 8003cbc:	ffff0000 	.word	0xffff0000

08003cc0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003cd0:	f7fe fc8a 	bl	80025e8 <HAL_GetTick>
 8003cd4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	f040 8111 	bne.w	8003f0a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	2319      	movs	r3, #25
 8003cee:	2201      	movs	r2, #1
 8003cf0:	4988      	ldr	r1, [pc, #544]	; (8003f14 <HAL_I2C_IsDeviceReady+0x254>)
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f994 	bl	8004020 <I2C_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e104      	b.n	8003f0c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_I2C_IsDeviceReady+0x50>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e0fd      	b.n	8003f0c <HAL_I2C_IsDeviceReady+0x24c>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d007      	beq.n	8003d36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0201 	orr.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2224      	movs	r2, #36	; 0x24
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a70      	ldr	r2, [pc, #448]	; (8003f18 <HAL_I2C_IsDeviceReady+0x258>)
 8003d58:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f952 	bl	8004020 <I2C_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d90:	d103      	bne.n	8003d9a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0b6      	b.n	8003f0c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d9e:	897b      	ldrh	r3, [r7, #10]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003dae:	f7fe fc1b 	bl	80025e8 <HAL_GetTick>
 8003db2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	bf0c      	ite	eq
 8003dc2:	2301      	moveq	r3, #1
 8003dc4:	2300      	movne	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003de2:	e025      	b.n	8003e30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7fe fc00 	bl	80025e8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <HAL_I2C_IsDeviceReady+0x13a>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d103      	bne.n	8003e02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	22a0      	movs	r2, #160	; 0xa0
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2ba0      	cmp	r3, #160	; 0xa0
 8003e3a:	d005      	beq.n	8003e48 <HAL_I2C_IsDeviceReady+0x188>
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <HAL_I2C_IsDeviceReady+0x188>
 8003e42:	7dbb      	ldrb	r3, [r7, #22]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0cd      	beq.n	8003de4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d129      	bne.n	8003eb2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2319      	movs	r3, #25
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	4921      	ldr	r1, [pc, #132]	; (8003f14 <HAL_I2C_IsDeviceReady+0x254>)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f8c6 	bl	8004020 <I2C_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e036      	b.n	8003f0c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e02c      	b.n	8003f0c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2319      	movs	r3, #25
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	490f      	ldr	r1, [pc, #60]	; (8003f14 <HAL_I2C_IsDeviceReady+0x254>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f8a2 	bl	8004020 <I2C_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e012      	b.n	8003f0c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	f4ff af32 	bcc.w	8003d5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
  }
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3720      	adds	r7, #32
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	00100002 	.word	0x00100002
 8003f18:	ffff0000 	.word	0xffff0000

08003f1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d006      	beq.n	8003f46 <I2C_MasterRequestWrite+0x2a>
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d003      	beq.n	8003f46 <I2C_MasterRequestWrite+0x2a>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f44:	d108      	bne.n	8003f58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e00b      	b.n	8003f70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	2b12      	cmp	r3, #18
 8003f5e:	d107      	bne.n	8003f70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f84f 	bl	8004020 <I2C_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00d      	beq.n	8003fa4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f96:	d103      	bne.n	8003fa0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e035      	b.n	8004010 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fac:	d108      	bne.n	8003fc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fae:	897b      	ldrh	r3, [r7, #10]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fbc:	611a      	str	r2, [r3, #16]
 8003fbe:	e01b      	b.n	8003ff8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fc0:	897b      	ldrh	r3, [r7, #10]
 8003fc2:	11db      	asrs	r3, r3, #7
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 0306 	and.w	r3, r3, #6
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f063 030f 	orn	r3, r3, #15
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	490e      	ldr	r1, [pc, #56]	; (8004018 <I2C_MasterRequestWrite+0xfc>)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f875 	bl	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e010      	b.n	8004010 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fee:	897b      	ldrh	r3, [r7, #10]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4907      	ldr	r1, [pc, #28]	; (800401c <I2C_MasterRequestWrite+0x100>)
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f865 	bl	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	00010008 	.word	0x00010008
 800401c:	00010002 	.word	0x00010002

08004020 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004030:	e025      	b.n	800407e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d021      	beq.n	800407e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403a:	f7fe fad5 	bl	80025e8 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <I2C_WaitOnFlagUntilTimeout+0x30>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d116      	bne.n	800407e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e023      	b.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	d10d      	bne.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	43da      	mvns	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4013      	ands	r3, r2
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	bf0c      	ite	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	2300      	movne	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	e00c      	b.n	80040be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	43da      	mvns	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4013      	ands	r3, r2
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bf0c      	ite	eq
 80040b6:	2301      	moveq	r3, #1
 80040b8:	2300      	movne	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d0b6      	beq.n	8004032 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040dc:	e051      	b.n	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ec:	d123      	bne.n	8004136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004106:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f043 0204 	orr.w	r2, r3, #4
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e046      	b.n	80041c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d021      	beq.n	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7fe fa53 	bl	80025e8 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d116      	bne.n	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f043 0220 	orr.w	r2, r3, #32
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e020      	b.n	80041c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	d10c      	bne.n	80041a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	43da      	mvns	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4013      	ands	r3, r2
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	e00b      	b.n	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	43da      	mvns	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4013      	ands	r3, r2
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d18d      	bne.n	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041d8:	e02d      	b.n	8004236 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f878 	bl	80042d0 <I2C_IsAcknowledgeFailed>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e02d      	b.n	8004246 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d021      	beq.n	8004236 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fe f9f9 	bl	80025e8 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d116      	bne.n	8004236 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e007      	b.n	8004246 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d1ca      	bne.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800425a:	e02d      	b.n	80042b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f837 	bl	80042d0 <I2C_IsAcknowledgeFailed>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e02d      	b.n	80042c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	d021      	beq.n	80042b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004274:	f7fe f9b8 	bl	80025e8 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	429a      	cmp	r2, r3
 8004282:	d302      	bcc.n	800428a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d116      	bne.n	80042b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f043 0220 	orr.w	r2, r3, #32
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e007      	b.n	80042c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d1ca      	bne.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e6:	d11b      	bne.n	8004320 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f043 0204 	orr.w	r2, r3, #4
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b20      	cmp	r3, #32
 8004342:	d129      	bne.n	8004398 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	; 0x24
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0210 	bic.w	r2, r2, #16
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e000      	b.n	800439a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004398:	2302      	movs	r3, #2
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d12a      	bne.n	8004416 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2224      	movs	r2, #36	; 0x24
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80043e0:	89fb      	ldrh	r3, [r7, #14]
 80043e2:	f023 030f 	bic.w	r3, r3, #15
 80043e6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	89fb      	ldrh	r3, [r7, #14]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	89fa      	ldrh	r2, [r7, #14]
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004416:	2302      	movs	r3, #2
  }
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004426:	b08f      	sub	sp, #60	; 0x3c
 8004428:	af0a      	add	r7, sp, #40	; 0x28
 800442a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e10f      	b.n	8004656 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7fd ffdf 	bl	8002414 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2203      	movs	r2, #3
 800445a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f002 f9a2 	bl	80067be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	687e      	ldr	r6, [r7, #4]
 8004482:	466d      	mov	r5, sp
 8004484:	f106 0410 	add.w	r4, r6, #16
 8004488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800448a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800448c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800448e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004490:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004494:	e885 0003 	stmia.w	r5, {r0, r1}
 8004498:	1d33      	adds	r3, r6, #4
 800449a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800449c:	6838      	ldr	r0, [r7, #0]
 800449e:	f002 f92d 	bl	80066fc <USB_CoreInit>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0d0      	b.n	8004656 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f002 f990 	bl	80067e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c0:	2300      	movs	r3, #0
 80044c2:	73fb      	strb	r3, [r7, #15]
 80044c4:	e04a      	b.n	800455c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	333d      	adds	r3, #61	; 0x3d
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	333c      	adds	r3, #60	; 0x3c
 80044ea:	7bfa      	ldrb	r2, [r7, #15]
 80044ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	b298      	uxth	r0, r3
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3344      	adds	r3, #68	; 0x44
 8004502:	4602      	mov	r2, r0
 8004504:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004506:	7bfa      	ldrb	r2, [r7, #15]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	3340      	adds	r3, #64	; 0x40
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800451a:	7bfa      	ldrb	r2, [r7, #15]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3348      	adds	r3, #72	; 0x48
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800452e:	7bfa      	ldrb	r2, [r7, #15]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	334c      	adds	r3, #76	; 0x4c
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	3354      	adds	r3, #84	; 0x54
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	3301      	adds	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
 800455c:	7bfa      	ldrb	r2, [r7, #15]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d3af      	bcc.n	80044c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004566:	2300      	movs	r3, #0
 8004568:	73fb      	strb	r3, [r7, #15]
 800456a:	e044      	b.n	80045f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004594:	7bfa      	ldrb	r2, [r7, #15]
 8004596:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045ae:	7bfa      	ldrb	r2, [r7, #15]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045c4:	7bfa      	ldrb	r2, [r7, #15]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045da:	7bfa      	ldrb	r2, [r7, #15]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	3301      	adds	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d3b5      	bcc.n	800456c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	687e      	ldr	r6, [r7, #4]
 8004608:	466d      	mov	r5, sp
 800460a:	f106 0410 	add.w	r4, r6, #16
 800460e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800461a:	e885 0003 	stmia.w	r5, {r0, r1}
 800461e:	1d33      	adds	r3, r6, #4
 8004620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004622:	6838      	ldr	r0, [r7, #0]
 8004624:	f002 f928 	bl	8006878 <USB_DevInit>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e00d      	b.n	8004656 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f002 faf3 	bl	8006c3a <USB_DevDisconnect>

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e267      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d075      	beq.n	800476a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800467e:	4b88      	ldr	r3, [pc, #544]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	2b04      	cmp	r3, #4
 8004688:	d00c      	beq.n	80046a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800468a:	4b85      	ldr	r3, [pc, #532]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004692:	2b08      	cmp	r3, #8
 8004694:	d112      	bne.n	80046bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004696:	4b82      	ldr	r3, [pc, #520]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a2:	d10b      	bne.n	80046bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a4:	4b7e      	ldr	r3, [pc, #504]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d05b      	beq.n	8004768 <HAL_RCC_OscConfig+0x108>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d157      	bne.n	8004768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e242      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d106      	bne.n	80046d4 <HAL_RCC_OscConfig+0x74>
 80046c6:	4b76      	ldr	r3, [pc, #472]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a75      	ldr	r2, [pc, #468]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80046cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e01d      	b.n	8004710 <HAL_RCC_OscConfig+0xb0>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCC_OscConfig+0x98>
 80046de:	4b70      	ldr	r3, [pc, #448]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a6f      	ldr	r2, [pc, #444]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80046e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	4b6d      	ldr	r3, [pc, #436]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6c      	ldr	r2, [pc, #432]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80046f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	e00b      	b.n	8004710 <HAL_RCC_OscConfig+0xb0>
 80046f8:	4b69      	ldr	r3, [pc, #420]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a68      	ldr	r2, [pc, #416]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80046fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4b66      	ldr	r3, [pc, #408]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a65      	ldr	r2, [pc, #404]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 800470a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800470e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d013      	beq.n	8004740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fd ff66 	bl	80025e8 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004720:	f7fd ff62 	bl	80025e8 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	; 0x64
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e207      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004732:	4b5b      	ldr	r3, [pc, #364]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0xc0>
 800473e:	e014      	b.n	800476a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004740:	f7fd ff52 	bl	80025e8 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004748:	f7fd ff4e 	bl	80025e8 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	; 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e1f3      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475a:	4b51      	ldr	r3, [pc, #324]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0xe8>
 8004766:	e000      	b.n	800476a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d063      	beq.n	800483e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004776:	4b4a      	ldr	r3, [pc, #296]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004782:	4b47      	ldr	r3, [pc, #284]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800478a:	2b08      	cmp	r3, #8
 800478c:	d11c      	bne.n	80047c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800478e:	4b44      	ldr	r3, [pc, #272]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d116      	bne.n	80047c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <HAL_RCC_OscConfig+0x152>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d001      	beq.n	80047b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e1c7      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b2:	4b3b      	ldr	r3, [pc, #236]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4937      	ldr	r1, [pc, #220]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c6:	e03a      	b.n	800483e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d020      	beq.n	8004812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d0:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <HAL_RCC_OscConfig+0x244>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fd ff07 	bl	80025e8 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047de:	f7fd ff03 	bl	80025e8 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e1a8      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f0:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fc:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4925      	ldr	r1, [pc, #148]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 800480c:	4313      	orrs	r3, r2
 800480e:	600b      	str	r3, [r1, #0]
 8004810:	e015      	b.n	800483e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_RCC_OscConfig+0x244>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fd fee6 	bl	80025e8 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004820:	f7fd fee2 	bl	80025e8 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e187      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004832:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d036      	beq.n	80048b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <HAL_RCC_OscConfig+0x248>)
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fd fec6 	bl	80025e8 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004860:	f7fd fec2 	bl	80025e8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e167      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_RCC_OscConfig+0x240>)
 8004874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x200>
 800487e:	e01b      	b.n	80048b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCC_OscConfig+0x248>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004886:	f7fd feaf 	bl	80025e8 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	e00e      	b.n	80048ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800488e:	f7fd feab 	bl	80025e8 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d907      	bls.n	80048ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e150      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
 80048a0:	40023800 	.word	0x40023800
 80048a4:	42470000 	.word	0x42470000
 80048a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ac:	4b88      	ldr	r3, [pc, #544]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 80048ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ea      	bne.n	800488e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8097 	beq.w	80049f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ca:	4b81      	ldr	r3, [pc, #516]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10f      	bne.n	80048f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d6:	2300      	movs	r3, #0
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	4b7d      	ldr	r3, [pc, #500]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	4a7c      	ldr	r2, [pc, #496]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 80048e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6413      	str	r3, [r2, #64]	; 0x40
 80048e6:	4b7a      	ldr	r3, [pc, #488]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ee:	60bb      	str	r3, [r7, #8]
 80048f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f2:	2301      	movs	r3, #1
 80048f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f6:	4b77      	ldr	r3, [pc, #476]	; (8004ad4 <HAL_RCC_OscConfig+0x474>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d118      	bne.n	8004934 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004902:	4b74      	ldr	r3, [pc, #464]	; (8004ad4 <HAL_RCC_OscConfig+0x474>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a73      	ldr	r2, [pc, #460]	; (8004ad4 <HAL_RCC_OscConfig+0x474>)
 8004908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800490c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490e:	f7fd fe6b 	bl	80025e8 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004916:	f7fd fe67 	bl	80025e8 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e10c      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004928:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCC_OscConfig+0x474>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f0      	beq.n	8004916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d106      	bne.n	800494a <HAL_RCC_OscConfig+0x2ea>
 800493c:	4b64      	ldr	r3, [pc, #400]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4a63      	ldr	r2, [pc, #396]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	6713      	str	r3, [r2, #112]	; 0x70
 8004948:	e01c      	b.n	8004984 <HAL_RCC_OscConfig+0x324>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b05      	cmp	r3, #5
 8004950:	d10c      	bne.n	800496c <HAL_RCC_OscConfig+0x30c>
 8004952:	4b5f      	ldr	r3, [pc, #380]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	4a5e      	ldr	r2, [pc, #376]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	6713      	str	r3, [r2, #112]	; 0x70
 800495e:	4b5c      	ldr	r3, [pc, #368]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a5b      	ldr	r2, [pc, #364]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	e00b      	b.n	8004984 <HAL_RCC_OscConfig+0x324>
 800496c:	4b58      	ldr	r3, [pc, #352]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	4a57      	ldr	r2, [pc, #348]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	6713      	str	r3, [r2, #112]	; 0x70
 8004978:	4b55      	ldr	r3, [pc, #340]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a54      	ldr	r2, [pc, #336]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 800497e:	f023 0304 	bic.w	r3, r3, #4
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d015      	beq.n	80049b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fd fe2c 	bl	80025e8 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004992:	e00a      	b.n	80049aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004994:	f7fd fe28 	bl	80025e8 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e0cb      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049aa:	4b49      	ldr	r3, [pc, #292]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ee      	beq.n	8004994 <HAL_RCC_OscConfig+0x334>
 80049b6:	e014      	b.n	80049e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b8:	f7fd fe16 	bl	80025e8 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fd fe12 	bl	80025e8 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e0b5      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d6:	4b3e      	ldr	r3, [pc, #248]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1ee      	bne.n	80049c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d105      	bne.n	80049f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e8:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	4a38      	ldr	r2, [pc, #224]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 80049ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80a1 	beq.w	8004b40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049fe:	4b34      	ldr	r3, [pc, #208]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d05c      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d141      	bne.n	8004a96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a12:	4b31      	ldr	r3, [pc, #196]	; (8004ad8 <HAL_RCC_OscConfig+0x478>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a18:	f7fd fde6 	bl	80025e8 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fd fde2 	bl	80025e8 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e087      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a32:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	019b      	lsls	r3, r3, #6
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	085b      	lsrs	r3, r3, #1
 8004a56:	3b01      	subs	r3, #1
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	061b      	lsls	r3, r3, #24
 8004a62:	491b      	ldr	r1, [pc, #108]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a68:	4b1b      	ldr	r3, [pc, #108]	; (8004ad8 <HAL_RCC_OscConfig+0x478>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6e:	f7fd fdbb 	bl	80025e8 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a76:	f7fd fdb7 	bl	80025e8 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e05c      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0f0      	beq.n	8004a76 <HAL_RCC_OscConfig+0x416>
 8004a94:	e054      	b.n	8004b40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <HAL_RCC_OscConfig+0x478>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9c:	f7fd fda4 	bl	80025e8 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa4:	f7fd fda0 	bl	80025e8 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e045      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x444>
 8004ac2:	e03d      	b.n	8004b40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e038      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40007000 	.word	0x40007000
 8004ad8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004adc:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <HAL_RCC_OscConfig+0x4ec>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d028      	beq.n	8004b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d121      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d11a      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d111      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	085b      	lsrs	r3, r3, #1
 8004b24:	3b01      	subs	r3, #1
 8004b26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d107      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800

08004b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0cc      	b.n	8004cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b64:	4b68      	ldr	r3, [pc, #416]	; (8004d08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d90c      	bls.n	8004b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b72:	4b65      	ldr	r3, [pc, #404]	; (8004d08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7a:	4b63      	ldr	r3, [pc, #396]	; (8004d08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0b8      	b.n	8004cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d020      	beq.n	8004bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba4:	4b59      	ldr	r3, [pc, #356]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4a58      	ldr	r2, [pc, #352]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bbc:	4b53      	ldr	r3, [pc, #332]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a52      	ldr	r2, [pc, #328]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc8:	4b50      	ldr	r3, [pc, #320]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	494d      	ldr	r1, [pc, #308]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d044      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bee:	4b47      	ldr	r3, [pc, #284]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d119      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e07f      	b.n	8004cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d003      	beq.n	8004c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d107      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0e:	4b3f      	ldr	r3, [pc, #252]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e06f      	b.n	8004cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1e:	4b3b      	ldr	r3, [pc, #236]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e067      	b.n	8004cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c2e:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f023 0203 	bic.w	r2, r3, #3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4934      	ldr	r1, [pc, #208]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c40:	f7fd fcd2 	bl	80025e8 <HAL_GetTick>
 8004c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c46:	e00a      	b.n	8004c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c48:	f7fd fcce 	bl	80025e8 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e04f      	b.n	8004cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5e:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 020c 	and.w	r2, r3, #12
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d1eb      	bne.n	8004c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c70:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d20c      	bcs.n	8004c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7e:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c86:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d001      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e032      	b.n	8004cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca4:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4916      	ldr	r1, [pc, #88]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d009      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cc2:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	490e      	ldr	r1, [pc, #56]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cd6:	f000 f821 	bl	8004d1c <HAL_RCC_GetSysClockFreq>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	091b      	lsrs	r3, r3, #4
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	490a      	ldr	r1, [pc, #40]	; (8004d10 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce8:	5ccb      	ldrb	r3, [r1, r3]
 8004cea:	fa22 f303 	lsr.w	r3, r2, r3
 8004cee:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cf2:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fd fc32 	bl	8002560 <HAL_InitTick>

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40023c00 	.word	0x40023c00
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	0800b550 	.word	0x0800b550
 8004d14:	20000008 	.word	0x20000008
 8004d18:	2000000c 	.word	0x2000000c

08004d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d20:	b094      	sub	sp, #80	; 0x50
 8004d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	647b      	str	r3, [r7, #68]	; 0x44
 8004d28:	2300      	movs	r3, #0
 8004d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d34:	4b79      	ldr	r3, [pc, #484]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d00d      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x40>
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	f200 80e1 	bhi.w	8004f08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_RCC_GetSysClockFreq+0x34>
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d4e:	e0db      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d50:	4b73      	ldr	r3, [pc, #460]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d54:	e0db      	b.n	8004f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d56:	4b73      	ldr	r3, [pc, #460]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d5a:	e0d8      	b.n	8004f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d5c:	4b6f      	ldr	r3, [pc, #444]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d66:	4b6d      	ldr	r3, [pc, #436]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d063      	beq.n	8004e3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d72:	4b6a      	ldr	r3, [pc, #424]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	099b      	lsrs	r3, r3, #6
 8004d78:	2200      	movs	r2, #0
 8004d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d84:	633b      	str	r3, [r7, #48]	; 0x30
 8004d86:	2300      	movs	r3, #0
 8004d88:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d8e:	4622      	mov	r2, r4
 8004d90:	462b      	mov	r3, r5
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f04f 0100 	mov.w	r1, #0
 8004d9a:	0159      	lsls	r1, r3, #5
 8004d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da0:	0150      	lsls	r0, r2, #5
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4621      	mov	r1, r4
 8004da8:	1a51      	subs	r1, r2, r1
 8004daa:	6139      	str	r1, [r7, #16]
 8004dac:	4629      	mov	r1, r5
 8004dae:	eb63 0301 	sbc.w	r3, r3, r1
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	018b      	lsls	r3, r1, #6
 8004dc4:	4651      	mov	r1, sl
 8004dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dca:	4651      	mov	r1, sl
 8004dcc:	018a      	lsls	r2, r1, #6
 8004dce:	4651      	mov	r1, sl
 8004dd0:	ebb2 0801 	subs.w	r8, r2, r1
 8004dd4:	4659      	mov	r1, fp
 8004dd6:	eb63 0901 	sbc.w	r9, r3, r1
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dee:	4690      	mov	r8, r2
 8004df0:	4699      	mov	r9, r3
 8004df2:	4623      	mov	r3, r4
 8004df4:	eb18 0303 	adds.w	r3, r8, r3
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	462b      	mov	r3, r5
 8004dfc:	eb49 0303 	adc.w	r3, r9, r3
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e0e:	4629      	mov	r1, r5
 8004e10:	024b      	lsls	r3, r1, #9
 8004e12:	4621      	mov	r1, r4
 8004e14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e18:	4621      	mov	r1, r4
 8004e1a:	024a      	lsls	r2, r1, #9
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e22:	2200      	movs	r2, #0
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e2c:	f7fb ff4c 	bl	8000cc8 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4613      	mov	r3, r2
 8004e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e38:	e058      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3a:	4b38      	ldr	r3, [pc, #224]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	099b      	lsrs	r3, r3, #6
 8004e40:	2200      	movs	r2, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	4611      	mov	r1, r2
 8004e46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e4a:	623b      	str	r3, [r7, #32]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	f04f 0000 	mov.w	r0, #0
 8004e5c:	f04f 0100 	mov.w	r1, #0
 8004e60:	0159      	lsls	r1, r3, #5
 8004e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e66:	0150      	lsls	r0, r2, #5
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e72:	4649      	mov	r1, r9
 8004e74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e90:	eb63 050b 	sbc.w	r5, r3, fp
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	00eb      	lsls	r3, r5, #3
 8004e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ea2:	00e2      	lsls	r2, r4, #3
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	461d      	mov	r5, r3
 8004ea8:	4643      	mov	r3, r8
 8004eaa:	18e3      	adds	r3, r4, r3
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	464b      	mov	r3, r9
 8004eb0:	eb45 0303 	adc.w	r3, r5, r3
 8004eb4:	607b      	str	r3, [r7, #4]
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	028b      	lsls	r3, r1, #10
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ecc:	4621      	mov	r1, r4
 8004ece:	028a      	lsls	r2, r1, #10
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	61bb      	str	r3, [r7, #24]
 8004eda:	61fa      	str	r2, [r7, #28]
 8004edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee0:	f7fb fef2 	bl	8000cc8 <__aeabi_uldivmod>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4613      	mov	r3, r2
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f06:	e002      	b.n	8004f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3750      	adds	r7, #80	; 0x50
 8004f14:	46bd      	mov	sp, r7
 8004f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	00f42400 	.word	0x00f42400
 8004f24:	007a1200 	.word	0x007a1200

08004f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	20000008 	.word	0x20000008

08004f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f44:	f7ff fff0 	bl	8004f28 <HAL_RCC_GetHCLKFreq>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	0a9b      	lsrs	r3, r3, #10
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	4903      	ldr	r1, [pc, #12]	; (8004f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f56:	5ccb      	ldrb	r3, [r1, r3]
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40023800 	.word	0x40023800
 8004f64:	0800b560 	.word	0x0800b560

08004f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f6c:	f7ff ffdc 	bl	8004f28 <HAL_RCC_GetHCLKFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	0b5b      	lsrs	r3, r3, #13
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	4903      	ldr	r1, [pc, #12]	; (8004f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	0800b560 	.word	0x0800b560

08004f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d075      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fc4:	4b91      	ldr	r3, [pc, #580]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fca:	f7fd fb0d 	bl	80025e8 <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fd2:	f7fd fb09 	bl	80025e8 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e189      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe4:	4b8a      	ldr	r3, [pc, #552]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f0      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d009      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	019a      	lsls	r2, r3, #6
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	071b      	lsls	r3, r3, #28
 8005008:	4981      	ldr	r1, [pc, #516]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01f      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800501c:	4b7c      	ldr	r3, [pc, #496]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005022:	0f1b      	lsrs	r3, r3, #28
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	019a      	lsls	r2, r3, #6
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	061b      	lsls	r3, r3, #24
 8005036:	431a      	orrs	r2, r3
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	071b      	lsls	r3, r3, #28
 800503c:	4974      	ldr	r1, [pc, #464]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005044:	4b72      	ldr	r3, [pc, #456]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800504a:	f023 021f 	bic.w	r2, r3, #31
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	3b01      	subs	r3, #1
 8005054:	496e      	ldr	r1, [pc, #440]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00d      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	019a      	lsls	r2, r3, #6
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	061b      	lsls	r3, r3, #24
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	071b      	lsls	r3, r3, #28
 800507c:	4964      	ldr	r1, [pc, #400]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005084:	4b61      	ldr	r3, [pc, #388]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800508a:	f7fd faad 	bl	80025e8 <HAL_GetTick>
 800508e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005092:	f7fd faa9 	bl	80025e8 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e129      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050a4:	4b5a      	ldr	r3, [pc, #360]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d079      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050c8:	4b52      	ldr	r3, [pc, #328]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ce:	f7fd fa8b 	bl	80025e8 <HAL_GetTick>
 80050d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050d6:	f7fd fa87 	bl	80025e8 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e107      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050e8:	4b49      	ldr	r3, [pc, #292]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f4:	d0ef      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d020      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005102:	4b43      	ldr	r3, [pc, #268]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005108:	0f1b      	lsrs	r3, r3, #28
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	019a      	lsls	r2, r3, #6
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	061b      	lsls	r3, r3, #24
 800511c:	431a      	orrs	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	071b      	lsls	r3, r3, #28
 8005122:	493b      	ldr	r1, [pc, #236]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800512a:	4b39      	ldr	r3, [pc, #228]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800512c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005130:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	3b01      	subs	r3, #1
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	4934      	ldr	r1, [pc, #208]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01e      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005150:	4b2f      	ldr	r3, [pc, #188]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	0e1b      	lsrs	r3, r3, #24
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	019a      	lsls	r2, r3, #6
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	061b      	lsls	r3, r3, #24
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	071b      	lsls	r3, r3, #28
 8005170:	4927      	ldr	r1, [pc, #156]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005178:	4b25      	ldr	r3, [pc, #148]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800517a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800517e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	4922      	ldr	r1, [pc, #136]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800518e:	4b21      	ldr	r3, [pc, #132]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005190:	2201      	movs	r2, #1
 8005192:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005194:	f7fd fa28 	bl	80025e8 <HAL_GetTick>
 8005198:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800519c:	f7fd fa24 	bl	80025e8 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e0a4      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051ae:	4b18      	ldr	r3, [pc, #96]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ba:	d1ef      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 808b 	beq.w	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	4a0f      	ldr	r2, [pc, #60]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d8:	6413      	str	r3, [r2, #64]	; 0x40
 80051da:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a0b      	ldr	r2, [pc, #44]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051f2:	f7fd f9f9 	bl	80025e8 <HAL_GetTick>
 80051f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051f8:	e010      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051fa:	f7fd f9f5 	bl	80025e8 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d909      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e075      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800520c:	42470068 	.word	0x42470068
 8005210:	40023800 	.word	0x40023800
 8005214:	42470070 	.word	0x42470070
 8005218:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800521c:	4b38      	ldr	r3, [pc, #224]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0e8      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005228:	4b36      	ldr	r3, [pc, #216]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005230:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d02f      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	429a      	cmp	r2, r3
 8005244:	d028      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005246:	4b2f      	ldr	r3, [pc, #188]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005250:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005256:	4b2c      	ldr	r3, [pc, #176]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800525c:	4a29      	ldr	r2, [pc, #164]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005262:	4b28      	ldr	r3, [pc, #160]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b01      	cmp	r3, #1
 800526c:	d114      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800526e:	f7fd f9bb 	bl	80025e8 <HAL_GetTick>
 8005272:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005274:	e00a      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005276:	f7fd f9b7 	bl	80025e8 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f241 3288 	movw	r2, #5000	; 0x1388
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e035      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ee      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a4:	d10d      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80052a6:	4b17      	ldr	r3, [pc, #92]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ba:	4912      	ldr	r1, [pc, #72]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	608b      	str	r3, [r1, #8]
 80052c0:	e005      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	4a0f      	ldr	r2, [pc, #60]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052cc:	6093      	str	r3, [r2, #8]
 80052ce:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052da:	490a      	ldr	r1, [pc, #40]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d004      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80052f4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40007000 	.word	0x40007000
 8005304:	40023800 	.word	0x40023800
 8005308:	42470e40 	.word	0x42470e40
 800530c:	424711e0 	.word	0x424711e0

08005310 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e066      	b.n	80053f4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	7f5b      	ldrb	r3, [r3, #29]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fc fdea 	bl	8001f10 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	22ca      	movs	r2, #202	; 0xca
 8005348:	625a      	str	r2, [r3, #36]	; 0x24
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2253      	movs	r2, #83	; 0x53
 8005350:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fa45 	bl	80057e2 <RTC_EnterInitMode>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d12c      	bne.n	80053bc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005374:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6899      	ldr	r1, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	68d2      	ldr	r2, [r2, #12]
 800539c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6919      	ldr	r1, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	041a      	lsls	r2, r3, #16
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fa4c 	bl	8005850 <RTC_ExitInitMode>
 80053b8:	4603      	mov	r3, r0
 80053ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d113      	bne.n	80053ea <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	22ff      	movs	r2, #255	; 0xff
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	7f1b      	ldrb	r3, [r3, #28]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_RTC_SetTime+0x1c>
 8005414:	2302      	movs	r3, #2
 8005416:	e087      	b.n	8005528 <HAL_RTC_SetTime+0x12c>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2202      	movs	r2, #2
 8005422:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d126      	bne.n	8005478 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2200      	movs	r2, #0
 800543c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fa29 	bl	800589a <RTC_ByteToBcd2>
 8005448:	4603      	mov	r3, r0
 800544a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	785b      	ldrb	r3, [r3, #1]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fa22 	bl	800589a <RTC_ByteToBcd2>
 8005456:	4603      	mov	r3, r0
 8005458:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800545a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	789b      	ldrb	r3, [r3, #2]
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fa1a 	bl	800589a <RTC_ByteToBcd2>
 8005466:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005468:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	78db      	ldrb	r3, [r3, #3]
 8005470:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e018      	b.n	80054aa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d102      	bne.n	800548c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2200      	movs	r2, #0
 800548a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005498:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800549e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	78db      	ldrb	r3, [r3, #3]
 80054a4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	22ca      	movs	r2, #202	; 0xca
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2253      	movs	r2, #83	; 0x53
 80054b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f991 	bl	80057e2 <RTC_EnterInitMode>
 80054c0:	4603      	mov	r3, r0
 80054c2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d120      	bne.n	800550c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80054d4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80054d8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6899      	ldr	r1, [r3, #8]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f9a4 	bl	8005850 <RTC_ExitInitMode>
 8005508:	4603      	mov	r3, r0
 800550a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	22ff      	movs	r2, #255	; 0xff
 800551e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	771a      	strb	r2, [r3, #28]

  return status;
 8005526:	7cfb      	ldrb	r3, [r7, #19]
}
 8005528:	4618      	mov	r0, r3
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd90      	pop	{r4, r7, pc}

08005530 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005562:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005566:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	0c1b      	lsrs	r3, r3, #16
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005572:	b2da      	uxtb	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	b2db      	uxtb	r3, r3
 800557e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005582:	b2da      	uxtb	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005590:	b2da      	uxtb	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	0d9b      	lsrs	r3, r3, #22
 800559a:	b2db      	uxtb	r3, r3
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d11a      	bne.n	80055e2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 f98f 	bl	80058d4 <RTC_Bcd2ToByte>
 80055b6:	4603      	mov	r3, r0
 80055b8:	461a      	mov	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	785b      	ldrb	r3, [r3, #1]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f986 	bl	80058d4 <RTC_Bcd2ToByte>
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	789b      	ldrb	r3, [r3, #2]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 f97d 	bl	80058d4 <RTC_Bcd2ToByte>
 80055da:	4603      	mov	r3, r0
 80055dc:	461a      	mov	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	7f1b      	ldrb	r3, [r3, #28]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_RTC_SetDate+0x1c>
 8005604:	2302      	movs	r3, #2
 8005606:	e071      	b.n	80056ec <HAL_RTC_SetDate+0x100>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2202      	movs	r2, #2
 8005612:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10e      	bne.n	8005638 <HAL_RTC_SetDate+0x4c>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b00      	cmp	r3, #0
 8005624:	d008      	beq.n	8005638 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	f023 0310 	bic.w	r3, r3, #16
 800562e:	b2db      	uxtb	r3, r3
 8005630:	330a      	adds	r3, #10
 8005632:	b2da      	uxtb	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d11c      	bne.n	8005678 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	78db      	ldrb	r3, [r3, #3]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 f929 	bl	800589a <RTC_ByteToBcd2>
 8005648:	4603      	mov	r3, r0
 800564a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f922 	bl	800589a <RTC_ByteToBcd2>
 8005656:	4603      	mov	r3, r0
 8005658:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800565a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	789b      	ldrb	r3, [r3, #2]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f91a 	bl	800589a <RTC_ByteToBcd2>
 8005666:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005668:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	e00e      	b.n	8005696 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	78db      	ldrb	r3, [r3, #3]
 800567c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005684:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800568a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	22ca      	movs	r2, #202	; 0xca
 800569c:	625a      	str	r2, [r3, #36]	; 0x24
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2253      	movs	r2, #83	; 0x53
 80056a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f89b 	bl	80057e2 <RTC_EnterInitMode>
 80056ac:	4603      	mov	r3, r0
 80056ae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80056b0:	7cfb      	ldrb	r3, [r7, #19]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10c      	bne.n	80056d0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80056c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056c4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f8c2 	bl	8005850 <RTC_ExitInitMode>
 80056cc:	4603      	mov	r3, r0
 80056ce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80056d0:	7cfb      	ldrb	r3, [r7, #19]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	22ff      	movs	r2, #255	; 0xff
 80056e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	771a      	strb	r2, [r3, #28]

  return status;
 80056ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd90      	pop	{r4, r7, pc}

080056f4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800570e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005712:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	0c1b      	lsrs	r3, r3, #16
 8005718:	b2da      	uxtb	r2, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	0a1b      	lsrs	r3, r3, #8
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	b2da      	uxtb	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005736:	b2da      	uxtb	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	0b5b      	lsrs	r3, r3, #13
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	b2da      	uxtb	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d11a      	bne.n	8005788 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	78db      	ldrb	r3, [r3, #3]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f8bc 	bl	80058d4 <RTC_Bcd2ToByte>
 800575c:	4603      	mov	r3, r0
 800575e:	461a      	mov	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 f8b3 	bl	80058d4 <RTC_Bcd2ToByte>
 800576e:	4603      	mov	r3, r0
 8005770:	461a      	mov	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	789b      	ldrb	r3, [r3, #2]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f8aa 	bl	80058d4 <RTC_Bcd2ToByte>
 8005780:	4603      	mov	r3, r0
 8005782:	461a      	mov	r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057ac:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057ae:	f7fc ff1b 	bl	80025e8 <HAL_GetTick>
 80057b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80057b4:	e009      	b.n	80057ca <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057b6:	f7fc ff17 	bl	80025e8 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057c4:	d901      	bls.n	80057ca <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e007      	b.n	80057da <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0ee      	beq.n	80057b6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d122      	bne.n	8005846 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800580e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005810:	f7fc feea 	bl	80025e8 <HAL_GetTick>
 8005814:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005816:	e00c      	b.n	8005832 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005818:	f7fc fee6 	bl	80025e8 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005826:	d904      	bls.n	8005832 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2204      	movs	r2, #4
 800582c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <RTC_EnterInitMode+0x64>
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d1e8      	bne.n	8005818 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800586a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff ff89 	bl	8005792 <HAL_RTC_WaitForSynchro>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2204      	movs	r2, #4
 800588a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	4603      	mov	r3, r0
 80058a2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80058a8:	e005      	b.n	80058b6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	3301      	adds	r3, #1
 80058ae:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	3b0a      	subs	r3, #10
 80058b4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	2b09      	cmp	r3, #9
 80058ba:	d8f6      	bhi.n	80058aa <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	b2db      	uxtb	r3, r3
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	0092      	lsls	r2, r2, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	4413      	add	r3, r2
 80058fe:	b2db      	uxtb	r3, r3
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e041      	b.n	80059a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fc fcac 	bl	8002290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f000 f95e 	bl	8005c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d001      	beq.n	80059c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e046      	b.n	8005a52 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <HAL_TIM_Base_Start+0xb4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d022      	beq.n	8005a1c <HAL_TIM_Base_Start+0x70>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d01d      	beq.n	8005a1c <HAL_TIM_Base_Start+0x70>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1f      	ldr	r2, [pc, #124]	; (8005a64 <HAL_TIM_Base_Start+0xb8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d018      	beq.n	8005a1c <HAL_TIM_Base_Start+0x70>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1e      	ldr	r2, [pc, #120]	; (8005a68 <HAL_TIM_Base_Start+0xbc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d013      	beq.n	8005a1c <HAL_TIM_Base_Start+0x70>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <HAL_TIM_Base_Start+0xc0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00e      	beq.n	8005a1c <HAL_TIM_Base_Start+0x70>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <HAL_TIM_Base_Start+0xc4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_TIM_Base_Start+0x70>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a19      	ldr	r2, [pc, #100]	; (8005a74 <HAL_TIM_Base_Start+0xc8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_TIM_Base_Start+0x70>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <HAL_TIM_Base_Start+0xcc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d111      	bne.n	8005a40 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d010      	beq.n	8005a50 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	e007      	b.n	8005a50 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40010400 	.word	0x40010400
 8005a74:	40014000 	.word	0x40014000
 8005a78:	40001800 	.word	0x40001800

08005a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIM_ConfigClockSource+0x1c>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e0b4      	b.n	8005c02 <HAL_TIM_ConfigClockSource+0x186>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad0:	d03e      	beq.n	8005b50 <HAL_TIM_ConfigClockSource+0xd4>
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad6:	f200 8087 	bhi.w	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ade:	f000 8086 	beq.w	8005bee <HAL_TIM_ConfigClockSource+0x172>
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae6:	d87f      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b70      	cmp	r3, #112	; 0x70
 8005aea:	d01a      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0xa6>
 8005aec:	2b70      	cmp	r3, #112	; 0x70
 8005aee:	d87b      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b60      	cmp	r3, #96	; 0x60
 8005af2:	d050      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x11a>
 8005af4:	2b60      	cmp	r3, #96	; 0x60
 8005af6:	d877      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b50      	cmp	r3, #80	; 0x50
 8005afa:	d03c      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0xfa>
 8005afc:	2b50      	cmp	r3, #80	; 0x50
 8005afe:	d873      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b40      	cmp	r3, #64	; 0x40
 8005b02:	d058      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x13a>
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d86f      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b30      	cmp	r3, #48	; 0x30
 8005b0a:	d064      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b0c:	2b30      	cmp	r3, #48	; 0x30
 8005b0e:	d86b      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d060      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d867      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d05c      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d05a      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b20:	e062      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6899      	ldr	r1, [r3, #8]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f000 f985 	bl	8005e40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	609a      	str	r2, [r3, #8]
      break;
 8005b4e:	e04f      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	6899      	ldr	r1, [r3, #8]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f000 f96e 	bl	8005e40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b72:	609a      	str	r2, [r3, #8]
      break;
 8005b74:	e03c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f000 f8e2 	bl	8005d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2150      	movs	r1, #80	; 0x50
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 f93b 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 8005b94:	e02c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 f901 	bl	8005daa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2160      	movs	r1, #96	; 0x60
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f92b 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e01c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f000 f8c2 	bl	8005d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2140      	movs	r1, #64	; 0x40
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f91b 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e00c      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f000 f912 	bl	8005e0a <TIM_ITRx_SetConfig>
      break;
 8005be6:	e003      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
      break;
 8005bec:	e000      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a40      	ldr	r2, [pc, #256]	; (8005d20 <TIM_Base_SetConfig+0x114>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d013      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2a:	d00f      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a3d      	ldr	r2, [pc, #244]	; (8005d24 <TIM_Base_SetConfig+0x118>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00b      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a3c      	ldr	r2, [pc, #240]	; (8005d28 <TIM_Base_SetConfig+0x11c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d007      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a3b      	ldr	r2, [pc, #236]	; (8005d2c <TIM_Base_SetConfig+0x120>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3a      	ldr	r2, [pc, #232]	; (8005d30 <TIM_Base_SetConfig+0x124>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d108      	bne.n	8005c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a2f      	ldr	r2, [pc, #188]	; (8005d20 <TIM_Base_SetConfig+0x114>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d02b      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6c:	d027      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a2c      	ldr	r2, [pc, #176]	; (8005d24 <TIM_Base_SetConfig+0x118>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d023      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2b      	ldr	r2, [pc, #172]	; (8005d28 <TIM_Base_SetConfig+0x11c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d01f      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2a      	ldr	r2, [pc, #168]	; (8005d2c <TIM_Base_SetConfig+0x120>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01b      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a29      	ldr	r2, [pc, #164]	; (8005d30 <TIM_Base_SetConfig+0x124>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d017      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a28      	ldr	r2, [pc, #160]	; (8005d34 <TIM_Base_SetConfig+0x128>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a27      	ldr	r2, [pc, #156]	; (8005d38 <TIM_Base_SetConfig+0x12c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00f      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a26      	ldr	r2, [pc, #152]	; (8005d3c <TIM_Base_SetConfig+0x130>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00b      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a25      	ldr	r2, [pc, #148]	; (8005d40 <TIM_Base_SetConfig+0x134>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d007      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a24      	ldr	r2, [pc, #144]	; (8005d44 <TIM_Base_SetConfig+0x138>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a23      	ldr	r2, [pc, #140]	; (8005d48 <TIM_Base_SetConfig+0x13c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d108      	bne.n	8005cd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a0a      	ldr	r2, [pc, #40]	; (8005d20 <TIM_Base_SetConfig+0x114>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d003      	beq.n	8005d04 <TIM_Base_SetConfig+0xf8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a0c      	ldr	r2, [pc, #48]	; (8005d30 <TIM_Base_SetConfig+0x124>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d103      	bne.n	8005d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	615a      	str	r2, [r3, #20]
}
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40000400 	.word	0x40000400
 8005d28:	40000800 	.word	0x40000800
 8005d2c:	40000c00 	.word	0x40000c00
 8005d30:	40010400 	.word	0x40010400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800
 8005d40:	40001800 	.word	0x40001800
 8005d44:	40001c00 	.word	0x40001c00
 8005d48:	40002000 	.word	0x40002000

08005d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0201 	bic.w	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f023 030a 	bic.w	r3, r3, #10
 8005d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b087      	sub	sp, #28
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f023 0210 	bic.w	r2, r3, #16
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	031b      	lsls	r3, r3, #12
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005de6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f043 0307 	orr.w	r3, r3, #7
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	021a      	lsls	r2, r3, #8
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	609a      	str	r2, [r3, #8]
}
 8005e74:	bf00      	nop
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e05a      	b.n	8005f4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a21      	ldr	r2, [pc, #132]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d022      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee4:	d01d      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1d      	ldr	r2, [pc, #116]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d018      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00e      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a18      	ldr	r2, [pc, #96]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a17      	ldr	r2, [pc, #92]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d10c      	bne.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40010400 	.word	0x40010400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40001800 	.word	0x40001800

08005f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e03f      	b.n	800600a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fc f9c2 	bl	8002328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2224      	movs	r2, #36	; 0x24
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f929 	bl	8006214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b08a      	sub	sp, #40	; 0x28
 8006016:	af02      	add	r7, sp, #8
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	603b      	str	r3, [r7, #0]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b20      	cmp	r3, #32
 8006030:	d17c      	bne.n	800612c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <HAL_UART_Transmit+0x2c>
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e075      	b.n	800612e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_UART_Transmit+0x3e>
 800604c:	2302      	movs	r3, #2
 800604e:	e06e      	b.n	800612e <HAL_UART_Transmit+0x11c>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2221      	movs	r2, #33	; 0x21
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006066:	f7fc fabf 	bl	80025e8 <HAL_GetTick>
 800606a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	88fa      	ldrh	r2, [r7, #6]
 8006070:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	88fa      	ldrh	r2, [r7, #6]
 8006076:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006080:	d108      	bne.n	8006094 <HAL_UART_Transmit+0x82>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d104      	bne.n	8006094 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	e003      	b.n	800609c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060a4:	e02a      	b.n	80060fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f840 	bl	8006136 <UART_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e036      	b.n	800612e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10b      	bne.n	80060de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	3302      	adds	r3, #2
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	e007      	b.n	80060ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	781a      	ldrb	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	3301      	adds	r3, #1
 80060ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1cf      	bne.n	80060a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2200      	movs	r2, #0
 800610e:	2140      	movs	r1, #64	; 0x40
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f810 	bl	8006136 <UART_WaitOnFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e006      	b.n	800612e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	e000      	b.n	800612e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800612c:	2302      	movs	r3, #2
  }
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b090      	sub	sp, #64	; 0x40
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	603b      	str	r3, [r7, #0]
 8006142:	4613      	mov	r3, r2
 8006144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006146:	e050      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d04c      	beq.n	80061ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0x30>
 8006156:	f7fc fa47 	bl	80025e8 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006162:	429a      	cmp	r2, r3
 8006164:	d241      	bcs.n	80061ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	330c      	adds	r3, #12
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006186:	637a      	str	r2, [r7, #52]	; 0x34
 8006188:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800618c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e5      	bne.n	8006166 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3314      	adds	r3, #20
 80061a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	613b      	str	r3, [r7, #16]
   return(result);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3314      	adds	r3, #20
 80061b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ba:	623a      	str	r2, [r7, #32]
 80061bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	69f9      	ldr	r1, [r7, #28]
 80061c0:	6a3a      	ldr	r2, [r7, #32]
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e5      	bne.n	800619a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2220      	movs	r2, #32
 80061da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e00f      	b.n	800620a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4013      	ands	r3, r2
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	bf0c      	ite	eq
 80061fa:	2301      	moveq	r3, #1
 80061fc:	2300      	movne	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	429a      	cmp	r2, r3
 8006206:	d09f      	beq.n	8006148 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3740      	adds	r7, #64	; 0x40
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006218:	b0c0      	sub	sp, #256	; 0x100
 800621a:	af00      	add	r7, sp, #0
 800621c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006230:	68d9      	ldr	r1, [r3, #12]
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	ea40 0301 	orr.w	r3, r0, r1
 800623c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800623e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	431a      	orrs	r2, r3
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	431a      	orrs	r2, r3
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800626c:	f021 010c 	bic.w	r1, r1, #12
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800627a:	430b      	orrs	r3, r1
 800627c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800627e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800628a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628e:	6999      	ldr	r1, [r3, #24]
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	ea40 0301 	orr.w	r3, r0, r1
 800629a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b8f      	ldr	r3, [pc, #572]	; (80064e0 <UART_SetConfig+0x2cc>)
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d005      	beq.n	80062b4 <UART_SetConfig+0xa0>
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b8d      	ldr	r3, [pc, #564]	; (80064e4 <UART_SetConfig+0x2d0>)
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d104      	bne.n	80062be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062b4:	f7fe fe58 	bl	8004f68 <HAL_RCC_GetPCLK2Freq>
 80062b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062bc:	e003      	b.n	80062c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062be:	f7fe fe3f 	bl	8004f40 <HAL_RCC_GetPCLK1Freq>
 80062c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d0:	f040 810c 	bne.w	80064ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062e6:	4622      	mov	r2, r4
 80062e8:	462b      	mov	r3, r5
 80062ea:	1891      	adds	r1, r2, r2
 80062ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80062ee:	415b      	adcs	r3, r3
 80062f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062f6:	4621      	mov	r1, r4
 80062f8:	eb12 0801 	adds.w	r8, r2, r1
 80062fc:	4629      	mov	r1, r5
 80062fe:	eb43 0901 	adc.w	r9, r3, r1
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800630e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006312:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006316:	4690      	mov	r8, r2
 8006318:	4699      	mov	r9, r3
 800631a:	4623      	mov	r3, r4
 800631c:	eb18 0303 	adds.w	r3, r8, r3
 8006320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006324:	462b      	mov	r3, r5
 8006326:	eb49 0303 	adc.w	r3, r9, r3
 800632a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800633a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800633e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006342:	460b      	mov	r3, r1
 8006344:	18db      	adds	r3, r3, r3
 8006346:	653b      	str	r3, [r7, #80]	; 0x50
 8006348:	4613      	mov	r3, r2
 800634a:	eb42 0303 	adc.w	r3, r2, r3
 800634e:	657b      	str	r3, [r7, #84]	; 0x54
 8006350:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006354:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006358:	f7fa fcb6 	bl	8000cc8 <__aeabi_uldivmod>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4b61      	ldr	r3, [pc, #388]	; (80064e8 <UART_SetConfig+0x2d4>)
 8006362:	fba3 2302 	umull	r2, r3, r3, r2
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	011c      	lsls	r4, r3, #4
 800636a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800636e:	2200      	movs	r2, #0
 8006370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006374:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006378:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800637c:	4642      	mov	r2, r8
 800637e:	464b      	mov	r3, r9
 8006380:	1891      	adds	r1, r2, r2
 8006382:	64b9      	str	r1, [r7, #72]	; 0x48
 8006384:	415b      	adcs	r3, r3
 8006386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006388:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800638c:	4641      	mov	r1, r8
 800638e:	eb12 0a01 	adds.w	sl, r2, r1
 8006392:	4649      	mov	r1, r9
 8006394:	eb43 0b01 	adc.w	fp, r3, r1
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063ac:	4692      	mov	sl, r2
 80063ae:	469b      	mov	fp, r3
 80063b0:	4643      	mov	r3, r8
 80063b2:	eb1a 0303 	adds.w	r3, sl, r3
 80063b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063ba:	464b      	mov	r3, r9
 80063bc:	eb4b 0303 	adc.w	r3, fp, r3
 80063c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063d8:	460b      	mov	r3, r1
 80063da:	18db      	adds	r3, r3, r3
 80063dc:	643b      	str	r3, [r7, #64]	; 0x40
 80063de:	4613      	mov	r3, r2
 80063e0:	eb42 0303 	adc.w	r3, r2, r3
 80063e4:	647b      	str	r3, [r7, #68]	; 0x44
 80063e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063ee:	f7fa fc6b 	bl	8000cc8 <__aeabi_uldivmod>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4611      	mov	r1, r2
 80063f8:	4b3b      	ldr	r3, [pc, #236]	; (80064e8 <UART_SetConfig+0x2d4>)
 80063fa:	fba3 2301 	umull	r2, r3, r3, r1
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	2264      	movs	r2, #100	; 0x64
 8006402:	fb02 f303 	mul.w	r3, r2, r3
 8006406:	1acb      	subs	r3, r1, r3
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800640e:	4b36      	ldr	r3, [pc, #216]	; (80064e8 <UART_SetConfig+0x2d4>)
 8006410:	fba3 2302 	umull	r2, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800641c:	441c      	add	r4, r3
 800641e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006422:	2200      	movs	r2, #0
 8006424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006428:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800642c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006430:	4642      	mov	r2, r8
 8006432:	464b      	mov	r3, r9
 8006434:	1891      	adds	r1, r2, r2
 8006436:	63b9      	str	r1, [r7, #56]	; 0x38
 8006438:	415b      	adcs	r3, r3
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800643c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006440:	4641      	mov	r1, r8
 8006442:	1851      	adds	r1, r2, r1
 8006444:	6339      	str	r1, [r7, #48]	; 0x30
 8006446:	4649      	mov	r1, r9
 8006448:	414b      	adcs	r3, r1
 800644a:	637b      	str	r3, [r7, #52]	; 0x34
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006458:	4659      	mov	r1, fp
 800645a:	00cb      	lsls	r3, r1, #3
 800645c:	4651      	mov	r1, sl
 800645e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006462:	4651      	mov	r1, sl
 8006464:	00ca      	lsls	r2, r1, #3
 8006466:	4610      	mov	r0, r2
 8006468:	4619      	mov	r1, r3
 800646a:	4603      	mov	r3, r0
 800646c:	4642      	mov	r2, r8
 800646e:	189b      	adds	r3, r3, r2
 8006470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006474:	464b      	mov	r3, r9
 8006476:	460a      	mov	r2, r1
 8006478:	eb42 0303 	adc.w	r3, r2, r3
 800647c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800648c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006490:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006494:	460b      	mov	r3, r1
 8006496:	18db      	adds	r3, r3, r3
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
 800649a:	4613      	mov	r3, r2
 800649c:	eb42 0303 	adc.w	r3, r2, r3
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064aa:	f7fa fc0d 	bl	8000cc8 <__aeabi_uldivmod>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4b0d      	ldr	r3, [pc, #52]	; (80064e8 <UART_SetConfig+0x2d4>)
 80064b4:	fba3 1302 	umull	r1, r3, r3, r2
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	2164      	movs	r1, #100	; 0x64
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	3332      	adds	r3, #50	; 0x32
 80064c6:	4a08      	ldr	r2, [pc, #32]	; (80064e8 <UART_SetConfig+0x2d4>)
 80064c8:	fba2 2303 	umull	r2, r3, r2, r3
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	f003 0207 	and.w	r2, r3, #7
 80064d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4422      	add	r2, r4
 80064da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064dc:	e106      	b.n	80066ec <UART_SetConfig+0x4d8>
 80064de:	bf00      	nop
 80064e0:	40011000 	.word	0x40011000
 80064e4:	40011400 	.word	0x40011400
 80064e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f0:	2200      	movs	r2, #0
 80064f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064fe:	4642      	mov	r2, r8
 8006500:	464b      	mov	r3, r9
 8006502:	1891      	adds	r1, r2, r2
 8006504:	6239      	str	r1, [r7, #32]
 8006506:	415b      	adcs	r3, r3
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
 800650a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800650e:	4641      	mov	r1, r8
 8006510:	1854      	adds	r4, r2, r1
 8006512:	4649      	mov	r1, r9
 8006514:	eb43 0501 	adc.w	r5, r3, r1
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	00eb      	lsls	r3, r5, #3
 8006522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006526:	00e2      	lsls	r2, r4, #3
 8006528:	4614      	mov	r4, r2
 800652a:	461d      	mov	r5, r3
 800652c:	4643      	mov	r3, r8
 800652e:	18e3      	adds	r3, r4, r3
 8006530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006534:	464b      	mov	r3, r9
 8006536:	eb45 0303 	adc.w	r3, r5, r3
 800653a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800653e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800654a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800654e:	f04f 0200 	mov.w	r2, #0
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800655a:	4629      	mov	r1, r5
 800655c:	008b      	lsls	r3, r1, #2
 800655e:	4621      	mov	r1, r4
 8006560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006564:	4621      	mov	r1, r4
 8006566:	008a      	lsls	r2, r1, #2
 8006568:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800656c:	f7fa fbac 	bl	8000cc8 <__aeabi_uldivmod>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4b60      	ldr	r3, [pc, #384]	; (80066f8 <UART_SetConfig+0x4e4>)
 8006576:	fba3 2302 	umull	r2, r3, r3, r2
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	011c      	lsls	r4, r3, #4
 800657e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006582:	2200      	movs	r2, #0
 8006584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006588:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800658c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006590:	4642      	mov	r2, r8
 8006592:	464b      	mov	r3, r9
 8006594:	1891      	adds	r1, r2, r2
 8006596:	61b9      	str	r1, [r7, #24]
 8006598:	415b      	adcs	r3, r3
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065a0:	4641      	mov	r1, r8
 80065a2:	1851      	adds	r1, r2, r1
 80065a4:	6139      	str	r1, [r7, #16]
 80065a6:	4649      	mov	r1, r9
 80065a8:	414b      	adcs	r3, r1
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065b8:	4659      	mov	r1, fp
 80065ba:	00cb      	lsls	r3, r1, #3
 80065bc:	4651      	mov	r1, sl
 80065be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065c2:	4651      	mov	r1, sl
 80065c4:	00ca      	lsls	r2, r1, #3
 80065c6:	4610      	mov	r0, r2
 80065c8:	4619      	mov	r1, r3
 80065ca:	4603      	mov	r3, r0
 80065cc:	4642      	mov	r2, r8
 80065ce:	189b      	adds	r3, r3, r2
 80065d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065d4:	464b      	mov	r3, r9
 80065d6:	460a      	mov	r2, r1
 80065d8:	eb42 0303 	adc.w	r3, r2, r3
 80065dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80065ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065f8:	4649      	mov	r1, r9
 80065fa:	008b      	lsls	r3, r1, #2
 80065fc:	4641      	mov	r1, r8
 80065fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006602:	4641      	mov	r1, r8
 8006604:	008a      	lsls	r2, r1, #2
 8006606:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800660a:	f7fa fb5d 	bl	8000cc8 <__aeabi_uldivmod>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4611      	mov	r1, r2
 8006614:	4b38      	ldr	r3, [pc, #224]	; (80066f8 <UART_SetConfig+0x4e4>)
 8006616:	fba3 2301 	umull	r2, r3, r3, r1
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	2264      	movs	r2, #100	; 0x64
 800661e:	fb02 f303 	mul.w	r3, r2, r3
 8006622:	1acb      	subs	r3, r1, r3
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	3332      	adds	r3, #50	; 0x32
 8006628:	4a33      	ldr	r2, [pc, #204]	; (80066f8 <UART_SetConfig+0x4e4>)
 800662a:	fba2 2303 	umull	r2, r3, r2, r3
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006634:	441c      	add	r4, r3
 8006636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800663a:	2200      	movs	r2, #0
 800663c:	673b      	str	r3, [r7, #112]	; 0x70
 800663e:	677a      	str	r2, [r7, #116]	; 0x74
 8006640:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	1891      	adds	r1, r2, r2
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	415b      	adcs	r3, r3
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006654:	4641      	mov	r1, r8
 8006656:	1851      	adds	r1, r2, r1
 8006658:	6039      	str	r1, [r7, #0]
 800665a:	4649      	mov	r1, r9
 800665c:	414b      	adcs	r3, r1
 800665e:	607b      	str	r3, [r7, #4]
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800666c:	4659      	mov	r1, fp
 800666e:	00cb      	lsls	r3, r1, #3
 8006670:	4651      	mov	r1, sl
 8006672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006676:	4651      	mov	r1, sl
 8006678:	00ca      	lsls	r2, r1, #3
 800667a:	4610      	mov	r0, r2
 800667c:	4619      	mov	r1, r3
 800667e:	4603      	mov	r3, r0
 8006680:	4642      	mov	r2, r8
 8006682:	189b      	adds	r3, r3, r2
 8006684:	66bb      	str	r3, [r7, #104]	; 0x68
 8006686:	464b      	mov	r3, r9
 8006688:	460a      	mov	r2, r1
 800668a:	eb42 0303 	adc.w	r3, r2, r3
 800668e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	663b      	str	r3, [r7, #96]	; 0x60
 800669a:	667a      	str	r2, [r7, #100]	; 0x64
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066a8:	4649      	mov	r1, r9
 80066aa:	008b      	lsls	r3, r1, #2
 80066ac:	4641      	mov	r1, r8
 80066ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066b2:	4641      	mov	r1, r8
 80066b4:	008a      	lsls	r2, r1, #2
 80066b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066ba:	f7fa fb05 	bl	8000cc8 <__aeabi_uldivmod>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <UART_SetConfig+0x4e4>)
 80066c4:	fba3 1302 	umull	r1, r3, r3, r2
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	2164      	movs	r1, #100	; 0x64
 80066cc:	fb01 f303 	mul.w	r3, r1, r3
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	3332      	adds	r3, #50	; 0x32
 80066d6:	4a08      	ldr	r2, [pc, #32]	; (80066f8 <UART_SetConfig+0x4e4>)
 80066d8:	fba2 2303 	umull	r2, r3, r2, r3
 80066dc:	095b      	lsrs	r3, r3, #5
 80066de:	f003 020f 	and.w	r2, r3, #15
 80066e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4422      	add	r2, r4
 80066ea:	609a      	str	r2, [r3, #8]
}
 80066ec:	bf00      	nop
 80066ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066f2:	46bd      	mov	sp, r7
 80066f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066f8:	51eb851f 	.word	0x51eb851f

080066fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066fc:	b084      	sub	sp, #16
 80066fe:	b580      	push	{r7, lr}
 8006700:	b084      	sub	sp, #16
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	f107 001c 	add.w	r0, r7, #28
 800670a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	2b01      	cmp	r3, #1
 8006712:	d122      	bne.n	800675a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800673c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d105      	bne.n	800674e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 faa2 	bl	8006c98 <USB_CoreReset>
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]
 8006758:	e01a      	b.n	8006790 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa96 	bl	8006c98 <USB_CoreReset>
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	639a      	str	r2, [r3, #56]	; 0x38
 8006782:	e005      	b.n	8006790 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	2b01      	cmp	r3, #1
 8006794:	d10b      	bne.n	80067ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f043 0206 	orr.w	r2, r3, #6
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f043 0220 	orr.w	r2, r3, #32
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067ba:	b004      	add	sp, #16
 80067bc:	4770      	bx	lr

080067be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f023 0201 	bic.w	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d115      	bne.n	800682e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800680e:	2001      	movs	r0, #1
 8006810:	f7fb fef6 	bl	8002600 <HAL_Delay>
      ms++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3301      	adds	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa2e 	bl	8006c7c <USB_GetMode>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d01e      	beq.n	8006864 <USB_SetCurrentMode+0x84>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b31      	cmp	r3, #49	; 0x31
 800682a:	d9f0      	bls.n	800680e <USB_SetCurrentMode+0x2e>
 800682c:	e01a      	b.n	8006864 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d115      	bne.n	8006860 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006840:	2001      	movs	r0, #1
 8006842:	f7fb fedd 	bl	8002600 <HAL_Delay>
      ms++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3301      	adds	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fa15 	bl	8006c7c <USB_GetMode>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <USB_SetCurrentMode+0x84>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b31      	cmp	r3, #49	; 0x31
 800685c:	d9f0      	bls.n	8006840 <USB_SetCurrentMode+0x60>
 800685e:	e001      	b.n	8006864 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e005      	b.n	8006870 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b32      	cmp	r3, #50	; 0x32
 8006868:	d101      	bne.n	800686e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006878:	b084      	sub	sp, #16
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006892:	2300      	movs	r3, #0
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	e009      	b.n	80068ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	3340      	adds	r3, #64	; 0x40
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3301      	adds	r3, #1
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b0e      	cmp	r3, #14
 80068b0:	d9f2      	bls.n	8006898 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11c      	bne.n	80068f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c6:	f043 0302 	orr.w	r3, r3, #2
 80068ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
 80068f0:	e00b      	b.n	800690a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006910:	461a      	mov	r2, r3
 8006912:	2300      	movs	r3, #0
 8006914:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691c:	4619      	mov	r1, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006924:	461a      	mov	r2, r3
 8006926:	680b      	ldr	r3, [r1, #0]
 8006928:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10c      	bne.n	800694a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006936:	2100      	movs	r1, #0
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f965 	bl	8006c08 <USB_SetDevSpeed>
 800693e:	e008      	b.n	8006952 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006940:	2101      	movs	r1, #1
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f960 	bl	8006c08 <USB_SetDevSpeed>
 8006948:	e003      	b.n	8006952 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800694a:	2103      	movs	r1, #3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f95b 	bl	8006c08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006952:	2110      	movs	r1, #16
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f8f3 	bl	8006b40 <USB_FlushTxFifo>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f91f 	bl	8006ba8 <USB_FlushRxFifo>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697a:	461a      	mov	r2, r3
 800697c:	2300      	movs	r3, #0
 800697e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	461a      	mov	r2, r3
 8006988:	2300      	movs	r3, #0
 800698a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006992:	461a      	mov	r2, r3
 8006994:	2300      	movs	r3, #0
 8006996:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	e043      	b.n	8006a26 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b4:	d118      	bne.n	80069e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c8:	461a      	mov	r2, r3
 80069ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	e013      	b.n	80069fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069de:	461a      	mov	r2, r3
 80069e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	e008      	b.n	80069fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f4:	461a      	mov	r2, r3
 80069f6:	2300      	movs	r3, #0
 80069f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	461a      	mov	r2, r3
 8006a08:	2300      	movs	r3, #0
 8006a0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	3301      	adds	r3, #1
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d3b7      	bcc.n	800699e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a2e:	2300      	movs	r3, #0
 8006a30:	613b      	str	r3, [r7, #16]
 8006a32:	e043      	b.n	8006abc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a4a:	d118      	bne.n	8006a7e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	e013      	b.n	8006a90 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	461a      	mov	r2, r3
 8006a76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	e008      	b.n	8006a90 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ab4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d3b7      	bcc.n	8006a34 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ae4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d105      	bne.n	8006af8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f043 0210 	orr.w	r2, r3, #16
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699a      	ldr	r2, [r3, #24]
 8006afc:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <USB_DevInit+0x2c4>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f043 0208 	orr.w	r2, r3, #8
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d107      	bne.n	8006b2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b24:	f043 0304 	orr.w	r3, r3, #4
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b38:	b004      	add	sp, #16
 8006b3a:	4770      	bx	lr
 8006b3c:	803c3800 	.word	0x803c3800

08006b40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <USB_FlushTxFifo+0x64>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d901      	bls.n	8006b60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e01b      	b.n	8006b98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	daf2      	bge.n	8006b4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	019b      	lsls	r3, r3, #6
 8006b70:	f043 0220 	orr.w	r2, r3, #32
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a08      	ldr	r2, [pc, #32]	; (8006ba4 <USB_FlushTxFifo+0x64>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d901      	bls.n	8006b8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e006      	b.n	8006b98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d0f0      	beq.n	8006b78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	00030d40 	.word	0x00030d40

08006ba8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a11      	ldr	r2, [pc, #68]	; (8006c04 <USB_FlushRxFifo+0x5c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d901      	bls.n	8006bc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e018      	b.n	8006bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	daf2      	bge.n	8006bb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a08      	ldr	r2, [pc, #32]	; (8006c04 <USB_FlushRxFifo+0x5c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d901      	bls.n	8006bea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e006      	b.n	8006bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d0f0      	beq.n	8006bd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	00030d40 	.word	0x00030d40

08006c08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	68f9      	ldr	r1, [r7, #12]
 8006c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c54:	f023 0303 	bic.w	r3, r3, #3
 8006c58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c68:	f043 0302 	orr.w	r3, r3, #2
 8006c6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	f003 0301 	and.w	r3, r3, #1
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <USB_CoreReset+0x64>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d901      	bls.n	8006cb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e01b      	b.n	8006cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	daf2      	bge.n	8006ca4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f043 0201 	orr.w	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4a09      	ldr	r2, [pc, #36]	; (8006cfc <USB_CoreReset+0x64>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d901      	bls.n	8006ce0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e006      	b.n	8006cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d0f0      	beq.n	8006cce <USB_CoreReset+0x36>

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	00030d40 	.word	0x00030d40

08006d00 <__cvt>:
 8006d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d04:	ec55 4b10 	vmov	r4, r5, d0
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	460e      	mov	r6, r1
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	462b      	mov	r3, r5
 8006d10:	bfbb      	ittet	lt
 8006d12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d16:	461d      	movlt	r5, r3
 8006d18:	2300      	movge	r3, #0
 8006d1a:	232d      	movlt	r3, #45	; 0x2d
 8006d1c:	700b      	strb	r3, [r1, #0]
 8006d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d24:	4691      	mov	r9, r2
 8006d26:	f023 0820 	bic.w	r8, r3, #32
 8006d2a:	bfbc      	itt	lt
 8006d2c:	4622      	movlt	r2, r4
 8006d2e:	4614      	movlt	r4, r2
 8006d30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d34:	d005      	beq.n	8006d42 <__cvt+0x42>
 8006d36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d3a:	d100      	bne.n	8006d3e <__cvt+0x3e>
 8006d3c:	3601      	adds	r6, #1
 8006d3e:	2102      	movs	r1, #2
 8006d40:	e000      	b.n	8006d44 <__cvt+0x44>
 8006d42:	2103      	movs	r1, #3
 8006d44:	ab03      	add	r3, sp, #12
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	ab02      	add	r3, sp, #8
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	ec45 4b10 	vmov	d0, r4, r5
 8006d50:	4653      	mov	r3, sl
 8006d52:	4632      	mov	r2, r6
 8006d54:	f001 f880 	bl	8007e58 <_dtoa_r>
 8006d58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	d102      	bne.n	8006d66 <__cvt+0x66>
 8006d60:	f019 0f01 	tst.w	r9, #1
 8006d64:	d022      	beq.n	8006dac <__cvt+0xac>
 8006d66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d6a:	eb07 0906 	add.w	r9, r7, r6
 8006d6e:	d110      	bne.n	8006d92 <__cvt+0x92>
 8006d70:	783b      	ldrb	r3, [r7, #0]
 8006d72:	2b30      	cmp	r3, #48	; 0x30
 8006d74:	d10a      	bne.n	8006d8c <__cvt+0x8c>
 8006d76:	2200      	movs	r2, #0
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	f7f9 fec3 	bl	8000b08 <__aeabi_dcmpeq>
 8006d82:	b918      	cbnz	r0, 8006d8c <__cvt+0x8c>
 8006d84:	f1c6 0601 	rsb	r6, r6, #1
 8006d88:	f8ca 6000 	str.w	r6, [sl]
 8006d8c:	f8da 3000 	ldr.w	r3, [sl]
 8006d90:	4499      	add	r9, r3
 8006d92:	2200      	movs	r2, #0
 8006d94:	2300      	movs	r3, #0
 8006d96:	4620      	mov	r0, r4
 8006d98:	4629      	mov	r1, r5
 8006d9a:	f7f9 feb5 	bl	8000b08 <__aeabi_dcmpeq>
 8006d9e:	b108      	cbz	r0, 8006da4 <__cvt+0xa4>
 8006da0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006da4:	2230      	movs	r2, #48	; 0x30
 8006da6:	9b03      	ldr	r3, [sp, #12]
 8006da8:	454b      	cmp	r3, r9
 8006daa:	d307      	bcc.n	8006dbc <__cvt+0xbc>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006db0:	1bdb      	subs	r3, r3, r7
 8006db2:	4638      	mov	r0, r7
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	b004      	add	sp, #16
 8006db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dbc:	1c59      	adds	r1, r3, #1
 8006dbe:	9103      	str	r1, [sp, #12]
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	e7f0      	b.n	8006da6 <__cvt+0xa6>

08006dc4 <__exponent>:
 8006dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2900      	cmp	r1, #0
 8006dca:	bfb8      	it	lt
 8006dcc:	4249      	neglt	r1, r1
 8006dce:	f803 2b02 	strb.w	r2, [r3], #2
 8006dd2:	bfb4      	ite	lt
 8006dd4:	222d      	movlt	r2, #45	; 0x2d
 8006dd6:	222b      	movge	r2, #43	; 0x2b
 8006dd8:	2909      	cmp	r1, #9
 8006dda:	7042      	strb	r2, [r0, #1]
 8006ddc:	dd2a      	ble.n	8006e34 <__exponent+0x70>
 8006dde:	f10d 0207 	add.w	r2, sp, #7
 8006de2:	4617      	mov	r7, r2
 8006de4:	260a      	movs	r6, #10
 8006de6:	4694      	mov	ip, r2
 8006de8:	fb91 f5f6 	sdiv	r5, r1, r6
 8006dec:	fb06 1415 	mls	r4, r6, r5, r1
 8006df0:	3430      	adds	r4, #48	; 0x30
 8006df2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006df6:	460c      	mov	r4, r1
 8006df8:	2c63      	cmp	r4, #99	; 0x63
 8006dfa:	f102 32ff 	add.w	r2, r2, #4294967295
 8006dfe:	4629      	mov	r1, r5
 8006e00:	dcf1      	bgt.n	8006de6 <__exponent+0x22>
 8006e02:	3130      	adds	r1, #48	; 0x30
 8006e04:	f1ac 0402 	sub.w	r4, ip, #2
 8006e08:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e0c:	1c41      	adds	r1, r0, #1
 8006e0e:	4622      	mov	r2, r4
 8006e10:	42ba      	cmp	r2, r7
 8006e12:	d30a      	bcc.n	8006e2a <__exponent+0x66>
 8006e14:	f10d 0209 	add.w	r2, sp, #9
 8006e18:	eba2 020c 	sub.w	r2, r2, ip
 8006e1c:	42bc      	cmp	r4, r7
 8006e1e:	bf88      	it	hi
 8006e20:	2200      	movhi	r2, #0
 8006e22:	4413      	add	r3, r2
 8006e24:	1a18      	subs	r0, r3, r0
 8006e26:	b003      	add	sp, #12
 8006e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e2a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006e2e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006e32:	e7ed      	b.n	8006e10 <__exponent+0x4c>
 8006e34:	2330      	movs	r3, #48	; 0x30
 8006e36:	3130      	adds	r1, #48	; 0x30
 8006e38:	7083      	strb	r3, [r0, #2]
 8006e3a:	70c1      	strb	r1, [r0, #3]
 8006e3c:	1d03      	adds	r3, r0, #4
 8006e3e:	e7f1      	b.n	8006e24 <__exponent+0x60>

08006e40 <_printf_float>:
 8006e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	ed2d 8b02 	vpush	{d8}
 8006e48:	b08d      	sub	sp, #52	; 0x34
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e50:	4616      	mov	r6, r2
 8006e52:	461f      	mov	r7, r3
 8006e54:	4605      	mov	r5, r0
 8006e56:	f000 fef7 	bl	8007c48 <_localeconv_r>
 8006e5a:	f8d0 a000 	ldr.w	sl, [r0]
 8006e5e:	4650      	mov	r0, sl
 8006e60:	f7f9 fa26 	bl	80002b0 <strlen>
 8006e64:	2300      	movs	r3, #0
 8006e66:	930a      	str	r3, [sp, #40]	; 0x28
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	9305      	str	r3, [sp, #20]
 8006e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e74:	3307      	adds	r3, #7
 8006e76:	f023 0307 	bic.w	r3, r3, #7
 8006e7a:	f103 0208 	add.w	r2, r3, #8
 8006e7e:	f8c8 2000 	str.w	r2, [r8]
 8006e82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e8a:	9307      	str	r3, [sp, #28]
 8006e8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e90:	ee08 0a10 	vmov	s16, r0
 8006e94:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006e98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e9c:	4b9e      	ldr	r3, [pc, #632]	; (8007118 <_printf_float+0x2d8>)
 8006e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea2:	f7f9 fe63 	bl	8000b6c <__aeabi_dcmpun>
 8006ea6:	bb88      	cbnz	r0, 8006f0c <_printf_float+0xcc>
 8006ea8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eac:	4b9a      	ldr	r3, [pc, #616]	; (8007118 <_printf_float+0x2d8>)
 8006eae:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb2:	f7f9 fe3d 	bl	8000b30 <__aeabi_dcmple>
 8006eb6:	bb48      	cbnz	r0, 8006f0c <_printf_float+0xcc>
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2300      	movs	r3, #0
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	f7f9 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8006ec4:	b110      	cbz	r0, 8006ecc <_printf_float+0x8c>
 8006ec6:	232d      	movs	r3, #45	; 0x2d
 8006ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ecc:	4a93      	ldr	r2, [pc, #588]	; (800711c <_printf_float+0x2dc>)
 8006ece:	4b94      	ldr	r3, [pc, #592]	; (8007120 <_printf_float+0x2e0>)
 8006ed0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ed4:	bf94      	ite	ls
 8006ed6:	4690      	movls	r8, r2
 8006ed8:	4698      	movhi	r8, r3
 8006eda:	2303      	movs	r3, #3
 8006edc:	6123      	str	r3, [r4, #16]
 8006ede:	9b05      	ldr	r3, [sp, #20]
 8006ee0:	f023 0304 	bic.w	r3, r3, #4
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	f04f 0900 	mov.w	r9, #0
 8006eea:	9700      	str	r7, [sp, #0]
 8006eec:	4633      	mov	r3, r6
 8006eee:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 f9da 	bl	80072ac <_printf_common>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	f040 8090 	bne.w	800701e <_printf_float+0x1de>
 8006efe:	f04f 30ff 	mov.w	r0, #4294967295
 8006f02:	b00d      	add	sp, #52	; 0x34
 8006f04:	ecbd 8b02 	vpop	{d8}
 8006f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	464b      	mov	r3, r9
 8006f10:	4640      	mov	r0, r8
 8006f12:	4649      	mov	r1, r9
 8006f14:	f7f9 fe2a 	bl	8000b6c <__aeabi_dcmpun>
 8006f18:	b140      	cbz	r0, 8006f2c <_printf_float+0xec>
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	bfbc      	itt	lt
 8006f20:	232d      	movlt	r3, #45	; 0x2d
 8006f22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f26:	4a7f      	ldr	r2, [pc, #508]	; (8007124 <_printf_float+0x2e4>)
 8006f28:	4b7f      	ldr	r3, [pc, #508]	; (8007128 <_printf_float+0x2e8>)
 8006f2a:	e7d1      	b.n	8006ed0 <_printf_float+0x90>
 8006f2c:	6863      	ldr	r3, [r4, #4]
 8006f2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f32:	9206      	str	r2, [sp, #24]
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	d13f      	bne.n	8006fb8 <_printf_float+0x178>
 8006f38:	2306      	movs	r3, #6
 8006f3a:	6063      	str	r3, [r4, #4]
 8006f3c:	9b05      	ldr	r3, [sp, #20]
 8006f3e:	6861      	ldr	r1, [r4, #4]
 8006f40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f44:	2300      	movs	r3, #0
 8006f46:	9303      	str	r3, [sp, #12]
 8006f48:	ab0a      	add	r3, sp, #40	; 0x28
 8006f4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f4e:	ab09      	add	r3, sp, #36	; 0x24
 8006f50:	ec49 8b10 	vmov	d0, r8, r9
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	6022      	str	r2, [r4, #0]
 8006f58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f7ff fecf 	bl	8006d00 <__cvt>
 8006f62:	9b06      	ldr	r3, [sp, #24]
 8006f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f66:	2b47      	cmp	r3, #71	; 0x47
 8006f68:	4680      	mov	r8, r0
 8006f6a:	d108      	bne.n	8006f7e <_printf_float+0x13e>
 8006f6c:	1cc8      	adds	r0, r1, #3
 8006f6e:	db02      	blt.n	8006f76 <_printf_float+0x136>
 8006f70:	6863      	ldr	r3, [r4, #4]
 8006f72:	4299      	cmp	r1, r3
 8006f74:	dd41      	ble.n	8006ffa <_printf_float+0x1ba>
 8006f76:	f1ab 0302 	sub.w	r3, fp, #2
 8006f7a:	fa5f fb83 	uxtb.w	fp, r3
 8006f7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f82:	d820      	bhi.n	8006fc6 <_printf_float+0x186>
 8006f84:	3901      	subs	r1, #1
 8006f86:	465a      	mov	r2, fp
 8006f88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f8c:	9109      	str	r1, [sp, #36]	; 0x24
 8006f8e:	f7ff ff19 	bl	8006dc4 <__exponent>
 8006f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f94:	1813      	adds	r3, r2, r0
 8006f96:	2a01      	cmp	r2, #1
 8006f98:	4681      	mov	r9, r0
 8006f9a:	6123      	str	r3, [r4, #16]
 8006f9c:	dc02      	bgt.n	8006fa4 <_printf_float+0x164>
 8006f9e:	6822      	ldr	r2, [r4, #0]
 8006fa0:	07d2      	lsls	r2, r2, #31
 8006fa2:	d501      	bpl.n	8006fa8 <_printf_float+0x168>
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d09c      	beq.n	8006eea <_printf_float+0xaa>
 8006fb0:	232d      	movs	r3, #45	; 0x2d
 8006fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb6:	e798      	b.n	8006eea <_printf_float+0xaa>
 8006fb8:	9a06      	ldr	r2, [sp, #24]
 8006fba:	2a47      	cmp	r2, #71	; 0x47
 8006fbc:	d1be      	bne.n	8006f3c <_printf_float+0xfc>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1bc      	bne.n	8006f3c <_printf_float+0xfc>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e7b9      	b.n	8006f3a <_printf_float+0xfa>
 8006fc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006fca:	d118      	bne.n	8006ffe <_printf_float+0x1be>
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	6863      	ldr	r3, [r4, #4]
 8006fd0:	dd0b      	ble.n	8006fea <_printf_float+0x1aa>
 8006fd2:	6121      	str	r1, [r4, #16]
 8006fd4:	b913      	cbnz	r3, 8006fdc <_printf_float+0x19c>
 8006fd6:	6822      	ldr	r2, [r4, #0]
 8006fd8:	07d0      	lsls	r0, r2, #31
 8006fda:	d502      	bpl.n	8006fe2 <_printf_float+0x1a2>
 8006fdc:	3301      	adds	r3, #1
 8006fde:	440b      	add	r3, r1
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fe4:	f04f 0900 	mov.w	r9, #0
 8006fe8:	e7de      	b.n	8006fa8 <_printf_float+0x168>
 8006fea:	b913      	cbnz	r3, 8006ff2 <_printf_float+0x1b2>
 8006fec:	6822      	ldr	r2, [r4, #0]
 8006fee:	07d2      	lsls	r2, r2, #31
 8006ff0:	d501      	bpl.n	8006ff6 <_printf_float+0x1b6>
 8006ff2:	3302      	adds	r3, #2
 8006ff4:	e7f4      	b.n	8006fe0 <_printf_float+0x1a0>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e7f2      	b.n	8006fe0 <_printf_float+0x1a0>
 8006ffa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007000:	4299      	cmp	r1, r3
 8007002:	db05      	blt.n	8007010 <_printf_float+0x1d0>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	6121      	str	r1, [r4, #16]
 8007008:	07d8      	lsls	r0, r3, #31
 800700a:	d5ea      	bpl.n	8006fe2 <_printf_float+0x1a2>
 800700c:	1c4b      	adds	r3, r1, #1
 800700e:	e7e7      	b.n	8006fe0 <_printf_float+0x1a0>
 8007010:	2900      	cmp	r1, #0
 8007012:	bfd4      	ite	le
 8007014:	f1c1 0202 	rsble	r2, r1, #2
 8007018:	2201      	movgt	r2, #1
 800701a:	4413      	add	r3, r2
 800701c:	e7e0      	b.n	8006fe0 <_printf_float+0x1a0>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	055a      	lsls	r2, r3, #21
 8007022:	d407      	bmi.n	8007034 <_printf_float+0x1f4>
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	4642      	mov	r2, r8
 8007028:	4631      	mov	r1, r6
 800702a:	4628      	mov	r0, r5
 800702c:	47b8      	blx	r7
 800702e:	3001      	adds	r0, #1
 8007030:	d12c      	bne.n	800708c <_printf_float+0x24c>
 8007032:	e764      	b.n	8006efe <_printf_float+0xbe>
 8007034:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007038:	f240 80e0 	bls.w	80071fc <_printf_float+0x3bc>
 800703c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007040:	2200      	movs	r2, #0
 8007042:	2300      	movs	r3, #0
 8007044:	f7f9 fd60 	bl	8000b08 <__aeabi_dcmpeq>
 8007048:	2800      	cmp	r0, #0
 800704a:	d034      	beq.n	80070b6 <_printf_float+0x276>
 800704c:	4a37      	ldr	r2, [pc, #220]	; (800712c <_printf_float+0x2ec>)
 800704e:	2301      	movs	r3, #1
 8007050:	4631      	mov	r1, r6
 8007052:	4628      	mov	r0, r5
 8007054:	47b8      	blx	r7
 8007056:	3001      	adds	r0, #1
 8007058:	f43f af51 	beq.w	8006efe <_printf_float+0xbe>
 800705c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007060:	429a      	cmp	r2, r3
 8007062:	db02      	blt.n	800706a <_printf_float+0x22a>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	07d8      	lsls	r0, r3, #31
 8007068:	d510      	bpl.n	800708c <_printf_float+0x24c>
 800706a:	ee18 3a10 	vmov	r3, s16
 800706e:	4652      	mov	r2, sl
 8007070:	4631      	mov	r1, r6
 8007072:	4628      	mov	r0, r5
 8007074:	47b8      	blx	r7
 8007076:	3001      	adds	r0, #1
 8007078:	f43f af41 	beq.w	8006efe <_printf_float+0xbe>
 800707c:	f04f 0800 	mov.w	r8, #0
 8007080:	f104 091a 	add.w	r9, r4, #26
 8007084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007086:	3b01      	subs	r3, #1
 8007088:	4543      	cmp	r3, r8
 800708a:	dc09      	bgt.n	80070a0 <_printf_float+0x260>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	079b      	lsls	r3, r3, #30
 8007090:	f100 8107 	bmi.w	80072a2 <_printf_float+0x462>
 8007094:	68e0      	ldr	r0, [r4, #12]
 8007096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007098:	4298      	cmp	r0, r3
 800709a:	bfb8      	it	lt
 800709c:	4618      	movlt	r0, r3
 800709e:	e730      	b.n	8006f02 <_printf_float+0xc2>
 80070a0:	2301      	movs	r3, #1
 80070a2:	464a      	mov	r2, r9
 80070a4:	4631      	mov	r1, r6
 80070a6:	4628      	mov	r0, r5
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	f43f af27 	beq.w	8006efe <_printf_float+0xbe>
 80070b0:	f108 0801 	add.w	r8, r8, #1
 80070b4:	e7e6      	b.n	8007084 <_printf_float+0x244>
 80070b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	dc39      	bgt.n	8007130 <_printf_float+0x2f0>
 80070bc:	4a1b      	ldr	r2, [pc, #108]	; (800712c <_printf_float+0x2ec>)
 80070be:	2301      	movs	r3, #1
 80070c0:	4631      	mov	r1, r6
 80070c2:	4628      	mov	r0, r5
 80070c4:	47b8      	blx	r7
 80070c6:	3001      	adds	r0, #1
 80070c8:	f43f af19 	beq.w	8006efe <_printf_float+0xbe>
 80070cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80070d0:	4313      	orrs	r3, r2
 80070d2:	d102      	bne.n	80070da <_printf_float+0x29a>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	07d9      	lsls	r1, r3, #31
 80070d8:	d5d8      	bpl.n	800708c <_printf_float+0x24c>
 80070da:	ee18 3a10 	vmov	r3, s16
 80070de:	4652      	mov	r2, sl
 80070e0:	4631      	mov	r1, r6
 80070e2:	4628      	mov	r0, r5
 80070e4:	47b8      	blx	r7
 80070e6:	3001      	adds	r0, #1
 80070e8:	f43f af09 	beq.w	8006efe <_printf_float+0xbe>
 80070ec:	f04f 0900 	mov.w	r9, #0
 80070f0:	f104 0a1a 	add.w	sl, r4, #26
 80070f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f6:	425b      	negs	r3, r3
 80070f8:	454b      	cmp	r3, r9
 80070fa:	dc01      	bgt.n	8007100 <_printf_float+0x2c0>
 80070fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070fe:	e792      	b.n	8007026 <_printf_float+0x1e6>
 8007100:	2301      	movs	r3, #1
 8007102:	4652      	mov	r2, sl
 8007104:	4631      	mov	r1, r6
 8007106:	4628      	mov	r0, r5
 8007108:	47b8      	blx	r7
 800710a:	3001      	adds	r0, #1
 800710c:	f43f aef7 	beq.w	8006efe <_printf_float+0xbe>
 8007110:	f109 0901 	add.w	r9, r9, #1
 8007114:	e7ee      	b.n	80070f4 <_printf_float+0x2b4>
 8007116:	bf00      	nop
 8007118:	7fefffff 	.word	0x7fefffff
 800711c:	0800b568 	.word	0x0800b568
 8007120:	0800b56c 	.word	0x0800b56c
 8007124:	0800b570 	.word	0x0800b570
 8007128:	0800b574 	.word	0x0800b574
 800712c:	0800b578 	.word	0x0800b578
 8007130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007132:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007134:	429a      	cmp	r2, r3
 8007136:	bfa8      	it	ge
 8007138:	461a      	movge	r2, r3
 800713a:	2a00      	cmp	r2, #0
 800713c:	4691      	mov	r9, r2
 800713e:	dc37      	bgt.n	80071b0 <_printf_float+0x370>
 8007140:	f04f 0b00 	mov.w	fp, #0
 8007144:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007148:	f104 021a 	add.w	r2, r4, #26
 800714c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800714e:	9305      	str	r3, [sp, #20]
 8007150:	eba3 0309 	sub.w	r3, r3, r9
 8007154:	455b      	cmp	r3, fp
 8007156:	dc33      	bgt.n	80071c0 <_printf_float+0x380>
 8007158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800715c:	429a      	cmp	r2, r3
 800715e:	db3b      	blt.n	80071d8 <_printf_float+0x398>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	07da      	lsls	r2, r3, #31
 8007164:	d438      	bmi.n	80071d8 <_printf_float+0x398>
 8007166:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800716a:	eba2 0903 	sub.w	r9, r2, r3
 800716e:	9b05      	ldr	r3, [sp, #20]
 8007170:	1ad2      	subs	r2, r2, r3
 8007172:	4591      	cmp	r9, r2
 8007174:	bfa8      	it	ge
 8007176:	4691      	movge	r9, r2
 8007178:	f1b9 0f00 	cmp.w	r9, #0
 800717c:	dc35      	bgt.n	80071ea <_printf_float+0x3aa>
 800717e:	f04f 0800 	mov.w	r8, #0
 8007182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007186:	f104 0a1a 	add.w	sl, r4, #26
 800718a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800718e:	1a9b      	subs	r3, r3, r2
 8007190:	eba3 0309 	sub.w	r3, r3, r9
 8007194:	4543      	cmp	r3, r8
 8007196:	f77f af79 	ble.w	800708c <_printf_float+0x24c>
 800719a:	2301      	movs	r3, #1
 800719c:	4652      	mov	r2, sl
 800719e:	4631      	mov	r1, r6
 80071a0:	4628      	mov	r0, r5
 80071a2:	47b8      	blx	r7
 80071a4:	3001      	adds	r0, #1
 80071a6:	f43f aeaa 	beq.w	8006efe <_printf_float+0xbe>
 80071aa:	f108 0801 	add.w	r8, r8, #1
 80071ae:	e7ec      	b.n	800718a <_printf_float+0x34a>
 80071b0:	4613      	mov	r3, r2
 80071b2:	4631      	mov	r1, r6
 80071b4:	4642      	mov	r2, r8
 80071b6:	4628      	mov	r0, r5
 80071b8:	47b8      	blx	r7
 80071ba:	3001      	adds	r0, #1
 80071bc:	d1c0      	bne.n	8007140 <_printf_float+0x300>
 80071be:	e69e      	b.n	8006efe <_printf_float+0xbe>
 80071c0:	2301      	movs	r3, #1
 80071c2:	4631      	mov	r1, r6
 80071c4:	4628      	mov	r0, r5
 80071c6:	9205      	str	r2, [sp, #20]
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	f43f ae97 	beq.w	8006efe <_printf_float+0xbe>
 80071d0:	9a05      	ldr	r2, [sp, #20]
 80071d2:	f10b 0b01 	add.w	fp, fp, #1
 80071d6:	e7b9      	b.n	800714c <_printf_float+0x30c>
 80071d8:	ee18 3a10 	vmov	r3, s16
 80071dc:	4652      	mov	r2, sl
 80071de:	4631      	mov	r1, r6
 80071e0:	4628      	mov	r0, r5
 80071e2:	47b8      	blx	r7
 80071e4:	3001      	adds	r0, #1
 80071e6:	d1be      	bne.n	8007166 <_printf_float+0x326>
 80071e8:	e689      	b.n	8006efe <_printf_float+0xbe>
 80071ea:	9a05      	ldr	r2, [sp, #20]
 80071ec:	464b      	mov	r3, r9
 80071ee:	4442      	add	r2, r8
 80071f0:	4631      	mov	r1, r6
 80071f2:	4628      	mov	r0, r5
 80071f4:	47b8      	blx	r7
 80071f6:	3001      	adds	r0, #1
 80071f8:	d1c1      	bne.n	800717e <_printf_float+0x33e>
 80071fa:	e680      	b.n	8006efe <_printf_float+0xbe>
 80071fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071fe:	2a01      	cmp	r2, #1
 8007200:	dc01      	bgt.n	8007206 <_printf_float+0x3c6>
 8007202:	07db      	lsls	r3, r3, #31
 8007204:	d53a      	bpl.n	800727c <_printf_float+0x43c>
 8007206:	2301      	movs	r3, #1
 8007208:	4642      	mov	r2, r8
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f ae74 	beq.w	8006efe <_printf_float+0xbe>
 8007216:	ee18 3a10 	vmov	r3, s16
 800721a:	4652      	mov	r2, sl
 800721c:	4631      	mov	r1, r6
 800721e:	4628      	mov	r0, r5
 8007220:	47b8      	blx	r7
 8007222:	3001      	adds	r0, #1
 8007224:	f43f ae6b 	beq.w	8006efe <_printf_float+0xbe>
 8007228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800722c:	2200      	movs	r2, #0
 800722e:	2300      	movs	r3, #0
 8007230:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007234:	f7f9 fc68 	bl	8000b08 <__aeabi_dcmpeq>
 8007238:	b9d8      	cbnz	r0, 8007272 <_printf_float+0x432>
 800723a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800723e:	f108 0201 	add.w	r2, r8, #1
 8007242:	4631      	mov	r1, r6
 8007244:	4628      	mov	r0, r5
 8007246:	47b8      	blx	r7
 8007248:	3001      	adds	r0, #1
 800724a:	d10e      	bne.n	800726a <_printf_float+0x42a>
 800724c:	e657      	b.n	8006efe <_printf_float+0xbe>
 800724e:	2301      	movs	r3, #1
 8007250:	4652      	mov	r2, sl
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	47b8      	blx	r7
 8007258:	3001      	adds	r0, #1
 800725a:	f43f ae50 	beq.w	8006efe <_printf_float+0xbe>
 800725e:	f108 0801 	add.w	r8, r8, #1
 8007262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007264:	3b01      	subs	r3, #1
 8007266:	4543      	cmp	r3, r8
 8007268:	dcf1      	bgt.n	800724e <_printf_float+0x40e>
 800726a:	464b      	mov	r3, r9
 800726c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007270:	e6da      	b.n	8007028 <_printf_float+0x1e8>
 8007272:	f04f 0800 	mov.w	r8, #0
 8007276:	f104 0a1a 	add.w	sl, r4, #26
 800727a:	e7f2      	b.n	8007262 <_printf_float+0x422>
 800727c:	2301      	movs	r3, #1
 800727e:	4642      	mov	r2, r8
 8007280:	e7df      	b.n	8007242 <_printf_float+0x402>
 8007282:	2301      	movs	r3, #1
 8007284:	464a      	mov	r2, r9
 8007286:	4631      	mov	r1, r6
 8007288:	4628      	mov	r0, r5
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	f43f ae36 	beq.w	8006efe <_printf_float+0xbe>
 8007292:	f108 0801 	add.w	r8, r8, #1
 8007296:	68e3      	ldr	r3, [r4, #12]
 8007298:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800729a:	1a5b      	subs	r3, r3, r1
 800729c:	4543      	cmp	r3, r8
 800729e:	dcf0      	bgt.n	8007282 <_printf_float+0x442>
 80072a0:	e6f8      	b.n	8007094 <_printf_float+0x254>
 80072a2:	f04f 0800 	mov.w	r8, #0
 80072a6:	f104 0919 	add.w	r9, r4, #25
 80072aa:	e7f4      	b.n	8007296 <_printf_float+0x456>

080072ac <_printf_common>:
 80072ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b0:	4616      	mov	r6, r2
 80072b2:	4699      	mov	r9, r3
 80072b4:	688a      	ldr	r2, [r1, #8]
 80072b6:	690b      	ldr	r3, [r1, #16]
 80072b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072bc:	4293      	cmp	r3, r2
 80072be:	bfb8      	it	lt
 80072c0:	4613      	movlt	r3, r2
 80072c2:	6033      	str	r3, [r6, #0]
 80072c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072c8:	4607      	mov	r7, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	b10a      	cbz	r2, 80072d2 <_printf_common+0x26>
 80072ce:	3301      	adds	r3, #1
 80072d0:	6033      	str	r3, [r6, #0]
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	0699      	lsls	r1, r3, #26
 80072d6:	bf42      	ittt	mi
 80072d8:	6833      	ldrmi	r3, [r6, #0]
 80072da:	3302      	addmi	r3, #2
 80072dc:	6033      	strmi	r3, [r6, #0]
 80072de:	6825      	ldr	r5, [r4, #0]
 80072e0:	f015 0506 	ands.w	r5, r5, #6
 80072e4:	d106      	bne.n	80072f4 <_printf_common+0x48>
 80072e6:	f104 0a19 	add.w	sl, r4, #25
 80072ea:	68e3      	ldr	r3, [r4, #12]
 80072ec:	6832      	ldr	r2, [r6, #0]
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	42ab      	cmp	r3, r5
 80072f2:	dc26      	bgt.n	8007342 <_printf_common+0x96>
 80072f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072f8:	1e13      	subs	r3, r2, #0
 80072fa:	6822      	ldr	r2, [r4, #0]
 80072fc:	bf18      	it	ne
 80072fe:	2301      	movne	r3, #1
 8007300:	0692      	lsls	r2, r2, #26
 8007302:	d42b      	bmi.n	800735c <_printf_common+0xb0>
 8007304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007308:	4649      	mov	r1, r9
 800730a:	4638      	mov	r0, r7
 800730c:	47c0      	blx	r8
 800730e:	3001      	adds	r0, #1
 8007310:	d01e      	beq.n	8007350 <_printf_common+0xa4>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	6922      	ldr	r2, [r4, #16]
 8007316:	f003 0306 	and.w	r3, r3, #6
 800731a:	2b04      	cmp	r3, #4
 800731c:	bf02      	ittt	eq
 800731e:	68e5      	ldreq	r5, [r4, #12]
 8007320:	6833      	ldreq	r3, [r6, #0]
 8007322:	1aed      	subeq	r5, r5, r3
 8007324:	68a3      	ldr	r3, [r4, #8]
 8007326:	bf0c      	ite	eq
 8007328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800732c:	2500      	movne	r5, #0
 800732e:	4293      	cmp	r3, r2
 8007330:	bfc4      	itt	gt
 8007332:	1a9b      	subgt	r3, r3, r2
 8007334:	18ed      	addgt	r5, r5, r3
 8007336:	2600      	movs	r6, #0
 8007338:	341a      	adds	r4, #26
 800733a:	42b5      	cmp	r5, r6
 800733c:	d11a      	bne.n	8007374 <_printf_common+0xc8>
 800733e:	2000      	movs	r0, #0
 8007340:	e008      	b.n	8007354 <_printf_common+0xa8>
 8007342:	2301      	movs	r3, #1
 8007344:	4652      	mov	r2, sl
 8007346:	4649      	mov	r1, r9
 8007348:	4638      	mov	r0, r7
 800734a:	47c0      	blx	r8
 800734c:	3001      	adds	r0, #1
 800734e:	d103      	bne.n	8007358 <_printf_common+0xac>
 8007350:	f04f 30ff 	mov.w	r0, #4294967295
 8007354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007358:	3501      	adds	r5, #1
 800735a:	e7c6      	b.n	80072ea <_printf_common+0x3e>
 800735c:	18e1      	adds	r1, r4, r3
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	2030      	movs	r0, #48	; 0x30
 8007362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007366:	4422      	add	r2, r4
 8007368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800736c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007370:	3302      	adds	r3, #2
 8007372:	e7c7      	b.n	8007304 <_printf_common+0x58>
 8007374:	2301      	movs	r3, #1
 8007376:	4622      	mov	r2, r4
 8007378:	4649      	mov	r1, r9
 800737a:	4638      	mov	r0, r7
 800737c:	47c0      	blx	r8
 800737e:	3001      	adds	r0, #1
 8007380:	d0e6      	beq.n	8007350 <_printf_common+0xa4>
 8007382:	3601      	adds	r6, #1
 8007384:	e7d9      	b.n	800733a <_printf_common+0x8e>
	...

08007388 <_printf_i>:
 8007388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800738c:	7e0f      	ldrb	r7, [r1, #24]
 800738e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007390:	2f78      	cmp	r7, #120	; 0x78
 8007392:	4691      	mov	r9, r2
 8007394:	4680      	mov	r8, r0
 8007396:	460c      	mov	r4, r1
 8007398:	469a      	mov	sl, r3
 800739a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800739e:	d807      	bhi.n	80073b0 <_printf_i+0x28>
 80073a0:	2f62      	cmp	r7, #98	; 0x62
 80073a2:	d80a      	bhi.n	80073ba <_printf_i+0x32>
 80073a4:	2f00      	cmp	r7, #0
 80073a6:	f000 80d4 	beq.w	8007552 <_printf_i+0x1ca>
 80073aa:	2f58      	cmp	r7, #88	; 0x58
 80073ac:	f000 80c0 	beq.w	8007530 <_printf_i+0x1a8>
 80073b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073b8:	e03a      	b.n	8007430 <_printf_i+0xa8>
 80073ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073be:	2b15      	cmp	r3, #21
 80073c0:	d8f6      	bhi.n	80073b0 <_printf_i+0x28>
 80073c2:	a101      	add	r1, pc, #4	; (adr r1, 80073c8 <_printf_i+0x40>)
 80073c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073c8:	08007421 	.word	0x08007421
 80073cc:	08007435 	.word	0x08007435
 80073d0:	080073b1 	.word	0x080073b1
 80073d4:	080073b1 	.word	0x080073b1
 80073d8:	080073b1 	.word	0x080073b1
 80073dc:	080073b1 	.word	0x080073b1
 80073e0:	08007435 	.word	0x08007435
 80073e4:	080073b1 	.word	0x080073b1
 80073e8:	080073b1 	.word	0x080073b1
 80073ec:	080073b1 	.word	0x080073b1
 80073f0:	080073b1 	.word	0x080073b1
 80073f4:	08007539 	.word	0x08007539
 80073f8:	08007461 	.word	0x08007461
 80073fc:	080074f3 	.word	0x080074f3
 8007400:	080073b1 	.word	0x080073b1
 8007404:	080073b1 	.word	0x080073b1
 8007408:	0800755b 	.word	0x0800755b
 800740c:	080073b1 	.word	0x080073b1
 8007410:	08007461 	.word	0x08007461
 8007414:	080073b1 	.word	0x080073b1
 8007418:	080073b1 	.word	0x080073b1
 800741c:	080074fb 	.word	0x080074fb
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	1d1a      	adds	r2, r3, #4
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	602a      	str	r2, [r5, #0]
 8007428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800742c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007430:	2301      	movs	r3, #1
 8007432:	e09f      	b.n	8007574 <_printf_i+0x1ec>
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	682b      	ldr	r3, [r5, #0]
 8007438:	0607      	lsls	r7, r0, #24
 800743a:	f103 0104 	add.w	r1, r3, #4
 800743e:	6029      	str	r1, [r5, #0]
 8007440:	d501      	bpl.n	8007446 <_printf_i+0xbe>
 8007442:	681e      	ldr	r6, [r3, #0]
 8007444:	e003      	b.n	800744e <_printf_i+0xc6>
 8007446:	0646      	lsls	r6, r0, #25
 8007448:	d5fb      	bpl.n	8007442 <_printf_i+0xba>
 800744a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800744e:	2e00      	cmp	r6, #0
 8007450:	da03      	bge.n	800745a <_printf_i+0xd2>
 8007452:	232d      	movs	r3, #45	; 0x2d
 8007454:	4276      	negs	r6, r6
 8007456:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800745a:	485a      	ldr	r0, [pc, #360]	; (80075c4 <_printf_i+0x23c>)
 800745c:	230a      	movs	r3, #10
 800745e:	e012      	b.n	8007486 <_printf_i+0xfe>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	6820      	ldr	r0, [r4, #0]
 8007464:	1d19      	adds	r1, r3, #4
 8007466:	6029      	str	r1, [r5, #0]
 8007468:	0605      	lsls	r5, r0, #24
 800746a:	d501      	bpl.n	8007470 <_printf_i+0xe8>
 800746c:	681e      	ldr	r6, [r3, #0]
 800746e:	e002      	b.n	8007476 <_printf_i+0xee>
 8007470:	0641      	lsls	r1, r0, #25
 8007472:	d5fb      	bpl.n	800746c <_printf_i+0xe4>
 8007474:	881e      	ldrh	r6, [r3, #0]
 8007476:	4853      	ldr	r0, [pc, #332]	; (80075c4 <_printf_i+0x23c>)
 8007478:	2f6f      	cmp	r7, #111	; 0x6f
 800747a:	bf0c      	ite	eq
 800747c:	2308      	moveq	r3, #8
 800747e:	230a      	movne	r3, #10
 8007480:	2100      	movs	r1, #0
 8007482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007486:	6865      	ldr	r5, [r4, #4]
 8007488:	60a5      	str	r5, [r4, #8]
 800748a:	2d00      	cmp	r5, #0
 800748c:	bfa2      	ittt	ge
 800748e:	6821      	ldrge	r1, [r4, #0]
 8007490:	f021 0104 	bicge.w	r1, r1, #4
 8007494:	6021      	strge	r1, [r4, #0]
 8007496:	b90e      	cbnz	r6, 800749c <_printf_i+0x114>
 8007498:	2d00      	cmp	r5, #0
 800749a:	d04b      	beq.n	8007534 <_printf_i+0x1ac>
 800749c:	4615      	mov	r5, r2
 800749e:	fbb6 f1f3 	udiv	r1, r6, r3
 80074a2:	fb03 6711 	mls	r7, r3, r1, r6
 80074a6:	5dc7      	ldrb	r7, [r0, r7]
 80074a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074ac:	4637      	mov	r7, r6
 80074ae:	42bb      	cmp	r3, r7
 80074b0:	460e      	mov	r6, r1
 80074b2:	d9f4      	bls.n	800749e <_printf_i+0x116>
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d10b      	bne.n	80074d0 <_printf_i+0x148>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	07de      	lsls	r6, r3, #31
 80074bc:	d508      	bpl.n	80074d0 <_printf_i+0x148>
 80074be:	6923      	ldr	r3, [r4, #16]
 80074c0:	6861      	ldr	r1, [r4, #4]
 80074c2:	4299      	cmp	r1, r3
 80074c4:	bfde      	ittt	le
 80074c6:	2330      	movle	r3, #48	; 0x30
 80074c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074d0:	1b52      	subs	r2, r2, r5
 80074d2:	6122      	str	r2, [r4, #16]
 80074d4:	f8cd a000 	str.w	sl, [sp]
 80074d8:	464b      	mov	r3, r9
 80074da:	aa03      	add	r2, sp, #12
 80074dc:	4621      	mov	r1, r4
 80074de:	4640      	mov	r0, r8
 80074e0:	f7ff fee4 	bl	80072ac <_printf_common>
 80074e4:	3001      	adds	r0, #1
 80074e6:	d14a      	bne.n	800757e <_printf_i+0x1f6>
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	b004      	add	sp, #16
 80074ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	f043 0320 	orr.w	r3, r3, #32
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	4833      	ldr	r0, [pc, #204]	; (80075c8 <_printf_i+0x240>)
 80074fc:	2778      	movs	r7, #120	; 0x78
 80074fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	6829      	ldr	r1, [r5, #0]
 8007506:	061f      	lsls	r7, r3, #24
 8007508:	f851 6b04 	ldr.w	r6, [r1], #4
 800750c:	d402      	bmi.n	8007514 <_printf_i+0x18c>
 800750e:	065f      	lsls	r7, r3, #25
 8007510:	bf48      	it	mi
 8007512:	b2b6      	uxthmi	r6, r6
 8007514:	07df      	lsls	r7, r3, #31
 8007516:	bf48      	it	mi
 8007518:	f043 0320 	orrmi.w	r3, r3, #32
 800751c:	6029      	str	r1, [r5, #0]
 800751e:	bf48      	it	mi
 8007520:	6023      	strmi	r3, [r4, #0]
 8007522:	b91e      	cbnz	r6, 800752c <_printf_i+0x1a4>
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	f023 0320 	bic.w	r3, r3, #32
 800752a:	6023      	str	r3, [r4, #0]
 800752c:	2310      	movs	r3, #16
 800752e:	e7a7      	b.n	8007480 <_printf_i+0xf8>
 8007530:	4824      	ldr	r0, [pc, #144]	; (80075c4 <_printf_i+0x23c>)
 8007532:	e7e4      	b.n	80074fe <_printf_i+0x176>
 8007534:	4615      	mov	r5, r2
 8007536:	e7bd      	b.n	80074b4 <_printf_i+0x12c>
 8007538:	682b      	ldr	r3, [r5, #0]
 800753a:	6826      	ldr	r6, [r4, #0]
 800753c:	6961      	ldr	r1, [r4, #20]
 800753e:	1d18      	adds	r0, r3, #4
 8007540:	6028      	str	r0, [r5, #0]
 8007542:	0635      	lsls	r5, r6, #24
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	d501      	bpl.n	800754c <_printf_i+0x1c4>
 8007548:	6019      	str	r1, [r3, #0]
 800754a:	e002      	b.n	8007552 <_printf_i+0x1ca>
 800754c:	0670      	lsls	r0, r6, #25
 800754e:	d5fb      	bpl.n	8007548 <_printf_i+0x1c0>
 8007550:	8019      	strh	r1, [r3, #0]
 8007552:	2300      	movs	r3, #0
 8007554:	6123      	str	r3, [r4, #16]
 8007556:	4615      	mov	r5, r2
 8007558:	e7bc      	b.n	80074d4 <_printf_i+0x14c>
 800755a:	682b      	ldr	r3, [r5, #0]
 800755c:	1d1a      	adds	r2, r3, #4
 800755e:	602a      	str	r2, [r5, #0]
 8007560:	681d      	ldr	r5, [r3, #0]
 8007562:	6862      	ldr	r2, [r4, #4]
 8007564:	2100      	movs	r1, #0
 8007566:	4628      	mov	r0, r5
 8007568:	f7f8 fe52 	bl	8000210 <memchr>
 800756c:	b108      	cbz	r0, 8007572 <_printf_i+0x1ea>
 800756e:	1b40      	subs	r0, r0, r5
 8007570:	6060      	str	r0, [r4, #4]
 8007572:	6863      	ldr	r3, [r4, #4]
 8007574:	6123      	str	r3, [r4, #16]
 8007576:	2300      	movs	r3, #0
 8007578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800757c:	e7aa      	b.n	80074d4 <_printf_i+0x14c>
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	462a      	mov	r2, r5
 8007582:	4649      	mov	r1, r9
 8007584:	4640      	mov	r0, r8
 8007586:	47d0      	blx	sl
 8007588:	3001      	adds	r0, #1
 800758a:	d0ad      	beq.n	80074e8 <_printf_i+0x160>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	079b      	lsls	r3, r3, #30
 8007590:	d413      	bmi.n	80075ba <_printf_i+0x232>
 8007592:	68e0      	ldr	r0, [r4, #12]
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	4298      	cmp	r0, r3
 8007598:	bfb8      	it	lt
 800759a:	4618      	movlt	r0, r3
 800759c:	e7a6      	b.n	80074ec <_printf_i+0x164>
 800759e:	2301      	movs	r3, #1
 80075a0:	4632      	mov	r2, r6
 80075a2:	4649      	mov	r1, r9
 80075a4:	4640      	mov	r0, r8
 80075a6:	47d0      	blx	sl
 80075a8:	3001      	adds	r0, #1
 80075aa:	d09d      	beq.n	80074e8 <_printf_i+0x160>
 80075ac:	3501      	adds	r5, #1
 80075ae:	68e3      	ldr	r3, [r4, #12]
 80075b0:	9903      	ldr	r1, [sp, #12]
 80075b2:	1a5b      	subs	r3, r3, r1
 80075b4:	42ab      	cmp	r3, r5
 80075b6:	dcf2      	bgt.n	800759e <_printf_i+0x216>
 80075b8:	e7eb      	b.n	8007592 <_printf_i+0x20a>
 80075ba:	2500      	movs	r5, #0
 80075bc:	f104 0619 	add.w	r6, r4, #25
 80075c0:	e7f5      	b.n	80075ae <_printf_i+0x226>
 80075c2:	bf00      	nop
 80075c4:	0800b57a 	.word	0x0800b57a
 80075c8:	0800b58b 	.word	0x0800b58b

080075cc <_scanf_float>:
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	b087      	sub	sp, #28
 80075d2:	4617      	mov	r7, r2
 80075d4:	9303      	str	r3, [sp, #12]
 80075d6:	688b      	ldr	r3, [r1, #8]
 80075d8:	1e5a      	subs	r2, r3, #1
 80075da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80075de:	bf83      	ittte	hi
 80075e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80075e4:	195b      	addhi	r3, r3, r5
 80075e6:	9302      	strhi	r3, [sp, #8]
 80075e8:	2300      	movls	r3, #0
 80075ea:	bf86      	itte	hi
 80075ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80075f0:	608b      	strhi	r3, [r1, #8]
 80075f2:	9302      	strls	r3, [sp, #8]
 80075f4:	680b      	ldr	r3, [r1, #0]
 80075f6:	468b      	mov	fp, r1
 80075f8:	2500      	movs	r5, #0
 80075fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80075fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8007602:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007606:	4680      	mov	r8, r0
 8007608:	460c      	mov	r4, r1
 800760a:	465e      	mov	r6, fp
 800760c:	46aa      	mov	sl, r5
 800760e:	46a9      	mov	r9, r5
 8007610:	9501      	str	r5, [sp, #4]
 8007612:	68a2      	ldr	r2, [r4, #8]
 8007614:	b152      	cbz	r2, 800762c <_scanf_float+0x60>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b4e      	cmp	r3, #78	; 0x4e
 800761c:	d864      	bhi.n	80076e8 <_scanf_float+0x11c>
 800761e:	2b40      	cmp	r3, #64	; 0x40
 8007620:	d83c      	bhi.n	800769c <_scanf_float+0xd0>
 8007622:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007626:	b2c8      	uxtb	r0, r1
 8007628:	280e      	cmp	r0, #14
 800762a:	d93a      	bls.n	80076a2 <_scanf_float+0xd6>
 800762c:	f1b9 0f00 	cmp.w	r9, #0
 8007630:	d003      	beq.n	800763a <_scanf_float+0x6e>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800763e:	f1ba 0f01 	cmp.w	sl, #1
 8007642:	f200 8113 	bhi.w	800786c <_scanf_float+0x2a0>
 8007646:	455e      	cmp	r6, fp
 8007648:	f200 8105 	bhi.w	8007856 <_scanf_float+0x28a>
 800764c:	2501      	movs	r5, #1
 800764e:	4628      	mov	r0, r5
 8007650:	b007      	add	sp, #28
 8007652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800765a:	2a0d      	cmp	r2, #13
 800765c:	d8e6      	bhi.n	800762c <_scanf_float+0x60>
 800765e:	a101      	add	r1, pc, #4	; (adr r1, 8007664 <_scanf_float+0x98>)
 8007660:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007664:	080077a3 	.word	0x080077a3
 8007668:	0800762d 	.word	0x0800762d
 800766c:	0800762d 	.word	0x0800762d
 8007670:	0800762d 	.word	0x0800762d
 8007674:	08007803 	.word	0x08007803
 8007678:	080077db 	.word	0x080077db
 800767c:	0800762d 	.word	0x0800762d
 8007680:	0800762d 	.word	0x0800762d
 8007684:	080077b1 	.word	0x080077b1
 8007688:	0800762d 	.word	0x0800762d
 800768c:	0800762d 	.word	0x0800762d
 8007690:	0800762d 	.word	0x0800762d
 8007694:	0800762d 	.word	0x0800762d
 8007698:	08007769 	.word	0x08007769
 800769c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80076a0:	e7db      	b.n	800765a <_scanf_float+0x8e>
 80076a2:	290e      	cmp	r1, #14
 80076a4:	d8c2      	bhi.n	800762c <_scanf_float+0x60>
 80076a6:	a001      	add	r0, pc, #4	; (adr r0, 80076ac <_scanf_float+0xe0>)
 80076a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80076ac:	0800775b 	.word	0x0800775b
 80076b0:	0800762d 	.word	0x0800762d
 80076b4:	0800775b 	.word	0x0800775b
 80076b8:	080077ef 	.word	0x080077ef
 80076bc:	0800762d 	.word	0x0800762d
 80076c0:	08007709 	.word	0x08007709
 80076c4:	08007745 	.word	0x08007745
 80076c8:	08007745 	.word	0x08007745
 80076cc:	08007745 	.word	0x08007745
 80076d0:	08007745 	.word	0x08007745
 80076d4:	08007745 	.word	0x08007745
 80076d8:	08007745 	.word	0x08007745
 80076dc:	08007745 	.word	0x08007745
 80076e0:	08007745 	.word	0x08007745
 80076e4:	08007745 	.word	0x08007745
 80076e8:	2b6e      	cmp	r3, #110	; 0x6e
 80076ea:	d809      	bhi.n	8007700 <_scanf_float+0x134>
 80076ec:	2b60      	cmp	r3, #96	; 0x60
 80076ee:	d8b2      	bhi.n	8007656 <_scanf_float+0x8a>
 80076f0:	2b54      	cmp	r3, #84	; 0x54
 80076f2:	d077      	beq.n	80077e4 <_scanf_float+0x218>
 80076f4:	2b59      	cmp	r3, #89	; 0x59
 80076f6:	d199      	bne.n	800762c <_scanf_float+0x60>
 80076f8:	2d07      	cmp	r5, #7
 80076fa:	d197      	bne.n	800762c <_scanf_float+0x60>
 80076fc:	2508      	movs	r5, #8
 80076fe:	e029      	b.n	8007754 <_scanf_float+0x188>
 8007700:	2b74      	cmp	r3, #116	; 0x74
 8007702:	d06f      	beq.n	80077e4 <_scanf_float+0x218>
 8007704:	2b79      	cmp	r3, #121	; 0x79
 8007706:	e7f6      	b.n	80076f6 <_scanf_float+0x12a>
 8007708:	6821      	ldr	r1, [r4, #0]
 800770a:	05c8      	lsls	r0, r1, #23
 800770c:	d51a      	bpl.n	8007744 <_scanf_float+0x178>
 800770e:	9b02      	ldr	r3, [sp, #8]
 8007710:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007714:	6021      	str	r1, [r4, #0]
 8007716:	f109 0901 	add.w	r9, r9, #1
 800771a:	b11b      	cbz	r3, 8007724 <_scanf_float+0x158>
 800771c:	3b01      	subs	r3, #1
 800771e:	3201      	adds	r2, #1
 8007720:	9302      	str	r3, [sp, #8]
 8007722:	60a2      	str	r2, [r4, #8]
 8007724:	68a3      	ldr	r3, [r4, #8]
 8007726:	3b01      	subs	r3, #1
 8007728:	60a3      	str	r3, [r4, #8]
 800772a:	6923      	ldr	r3, [r4, #16]
 800772c:	3301      	adds	r3, #1
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3b01      	subs	r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	607b      	str	r3, [r7, #4]
 8007738:	f340 8084 	ble.w	8007844 <_scanf_float+0x278>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	3301      	adds	r3, #1
 8007740:	603b      	str	r3, [r7, #0]
 8007742:	e766      	b.n	8007612 <_scanf_float+0x46>
 8007744:	eb1a 0f05 	cmn.w	sl, r5
 8007748:	f47f af70 	bne.w	800762c <_scanf_float+0x60>
 800774c:	6822      	ldr	r2, [r4, #0]
 800774e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007752:	6022      	str	r2, [r4, #0]
 8007754:	f806 3b01 	strb.w	r3, [r6], #1
 8007758:	e7e4      	b.n	8007724 <_scanf_float+0x158>
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	0610      	lsls	r0, r2, #24
 800775e:	f57f af65 	bpl.w	800762c <_scanf_float+0x60>
 8007762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007766:	e7f4      	b.n	8007752 <_scanf_float+0x186>
 8007768:	f1ba 0f00 	cmp.w	sl, #0
 800776c:	d10e      	bne.n	800778c <_scanf_float+0x1c0>
 800776e:	f1b9 0f00 	cmp.w	r9, #0
 8007772:	d10e      	bne.n	8007792 <_scanf_float+0x1c6>
 8007774:	6822      	ldr	r2, [r4, #0]
 8007776:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800777a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800777e:	d108      	bne.n	8007792 <_scanf_float+0x1c6>
 8007780:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	f04f 0a01 	mov.w	sl, #1
 800778a:	e7e3      	b.n	8007754 <_scanf_float+0x188>
 800778c:	f1ba 0f02 	cmp.w	sl, #2
 8007790:	d055      	beq.n	800783e <_scanf_float+0x272>
 8007792:	2d01      	cmp	r5, #1
 8007794:	d002      	beq.n	800779c <_scanf_float+0x1d0>
 8007796:	2d04      	cmp	r5, #4
 8007798:	f47f af48 	bne.w	800762c <_scanf_float+0x60>
 800779c:	3501      	adds	r5, #1
 800779e:	b2ed      	uxtb	r5, r5
 80077a0:	e7d8      	b.n	8007754 <_scanf_float+0x188>
 80077a2:	f1ba 0f01 	cmp.w	sl, #1
 80077a6:	f47f af41 	bne.w	800762c <_scanf_float+0x60>
 80077aa:	f04f 0a02 	mov.w	sl, #2
 80077ae:	e7d1      	b.n	8007754 <_scanf_float+0x188>
 80077b0:	b97d      	cbnz	r5, 80077d2 <_scanf_float+0x206>
 80077b2:	f1b9 0f00 	cmp.w	r9, #0
 80077b6:	f47f af3c 	bne.w	8007632 <_scanf_float+0x66>
 80077ba:	6822      	ldr	r2, [r4, #0]
 80077bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077c4:	f47f af39 	bne.w	800763a <_scanf_float+0x6e>
 80077c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077cc:	6022      	str	r2, [r4, #0]
 80077ce:	2501      	movs	r5, #1
 80077d0:	e7c0      	b.n	8007754 <_scanf_float+0x188>
 80077d2:	2d03      	cmp	r5, #3
 80077d4:	d0e2      	beq.n	800779c <_scanf_float+0x1d0>
 80077d6:	2d05      	cmp	r5, #5
 80077d8:	e7de      	b.n	8007798 <_scanf_float+0x1cc>
 80077da:	2d02      	cmp	r5, #2
 80077dc:	f47f af26 	bne.w	800762c <_scanf_float+0x60>
 80077e0:	2503      	movs	r5, #3
 80077e2:	e7b7      	b.n	8007754 <_scanf_float+0x188>
 80077e4:	2d06      	cmp	r5, #6
 80077e6:	f47f af21 	bne.w	800762c <_scanf_float+0x60>
 80077ea:	2507      	movs	r5, #7
 80077ec:	e7b2      	b.n	8007754 <_scanf_float+0x188>
 80077ee:	6822      	ldr	r2, [r4, #0]
 80077f0:	0591      	lsls	r1, r2, #22
 80077f2:	f57f af1b 	bpl.w	800762c <_scanf_float+0x60>
 80077f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80077fa:	6022      	str	r2, [r4, #0]
 80077fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007800:	e7a8      	b.n	8007754 <_scanf_float+0x188>
 8007802:	6822      	ldr	r2, [r4, #0]
 8007804:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007808:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800780c:	d006      	beq.n	800781c <_scanf_float+0x250>
 800780e:	0550      	lsls	r0, r2, #21
 8007810:	f57f af0c 	bpl.w	800762c <_scanf_float+0x60>
 8007814:	f1b9 0f00 	cmp.w	r9, #0
 8007818:	f43f af0f 	beq.w	800763a <_scanf_float+0x6e>
 800781c:	0591      	lsls	r1, r2, #22
 800781e:	bf58      	it	pl
 8007820:	9901      	ldrpl	r1, [sp, #4]
 8007822:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007826:	bf58      	it	pl
 8007828:	eba9 0101 	subpl.w	r1, r9, r1
 800782c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007830:	bf58      	it	pl
 8007832:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007836:	6022      	str	r2, [r4, #0]
 8007838:	f04f 0900 	mov.w	r9, #0
 800783c:	e78a      	b.n	8007754 <_scanf_float+0x188>
 800783e:	f04f 0a03 	mov.w	sl, #3
 8007842:	e787      	b.n	8007754 <_scanf_float+0x188>
 8007844:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007848:	4639      	mov	r1, r7
 800784a:	4640      	mov	r0, r8
 800784c:	4798      	blx	r3
 800784e:	2800      	cmp	r0, #0
 8007850:	f43f aedf 	beq.w	8007612 <_scanf_float+0x46>
 8007854:	e6ea      	b.n	800762c <_scanf_float+0x60>
 8007856:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800785a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800785e:	463a      	mov	r2, r7
 8007860:	4640      	mov	r0, r8
 8007862:	4798      	blx	r3
 8007864:	6923      	ldr	r3, [r4, #16]
 8007866:	3b01      	subs	r3, #1
 8007868:	6123      	str	r3, [r4, #16]
 800786a:	e6ec      	b.n	8007646 <_scanf_float+0x7a>
 800786c:	1e6b      	subs	r3, r5, #1
 800786e:	2b06      	cmp	r3, #6
 8007870:	d825      	bhi.n	80078be <_scanf_float+0x2f2>
 8007872:	2d02      	cmp	r5, #2
 8007874:	d836      	bhi.n	80078e4 <_scanf_float+0x318>
 8007876:	455e      	cmp	r6, fp
 8007878:	f67f aee8 	bls.w	800764c <_scanf_float+0x80>
 800787c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007880:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007884:	463a      	mov	r2, r7
 8007886:	4640      	mov	r0, r8
 8007888:	4798      	blx	r3
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	3b01      	subs	r3, #1
 800788e:	6123      	str	r3, [r4, #16]
 8007890:	e7f1      	b.n	8007876 <_scanf_float+0x2aa>
 8007892:	9802      	ldr	r0, [sp, #8]
 8007894:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007898:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800789c:	9002      	str	r0, [sp, #8]
 800789e:	463a      	mov	r2, r7
 80078a0:	4640      	mov	r0, r8
 80078a2:	4798      	blx	r3
 80078a4:	6923      	ldr	r3, [r4, #16]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	6123      	str	r3, [r4, #16]
 80078aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078ae:	fa5f fa8a 	uxtb.w	sl, sl
 80078b2:	f1ba 0f02 	cmp.w	sl, #2
 80078b6:	d1ec      	bne.n	8007892 <_scanf_float+0x2c6>
 80078b8:	3d03      	subs	r5, #3
 80078ba:	b2ed      	uxtb	r5, r5
 80078bc:	1b76      	subs	r6, r6, r5
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	05da      	lsls	r2, r3, #23
 80078c2:	d52f      	bpl.n	8007924 <_scanf_float+0x358>
 80078c4:	055b      	lsls	r3, r3, #21
 80078c6:	d510      	bpl.n	80078ea <_scanf_float+0x31e>
 80078c8:	455e      	cmp	r6, fp
 80078ca:	f67f aebf 	bls.w	800764c <_scanf_float+0x80>
 80078ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078d6:	463a      	mov	r2, r7
 80078d8:	4640      	mov	r0, r8
 80078da:	4798      	blx	r3
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	3b01      	subs	r3, #1
 80078e0:	6123      	str	r3, [r4, #16]
 80078e2:	e7f1      	b.n	80078c8 <_scanf_float+0x2fc>
 80078e4:	46aa      	mov	sl, r5
 80078e6:	9602      	str	r6, [sp, #8]
 80078e8:	e7df      	b.n	80078aa <_scanf_float+0x2de>
 80078ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80078ee:	6923      	ldr	r3, [r4, #16]
 80078f0:	2965      	cmp	r1, #101	; 0x65
 80078f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80078f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80078fa:	6123      	str	r3, [r4, #16]
 80078fc:	d00c      	beq.n	8007918 <_scanf_float+0x34c>
 80078fe:	2945      	cmp	r1, #69	; 0x45
 8007900:	d00a      	beq.n	8007918 <_scanf_float+0x34c>
 8007902:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007906:	463a      	mov	r2, r7
 8007908:	4640      	mov	r0, r8
 800790a:	4798      	blx	r3
 800790c:	6923      	ldr	r3, [r4, #16]
 800790e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007912:	3b01      	subs	r3, #1
 8007914:	1eb5      	subs	r5, r6, #2
 8007916:	6123      	str	r3, [r4, #16]
 8007918:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800791c:	463a      	mov	r2, r7
 800791e:	4640      	mov	r0, r8
 8007920:	4798      	blx	r3
 8007922:	462e      	mov	r6, r5
 8007924:	6825      	ldr	r5, [r4, #0]
 8007926:	f015 0510 	ands.w	r5, r5, #16
 800792a:	d158      	bne.n	80079de <_scanf_float+0x412>
 800792c:	7035      	strb	r5, [r6, #0]
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007938:	d11c      	bne.n	8007974 <_scanf_float+0x3a8>
 800793a:	9b01      	ldr	r3, [sp, #4]
 800793c:	454b      	cmp	r3, r9
 800793e:	eba3 0209 	sub.w	r2, r3, r9
 8007942:	d124      	bne.n	800798e <_scanf_float+0x3c2>
 8007944:	2200      	movs	r2, #0
 8007946:	4659      	mov	r1, fp
 8007948:	4640      	mov	r0, r8
 800794a:	f002 fc31 	bl	800a1b0 <_strtod_r>
 800794e:	9b03      	ldr	r3, [sp, #12]
 8007950:	6821      	ldr	r1, [r4, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f011 0f02 	tst.w	r1, #2
 8007958:	ec57 6b10 	vmov	r6, r7, d0
 800795c:	f103 0204 	add.w	r2, r3, #4
 8007960:	d020      	beq.n	80079a4 <_scanf_float+0x3d8>
 8007962:	9903      	ldr	r1, [sp, #12]
 8007964:	600a      	str	r2, [r1, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	e9c3 6700 	strd	r6, r7, [r3]
 800796c:	68e3      	ldr	r3, [r4, #12]
 800796e:	3301      	adds	r3, #1
 8007970:	60e3      	str	r3, [r4, #12]
 8007972:	e66c      	b.n	800764e <_scanf_float+0x82>
 8007974:	9b04      	ldr	r3, [sp, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0e4      	beq.n	8007944 <_scanf_float+0x378>
 800797a:	9905      	ldr	r1, [sp, #20]
 800797c:	230a      	movs	r3, #10
 800797e:	462a      	mov	r2, r5
 8007980:	3101      	adds	r1, #1
 8007982:	4640      	mov	r0, r8
 8007984:	f002 fc9c 	bl	800a2c0 <_strtol_r>
 8007988:	9b04      	ldr	r3, [sp, #16]
 800798a:	9e05      	ldr	r6, [sp, #20]
 800798c:	1ac2      	subs	r2, r0, r3
 800798e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007992:	429e      	cmp	r6, r3
 8007994:	bf28      	it	cs
 8007996:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800799a:	4912      	ldr	r1, [pc, #72]	; (80079e4 <_scanf_float+0x418>)
 800799c:	4630      	mov	r0, r6
 800799e:	f000 f8e7 	bl	8007b70 <siprintf>
 80079a2:	e7cf      	b.n	8007944 <_scanf_float+0x378>
 80079a4:	f011 0f04 	tst.w	r1, #4
 80079a8:	9903      	ldr	r1, [sp, #12]
 80079aa:	600a      	str	r2, [r1, #0]
 80079ac:	d1db      	bne.n	8007966 <_scanf_float+0x39a>
 80079ae:	f8d3 8000 	ldr.w	r8, [r3]
 80079b2:	ee10 2a10 	vmov	r2, s0
 80079b6:	ee10 0a10 	vmov	r0, s0
 80079ba:	463b      	mov	r3, r7
 80079bc:	4639      	mov	r1, r7
 80079be:	f7f9 f8d5 	bl	8000b6c <__aeabi_dcmpun>
 80079c2:	b128      	cbz	r0, 80079d0 <_scanf_float+0x404>
 80079c4:	4808      	ldr	r0, [pc, #32]	; (80079e8 <_scanf_float+0x41c>)
 80079c6:	f000 f9b7 	bl	8007d38 <nanf>
 80079ca:	ed88 0a00 	vstr	s0, [r8]
 80079ce:	e7cd      	b.n	800796c <_scanf_float+0x3a0>
 80079d0:	4630      	mov	r0, r6
 80079d2:	4639      	mov	r1, r7
 80079d4:	f7f9 f928 	bl	8000c28 <__aeabi_d2f>
 80079d8:	f8c8 0000 	str.w	r0, [r8]
 80079dc:	e7c6      	b.n	800796c <_scanf_float+0x3a0>
 80079de:	2500      	movs	r5, #0
 80079e0:	e635      	b.n	800764e <_scanf_float+0x82>
 80079e2:	bf00      	nop
 80079e4:	0800b59c 	.word	0x0800b59c
 80079e8:	0800b92d 	.word	0x0800b92d

080079ec <std>:
 80079ec:	2300      	movs	r3, #0
 80079ee:	b510      	push	{r4, lr}
 80079f0:	4604      	mov	r4, r0
 80079f2:	e9c0 3300 	strd	r3, r3, [r0]
 80079f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079fa:	6083      	str	r3, [r0, #8]
 80079fc:	8181      	strh	r1, [r0, #12]
 80079fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007a00:	81c2      	strh	r2, [r0, #14]
 8007a02:	6183      	str	r3, [r0, #24]
 8007a04:	4619      	mov	r1, r3
 8007a06:	2208      	movs	r2, #8
 8007a08:	305c      	adds	r0, #92	; 0x5c
 8007a0a:	f000 f914 	bl	8007c36 <memset>
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <std+0x58>)
 8007a10:	6263      	str	r3, [r4, #36]	; 0x24
 8007a12:	4b0d      	ldr	r3, [pc, #52]	; (8007a48 <std+0x5c>)
 8007a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a16:	4b0d      	ldr	r3, [pc, #52]	; (8007a4c <std+0x60>)
 8007a18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a1a:	4b0d      	ldr	r3, [pc, #52]	; (8007a50 <std+0x64>)
 8007a1c:	6323      	str	r3, [r4, #48]	; 0x30
 8007a1e:	4b0d      	ldr	r3, [pc, #52]	; (8007a54 <std+0x68>)
 8007a20:	6224      	str	r4, [r4, #32]
 8007a22:	429c      	cmp	r4, r3
 8007a24:	d006      	beq.n	8007a34 <std+0x48>
 8007a26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007a2a:	4294      	cmp	r4, r2
 8007a2c:	d002      	beq.n	8007a34 <std+0x48>
 8007a2e:	33d0      	adds	r3, #208	; 0xd0
 8007a30:	429c      	cmp	r4, r3
 8007a32:	d105      	bne.n	8007a40 <std+0x54>
 8007a34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a3c:	f000 b978 	b.w	8007d30 <__retarget_lock_init_recursive>
 8007a40:	bd10      	pop	{r4, pc}
 8007a42:	bf00      	nop
 8007a44:	08007bb1 	.word	0x08007bb1
 8007a48:	08007bd3 	.word	0x08007bd3
 8007a4c:	08007c0b 	.word	0x08007c0b
 8007a50:	08007c2f 	.word	0x08007c2f
 8007a54:	20000b3c 	.word	0x20000b3c

08007a58 <stdio_exit_handler>:
 8007a58:	4a02      	ldr	r2, [pc, #8]	; (8007a64 <stdio_exit_handler+0xc>)
 8007a5a:	4903      	ldr	r1, [pc, #12]	; (8007a68 <stdio_exit_handler+0x10>)
 8007a5c:	4803      	ldr	r0, [pc, #12]	; (8007a6c <stdio_exit_handler+0x14>)
 8007a5e:	f000 b869 	b.w	8007b34 <_fwalk_sglue>
 8007a62:	bf00      	nop
 8007a64:	20000014 	.word	0x20000014
 8007a68:	0800a681 	.word	0x0800a681
 8007a6c:	20000020 	.word	0x20000020

08007a70 <cleanup_stdio>:
 8007a70:	6841      	ldr	r1, [r0, #4]
 8007a72:	4b0c      	ldr	r3, [pc, #48]	; (8007aa4 <cleanup_stdio+0x34>)
 8007a74:	4299      	cmp	r1, r3
 8007a76:	b510      	push	{r4, lr}
 8007a78:	4604      	mov	r4, r0
 8007a7a:	d001      	beq.n	8007a80 <cleanup_stdio+0x10>
 8007a7c:	f002 fe00 	bl	800a680 <_fflush_r>
 8007a80:	68a1      	ldr	r1, [r4, #8]
 8007a82:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <cleanup_stdio+0x38>)
 8007a84:	4299      	cmp	r1, r3
 8007a86:	d002      	beq.n	8007a8e <cleanup_stdio+0x1e>
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f002 fdf9 	bl	800a680 <_fflush_r>
 8007a8e:	68e1      	ldr	r1, [r4, #12]
 8007a90:	4b06      	ldr	r3, [pc, #24]	; (8007aac <cleanup_stdio+0x3c>)
 8007a92:	4299      	cmp	r1, r3
 8007a94:	d004      	beq.n	8007aa0 <cleanup_stdio+0x30>
 8007a96:	4620      	mov	r0, r4
 8007a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a9c:	f002 bdf0 	b.w	800a680 <_fflush_r>
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000b3c 	.word	0x20000b3c
 8007aa8:	20000ba4 	.word	0x20000ba4
 8007aac:	20000c0c 	.word	0x20000c0c

08007ab0 <global_stdio_init.part.0>:
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <global_stdio_init.part.0+0x30>)
 8007ab4:	4c0b      	ldr	r4, [pc, #44]	; (8007ae4 <global_stdio_init.part.0+0x34>)
 8007ab6:	4a0c      	ldr	r2, [pc, #48]	; (8007ae8 <global_stdio_init.part.0+0x38>)
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	4620      	mov	r0, r4
 8007abc:	2200      	movs	r2, #0
 8007abe:	2104      	movs	r1, #4
 8007ac0:	f7ff ff94 	bl	80079ec <std>
 8007ac4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007ac8:	2201      	movs	r2, #1
 8007aca:	2109      	movs	r1, #9
 8007acc:	f7ff ff8e 	bl	80079ec <std>
 8007ad0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ada:	2112      	movs	r1, #18
 8007adc:	f7ff bf86 	b.w	80079ec <std>
 8007ae0:	20000c74 	.word	0x20000c74
 8007ae4:	20000b3c 	.word	0x20000b3c
 8007ae8:	08007a59 	.word	0x08007a59

08007aec <__sfp_lock_acquire>:
 8007aec:	4801      	ldr	r0, [pc, #4]	; (8007af4 <__sfp_lock_acquire+0x8>)
 8007aee:	f000 b920 	b.w	8007d32 <__retarget_lock_acquire_recursive>
 8007af2:	bf00      	nop
 8007af4:	20000c7d 	.word	0x20000c7d

08007af8 <__sfp_lock_release>:
 8007af8:	4801      	ldr	r0, [pc, #4]	; (8007b00 <__sfp_lock_release+0x8>)
 8007afa:	f000 b91b 	b.w	8007d34 <__retarget_lock_release_recursive>
 8007afe:	bf00      	nop
 8007b00:	20000c7d 	.word	0x20000c7d

08007b04 <__sinit>:
 8007b04:	b510      	push	{r4, lr}
 8007b06:	4604      	mov	r4, r0
 8007b08:	f7ff fff0 	bl	8007aec <__sfp_lock_acquire>
 8007b0c:	6a23      	ldr	r3, [r4, #32]
 8007b0e:	b11b      	cbz	r3, 8007b18 <__sinit+0x14>
 8007b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b14:	f7ff bff0 	b.w	8007af8 <__sfp_lock_release>
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <__sinit+0x28>)
 8007b1a:	6223      	str	r3, [r4, #32]
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <__sinit+0x2c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1f5      	bne.n	8007b10 <__sinit+0xc>
 8007b24:	f7ff ffc4 	bl	8007ab0 <global_stdio_init.part.0>
 8007b28:	e7f2      	b.n	8007b10 <__sinit+0xc>
 8007b2a:	bf00      	nop
 8007b2c:	08007a71 	.word	0x08007a71
 8007b30:	20000c74 	.word	0x20000c74

08007b34 <_fwalk_sglue>:
 8007b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b38:	4607      	mov	r7, r0
 8007b3a:	4688      	mov	r8, r1
 8007b3c:	4614      	mov	r4, r2
 8007b3e:	2600      	movs	r6, #0
 8007b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b44:	f1b9 0901 	subs.w	r9, r9, #1
 8007b48:	d505      	bpl.n	8007b56 <_fwalk_sglue+0x22>
 8007b4a:	6824      	ldr	r4, [r4, #0]
 8007b4c:	2c00      	cmp	r4, #0
 8007b4e:	d1f7      	bne.n	8007b40 <_fwalk_sglue+0xc>
 8007b50:	4630      	mov	r0, r6
 8007b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b56:	89ab      	ldrh	r3, [r5, #12]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d907      	bls.n	8007b6c <_fwalk_sglue+0x38>
 8007b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b60:	3301      	adds	r3, #1
 8007b62:	d003      	beq.n	8007b6c <_fwalk_sglue+0x38>
 8007b64:	4629      	mov	r1, r5
 8007b66:	4638      	mov	r0, r7
 8007b68:	47c0      	blx	r8
 8007b6a:	4306      	orrs	r6, r0
 8007b6c:	3568      	adds	r5, #104	; 0x68
 8007b6e:	e7e9      	b.n	8007b44 <_fwalk_sglue+0x10>

08007b70 <siprintf>:
 8007b70:	b40e      	push	{r1, r2, r3}
 8007b72:	b500      	push	{lr}
 8007b74:	b09c      	sub	sp, #112	; 0x70
 8007b76:	ab1d      	add	r3, sp, #116	; 0x74
 8007b78:	9002      	str	r0, [sp, #8]
 8007b7a:	9006      	str	r0, [sp, #24]
 8007b7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b80:	4809      	ldr	r0, [pc, #36]	; (8007ba8 <siprintf+0x38>)
 8007b82:	9107      	str	r1, [sp, #28]
 8007b84:	9104      	str	r1, [sp, #16]
 8007b86:	4909      	ldr	r1, [pc, #36]	; (8007bac <siprintf+0x3c>)
 8007b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b8c:	9105      	str	r1, [sp, #20]
 8007b8e:	6800      	ldr	r0, [r0, #0]
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	a902      	add	r1, sp, #8
 8007b94:	f002 fbf0 	bl	800a378 <_svfiprintf_r>
 8007b98:	9b02      	ldr	r3, [sp, #8]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	b01c      	add	sp, #112	; 0x70
 8007ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ba4:	b003      	add	sp, #12
 8007ba6:	4770      	bx	lr
 8007ba8:	2000006c 	.word	0x2000006c
 8007bac:	ffff0208 	.word	0xffff0208

08007bb0 <__sread>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb8:	f000 f86c 	bl	8007c94 <_read_r>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	bfab      	itete	ge
 8007bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8007bc4:	181b      	addge	r3, r3, r0
 8007bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bca:	bfac      	ite	ge
 8007bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bce:	81a3      	strhlt	r3, [r4, #12]
 8007bd0:	bd10      	pop	{r4, pc}

08007bd2 <__swrite>:
 8007bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	461f      	mov	r7, r3
 8007bd8:	898b      	ldrh	r3, [r1, #12]
 8007bda:	05db      	lsls	r3, r3, #23
 8007bdc:	4605      	mov	r5, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	4616      	mov	r6, r2
 8007be2:	d505      	bpl.n	8007bf0 <__swrite+0x1e>
 8007be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be8:	2302      	movs	r3, #2
 8007bea:	2200      	movs	r2, #0
 8007bec:	f000 f840 	bl	8007c70 <_lseek_r>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	463b      	mov	r3, r7
 8007c00:	4628      	mov	r0, r5
 8007c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c06:	f000 b857 	b.w	8007cb8 <_write_r>

08007c0a <__sseek>:
 8007c0a:	b510      	push	{r4, lr}
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c12:	f000 f82d 	bl	8007c70 <_lseek_r>
 8007c16:	1c43      	adds	r3, r0, #1
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	bf15      	itete	ne
 8007c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c26:	81a3      	strheq	r3, [r4, #12]
 8007c28:	bf18      	it	ne
 8007c2a:	81a3      	strhne	r3, [r4, #12]
 8007c2c:	bd10      	pop	{r4, pc}

08007c2e <__sclose>:
 8007c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c32:	f000 b80d 	b.w	8007c50 <_close_r>

08007c36 <memset>:
 8007c36:	4402      	add	r2, r0
 8007c38:	4603      	mov	r3, r0
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d100      	bne.n	8007c40 <memset+0xa>
 8007c3e:	4770      	bx	lr
 8007c40:	f803 1b01 	strb.w	r1, [r3], #1
 8007c44:	e7f9      	b.n	8007c3a <memset+0x4>
	...

08007c48 <_localeconv_r>:
 8007c48:	4800      	ldr	r0, [pc, #0]	; (8007c4c <_localeconv_r+0x4>)
 8007c4a:	4770      	bx	lr
 8007c4c:	20000160 	.word	0x20000160

08007c50 <_close_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d06      	ldr	r5, [pc, #24]	; (8007c6c <_close_r+0x1c>)
 8007c54:	2300      	movs	r3, #0
 8007c56:	4604      	mov	r4, r0
 8007c58:	4608      	mov	r0, r1
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	f7fa fa4b 	bl	80020f6 <_close>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d102      	bne.n	8007c6a <_close_r+0x1a>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	b103      	cbz	r3, 8007c6a <_close_r+0x1a>
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	20000c78 	.word	0x20000c78

08007c70 <_lseek_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4d07      	ldr	r5, [pc, #28]	; (8007c90 <_lseek_r+0x20>)
 8007c74:	4604      	mov	r4, r0
 8007c76:	4608      	mov	r0, r1
 8007c78:	4611      	mov	r1, r2
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	602a      	str	r2, [r5, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f7fa fa60 	bl	8002144 <_lseek>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_lseek_r+0x1e>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_lseek_r+0x1e>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	20000c78 	.word	0x20000c78

08007c94 <_read_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4d07      	ldr	r5, [pc, #28]	; (8007cb4 <_read_r+0x20>)
 8007c98:	4604      	mov	r4, r0
 8007c9a:	4608      	mov	r0, r1
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	602a      	str	r2, [r5, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f7fa f9ee 	bl	8002084 <_read>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_read_r+0x1e>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_read_r+0x1e>
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	20000c78 	.word	0x20000c78

08007cb8 <_write_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4d07      	ldr	r5, [pc, #28]	; (8007cd8 <_write_r+0x20>)
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	4608      	mov	r0, r1
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	602a      	str	r2, [r5, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f7fa f9f9 	bl	80020be <_write>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d102      	bne.n	8007cd6 <_write_r+0x1e>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b103      	cbz	r3, 8007cd6 <_write_r+0x1e>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	20000c78 	.word	0x20000c78

08007cdc <__errno>:
 8007cdc:	4b01      	ldr	r3, [pc, #4]	; (8007ce4 <__errno+0x8>)
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	2000006c 	.word	0x2000006c

08007ce8 <__libc_init_array>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	4d0d      	ldr	r5, [pc, #52]	; (8007d20 <__libc_init_array+0x38>)
 8007cec:	4c0d      	ldr	r4, [pc, #52]	; (8007d24 <__libc_init_array+0x3c>)
 8007cee:	1b64      	subs	r4, r4, r5
 8007cf0:	10a4      	asrs	r4, r4, #2
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	42a6      	cmp	r6, r4
 8007cf6:	d109      	bne.n	8007d0c <__libc_init_array+0x24>
 8007cf8:	4d0b      	ldr	r5, [pc, #44]	; (8007d28 <__libc_init_array+0x40>)
 8007cfa:	4c0c      	ldr	r4, [pc, #48]	; (8007d2c <__libc_init_array+0x44>)
 8007cfc:	f003 fbd8 	bl	800b4b0 <_init>
 8007d00:	1b64      	subs	r4, r4, r5
 8007d02:	10a4      	asrs	r4, r4, #2
 8007d04:	2600      	movs	r6, #0
 8007d06:	42a6      	cmp	r6, r4
 8007d08:	d105      	bne.n	8007d16 <__libc_init_array+0x2e>
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
 8007d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d10:	4798      	blx	r3
 8007d12:	3601      	adds	r6, #1
 8007d14:	e7ee      	b.n	8007cf4 <__libc_init_array+0xc>
 8007d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1a:	4798      	blx	r3
 8007d1c:	3601      	adds	r6, #1
 8007d1e:	e7f2      	b.n	8007d06 <__libc_init_array+0x1e>
 8007d20:	0800b998 	.word	0x0800b998
 8007d24:	0800b998 	.word	0x0800b998
 8007d28:	0800b998 	.word	0x0800b998
 8007d2c:	0800b99c 	.word	0x0800b99c

08007d30 <__retarget_lock_init_recursive>:
 8007d30:	4770      	bx	lr

08007d32 <__retarget_lock_acquire_recursive>:
 8007d32:	4770      	bx	lr

08007d34 <__retarget_lock_release_recursive>:
 8007d34:	4770      	bx	lr
	...

08007d38 <nanf>:
 8007d38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007d40 <nanf+0x8>
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	7fc00000 	.word	0x7fc00000

08007d44 <quorem>:
 8007d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	6903      	ldr	r3, [r0, #16]
 8007d4a:	690c      	ldr	r4, [r1, #16]
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	4607      	mov	r7, r0
 8007d50:	db7e      	blt.n	8007e50 <quorem+0x10c>
 8007d52:	3c01      	subs	r4, #1
 8007d54:	f101 0814 	add.w	r8, r1, #20
 8007d58:	f100 0514 	add.w	r5, r0, #20
 8007d5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d76:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d7a:	d331      	bcc.n	8007de0 <quorem+0x9c>
 8007d7c:	f04f 0e00 	mov.w	lr, #0
 8007d80:	4640      	mov	r0, r8
 8007d82:	46ac      	mov	ip, r5
 8007d84:	46f2      	mov	sl, lr
 8007d86:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d8a:	b293      	uxth	r3, r2
 8007d8c:	fb06 e303 	mla	r3, r6, r3, lr
 8007d90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d94:	0c1a      	lsrs	r2, r3, #16
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	ebaa 0303 	sub.w	r3, sl, r3
 8007d9c:	f8dc a000 	ldr.w	sl, [ip]
 8007da0:	fa13 f38a 	uxtah	r3, r3, sl
 8007da4:	fb06 220e 	mla	r2, r6, lr, r2
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	9b00      	ldr	r3, [sp, #0]
 8007dac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007db0:	b292      	uxth	r2, r2
 8007db2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007db6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dba:	f8bd 3000 	ldrh.w	r3, [sp]
 8007dbe:	4581      	cmp	r9, r0
 8007dc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dc4:	f84c 3b04 	str.w	r3, [ip], #4
 8007dc8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dcc:	d2db      	bcs.n	8007d86 <quorem+0x42>
 8007dce:	f855 300b 	ldr.w	r3, [r5, fp]
 8007dd2:	b92b      	cbnz	r3, 8007de0 <quorem+0x9c>
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	3b04      	subs	r3, #4
 8007dd8:	429d      	cmp	r5, r3
 8007dda:	461a      	mov	r2, r3
 8007ddc:	d32c      	bcc.n	8007e38 <quorem+0xf4>
 8007dde:	613c      	str	r4, [r7, #16]
 8007de0:	4638      	mov	r0, r7
 8007de2:	f001 f9f1 	bl	80091c8 <__mcmp>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	db22      	blt.n	8007e30 <quorem+0xec>
 8007dea:	3601      	adds	r6, #1
 8007dec:	4629      	mov	r1, r5
 8007dee:	2000      	movs	r0, #0
 8007df0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007df4:	f8d1 c000 	ldr.w	ip, [r1]
 8007df8:	b293      	uxth	r3, r2
 8007dfa:	1ac3      	subs	r3, r0, r3
 8007dfc:	0c12      	lsrs	r2, r2, #16
 8007dfe:	fa13 f38c 	uxtah	r3, r3, ip
 8007e02:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007e06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e10:	45c1      	cmp	r9, r8
 8007e12:	f841 3b04 	str.w	r3, [r1], #4
 8007e16:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e1a:	d2e9      	bcs.n	8007df0 <quorem+0xac>
 8007e1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e24:	b922      	cbnz	r2, 8007e30 <quorem+0xec>
 8007e26:	3b04      	subs	r3, #4
 8007e28:	429d      	cmp	r5, r3
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	d30a      	bcc.n	8007e44 <quorem+0x100>
 8007e2e:	613c      	str	r4, [r7, #16]
 8007e30:	4630      	mov	r0, r6
 8007e32:	b003      	add	sp, #12
 8007e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	3b04      	subs	r3, #4
 8007e3c:	2a00      	cmp	r2, #0
 8007e3e:	d1ce      	bne.n	8007dde <quorem+0x9a>
 8007e40:	3c01      	subs	r4, #1
 8007e42:	e7c9      	b.n	8007dd8 <quorem+0x94>
 8007e44:	6812      	ldr	r2, [r2, #0]
 8007e46:	3b04      	subs	r3, #4
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	d1f0      	bne.n	8007e2e <quorem+0xea>
 8007e4c:	3c01      	subs	r4, #1
 8007e4e:	e7eb      	b.n	8007e28 <quorem+0xe4>
 8007e50:	2000      	movs	r0, #0
 8007e52:	e7ee      	b.n	8007e32 <quorem+0xee>
 8007e54:	0000      	movs	r0, r0
	...

08007e58 <_dtoa_r>:
 8007e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	ed2d 8b04 	vpush	{d8-d9}
 8007e60:	69c5      	ldr	r5, [r0, #28]
 8007e62:	b093      	sub	sp, #76	; 0x4c
 8007e64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e68:	ec57 6b10 	vmov	r6, r7, d0
 8007e6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e70:	9107      	str	r1, [sp, #28]
 8007e72:	4604      	mov	r4, r0
 8007e74:	920a      	str	r2, [sp, #40]	; 0x28
 8007e76:	930d      	str	r3, [sp, #52]	; 0x34
 8007e78:	b975      	cbnz	r5, 8007e98 <_dtoa_r+0x40>
 8007e7a:	2010      	movs	r0, #16
 8007e7c:	f000 fe2a 	bl	8008ad4 <malloc>
 8007e80:	4602      	mov	r2, r0
 8007e82:	61e0      	str	r0, [r4, #28]
 8007e84:	b920      	cbnz	r0, 8007e90 <_dtoa_r+0x38>
 8007e86:	4bae      	ldr	r3, [pc, #696]	; (8008140 <_dtoa_r+0x2e8>)
 8007e88:	21ef      	movs	r1, #239	; 0xef
 8007e8a:	48ae      	ldr	r0, [pc, #696]	; (8008144 <_dtoa_r+0x2ec>)
 8007e8c:	f002 fc74 	bl	800a778 <__assert_func>
 8007e90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e94:	6005      	str	r5, [r0, #0]
 8007e96:	60c5      	str	r5, [r0, #12]
 8007e98:	69e3      	ldr	r3, [r4, #28]
 8007e9a:	6819      	ldr	r1, [r3, #0]
 8007e9c:	b151      	cbz	r1, 8007eb4 <_dtoa_r+0x5c>
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	604a      	str	r2, [r1, #4]
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	4093      	lsls	r3, r2
 8007ea6:	608b      	str	r3, [r1, #8]
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 ff07 	bl	8008cbc <_Bfree>
 8007eae:	69e3      	ldr	r3, [r4, #28]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	1e3b      	subs	r3, r7, #0
 8007eb6:	bfbb      	ittet	lt
 8007eb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ebc:	9303      	strlt	r3, [sp, #12]
 8007ebe:	2300      	movge	r3, #0
 8007ec0:	2201      	movlt	r2, #1
 8007ec2:	bfac      	ite	ge
 8007ec4:	f8c8 3000 	strge.w	r3, [r8]
 8007ec8:	f8c8 2000 	strlt.w	r2, [r8]
 8007ecc:	4b9e      	ldr	r3, [pc, #632]	; (8008148 <_dtoa_r+0x2f0>)
 8007ece:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ed2:	ea33 0308 	bics.w	r3, r3, r8
 8007ed6:	d11b      	bne.n	8007f10 <_dtoa_r+0xb8>
 8007ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007eda:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007ee4:	4333      	orrs	r3, r6
 8007ee6:	f000 8593 	beq.w	8008a10 <_dtoa_r+0xbb8>
 8007eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eec:	b963      	cbnz	r3, 8007f08 <_dtoa_r+0xb0>
 8007eee:	4b97      	ldr	r3, [pc, #604]	; (800814c <_dtoa_r+0x2f4>)
 8007ef0:	e027      	b.n	8007f42 <_dtoa_r+0xea>
 8007ef2:	4b97      	ldr	r3, [pc, #604]	; (8008150 <_dtoa_r+0x2f8>)
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	9800      	ldr	r0, [sp, #0]
 8007efe:	b013      	add	sp, #76	; 0x4c
 8007f00:	ecbd 8b04 	vpop	{d8-d9}
 8007f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f08:	4b90      	ldr	r3, [pc, #576]	; (800814c <_dtoa_r+0x2f4>)
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	3303      	adds	r3, #3
 8007f0e:	e7f3      	b.n	8007ef8 <_dtoa_r+0xa0>
 8007f10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f14:	2200      	movs	r2, #0
 8007f16:	ec51 0b17 	vmov	r0, r1, d7
 8007f1a:	eeb0 8a47 	vmov.f32	s16, s14
 8007f1e:	eef0 8a67 	vmov.f32	s17, s15
 8007f22:	2300      	movs	r3, #0
 8007f24:	f7f8 fdf0 	bl	8000b08 <__aeabi_dcmpeq>
 8007f28:	4681      	mov	r9, r0
 8007f2a:	b160      	cbz	r0, 8007f46 <_dtoa_r+0xee>
 8007f2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f2e:	2301      	movs	r3, #1
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8568 	beq.w	8008a0a <_dtoa_r+0xbb2>
 8007f3a:	4b86      	ldr	r3, [pc, #536]	; (8008154 <_dtoa_r+0x2fc>)
 8007f3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	e7da      	b.n	8007efc <_dtoa_r+0xa4>
 8007f46:	aa10      	add	r2, sp, #64	; 0x40
 8007f48:	a911      	add	r1, sp, #68	; 0x44
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	eeb0 0a48 	vmov.f32	s0, s16
 8007f50:	eef0 0a68 	vmov.f32	s1, s17
 8007f54:	f001 fa4e 	bl	80093f4 <__d2b>
 8007f58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007f5c:	4682      	mov	sl, r0
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	d07f      	beq.n	8008062 <_dtoa_r+0x20a>
 8007f62:	ee18 3a90 	vmov	r3, s17
 8007f66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007f6e:	ec51 0b18 	vmov	r0, r1, d8
 8007f72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007f7e:	4619      	mov	r1, r3
 8007f80:	2200      	movs	r2, #0
 8007f82:	4b75      	ldr	r3, [pc, #468]	; (8008158 <_dtoa_r+0x300>)
 8007f84:	f7f8 f9a0 	bl	80002c8 <__aeabi_dsub>
 8007f88:	a367      	add	r3, pc, #412	; (adr r3, 8008128 <_dtoa_r+0x2d0>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f7f8 fb53 	bl	8000638 <__aeabi_dmul>
 8007f92:	a367      	add	r3, pc, #412	; (adr r3, 8008130 <_dtoa_r+0x2d8>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 f998 	bl	80002cc <__adddf3>
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	460f      	mov	r7, r1
 8007fa2:	f7f8 fadf 	bl	8000564 <__aeabi_i2d>
 8007fa6:	a364      	add	r3, pc, #400	; (adr r3, 8008138 <_dtoa_r+0x2e0>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 fb44 	bl	8000638 <__aeabi_dmul>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	f7f8 f988 	bl	80002cc <__adddf3>
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	460f      	mov	r7, r1
 8007fc0:	f7f8 fdea 	bl	8000b98 <__aeabi_d2iz>
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4683      	mov	fp, r0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4630      	mov	r0, r6
 8007fcc:	4639      	mov	r1, r7
 8007fce:	f7f8 fda5 	bl	8000b1c <__aeabi_dcmplt>
 8007fd2:	b148      	cbz	r0, 8007fe8 <_dtoa_r+0x190>
 8007fd4:	4658      	mov	r0, fp
 8007fd6:	f7f8 fac5 	bl	8000564 <__aeabi_i2d>
 8007fda:	4632      	mov	r2, r6
 8007fdc:	463b      	mov	r3, r7
 8007fde:	f7f8 fd93 	bl	8000b08 <__aeabi_dcmpeq>
 8007fe2:	b908      	cbnz	r0, 8007fe8 <_dtoa_r+0x190>
 8007fe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fe8:	f1bb 0f16 	cmp.w	fp, #22
 8007fec:	d857      	bhi.n	800809e <_dtoa_r+0x246>
 8007fee:	4b5b      	ldr	r3, [pc, #364]	; (800815c <_dtoa_r+0x304>)
 8007ff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	ec51 0b18 	vmov	r0, r1, d8
 8007ffc:	f7f8 fd8e 	bl	8000b1c <__aeabi_dcmplt>
 8008000:	2800      	cmp	r0, #0
 8008002:	d04e      	beq.n	80080a2 <_dtoa_r+0x24a>
 8008004:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008008:	2300      	movs	r3, #0
 800800a:	930c      	str	r3, [sp, #48]	; 0x30
 800800c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800800e:	1b5b      	subs	r3, r3, r5
 8008010:	1e5a      	subs	r2, r3, #1
 8008012:	bf45      	ittet	mi
 8008014:	f1c3 0301 	rsbmi	r3, r3, #1
 8008018:	9305      	strmi	r3, [sp, #20]
 800801a:	2300      	movpl	r3, #0
 800801c:	2300      	movmi	r3, #0
 800801e:	9206      	str	r2, [sp, #24]
 8008020:	bf54      	ite	pl
 8008022:	9305      	strpl	r3, [sp, #20]
 8008024:	9306      	strmi	r3, [sp, #24]
 8008026:	f1bb 0f00 	cmp.w	fp, #0
 800802a:	db3c      	blt.n	80080a6 <_dtoa_r+0x24e>
 800802c:	9b06      	ldr	r3, [sp, #24]
 800802e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008032:	445b      	add	r3, fp
 8008034:	9306      	str	r3, [sp, #24]
 8008036:	2300      	movs	r3, #0
 8008038:	9308      	str	r3, [sp, #32]
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	2b09      	cmp	r3, #9
 800803e:	d868      	bhi.n	8008112 <_dtoa_r+0x2ba>
 8008040:	2b05      	cmp	r3, #5
 8008042:	bfc4      	itt	gt
 8008044:	3b04      	subgt	r3, #4
 8008046:	9307      	strgt	r3, [sp, #28]
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	f1a3 0302 	sub.w	r3, r3, #2
 800804e:	bfcc      	ite	gt
 8008050:	2500      	movgt	r5, #0
 8008052:	2501      	movle	r5, #1
 8008054:	2b03      	cmp	r3, #3
 8008056:	f200 8085 	bhi.w	8008164 <_dtoa_r+0x30c>
 800805a:	e8df f003 	tbb	[pc, r3]
 800805e:	3b2e      	.short	0x3b2e
 8008060:	5839      	.short	0x5839
 8008062:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008066:	441d      	add	r5, r3
 8008068:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800806c:	2b20      	cmp	r3, #32
 800806e:	bfc1      	itttt	gt
 8008070:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008074:	fa08 f803 	lslgt.w	r8, r8, r3
 8008078:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800807c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008080:	bfd6      	itet	le
 8008082:	f1c3 0320 	rsble	r3, r3, #32
 8008086:	ea48 0003 	orrgt.w	r0, r8, r3
 800808a:	fa06 f003 	lslle.w	r0, r6, r3
 800808e:	f7f8 fa59 	bl	8000544 <__aeabi_ui2d>
 8008092:	2201      	movs	r2, #1
 8008094:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008098:	3d01      	subs	r5, #1
 800809a:	920e      	str	r2, [sp, #56]	; 0x38
 800809c:	e76f      	b.n	8007f7e <_dtoa_r+0x126>
 800809e:	2301      	movs	r3, #1
 80080a0:	e7b3      	b.n	800800a <_dtoa_r+0x1b2>
 80080a2:	900c      	str	r0, [sp, #48]	; 0x30
 80080a4:	e7b2      	b.n	800800c <_dtoa_r+0x1b4>
 80080a6:	9b05      	ldr	r3, [sp, #20]
 80080a8:	eba3 030b 	sub.w	r3, r3, fp
 80080ac:	9305      	str	r3, [sp, #20]
 80080ae:	f1cb 0300 	rsb	r3, fp, #0
 80080b2:	9308      	str	r3, [sp, #32]
 80080b4:	2300      	movs	r3, #0
 80080b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80080b8:	e7bf      	b.n	800803a <_dtoa_r+0x1e2>
 80080ba:	2300      	movs	r3, #0
 80080bc:	9309      	str	r3, [sp, #36]	; 0x24
 80080be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	dc52      	bgt.n	800816a <_dtoa_r+0x312>
 80080c4:	2301      	movs	r3, #1
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	461a      	mov	r2, r3
 80080cc:	920a      	str	r2, [sp, #40]	; 0x28
 80080ce:	e00b      	b.n	80080e8 <_dtoa_r+0x290>
 80080d0:	2301      	movs	r3, #1
 80080d2:	e7f3      	b.n	80080bc <_dtoa_r+0x264>
 80080d4:	2300      	movs	r3, #0
 80080d6:	9309      	str	r3, [sp, #36]	; 0x24
 80080d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080da:	445b      	add	r3, fp
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	3301      	adds	r3, #1
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	bfb8      	it	lt
 80080e6:	2301      	movlt	r3, #1
 80080e8:	69e0      	ldr	r0, [r4, #28]
 80080ea:	2100      	movs	r1, #0
 80080ec:	2204      	movs	r2, #4
 80080ee:	f102 0614 	add.w	r6, r2, #20
 80080f2:	429e      	cmp	r6, r3
 80080f4:	d93d      	bls.n	8008172 <_dtoa_r+0x31a>
 80080f6:	6041      	str	r1, [r0, #4]
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 fd9f 	bl	8008c3c <_Balloc>
 80080fe:	9000      	str	r0, [sp, #0]
 8008100:	2800      	cmp	r0, #0
 8008102:	d139      	bne.n	8008178 <_dtoa_r+0x320>
 8008104:	4b16      	ldr	r3, [pc, #88]	; (8008160 <_dtoa_r+0x308>)
 8008106:	4602      	mov	r2, r0
 8008108:	f240 11af 	movw	r1, #431	; 0x1af
 800810c:	e6bd      	b.n	8007e8a <_dtoa_r+0x32>
 800810e:	2301      	movs	r3, #1
 8008110:	e7e1      	b.n	80080d6 <_dtoa_r+0x27e>
 8008112:	2501      	movs	r5, #1
 8008114:	2300      	movs	r3, #0
 8008116:	9307      	str	r3, [sp, #28]
 8008118:	9509      	str	r5, [sp, #36]	; 0x24
 800811a:	f04f 33ff 	mov.w	r3, #4294967295
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	9304      	str	r3, [sp, #16]
 8008122:	2200      	movs	r2, #0
 8008124:	2312      	movs	r3, #18
 8008126:	e7d1      	b.n	80080cc <_dtoa_r+0x274>
 8008128:	636f4361 	.word	0x636f4361
 800812c:	3fd287a7 	.word	0x3fd287a7
 8008130:	8b60c8b3 	.word	0x8b60c8b3
 8008134:	3fc68a28 	.word	0x3fc68a28
 8008138:	509f79fb 	.word	0x509f79fb
 800813c:	3fd34413 	.word	0x3fd34413
 8008140:	0800b5ae 	.word	0x0800b5ae
 8008144:	0800b5c5 	.word	0x0800b5c5
 8008148:	7ff00000 	.word	0x7ff00000
 800814c:	0800b5aa 	.word	0x0800b5aa
 8008150:	0800b5a1 	.word	0x0800b5a1
 8008154:	0800b579 	.word	0x0800b579
 8008158:	3ff80000 	.word	0x3ff80000
 800815c:	0800b6b0 	.word	0x0800b6b0
 8008160:	0800b61d 	.word	0x0800b61d
 8008164:	2301      	movs	r3, #1
 8008166:	9309      	str	r3, [sp, #36]	; 0x24
 8008168:	e7d7      	b.n	800811a <_dtoa_r+0x2c2>
 800816a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	9304      	str	r3, [sp, #16]
 8008170:	e7ba      	b.n	80080e8 <_dtoa_r+0x290>
 8008172:	3101      	adds	r1, #1
 8008174:	0052      	lsls	r2, r2, #1
 8008176:	e7ba      	b.n	80080ee <_dtoa_r+0x296>
 8008178:	69e3      	ldr	r3, [r4, #28]
 800817a:	9a00      	ldr	r2, [sp, #0]
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	9b04      	ldr	r3, [sp, #16]
 8008180:	2b0e      	cmp	r3, #14
 8008182:	f200 80a8 	bhi.w	80082d6 <_dtoa_r+0x47e>
 8008186:	2d00      	cmp	r5, #0
 8008188:	f000 80a5 	beq.w	80082d6 <_dtoa_r+0x47e>
 800818c:	f1bb 0f00 	cmp.w	fp, #0
 8008190:	dd38      	ble.n	8008204 <_dtoa_r+0x3ac>
 8008192:	4bc0      	ldr	r3, [pc, #768]	; (8008494 <_dtoa_r+0x63c>)
 8008194:	f00b 020f 	and.w	r2, fp, #15
 8008198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800819c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80081a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80081a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80081a8:	d019      	beq.n	80081de <_dtoa_r+0x386>
 80081aa:	4bbb      	ldr	r3, [pc, #748]	; (8008498 <_dtoa_r+0x640>)
 80081ac:	ec51 0b18 	vmov	r0, r1, d8
 80081b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081b4:	f7f8 fb6a 	bl	800088c <__aeabi_ddiv>
 80081b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081bc:	f008 080f 	and.w	r8, r8, #15
 80081c0:	2503      	movs	r5, #3
 80081c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008498 <_dtoa_r+0x640>
 80081c6:	f1b8 0f00 	cmp.w	r8, #0
 80081ca:	d10a      	bne.n	80081e2 <_dtoa_r+0x38a>
 80081cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081d0:	4632      	mov	r2, r6
 80081d2:	463b      	mov	r3, r7
 80081d4:	f7f8 fb5a 	bl	800088c <__aeabi_ddiv>
 80081d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081dc:	e02b      	b.n	8008236 <_dtoa_r+0x3de>
 80081de:	2502      	movs	r5, #2
 80081e0:	e7ef      	b.n	80081c2 <_dtoa_r+0x36a>
 80081e2:	f018 0f01 	tst.w	r8, #1
 80081e6:	d008      	beq.n	80081fa <_dtoa_r+0x3a2>
 80081e8:	4630      	mov	r0, r6
 80081ea:	4639      	mov	r1, r7
 80081ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80081f0:	f7f8 fa22 	bl	8000638 <__aeabi_dmul>
 80081f4:	3501      	adds	r5, #1
 80081f6:	4606      	mov	r6, r0
 80081f8:	460f      	mov	r7, r1
 80081fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081fe:	f109 0908 	add.w	r9, r9, #8
 8008202:	e7e0      	b.n	80081c6 <_dtoa_r+0x36e>
 8008204:	f000 809f 	beq.w	8008346 <_dtoa_r+0x4ee>
 8008208:	f1cb 0600 	rsb	r6, fp, #0
 800820c:	4ba1      	ldr	r3, [pc, #644]	; (8008494 <_dtoa_r+0x63c>)
 800820e:	4fa2      	ldr	r7, [pc, #648]	; (8008498 <_dtoa_r+0x640>)
 8008210:	f006 020f 	and.w	r2, r6, #15
 8008214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	ec51 0b18 	vmov	r0, r1, d8
 8008220:	f7f8 fa0a 	bl	8000638 <__aeabi_dmul>
 8008224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008228:	1136      	asrs	r6, r6, #4
 800822a:	2300      	movs	r3, #0
 800822c:	2502      	movs	r5, #2
 800822e:	2e00      	cmp	r6, #0
 8008230:	d17e      	bne.n	8008330 <_dtoa_r+0x4d8>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1d0      	bne.n	80081d8 <_dtoa_r+0x380>
 8008236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008238:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8084 	beq.w	800834a <_dtoa_r+0x4f2>
 8008242:	4b96      	ldr	r3, [pc, #600]	; (800849c <_dtoa_r+0x644>)
 8008244:	2200      	movs	r2, #0
 8008246:	4640      	mov	r0, r8
 8008248:	4649      	mov	r1, r9
 800824a:	f7f8 fc67 	bl	8000b1c <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	d07b      	beq.n	800834a <_dtoa_r+0x4f2>
 8008252:	9b04      	ldr	r3, [sp, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d078      	beq.n	800834a <_dtoa_r+0x4f2>
 8008258:	9b01      	ldr	r3, [sp, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	dd39      	ble.n	80082d2 <_dtoa_r+0x47a>
 800825e:	4b90      	ldr	r3, [pc, #576]	; (80084a0 <_dtoa_r+0x648>)
 8008260:	2200      	movs	r2, #0
 8008262:	4640      	mov	r0, r8
 8008264:	4649      	mov	r1, r9
 8008266:	f7f8 f9e7 	bl	8000638 <__aeabi_dmul>
 800826a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800826e:	9e01      	ldr	r6, [sp, #4]
 8008270:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008274:	3501      	adds	r5, #1
 8008276:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800827a:	4628      	mov	r0, r5
 800827c:	f7f8 f972 	bl	8000564 <__aeabi_i2d>
 8008280:	4642      	mov	r2, r8
 8008282:	464b      	mov	r3, r9
 8008284:	f7f8 f9d8 	bl	8000638 <__aeabi_dmul>
 8008288:	4b86      	ldr	r3, [pc, #536]	; (80084a4 <_dtoa_r+0x64c>)
 800828a:	2200      	movs	r2, #0
 800828c:	f7f8 f81e 	bl	80002cc <__adddf3>
 8008290:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008298:	9303      	str	r3, [sp, #12]
 800829a:	2e00      	cmp	r6, #0
 800829c:	d158      	bne.n	8008350 <_dtoa_r+0x4f8>
 800829e:	4b82      	ldr	r3, [pc, #520]	; (80084a8 <_dtoa_r+0x650>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	4640      	mov	r0, r8
 80082a4:	4649      	mov	r1, r9
 80082a6:	f7f8 f80f 	bl	80002c8 <__aeabi_dsub>
 80082aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ae:	4680      	mov	r8, r0
 80082b0:	4689      	mov	r9, r1
 80082b2:	f7f8 fc51 	bl	8000b58 <__aeabi_dcmpgt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	f040 8296 	bne.w	80087e8 <_dtoa_r+0x990>
 80082bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80082c0:	4640      	mov	r0, r8
 80082c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082c6:	4649      	mov	r1, r9
 80082c8:	f7f8 fc28 	bl	8000b1c <__aeabi_dcmplt>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f040 8289 	bne.w	80087e4 <_dtoa_r+0x98c>
 80082d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80082d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f2c0 814e 	blt.w	800857a <_dtoa_r+0x722>
 80082de:	f1bb 0f0e 	cmp.w	fp, #14
 80082e2:	f300 814a 	bgt.w	800857a <_dtoa_r+0x722>
 80082e6:	4b6b      	ldr	r3, [pc, #428]	; (8008494 <_dtoa_r+0x63c>)
 80082e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f280 80dc 	bge.w	80084b0 <_dtoa_r+0x658>
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f300 80d8 	bgt.w	80084b0 <_dtoa_r+0x658>
 8008300:	f040 826f 	bne.w	80087e2 <_dtoa_r+0x98a>
 8008304:	4b68      	ldr	r3, [pc, #416]	; (80084a8 <_dtoa_r+0x650>)
 8008306:	2200      	movs	r2, #0
 8008308:	4640      	mov	r0, r8
 800830a:	4649      	mov	r1, r9
 800830c:	f7f8 f994 	bl	8000638 <__aeabi_dmul>
 8008310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008314:	f7f8 fc16 	bl	8000b44 <__aeabi_dcmpge>
 8008318:	9e04      	ldr	r6, [sp, #16]
 800831a:	4637      	mov	r7, r6
 800831c:	2800      	cmp	r0, #0
 800831e:	f040 8245 	bne.w	80087ac <_dtoa_r+0x954>
 8008322:	9d00      	ldr	r5, [sp, #0]
 8008324:	2331      	movs	r3, #49	; 0x31
 8008326:	f805 3b01 	strb.w	r3, [r5], #1
 800832a:	f10b 0b01 	add.w	fp, fp, #1
 800832e:	e241      	b.n	80087b4 <_dtoa_r+0x95c>
 8008330:	07f2      	lsls	r2, r6, #31
 8008332:	d505      	bpl.n	8008340 <_dtoa_r+0x4e8>
 8008334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008338:	f7f8 f97e 	bl	8000638 <__aeabi_dmul>
 800833c:	3501      	adds	r5, #1
 800833e:	2301      	movs	r3, #1
 8008340:	1076      	asrs	r6, r6, #1
 8008342:	3708      	adds	r7, #8
 8008344:	e773      	b.n	800822e <_dtoa_r+0x3d6>
 8008346:	2502      	movs	r5, #2
 8008348:	e775      	b.n	8008236 <_dtoa_r+0x3de>
 800834a:	9e04      	ldr	r6, [sp, #16]
 800834c:	465f      	mov	r7, fp
 800834e:	e792      	b.n	8008276 <_dtoa_r+0x41e>
 8008350:	9900      	ldr	r1, [sp, #0]
 8008352:	4b50      	ldr	r3, [pc, #320]	; (8008494 <_dtoa_r+0x63c>)
 8008354:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008358:	4431      	add	r1, r6
 800835a:	9102      	str	r1, [sp, #8]
 800835c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800835e:	eeb0 9a47 	vmov.f32	s18, s14
 8008362:	eef0 9a67 	vmov.f32	s19, s15
 8008366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800836a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800836e:	2900      	cmp	r1, #0
 8008370:	d044      	beq.n	80083fc <_dtoa_r+0x5a4>
 8008372:	494e      	ldr	r1, [pc, #312]	; (80084ac <_dtoa_r+0x654>)
 8008374:	2000      	movs	r0, #0
 8008376:	f7f8 fa89 	bl	800088c <__aeabi_ddiv>
 800837a:	ec53 2b19 	vmov	r2, r3, d9
 800837e:	f7f7 ffa3 	bl	80002c8 <__aeabi_dsub>
 8008382:	9d00      	ldr	r5, [sp, #0]
 8008384:	ec41 0b19 	vmov	d9, r0, r1
 8008388:	4649      	mov	r1, r9
 800838a:	4640      	mov	r0, r8
 800838c:	f7f8 fc04 	bl	8000b98 <__aeabi_d2iz>
 8008390:	4606      	mov	r6, r0
 8008392:	f7f8 f8e7 	bl	8000564 <__aeabi_i2d>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4640      	mov	r0, r8
 800839c:	4649      	mov	r1, r9
 800839e:	f7f7 ff93 	bl	80002c8 <__aeabi_dsub>
 80083a2:	3630      	adds	r6, #48	; 0x30
 80083a4:	f805 6b01 	strb.w	r6, [r5], #1
 80083a8:	ec53 2b19 	vmov	r2, r3, d9
 80083ac:	4680      	mov	r8, r0
 80083ae:	4689      	mov	r9, r1
 80083b0:	f7f8 fbb4 	bl	8000b1c <__aeabi_dcmplt>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d164      	bne.n	8008482 <_dtoa_r+0x62a>
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	4937      	ldr	r1, [pc, #220]	; (800849c <_dtoa_r+0x644>)
 80083be:	2000      	movs	r0, #0
 80083c0:	f7f7 ff82 	bl	80002c8 <__aeabi_dsub>
 80083c4:	ec53 2b19 	vmov	r2, r3, d9
 80083c8:	f7f8 fba8 	bl	8000b1c <__aeabi_dcmplt>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f040 80b6 	bne.w	800853e <_dtoa_r+0x6e6>
 80083d2:	9b02      	ldr	r3, [sp, #8]
 80083d4:	429d      	cmp	r5, r3
 80083d6:	f43f af7c 	beq.w	80082d2 <_dtoa_r+0x47a>
 80083da:	4b31      	ldr	r3, [pc, #196]	; (80084a0 <_dtoa_r+0x648>)
 80083dc:	ec51 0b19 	vmov	r0, r1, d9
 80083e0:	2200      	movs	r2, #0
 80083e2:	f7f8 f929 	bl	8000638 <__aeabi_dmul>
 80083e6:	4b2e      	ldr	r3, [pc, #184]	; (80084a0 <_dtoa_r+0x648>)
 80083e8:	ec41 0b19 	vmov	d9, r0, r1
 80083ec:	2200      	movs	r2, #0
 80083ee:	4640      	mov	r0, r8
 80083f0:	4649      	mov	r1, r9
 80083f2:	f7f8 f921 	bl	8000638 <__aeabi_dmul>
 80083f6:	4680      	mov	r8, r0
 80083f8:	4689      	mov	r9, r1
 80083fa:	e7c5      	b.n	8008388 <_dtoa_r+0x530>
 80083fc:	ec51 0b17 	vmov	r0, r1, d7
 8008400:	f7f8 f91a 	bl	8000638 <__aeabi_dmul>
 8008404:	9b02      	ldr	r3, [sp, #8]
 8008406:	9d00      	ldr	r5, [sp, #0]
 8008408:	930f      	str	r3, [sp, #60]	; 0x3c
 800840a:	ec41 0b19 	vmov	d9, r0, r1
 800840e:	4649      	mov	r1, r9
 8008410:	4640      	mov	r0, r8
 8008412:	f7f8 fbc1 	bl	8000b98 <__aeabi_d2iz>
 8008416:	4606      	mov	r6, r0
 8008418:	f7f8 f8a4 	bl	8000564 <__aeabi_i2d>
 800841c:	3630      	adds	r6, #48	; 0x30
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f7 ff4f 	bl	80002c8 <__aeabi_dsub>
 800842a:	f805 6b01 	strb.w	r6, [r5], #1
 800842e:	9b02      	ldr	r3, [sp, #8]
 8008430:	429d      	cmp	r5, r3
 8008432:	4680      	mov	r8, r0
 8008434:	4689      	mov	r9, r1
 8008436:	f04f 0200 	mov.w	r2, #0
 800843a:	d124      	bne.n	8008486 <_dtoa_r+0x62e>
 800843c:	4b1b      	ldr	r3, [pc, #108]	; (80084ac <_dtoa_r+0x654>)
 800843e:	ec51 0b19 	vmov	r0, r1, d9
 8008442:	f7f7 ff43 	bl	80002cc <__adddf3>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4640      	mov	r0, r8
 800844c:	4649      	mov	r1, r9
 800844e:	f7f8 fb83 	bl	8000b58 <__aeabi_dcmpgt>
 8008452:	2800      	cmp	r0, #0
 8008454:	d173      	bne.n	800853e <_dtoa_r+0x6e6>
 8008456:	ec53 2b19 	vmov	r2, r3, d9
 800845a:	4914      	ldr	r1, [pc, #80]	; (80084ac <_dtoa_r+0x654>)
 800845c:	2000      	movs	r0, #0
 800845e:	f7f7 ff33 	bl	80002c8 <__aeabi_dsub>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4640      	mov	r0, r8
 8008468:	4649      	mov	r1, r9
 800846a:	f7f8 fb57 	bl	8000b1c <__aeabi_dcmplt>
 800846e:	2800      	cmp	r0, #0
 8008470:	f43f af2f 	beq.w	80082d2 <_dtoa_r+0x47a>
 8008474:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008476:	1e6b      	subs	r3, r5, #1
 8008478:	930f      	str	r3, [sp, #60]	; 0x3c
 800847a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800847e:	2b30      	cmp	r3, #48	; 0x30
 8008480:	d0f8      	beq.n	8008474 <_dtoa_r+0x61c>
 8008482:	46bb      	mov	fp, r7
 8008484:	e04a      	b.n	800851c <_dtoa_r+0x6c4>
 8008486:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <_dtoa_r+0x648>)
 8008488:	f7f8 f8d6 	bl	8000638 <__aeabi_dmul>
 800848c:	4680      	mov	r8, r0
 800848e:	4689      	mov	r9, r1
 8008490:	e7bd      	b.n	800840e <_dtoa_r+0x5b6>
 8008492:	bf00      	nop
 8008494:	0800b6b0 	.word	0x0800b6b0
 8008498:	0800b688 	.word	0x0800b688
 800849c:	3ff00000 	.word	0x3ff00000
 80084a0:	40240000 	.word	0x40240000
 80084a4:	401c0000 	.word	0x401c0000
 80084a8:	40140000 	.word	0x40140000
 80084ac:	3fe00000 	.word	0x3fe00000
 80084b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084b4:	9d00      	ldr	r5, [sp, #0]
 80084b6:	4642      	mov	r2, r8
 80084b8:	464b      	mov	r3, r9
 80084ba:	4630      	mov	r0, r6
 80084bc:	4639      	mov	r1, r7
 80084be:	f7f8 f9e5 	bl	800088c <__aeabi_ddiv>
 80084c2:	f7f8 fb69 	bl	8000b98 <__aeabi_d2iz>
 80084c6:	9001      	str	r0, [sp, #4]
 80084c8:	f7f8 f84c 	bl	8000564 <__aeabi_i2d>
 80084cc:	4642      	mov	r2, r8
 80084ce:	464b      	mov	r3, r9
 80084d0:	f7f8 f8b2 	bl	8000638 <__aeabi_dmul>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	4630      	mov	r0, r6
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f7 fef4 	bl	80002c8 <__aeabi_dsub>
 80084e0:	9e01      	ldr	r6, [sp, #4]
 80084e2:	9f04      	ldr	r7, [sp, #16]
 80084e4:	3630      	adds	r6, #48	; 0x30
 80084e6:	f805 6b01 	strb.w	r6, [r5], #1
 80084ea:	9e00      	ldr	r6, [sp, #0]
 80084ec:	1bae      	subs	r6, r5, r6
 80084ee:	42b7      	cmp	r7, r6
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	d134      	bne.n	8008560 <_dtoa_r+0x708>
 80084f6:	f7f7 fee9 	bl	80002cc <__adddf3>
 80084fa:	4642      	mov	r2, r8
 80084fc:	464b      	mov	r3, r9
 80084fe:	4606      	mov	r6, r0
 8008500:	460f      	mov	r7, r1
 8008502:	f7f8 fb29 	bl	8000b58 <__aeabi_dcmpgt>
 8008506:	b9c8      	cbnz	r0, 800853c <_dtoa_r+0x6e4>
 8008508:	4642      	mov	r2, r8
 800850a:	464b      	mov	r3, r9
 800850c:	4630      	mov	r0, r6
 800850e:	4639      	mov	r1, r7
 8008510:	f7f8 fafa 	bl	8000b08 <__aeabi_dcmpeq>
 8008514:	b110      	cbz	r0, 800851c <_dtoa_r+0x6c4>
 8008516:	9b01      	ldr	r3, [sp, #4]
 8008518:	07db      	lsls	r3, r3, #31
 800851a:	d40f      	bmi.n	800853c <_dtoa_r+0x6e4>
 800851c:	4651      	mov	r1, sl
 800851e:	4620      	mov	r0, r4
 8008520:	f000 fbcc 	bl	8008cbc <_Bfree>
 8008524:	2300      	movs	r3, #0
 8008526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008528:	702b      	strb	r3, [r5, #0]
 800852a:	f10b 0301 	add.w	r3, fp, #1
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008532:	2b00      	cmp	r3, #0
 8008534:	f43f ace2 	beq.w	8007efc <_dtoa_r+0xa4>
 8008538:	601d      	str	r5, [r3, #0]
 800853a:	e4df      	b.n	8007efc <_dtoa_r+0xa4>
 800853c:	465f      	mov	r7, fp
 800853e:	462b      	mov	r3, r5
 8008540:	461d      	mov	r5, r3
 8008542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008546:	2a39      	cmp	r2, #57	; 0x39
 8008548:	d106      	bne.n	8008558 <_dtoa_r+0x700>
 800854a:	9a00      	ldr	r2, [sp, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d1f7      	bne.n	8008540 <_dtoa_r+0x6e8>
 8008550:	9900      	ldr	r1, [sp, #0]
 8008552:	2230      	movs	r2, #48	; 0x30
 8008554:	3701      	adds	r7, #1
 8008556:	700a      	strb	r2, [r1, #0]
 8008558:	781a      	ldrb	r2, [r3, #0]
 800855a:	3201      	adds	r2, #1
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	e790      	b.n	8008482 <_dtoa_r+0x62a>
 8008560:	4ba3      	ldr	r3, [pc, #652]	; (80087f0 <_dtoa_r+0x998>)
 8008562:	2200      	movs	r2, #0
 8008564:	f7f8 f868 	bl	8000638 <__aeabi_dmul>
 8008568:	2200      	movs	r2, #0
 800856a:	2300      	movs	r3, #0
 800856c:	4606      	mov	r6, r0
 800856e:	460f      	mov	r7, r1
 8008570:	f7f8 faca 	bl	8000b08 <__aeabi_dcmpeq>
 8008574:	2800      	cmp	r0, #0
 8008576:	d09e      	beq.n	80084b6 <_dtoa_r+0x65e>
 8008578:	e7d0      	b.n	800851c <_dtoa_r+0x6c4>
 800857a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857c:	2a00      	cmp	r2, #0
 800857e:	f000 80ca 	beq.w	8008716 <_dtoa_r+0x8be>
 8008582:	9a07      	ldr	r2, [sp, #28]
 8008584:	2a01      	cmp	r2, #1
 8008586:	f300 80ad 	bgt.w	80086e4 <_dtoa_r+0x88c>
 800858a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800858c:	2a00      	cmp	r2, #0
 800858e:	f000 80a5 	beq.w	80086dc <_dtoa_r+0x884>
 8008592:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008596:	9e08      	ldr	r6, [sp, #32]
 8008598:	9d05      	ldr	r5, [sp, #20]
 800859a:	9a05      	ldr	r2, [sp, #20]
 800859c:	441a      	add	r2, r3
 800859e:	9205      	str	r2, [sp, #20]
 80085a0:	9a06      	ldr	r2, [sp, #24]
 80085a2:	2101      	movs	r1, #1
 80085a4:	441a      	add	r2, r3
 80085a6:	4620      	mov	r0, r4
 80085a8:	9206      	str	r2, [sp, #24]
 80085aa:	f000 fc87 	bl	8008ebc <__i2b>
 80085ae:	4607      	mov	r7, r0
 80085b0:	b165      	cbz	r5, 80085cc <_dtoa_r+0x774>
 80085b2:	9b06      	ldr	r3, [sp, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dd09      	ble.n	80085cc <_dtoa_r+0x774>
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	9a05      	ldr	r2, [sp, #20]
 80085bc:	bfa8      	it	ge
 80085be:	462b      	movge	r3, r5
 80085c0:	1ad2      	subs	r2, r2, r3
 80085c2:	9205      	str	r2, [sp, #20]
 80085c4:	9a06      	ldr	r2, [sp, #24]
 80085c6:	1aed      	subs	r5, r5, r3
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	9306      	str	r3, [sp, #24]
 80085cc:	9b08      	ldr	r3, [sp, #32]
 80085ce:	b1f3      	cbz	r3, 800860e <_dtoa_r+0x7b6>
 80085d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 80a3 	beq.w	800871e <_dtoa_r+0x8c6>
 80085d8:	2e00      	cmp	r6, #0
 80085da:	dd10      	ble.n	80085fe <_dtoa_r+0x7a6>
 80085dc:	4639      	mov	r1, r7
 80085de:	4632      	mov	r2, r6
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 fd2b 	bl	800903c <__pow5mult>
 80085e6:	4652      	mov	r2, sl
 80085e8:	4601      	mov	r1, r0
 80085ea:	4607      	mov	r7, r0
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 fc7b 	bl	8008ee8 <__multiply>
 80085f2:	4651      	mov	r1, sl
 80085f4:	4680      	mov	r8, r0
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 fb60 	bl	8008cbc <_Bfree>
 80085fc:	46c2      	mov	sl, r8
 80085fe:	9b08      	ldr	r3, [sp, #32]
 8008600:	1b9a      	subs	r2, r3, r6
 8008602:	d004      	beq.n	800860e <_dtoa_r+0x7b6>
 8008604:	4651      	mov	r1, sl
 8008606:	4620      	mov	r0, r4
 8008608:	f000 fd18 	bl	800903c <__pow5mult>
 800860c:	4682      	mov	sl, r0
 800860e:	2101      	movs	r1, #1
 8008610:	4620      	mov	r0, r4
 8008612:	f000 fc53 	bl	8008ebc <__i2b>
 8008616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008618:	2b00      	cmp	r3, #0
 800861a:	4606      	mov	r6, r0
 800861c:	f340 8081 	ble.w	8008722 <_dtoa_r+0x8ca>
 8008620:	461a      	mov	r2, r3
 8008622:	4601      	mov	r1, r0
 8008624:	4620      	mov	r0, r4
 8008626:	f000 fd09 	bl	800903c <__pow5mult>
 800862a:	9b07      	ldr	r3, [sp, #28]
 800862c:	2b01      	cmp	r3, #1
 800862e:	4606      	mov	r6, r0
 8008630:	dd7a      	ble.n	8008728 <_dtoa_r+0x8d0>
 8008632:	f04f 0800 	mov.w	r8, #0
 8008636:	6933      	ldr	r3, [r6, #16]
 8008638:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800863c:	6918      	ldr	r0, [r3, #16]
 800863e:	f000 fbef 	bl	8008e20 <__hi0bits>
 8008642:	f1c0 0020 	rsb	r0, r0, #32
 8008646:	9b06      	ldr	r3, [sp, #24]
 8008648:	4418      	add	r0, r3
 800864a:	f010 001f 	ands.w	r0, r0, #31
 800864e:	f000 8094 	beq.w	800877a <_dtoa_r+0x922>
 8008652:	f1c0 0320 	rsb	r3, r0, #32
 8008656:	2b04      	cmp	r3, #4
 8008658:	f340 8085 	ble.w	8008766 <_dtoa_r+0x90e>
 800865c:	9b05      	ldr	r3, [sp, #20]
 800865e:	f1c0 001c 	rsb	r0, r0, #28
 8008662:	4403      	add	r3, r0
 8008664:	9305      	str	r3, [sp, #20]
 8008666:	9b06      	ldr	r3, [sp, #24]
 8008668:	4403      	add	r3, r0
 800866a:	4405      	add	r5, r0
 800866c:	9306      	str	r3, [sp, #24]
 800866e:	9b05      	ldr	r3, [sp, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	dd05      	ble.n	8008680 <_dtoa_r+0x828>
 8008674:	4651      	mov	r1, sl
 8008676:	461a      	mov	r2, r3
 8008678:	4620      	mov	r0, r4
 800867a:	f000 fd39 	bl	80090f0 <__lshift>
 800867e:	4682      	mov	sl, r0
 8008680:	9b06      	ldr	r3, [sp, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	dd05      	ble.n	8008692 <_dtoa_r+0x83a>
 8008686:	4631      	mov	r1, r6
 8008688:	461a      	mov	r2, r3
 800868a:	4620      	mov	r0, r4
 800868c:	f000 fd30 	bl	80090f0 <__lshift>
 8008690:	4606      	mov	r6, r0
 8008692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008694:	2b00      	cmp	r3, #0
 8008696:	d072      	beq.n	800877e <_dtoa_r+0x926>
 8008698:	4631      	mov	r1, r6
 800869a:	4650      	mov	r0, sl
 800869c:	f000 fd94 	bl	80091c8 <__mcmp>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	da6c      	bge.n	800877e <_dtoa_r+0x926>
 80086a4:	2300      	movs	r3, #0
 80086a6:	4651      	mov	r1, sl
 80086a8:	220a      	movs	r2, #10
 80086aa:	4620      	mov	r0, r4
 80086ac:	f000 fb28 	bl	8008d00 <__multadd>
 80086b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086b6:	4682      	mov	sl, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 81b0 	beq.w	8008a1e <_dtoa_r+0xbc6>
 80086be:	2300      	movs	r3, #0
 80086c0:	4639      	mov	r1, r7
 80086c2:	220a      	movs	r2, #10
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 fb1b 	bl	8008d00 <__multadd>
 80086ca:	9b01      	ldr	r3, [sp, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	4607      	mov	r7, r0
 80086d0:	f300 8096 	bgt.w	8008800 <_dtoa_r+0x9a8>
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	dc59      	bgt.n	800878e <_dtoa_r+0x936>
 80086da:	e091      	b.n	8008800 <_dtoa_r+0x9a8>
 80086dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086e2:	e758      	b.n	8008596 <_dtoa_r+0x73e>
 80086e4:	9b04      	ldr	r3, [sp, #16]
 80086e6:	1e5e      	subs	r6, r3, #1
 80086e8:	9b08      	ldr	r3, [sp, #32]
 80086ea:	42b3      	cmp	r3, r6
 80086ec:	bfbf      	itttt	lt
 80086ee:	9b08      	ldrlt	r3, [sp, #32]
 80086f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80086f2:	9608      	strlt	r6, [sp, #32]
 80086f4:	1af3      	sublt	r3, r6, r3
 80086f6:	bfb4      	ite	lt
 80086f8:	18d2      	addlt	r2, r2, r3
 80086fa:	1b9e      	subge	r6, r3, r6
 80086fc:	9b04      	ldr	r3, [sp, #16]
 80086fe:	bfbc      	itt	lt
 8008700:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008702:	2600      	movlt	r6, #0
 8008704:	2b00      	cmp	r3, #0
 8008706:	bfb7      	itett	lt
 8008708:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800870c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008710:	1a9d      	sublt	r5, r3, r2
 8008712:	2300      	movlt	r3, #0
 8008714:	e741      	b.n	800859a <_dtoa_r+0x742>
 8008716:	9e08      	ldr	r6, [sp, #32]
 8008718:	9d05      	ldr	r5, [sp, #20]
 800871a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800871c:	e748      	b.n	80085b0 <_dtoa_r+0x758>
 800871e:	9a08      	ldr	r2, [sp, #32]
 8008720:	e770      	b.n	8008604 <_dtoa_r+0x7ac>
 8008722:	9b07      	ldr	r3, [sp, #28]
 8008724:	2b01      	cmp	r3, #1
 8008726:	dc19      	bgt.n	800875c <_dtoa_r+0x904>
 8008728:	9b02      	ldr	r3, [sp, #8]
 800872a:	b9bb      	cbnz	r3, 800875c <_dtoa_r+0x904>
 800872c:	9b03      	ldr	r3, [sp, #12]
 800872e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008732:	b99b      	cbnz	r3, 800875c <_dtoa_r+0x904>
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800873a:	0d1b      	lsrs	r3, r3, #20
 800873c:	051b      	lsls	r3, r3, #20
 800873e:	b183      	cbz	r3, 8008762 <_dtoa_r+0x90a>
 8008740:	9b05      	ldr	r3, [sp, #20]
 8008742:	3301      	adds	r3, #1
 8008744:	9305      	str	r3, [sp, #20]
 8008746:	9b06      	ldr	r3, [sp, #24]
 8008748:	3301      	adds	r3, #1
 800874a:	9306      	str	r3, [sp, #24]
 800874c:	f04f 0801 	mov.w	r8, #1
 8008750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008752:	2b00      	cmp	r3, #0
 8008754:	f47f af6f 	bne.w	8008636 <_dtoa_r+0x7de>
 8008758:	2001      	movs	r0, #1
 800875a:	e774      	b.n	8008646 <_dtoa_r+0x7ee>
 800875c:	f04f 0800 	mov.w	r8, #0
 8008760:	e7f6      	b.n	8008750 <_dtoa_r+0x8f8>
 8008762:	4698      	mov	r8, r3
 8008764:	e7f4      	b.n	8008750 <_dtoa_r+0x8f8>
 8008766:	d082      	beq.n	800866e <_dtoa_r+0x816>
 8008768:	9a05      	ldr	r2, [sp, #20]
 800876a:	331c      	adds	r3, #28
 800876c:	441a      	add	r2, r3
 800876e:	9205      	str	r2, [sp, #20]
 8008770:	9a06      	ldr	r2, [sp, #24]
 8008772:	441a      	add	r2, r3
 8008774:	441d      	add	r5, r3
 8008776:	9206      	str	r2, [sp, #24]
 8008778:	e779      	b.n	800866e <_dtoa_r+0x816>
 800877a:	4603      	mov	r3, r0
 800877c:	e7f4      	b.n	8008768 <_dtoa_r+0x910>
 800877e:	9b04      	ldr	r3, [sp, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	dc37      	bgt.n	80087f4 <_dtoa_r+0x99c>
 8008784:	9b07      	ldr	r3, [sp, #28]
 8008786:	2b02      	cmp	r3, #2
 8008788:	dd34      	ble.n	80087f4 <_dtoa_r+0x99c>
 800878a:	9b04      	ldr	r3, [sp, #16]
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	b963      	cbnz	r3, 80087ac <_dtoa_r+0x954>
 8008792:	4631      	mov	r1, r6
 8008794:	2205      	movs	r2, #5
 8008796:	4620      	mov	r0, r4
 8008798:	f000 fab2 	bl	8008d00 <__multadd>
 800879c:	4601      	mov	r1, r0
 800879e:	4606      	mov	r6, r0
 80087a0:	4650      	mov	r0, sl
 80087a2:	f000 fd11 	bl	80091c8 <__mcmp>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f73f adbb 	bgt.w	8008322 <_dtoa_r+0x4ca>
 80087ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ae:	9d00      	ldr	r5, [sp, #0]
 80087b0:	ea6f 0b03 	mvn.w	fp, r3
 80087b4:	f04f 0800 	mov.w	r8, #0
 80087b8:	4631      	mov	r1, r6
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 fa7e 	bl	8008cbc <_Bfree>
 80087c0:	2f00      	cmp	r7, #0
 80087c2:	f43f aeab 	beq.w	800851c <_dtoa_r+0x6c4>
 80087c6:	f1b8 0f00 	cmp.w	r8, #0
 80087ca:	d005      	beq.n	80087d8 <_dtoa_r+0x980>
 80087cc:	45b8      	cmp	r8, r7
 80087ce:	d003      	beq.n	80087d8 <_dtoa_r+0x980>
 80087d0:	4641      	mov	r1, r8
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 fa72 	bl	8008cbc <_Bfree>
 80087d8:	4639      	mov	r1, r7
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 fa6e 	bl	8008cbc <_Bfree>
 80087e0:	e69c      	b.n	800851c <_dtoa_r+0x6c4>
 80087e2:	2600      	movs	r6, #0
 80087e4:	4637      	mov	r7, r6
 80087e6:	e7e1      	b.n	80087ac <_dtoa_r+0x954>
 80087e8:	46bb      	mov	fp, r7
 80087ea:	4637      	mov	r7, r6
 80087ec:	e599      	b.n	8008322 <_dtoa_r+0x4ca>
 80087ee:	bf00      	nop
 80087f0:	40240000 	.word	0x40240000
 80087f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 80c8 	beq.w	800898c <_dtoa_r+0xb34>
 80087fc:	9b04      	ldr	r3, [sp, #16]
 80087fe:	9301      	str	r3, [sp, #4]
 8008800:	2d00      	cmp	r5, #0
 8008802:	dd05      	ble.n	8008810 <_dtoa_r+0x9b8>
 8008804:	4639      	mov	r1, r7
 8008806:	462a      	mov	r2, r5
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fc71 	bl	80090f0 <__lshift>
 800880e:	4607      	mov	r7, r0
 8008810:	f1b8 0f00 	cmp.w	r8, #0
 8008814:	d05b      	beq.n	80088ce <_dtoa_r+0xa76>
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fa0f 	bl	8008c3c <_Balloc>
 800881e:	4605      	mov	r5, r0
 8008820:	b928      	cbnz	r0, 800882e <_dtoa_r+0x9d6>
 8008822:	4b83      	ldr	r3, [pc, #524]	; (8008a30 <_dtoa_r+0xbd8>)
 8008824:	4602      	mov	r2, r0
 8008826:	f240 21ef 	movw	r1, #751	; 0x2ef
 800882a:	f7ff bb2e 	b.w	8007e8a <_dtoa_r+0x32>
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	3202      	adds	r2, #2
 8008832:	0092      	lsls	r2, r2, #2
 8008834:	f107 010c 	add.w	r1, r7, #12
 8008838:	300c      	adds	r0, #12
 800883a:	f001 ff85 	bl	800a748 <memcpy>
 800883e:	2201      	movs	r2, #1
 8008840:	4629      	mov	r1, r5
 8008842:	4620      	mov	r0, r4
 8008844:	f000 fc54 	bl	80090f0 <__lshift>
 8008848:	9b00      	ldr	r3, [sp, #0]
 800884a:	3301      	adds	r3, #1
 800884c:	9304      	str	r3, [sp, #16]
 800884e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008852:	4413      	add	r3, r2
 8008854:	9308      	str	r3, [sp, #32]
 8008856:	9b02      	ldr	r3, [sp, #8]
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	46b8      	mov	r8, r7
 800885e:	9306      	str	r3, [sp, #24]
 8008860:	4607      	mov	r7, r0
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	4631      	mov	r1, r6
 8008866:	3b01      	subs	r3, #1
 8008868:	4650      	mov	r0, sl
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	f7ff fa6a 	bl	8007d44 <quorem>
 8008870:	4641      	mov	r1, r8
 8008872:	9002      	str	r0, [sp, #8]
 8008874:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008878:	4650      	mov	r0, sl
 800887a:	f000 fca5 	bl	80091c8 <__mcmp>
 800887e:	463a      	mov	r2, r7
 8008880:	9005      	str	r0, [sp, #20]
 8008882:	4631      	mov	r1, r6
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fcbb 	bl	8009200 <__mdiff>
 800888a:	68c2      	ldr	r2, [r0, #12]
 800888c:	4605      	mov	r5, r0
 800888e:	bb02      	cbnz	r2, 80088d2 <_dtoa_r+0xa7a>
 8008890:	4601      	mov	r1, r0
 8008892:	4650      	mov	r0, sl
 8008894:	f000 fc98 	bl	80091c8 <__mcmp>
 8008898:	4602      	mov	r2, r0
 800889a:	4629      	mov	r1, r5
 800889c:	4620      	mov	r0, r4
 800889e:	9209      	str	r2, [sp, #36]	; 0x24
 80088a0:	f000 fa0c 	bl	8008cbc <_Bfree>
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088a8:	9d04      	ldr	r5, [sp, #16]
 80088aa:	ea43 0102 	orr.w	r1, r3, r2
 80088ae:	9b06      	ldr	r3, [sp, #24]
 80088b0:	4319      	orrs	r1, r3
 80088b2:	d110      	bne.n	80088d6 <_dtoa_r+0xa7e>
 80088b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80088b8:	d029      	beq.n	800890e <_dtoa_r+0xab6>
 80088ba:	9b05      	ldr	r3, [sp, #20]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	dd02      	ble.n	80088c6 <_dtoa_r+0xa6e>
 80088c0:	9b02      	ldr	r3, [sp, #8]
 80088c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80088c6:	9b01      	ldr	r3, [sp, #4]
 80088c8:	f883 9000 	strb.w	r9, [r3]
 80088cc:	e774      	b.n	80087b8 <_dtoa_r+0x960>
 80088ce:	4638      	mov	r0, r7
 80088d0:	e7ba      	b.n	8008848 <_dtoa_r+0x9f0>
 80088d2:	2201      	movs	r2, #1
 80088d4:	e7e1      	b.n	800889a <_dtoa_r+0xa42>
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	db04      	blt.n	80088e6 <_dtoa_r+0xa8e>
 80088dc:	9907      	ldr	r1, [sp, #28]
 80088de:	430b      	orrs	r3, r1
 80088e0:	9906      	ldr	r1, [sp, #24]
 80088e2:	430b      	orrs	r3, r1
 80088e4:	d120      	bne.n	8008928 <_dtoa_r+0xad0>
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	dded      	ble.n	80088c6 <_dtoa_r+0xa6e>
 80088ea:	4651      	mov	r1, sl
 80088ec:	2201      	movs	r2, #1
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 fbfe 	bl	80090f0 <__lshift>
 80088f4:	4631      	mov	r1, r6
 80088f6:	4682      	mov	sl, r0
 80088f8:	f000 fc66 	bl	80091c8 <__mcmp>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	dc03      	bgt.n	8008908 <_dtoa_r+0xab0>
 8008900:	d1e1      	bne.n	80088c6 <_dtoa_r+0xa6e>
 8008902:	f019 0f01 	tst.w	r9, #1
 8008906:	d0de      	beq.n	80088c6 <_dtoa_r+0xa6e>
 8008908:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800890c:	d1d8      	bne.n	80088c0 <_dtoa_r+0xa68>
 800890e:	9a01      	ldr	r2, [sp, #4]
 8008910:	2339      	movs	r3, #57	; 0x39
 8008912:	7013      	strb	r3, [r2, #0]
 8008914:	462b      	mov	r3, r5
 8008916:	461d      	mov	r5, r3
 8008918:	3b01      	subs	r3, #1
 800891a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800891e:	2a39      	cmp	r2, #57	; 0x39
 8008920:	d06c      	beq.n	80089fc <_dtoa_r+0xba4>
 8008922:	3201      	adds	r2, #1
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e747      	b.n	80087b8 <_dtoa_r+0x960>
 8008928:	2a00      	cmp	r2, #0
 800892a:	dd07      	ble.n	800893c <_dtoa_r+0xae4>
 800892c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008930:	d0ed      	beq.n	800890e <_dtoa_r+0xab6>
 8008932:	9a01      	ldr	r2, [sp, #4]
 8008934:	f109 0301 	add.w	r3, r9, #1
 8008938:	7013      	strb	r3, [r2, #0]
 800893a:	e73d      	b.n	80087b8 <_dtoa_r+0x960>
 800893c:	9b04      	ldr	r3, [sp, #16]
 800893e:	9a08      	ldr	r2, [sp, #32]
 8008940:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008944:	4293      	cmp	r3, r2
 8008946:	d043      	beq.n	80089d0 <_dtoa_r+0xb78>
 8008948:	4651      	mov	r1, sl
 800894a:	2300      	movs	r3, #0
 800894c:	220a      	movs	r2, #10
 800894e:	4620      	mov	r0, r4
 8008950:	f000 f9d6 	bl	8008d00 <__multadd>
 8008954:	45b8      	cmp	r8, r7
 8008956:	4682      	mov	sl, r0
 8008958:	f04f 0300 	mov.w	r3, #0
 800895c:	f04f 020a 	mov.w	r2, #10
 8008960:	4641      	mov	r1, r8
 8008962:	4620      	mov	r0, r4
 8008964:	d107      	bne.n	8008976 <_dtoa_r+0xb1e>
 8008966:	f000 f9cb 	bl	8008d00 <__multadd>
 800896a:	4680      	mov	r8, r0
 800896c:	4607      	mov	r7, r0
 800896e:	9b04      	ldr	r3, [sp, #16]
 8008970:	3301      	adds	r3, #1
 8008972:	9304      	str	r3, [sp, #16]
 8008974:	e775      	b.n	8008862 <_dtoa_r+0xa0a>
 8008976:	f000 f9c3 	bl	8008d00 <__multadd>
 800897a:	4639      	mov	r1, r7
 800897c:	4680      	mov	r8, r0
 800897e:	2300      	movs	r3, #0
 8008980:	220a      	movs	r2, #10
 8008982:	4620      	mov	r0, r4
 8008984:	f000 f9bc 	bl	8008d00 <__multadd>
 8008988:	4607      	mov	r7, r0
 800898a:	e7f0      	b.n	800896e <_dtoa_r+0xb16>
 800898c:	9b04      	ldr	r3, [sp, #16]
 800898e:	9301      	str	r3, [sp, #4]
 8008990:	9d00      	ldr	r5, [sp, #0]
 8008992:	4631      	mov	r1, r6
 8008994:	4650      	mov	r0, sl
 8008996:	f7ff f9d5 	bl	8007d44 <quorem>
 800899a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800899e:	9b00      	ldr	r3, [sp, #0]
 80089a0:	f805 9b01 	strb.w	r9, [r5], #1
 80089a4:	1aea      	subs	r2, r5, r3
 80089a6:	9b01      	ldr	r3, [sp, #4]
 80089a8:	4293      	cmp	r3, r2
 80089aa:	dd07      	ble.n	80089bc <_dtoa_r+0xb64>
 80089ac:	4651      	mov	r1, sl
 80089ae:	2300      	movs	r3, #0
 80089b0:	220a      	movs	r2, #10
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 f9a4 	bl	8008d00 <__multadd>
 80089b8:	4682      	mov	sl, r0
 80089ba:	e7ea      	b.n	8008992 <_dtoa_r+0xb3a>
 80089bc:	9b01      	ldr	r3, [sp, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	bfc8      	it	gt
 80089c2:	461d      	movgt	r5, r3
 80089c4:	9b00      	ldr	r3, [sp, #0]
 80089c6:	bfd8      	it	le
 80089c8:	2501      	movle	r5, #1
 80089ca:	441d      	add	r5, r3
 80089cc:	f04f 0800 	mov.w	r8, #0
 80089d0:	4651      	mov	r1, sl
 80089d2:	2201      	movs	r2, #1
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 fb8b 	bl	80090f0 <__lshift>
 80089da:	4631      	mov	r1, r6
 80089dc:	4682      	mov	sl, r0
 80089de:	f000 fbf3 	bl	80091c8 <__mcmp>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	dc96      	bgt.n	8008914 <_dtoa_r+0xabc>
 80089e6:	d102      	bne.n	80089ee <_dtoa_r+0xb96>
 80089e8:	f019 0f01 	tst.w	r9, #1
 80089ec:	d192      	bne.n	8008914 <_dtoa_r+0xabc>
 80089ee:	462b      	mov	r3, r5
 80089f0:	461d      	mov	r5, r3
 80089f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089f6:	2a30      	cmp	r2, #48	; 0x30
 80089f8:	d0fa      	beq.n	80089f0 <_dtoa_r+0xb98>
 80089fa:	e6dd      	b.n	80087b8 <_dtoa_r+0x960>
 80089fc:	9a00      	ldr	r2, [sp, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d189      	bne.n	8008916 <_dtoa_r+0xabe>
 8008a02:	f10b 0b01 	add.w	fp, fp, #1
 8008a06:	2331      	movs	r3, #49	; 0x31
 8008a08:	e796      	b.n	8008938 <_dtoa_r+0xae0>
 8008a0a:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <_dtoa_r+0xbdc>)
 8008a0c:	f7ff ba99 	b.w	8007f42 <_dtoa_r+0xea>
 8008a10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f47f aa6d 	bne.w	8007ef2 <_dtoa_r+0x9a>
 8008a18:	4b07      	ldr	r3, [pc, #28]	; (8008a38 <_dtoa_r+0xbe0>)
 8008a1a:	f7ff ba92 	b.w	8007f42 <_dtoa_r+0xea>
 8008a1e:	9b01      	ldr	r3, [sp, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dcb5      	bgt.n	8008990 <_dtoa_r+0xb38>
 8008a24:	9b07      	ldr	r3, [sp, #28]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	f73f aeb1 	bgt.w	800878e <_dtoa_r+0x936>
 8008a2c:	e7b0      	b.n	8008990 <_dtoa_r+0xb38>
 8008a2e:	bf00      	nop
 8008a30:	0800b61d 	.word	0x0800b61d
 8008a34:	0800b578 	.word	0x0800b578
 8008a38:	0800b5a1 	.word	0x0800b5a1

08008a3c <_free_r>:
 8008a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a3e:	2900      	cmp	r1, #0
 8008a40:	d044      	beq.n	8008acc <_free_r+0x90>
 8008a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a46:	9001      	str	r0, [sp, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a4e:	bfb8      	it	lt
 8008a50:	18e4      	addlt	r4, r4, r3
 8008a52:	f000 f8e7 	bl	8008c24 <__malloc_lock>
 8008a56:	4a1e      	ldr	r2, [pc, #120]	; (8008ad0 <_free_r+0x94>)
 8008a58:	9801      	ldr	r0, [sp, #4]
 8008a5a:	6813      	ldr	r3, [r2, #0]
 8008a5c:	b933      	cbnz	r3, 8008a6c <_free_r+0x30>
 8008a5e:	6063      	str	r3, [r4, #4]
 8008a60:	6014      	str	r4, [r2, #0]
 8008a62:	b003      	add	sp, #12
 8008a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a68:	f000 b8e2 	b.w	8008c30 <__malloc_unlock>
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d908      	bls.n	8008a82 <_free_r+0x46>
 8008a70:	6825      	ldr	r5, [r4, #0]
 8008a72:	1961      	adds	r1, r4, r5
 8008a74:	428b      	cmp	r3, r1
 8008a76:	bf01      	itttt	eq
 8008a78:	6819      	ldreq	r1, [r3, #0]
 8008a7a:	685b      	ldreq	r3, [r3, #4]
 8008a7c:	1949      	addeq	r1, r1, r5
 8008a7e:	6021      	streq	r1, [r4, #0]
 8008a80:	e7ed      	b.n	8008a5e <_free_r+0x22>
 8008a82:	461a      	mov	r2, r3
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	b10b      	cbz	r3, 8008a8c <_free_r+0x50>
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	d9fa      	bls.n	8008a82 <_free_r+0x46>
 8008a8c:	6811      	ldr	r1, [r2, #0]
 8008a8e:	1855      	adds	r5, r2, r1
 8008a90:	42a5      	cmp	r5, r4
 8008a92:	d10b      	bne.n	8008aac <_free_r+0x70>
 8008a94:	6824      	ldr	r4, [r4, #0]
 8008a96:	4421      	add	r1, r4
 8008a98:	1854      	adds	r4, r2, r1
 8008a9a:	42a3      	cmp	r3, r4
 8008a9c:	6011      	str	r1, [r2, #0]
 8008a9e:	d1e0      	bne.n	8008a62 <_free_r+0x26>
 8008aa0:	681c      	ldr	r4, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	6053      	str	r3, [r2, #4]
 8008aa6:	440c      	add	r4, r1
 8008aa8:	6014      	str	r4, [r2, #0]
 8008aaa:	e7da      	b.n	8008a62 <_free_r+0x26>
 8008aac:	d902      	bls.n	8008ab4 <_free_r+0x78>
 8008aae:	230c      	movs	r3, #12
 8008ab0:	6003      	str	r3, [r0, #0]
 8008ab2:	e7d6      	b.n	8008a62 <_free_r+0x26>
 8008ab4:	6825      	ldr	r5, [r4, #0]
 8008ab6:	1961      	adds	r1, r4, r5
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	bf04      	itt	eq
 8008abc:	6819      	ldreq	r1, [r3, #0]
 8008abe:	685b      	ldreq	r3, [r3, #4]
 8008ac0:	6063      	str	r3, [r4, #4]
 8008ac2:	bf04      	itt	eq
 8008ac4:	1949      	addeq	r1, r1, r5
 8008ac6:	6021      	streq	r1, [r4, #0]
 8008ac8:	6054      	str	r4, [r2, #4]
 8008aca:	e7ca      	b.n	8008a62 <_free_r+0x26>
 8008acc:	b003      	add	sp, #12
 8008ace:	bd30      	pop	{r4, r5, pc}
 8008ad0:	20000c80 	.word	0x20000c80

08008ad4 <malloc>:
 8008ad4:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <malloc+0xc>)
 8008ad6:	4601      	mov	r1, r0
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	f000 b823 	b.w	8008b24 <_malloc_r>
 8008ade:	bf00      	nop
 8008ae0:	2000006c 	.word	0x2000006c

08008ae4 <sbrk_aligned>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	4e0e      	ldr	r6, [pc, #56]	; (8008b20 <sbrk_aligned+0x3c>)
 8008ae8:	460c      	mov	r4, r1
 8008aea:	6831      	ldr	r1, [r6, #0]
 8008aec:	4605      	mov	r5, r0
 8008aee:	b911      	cbnz	r1, 8008af6 <sbrk_aligned+0x12>
 8008af0:	f001 fe1a 	bl	800a728 <_sbrk_r>
 8008af4:	6030      	str	r0, [r6, #0]
 8008af6:	4621      	mov	r1, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f001 fe15 	bl	800a728 <_sbrk_r>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	d00a      	beq.n	8008b18 <sbrk_aligned+0x34>
 8008b02:	1cc4      	adds	r4, r0, #3
 8008b04:	f024 0403 	bic.w	r4, r4, #3
 8008b08:	42a0      	cmp	r0, r4
 8008b0a:	d007      	beq.n	8008b1c <sbrk_aligned+0x38>
 8008b0c:	1a21      	subs	r1, r4, r0
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f001 fe0a 	bl	800a728 <_sbrk_r>
 8008b14:	3001      	adds	r0, #1
 8008b16:	d101      	bne.n	8008b1c <sbrk_aligned+0x38>
 8008b18:	f04f 34ff 	mov.w	r4, #4294967295
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	20000c84 	.word	0x20000c84

08008b24 <_malloc_r>:
 8008b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b28:	1ccd      	adds	r5, r1, #3
 8008b2a:	f025 0503 	bic.w	r5, r5, #3
 8008b2e:	3508      	adds	r5, #8
 8008b30:	2d0c      	cmp	r5, #12
 8008b32:	bf38      	it	cc
 8008b34:	250c      	movcc	r5, #12
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	4607      	mov	r7, r0
 8008b3a:	db01      	blt.n	8008b40 <_malloc_r+0x1c>
 8008b3c:	42a9      	cmp	r1, r5
 8008b3e:	d905      	bls.n	8008b4c <_malloc_r+0x28>
 8008b40:	230c      	movs	r3, #12
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	2600      	movs	r6, #0
 8008b46:	4630      	mov	r0, r6
 8008b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c20 <_malloc_r+0xfc>
 8008b50:	f000 f868 	bl	8008c24 <__malloc_lock>
 8008b54:	f8d8 3000 	ldr.w	r3, [r8]
 8008b58:	461c      	mov	r4, r3
 8008b5a:	bb5c      	cbnz	r4, 8008bb4 <_malloc_r+0x90>
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	4638      	mov	r0, r7
 8008b60:	f7ff ffc0 	bl	8008ae4 <sbrk_aligned>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	4604      	mov	r4, r0
 8008b68:	d155      	bne.n	8008c16 <_malloc_r+0xf2>
 8008b6a:	f8d8 4000 	ldr.w	r4, [r8]
 8008b6e:	4626      	mov	r6, r4
 8008b70:	2e00      	cmp	r6, #0
 8008b72:	d145      	bne.n	8008c00 <_malloc_r+0xdc>
 8008b74:	2c00      	cmp	r4, #0
 8008b76:	d048      	beq.n	8008c0a <_malloc_r+0xe6>
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	eb04 0903 	add.w	r9, r4, r3
 8008b82:	f001 fdd1 	bl	800a728 <_sbrk_r>
 8008b86:	4581      	cmp	r9, r0
 8008b88:	d13f      	bne.n	8008c0a <_malloc_r+0xe6>
 8008b8a:	6821      	ldr	r1, [r4, #0]
 8008b8c:	1a6d      	subs	r5, r5, r1
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4638      	mov	r0, r7
 8008b92:	f7ff ffa7 	bl	8008ae4 <sbrk_aligned>
 8008b96:	3001      	adds	r0, #1
 8008b98:	d037      	beq.n	8008c0a <_malloc_r+0xe6>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	442b      	add	r3, r5
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d038      	beq.n	8008c1a <_malloc_r+0xf6>
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	42a2      	cmp	r2, r4
 8008bac:	d12b      	bne.n	8008c06 <_malloc_r+0xe2>
 8008bae:	2200      	movs	r2, #0
 8008bb0:	605a      	str	r2, [r3, #4]
 8008bb2:	e00f      	b.n	8008bd4 <_malloc_r+0xb0>
 8008bb4:	6822      	ldr	r2, [r4, #0]
 8008bb6:	1b52      	subs	r2, r2, r5
 8008bb8:	d41f      	bmi.n	8008bfa <_malloc_r+0xd6>
 8008bba:	2a0b      	cmp	r2, #11
 8008bbc:	d917      	bls.n	8008bee <_malloc_r+0xca>
 8008bbe:	1961      	adds	r1, r4, r5
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	6025      	str	r5, [r4, #0]
 8008bc4:	bf18      	it	ne
 8008bc6:	6059      	strne	r1, [r3, #4]
 8008bc8:	6863      	ldr	r3, [r4, #4]
 8008bca:	bf08      	it	eq
 8008bcc:	f8c8 1000 	streq.w	r1, [r8]
 8008bd0:	5162      	str	r2, [r4, r5]
 8008bd2:	604b      	str	r3, [r1, #4]
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f104 060b 	add.w	r6, r4, #11
 8008bda:	f000 f829 	bl	8008c30 <__malloc_unlock>
 8008bde:	f026 0607 	bic.w	r6, r6, #7
 8008be2:	1d23      	adds	r3, r4, #4
 8008be4:	1af2      	subs	r2, r6, r3
 8008be6:	d0ae      	beq.n	8008b46 <_malloc_r+0x22>
 8008be8:	1b9b      	subs	r3, r3, r6
 8008bea:	50a3      	str	r3, [r4, r2]
 8008bec:	e7ab      	b.n	8008b46 <_malloc_r+0x22>
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	6862      	ldr	r2, [r4, #4]
 8008bf2:	d1dd      	bne.n	8008bb0 <_malloc_r+0x8c>
 8008bf4:	f8c8 2000 	str.w	r2, [r8]
 8008bf8:	e7ec      	b.n	8008bd4 <_malloc_r+0xb0>
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	6864      	ldr	r4, [r4, #4]
 8008bfe:	e7ac      	b.n	8008b5a <_malloc_r+0x36>
 8008c00:	4634      	mov	r4, r6
 8008c02:	6876      	ldr	r6, [r6, #4]
 8008c04:	e7b4      	b.n	8008b70 <_malloc_r+0x4c>
 8008c06:	4613      	mov	r3, r2
 8008c08:	e7cc      	b.n	8008ba4 <_malloc_r+0x80>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	603b      	str	r3, [r7, #0]
 8008c0e:	4638      	mov	r0, r7
 8008c10:	f000 f80e 	bl	8008c30 <__malloc_unlock>
 8008c14:	e797      	b.n	8008b46 <_malloc_r+0x22>
 8008c16:	6025      	str	r5, [r4, #0]
 8008c18:	e7dc      	b.n	8008bd4 <_malloc_r+0xb0>
 8008c1a:	605b      	str	r3, [r3, #4]
 8008c1c:	deff      	udf	#255	; 0xff
 8008c1e:	bf00      	nop
 8008c20:	20000c80 	.word	0x20000c80

08008c24 <__malloc_lock>:
 8008c24:	4801      	ldr	r0, [pc, #4]	; (8008c2c <__malloc_lock+0x8>)
 8008c26:	f7ff b884 	b.w	8007d32 <__retarget_lock_acquire_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	20000c7c 	.word	0x20000c7c

08008c30 <__malloc_unlock>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__malloc_unlock+0x8>)
 8008c32:	f7ff b87f 	b.w	8007d34 <__retarget_lock_release_recursive>
 8008c36:	bf00      	nop
 8008c38:	20000c7c 	.word	0x20000c7c

08008c3c <_Balloc>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	69c6      	ldr	r6, [r0, #28]
 8008c40:	4604      	mov	r4, r0
 8008c42:	460d      	mov	r5, r1
 8008c44:	b976      	cbnz	r6, 8008c64 <_Balloc+0x28>
 8008c46:	2010      	movs	r0, #16
 8008c48:	f7ff ff44 	bl	8008ad4 <malloc>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	61e0      	str	r0, [r4, #28]
 8008c50:	b920      	cbnz	r0, 8008c5c <_Balloc+0x20>
 8008c52:	4b18      	ldr	r3, [pc, #96]	; (8008cb4 <_Balloc+0x78>)
 8008c54:	4818      	ldr	r0, [pc, #96]	; (8008cb8 <_Balloc+0x7c>)
 8008c56:	216b      	movs	r1, #107	; 0x6b
 8008c58:	f001 fd8e 	bl	800a778 <__assert_func>
 8008c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c60:	6006      	str	r6, [r0, #0]
 8008c62:	60c6      	str	r6, [r0, #12]
 8008c64:	69e6      	ldr	r6, [r4, #28]
 8008c66:	68f3      	ldr	r3, [r6, #12]
 8008c68:	b183      	cbz	r3, 8008c8c <_Balloc+0x50>
 8008c6a:	69e3      	ldr	r3, [r4, #28]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c72:	b9b8      	cbnz	r0, 8008ca4 <_Balloc+0x68>
 8008c74:	2101      	movs	r1, #1
 8008c76:	fa01 f605 	lsl.w	r6, r1, r5
 8008c7a:	1d72      	adds	r2, r6, #5
 8008c7c:	0092      	lsls	r2, r2, #2
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f001 fd98 	bl	800a7b4 <_calloc_r>
 8008c84:	b160      	cbz	r0, 8008ca0 <_Balloc+0x64>
 8008c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c8a:	e00e      	b.n	8008caa <_Balloc+0x6e>
 8008c8c:	2221      	movs	r2, #33	; 0x21
 8008c8e:	2104      	movs	r1, #4
 8008c90:	4620      	mov	r0, r4
 8008c92:	f001 fd8f 	bl	800a7b4 <_calloc_r>
 8008c96:	69e3      	ldr	r3, [r4, #28]
 8008c98:	60f0      	str	r0, [r6, #12]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e4      	bne.n	8008c6a <_Balloc+0x2e>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	6802      	ldr	r2, [r0, #0]
 8008ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008caa:	2300      	movs	r3, #0
 8008cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cb0:	e7f7      	b.n	8008ca2 <_Balloc+0x66>
 8008cb2:	bf00      	nop
 8008cb4:	0800b5ae 	.word	0x0800b5ae
 8008cb8:	0800b62e 	.word	0x0800b62e

08008cbc <_Bfree>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	69c6      	ldr	r6, [r0, #28]
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	b976      	cbnz	r6, 8008ce4 <_Bfree+0x28>
 8008cc6:	2010      	movs	r0, #16
 8008cc8:	f7ff ff04 	bl	8008ad4 <malloc>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	61e8      	str	r0, [r5, #28]
 8008cd0:	b920      	cbnz	r0, 8008cdc <_Bfree+0x20>
 8008cd2:	4b09      	ldr	r3, [pc, #36]	; (8008cf8 <_Bfree+0x3c>)
 8008cd4:	4809      	ldr	r0, [pc, #36]	; (8008cfc <_Bfree+0x40>)
 8008cd6:	218f      	movs	r1, #143	; 0x8f
 8008cd8:	f001 fd4e 	bl	800a778 <__assert_func>
 8008cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ce0:	6006      	str	r6, [r0, #0]
 8008ce2:	60c6      	str	r6, [r0, #12]
 8008ce4:	b13c      	cbz	r4, 8008cf6 <_Bfree+0x3a>
 8008ce6:	69eb      	ldr	r3, [r5, #28]
 8008ce8:	6862      	ldr	r2, [r4, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cf0:	6021      	str	r1, [r4, #0]
 8008cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cf6:	bd70      	pop	{r4, r5, r6, pc}
 8008cf8:	0800b5ae 	.word	0x0800b5ae
 8008cfc:	0800b62e 	.word	0x0800b62e

08008d00 <__multadd>:
 8008d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d04:	690d      	ldr	r5, [r1, #16]
 8008d06:	4607      	mov	r7, r0
 8008d08:	460c      	mov	r4, r1
 8008d0a:	461e      	mov	r6, r3
 8008d0c:	f101 0c14 	add.w	ip, r1, #20
 8008d10:	2000      	movs	r0, #0
 8008d12:	f8dc 3000 	ldr.w	r3, [ip]
 8008d16:	b299      	uxth	r1, r3
 8008d18:	fb02 6101 	mla	r1, r2, r1, r6
 8008d1c:	0c1e      	lsrs	r6, r3, #16
 8008d1e:	0c0b      	lsrs	r3, r1, #16
 8008d20:	fb02 3306 	mla	r3, r2, r6, r3
 8008d24:	b289      	uxth	r1, r1
 8008d26:	3001      	adds	r0, #1
 8008d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d2c:	4285      	cmp	r5, r0
 8008d2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008d32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d36:	dcec      	bgt.n	8008d12 <__multadd+0x12>
 8008d38:	b30e      	cbz	r6, 8008d7e <__multadd+0x7e>
 8008d3a:	68a3      	ldr	r3, [r4, #8]
 8008d3c:	42ab      	cmp	r3, r5
 8008d3e:	dc19      	bgt.n	8008d74 <__multadd+0x74>
 8008d40:	6861      	ldr	r1, [r4, #4]
 8008d42:	4638      	mov	r0, r7
 8008d44:	3101      	adds	r1, #1
 8008d46:	f7ff ff79 	bl	8008c3c <_Balloc>
 8008d4a:	4680      	mov	r8, r0
 8008d4c:	b928      	cbnz	r0, 8008d5a <__multadd+0x5a>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	4b0c      	ldr	r3, [pc, #48]	; (8008d84 <__multadd+0x84>)
 8008d52:	480d      	ldr	r0, [pc, #52]	; (8008d88 <__multadd+0x88>)
 8008d54:	21ba      	movs	r1, #186	; 0xba
 8008d56:	f001 fd0f 	bl	800a778 <__assert_func>
 8008d5a:	6922      	ldr	r2, [r4, #16]
 8008d5c:	3202      	adds	r2, #2
 8008d5e:	f104 010c 	add.w	r1, r4, #12
 8008d62:	0092      	lsls	r2, r2, #2
 8008d64:	300c      	adds	r0, #12
 8008d66:	f001 fcef 	bl	800a748 <memcpy>
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f7ff ffa5 	bl	8008cbc <_Bfree>
 8008d72:	4644      	mov	r4, r8
 8008d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d78:	3501      	adds	r5, #1
 8008d7a:	615e      	str	r6, [r3, #20]
 8008d7c:	6125      	str	r5, [r4, #16]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d84:	0800b61d 	.word	0x0800b61d
 8008d88:	0800b62e 	.word	0x0800b62e

08008d8c <__s2b>:
 8008d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d90:	460c      	mov	r4, r1
 8008d92:	4615      	mov	r5, r2
 8008d94:	461f      	mov	r7, r3
 8008d96:	2209      	movs	r2, #9
 8008d98:	3308      	adds	r3, #8
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008da0:	2100      	movs	r1, #0
 8008da2:	2201      	movs	r2, #1
 8008da4:	429a      	cmp	r2, r3
 8008da6:	db09      	blt.n	8008dbc <__s2b+0x30>
 8008da8:	4630      	mov	r0, r6
 8008daa:	f7ff ff47 	bl	8008c3c <_Balloc>
 8008dae:	b940      	cbnz	r0, 8008dc2 <__s2b+0x36>
 8008db0:	4602      	mov	r2, r0
 8008db2:	4b19      	ldr	r3, [pc, #100]	; (8008e18 <__s2b+0x8c>)
 8008db4:	4819      	ldr	r0, [pc, #100]	; (8008e1c <__s2b+0x90>)
 8008db6:	21d3      	movs	r1, #211	; 0xd3
 8008db8:	f001 fcde 	bl	800a778 <__assert_func>
 8008dbc:	0052      	lsls	r2, r2, #1
 8008dbe:	3101      	adds	r1, #1
 8008dc0:	e7f0      	b.n	8008da4 <__s2b+0x18>
 8008dc2:	9b08      	ldr	r3, [sp, #32]
 8008dc4:	6143      	str	r3, [r0, #20]
 8008dc6:	2d09      	cmp	r5, #9
 8008dc8:	f04f 0301 	mov.w	r3, #1
 8008dcc:	6103      	str	r3, [r0, #16]
 8008dce:	dd16      	ble.n	8008dfe <__s2b+0x72>
 8008dd0:	f104 0909 	add.w	r9, r4, #9
 8008dd4:	46c8      	mov	r8, r9
 8008dd6:	442c      	add	r4, r5
 8008dd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ddc:	4601      	mov	r1, r0
 8008dde:	3b30      	subs	r3, #48	; 0x30
 8008de0:	220a      	movs	r2, #10
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7ff ff8c 	bl	8008d00 <__multadd>
 8008de8:	45a0      	cmp	r8, r4
 8008dea:	d1f5      	bne.n	8008dd8 <__s2b+0x4c>
 8008dec:	f1a5 0408 	sub.w	r4, r5, #8
 8008df0:	444c      	add	r4, r9
 8008df2:	1b2d      	subs	r5, r5, r4
 8008df4:	1963      	adds	r3, r4, r5
 8008df6:	42bb      	cmp	r3, r7
 8008df8:	db04      	blt.n	8008e04 <__s2b+0x78>
 8008dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dfe:	340a      	adds	r4, #10
 8008e00:	2509      	movs	r5, #9
 8008e02:	e7f6      	b.n	8008df2 <__s2b+0x66>
 8008e04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e08:	4601      	mov	r1, r0
 8008e0a:	3b30      	subs	r3, #48	; 0x30
 8008e0c:	220a      	movs	r2, #10
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f7ff ff76 	bl	8008d00 <__multadd>
 8008e14:	e7ee      	b.n	8008df4 <__s2b+0x68>
 8008e16:	bf00      	nop
 8008e18:	0800b61d 	.word	0x0800b61d
 8008e1c:	0800b62e 	.word	0x0800b62e

08008e20 <__hi0bits>:
 8008e20:	0c03      	lsrs	r3, r0, #16
 8008e22:	041b      	lsls	r3, r3, #16
 8008e24:	b9d3      	cbnz	r3, 8008e5c <__hi0bits+0x3c>
 8008e26:	0400      	lsls	r0, r0, #16
 8008e28:	2310      	movs	r3, #16
 8008e2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e2e:	bf04      	itt	eq
 8008e30:	0200      	lsleq	r0, r0, #8
 8008e32:	3308      	addeq	r3, #8
 8008e34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e38:	bf04      	itt	eq
 8008e3a:	0100      	lsleq	r0, r0, #4
 8008e3c:	3304      	addeq	r3, #4
 8008e3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e42:	bf04      	itt	eq
 8008e44:	0080      	lsleq	r0, r0, #2
 8008e46:	3302      	addeq	r3, #2
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	db05      	blt.n	8008e58 <__hi0bits+0x38>
 8008e4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e50:	f103 0301 	add.w	r3, r3, #1
 8008e54:	bf08      	it	eq
 8008e56:	2320      	moveq	r3, #32
 8008e58:	4618      	mov	r0, r3
 8008e5a:	4770      	bx	lr
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	e7e4      	b.n	8008e2a <__hi0bits+0xa>

08008e60 <__lo0bits>:
 8008e60:	6803      	ldr	r3, [r0, #0]
 8008e62:	f013 0207 	ands.w	r2, r3, #7
 8008e66:	d00c      	beq.n	8008e82 <__lo0bits+0x22>
 8008e68:	07d9      	lsls	r1, r3, #31
 8008e6a:	d422      	bmi.n	8008eb2 <__lo0bits+0x52>
 8008e6c:	079a      	lsls	r2, r3, #30
 8008e6e:	bf49      	itett	mi
 8008e70:	085b      	lsrmi	r3, r3, #1
 8008e72:	089b      	lsrpl	r3, r3, #2
 8008e74:	6003      	strmi	r3, [r0, #0]
 8008e76:	2201      	movmi	r2, #1
 8008e78:	bf5c      	itt	pl
 8008e7a:	6003      	strpl	r3, [r0, #0]
 8008e7c:	2202      	movpl	r2, #2
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4770      	bx	lr
 8008e82:	b299      	uxth	r1, r3
 8008e84:	b909      	cbnz	r1, 8008e8a <__lo0bits+0x2a>
 8008e86:	0c1b      	lsrs	r3, r3, #16
 8008e88:	2210      	movs	r2, #16
 8008e8a:	b2d9      	uxtb	r1, r3
 8008e8c:	b909      	cbnz	r1, 8008e92 <__lo0bits+0x32>
 8008e8e:	3208      	adds	r2, #8
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	0719      	lsls	r1, r3, #28
 8008e94:	bf04      	itt	eq
 8008e96:	091b      	lsreq	r3, r3, #4
 8008e98:	3204      	addeq	r2, #4
 8008e9a:	0799      	lsls	r1, r3, #30
 8008e9c:	bf04      	itt	eq
 8008e9e:	089b      	lsreq	r3, r3, #2
 8008ea0:	3202      	addeq	r2, #2
 8008ea2:	07d9      	lsls	r1, r3, #31
 8008ea4:	d403      	bmi.n	8008eae <__lo0bits+0x4e>
 8008ea6:	085b      	lsrs	r3, r3, #1
 8008ea8:	f102 0201 	add.w	r2, r2, #1
 8008eac:	d003      	beq.n	8008eb6 <__lo0bits+0x56>
 8008eae:	6003      	str	r3, [r0, #0]
 8008eb0:	e7e5      	b.n	8008e7e <__lo0bits+0x1e>
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	e7e3      	b.n	8008e7e <__lo0bits+0x1e>
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	e7e1      	b.n	8008e7e <__lo0bits+0x1e>
	...

08008ebc <__i2b>:
 8008ebc:	b510      	push	{r4, lr}
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	f7ff febb 	bl	8008c3c <_Balloc>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	b928      	cbnz	r0, 8008ed6 <__i2b+0x1a>
 8008eca:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <__i2b+0x24>)
 8008ecc:	4805      	ldr	r0, [pc, #20]	; (8008ee4 <__i2b+0x28>)
 8008ece:	f240 1145 	movw	r1, #325	; 0x145
 8008ed2:	f001 fc51 	bl	800a778 <__assert_func>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	6144      	str	r4, [r0, #20]
 8008eda:	6103      	str	r3, [r0, #16]
 8008edc:	bd10      	pop	{r4, pc}
 8008ede:	bf00      	nop
 8008ee0:	0800b61d 	.word	0x0800b61d
 8008ee4:	0800b62e 	.word	0x0800b62e

08008ee8 <__multiply>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	4691      	mov	r9, r2
 8008eee:	690a      	ldr	r2, [r1, #16]
 8008ef0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	bfb8      	it	lt
 8008ef8:	460b      	movlt	r3, r1
 8008efa:	460c      	mov	r4, r1
 8008efc:	bfbc      	itt	lt
 8008efe:	464c      	movlt	r4, r9
 8008f00:	4699      	movlt	r9, r3
 8008f02:	6927      	ldr	r7, [r4, #16]
 8008f04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f08:	68a3      	ldr	r3, [r4, #8]
 8008f0a:	6861      	ldr	r1, [r4, #4]
 8008f0c:	eb07 060a 	add.w	r6, r7, sl
 8008f10:	42b3      	cmp	r3, r6
 8008f12:	b085      	sub	sp, #20
 8008f14:	bfb8      	it	lt
 8008f16:	3101      	addlt	r1, #1
 8008f18:	f7ff fe90 	bl	8008c3c <_Balloc>
 8008f1c:	b930      	cbnz	r0, 8008f2c <__multiply+0x44>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4b44      	ldr	r3, [pc, #272]	; (8009034 <__multiply+0x14c>)
 8008f22:	4845      	ldr	r0, [pc, #276]	; (8009038 <__multiply+0x150>)
 8008f24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008f28:	f001 fc26 	bl	800a778 <__assert_func>
 8008f2c:	f100 0514 	add.w	r5, r0, #20
 8008f30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f34:	462b      	mov	r3, r5
 8008f36:	2200      	movs	r2, #0
 8008f38:	4543      	cmp	r3, r8
 8008f3a:	d321      	bcc.n	8008f80 <__multiply+0x98>
 8008f3c:	f104 0314 	add.w	r3, r4, #20
 8008f40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f44:	f109 0314 	add.w	r3, r9, #20
 8008f48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f4c:	9202      	str	r2, [sp, #8]
 8008f4e:	1b3a      	subs	r2, r7, r4
 8008f50:	3a15      	subs	r2, #21
 8008f52:	f022 0203 	bic.w	r2, r2, #3
 8008f56:	3204      	adds	r2, #4
 8008f58:	f104 0115 	add.w	r1, r4, #21
 8008f5c:	428f      	cmp	r7, r1
 8008f5e:	bf38      	it	cc
 8008f60:	2204      	movcc	r2, #4
 8008f62:	9201      	str	r2, [sp, #4]
 8008f64:	9a02      	ldr	r2, [sp, #8]
 8008f66:	9303      	str	r3, [sp, #12]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d80c      	bhi.n	8008f86 <__multiply+0x9e>
 8008f6c:	2e00      	cmp	r6, #0
 8008f6e:	dd03      	ble.n	8008f78 <__multiply+0x90>
 8008f70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d05b      	beq.n	8009030 <__multiply+0x148>
 8008f78:	6106      	str	r6, [r0, #16]
 8008f7a:	b005      	add	sp, #20
 8008f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f80:	f843 2b04 	str.w	r2, [r3], #4
 8008f84:	e7d8      	b.n	8008f38 <__multiply+0x50>
 8008f86:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f8a:	f1ba 0f00 	cmp.w	sl, #0
 8008f8e:	d024      	beq.n	8008fda <__multiply+0xf2>
 8008f90:	f104 0e14 	add.w	lr, r4, #20
 8008f94:	46a9      	mov	r9, r5
 8008f96:	f04f 0c00 	mov.w	ip, #0
 8008f9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f9e:	f8d9 1000 	ldr.w	r1, [r9]
 8008fa2:	fa1f fb82 	uxth.w	fp, r2
 8008fa6:	b289      	uxth	r1, r1
 8008fa8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8008fb4:	4461      	add	r1, ip
 8008fb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fba:	fb0a c20b 	mla	r2, sl, fp, ip
 8008fbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fc2:	b289      	uxth	r1, r1
 8008fc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fc8:	4577      	cmp	r7, lr
 8008fca:	f849 1b04 	str.w	r1, [r9], #4
 8008fce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fd2:	d8e2      	bhi.n	8008f9a <__multiply+0xb2>
 8008fd4:	9a01      	ldr	r2, [sp, #4]
 8008fd6:	f845 c002 	str.w	ip, [r5, r2]
 8008fda:	9a03      	ldr	r2, [sp, #12]
 8008fdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	f1b9 0f00 	cmp.w	r9, #0
 8008fe6:	d021      	beq.n	800902c <__multiply+0x144>
 8008fe8:	6829      	ldr	r1, [r5, #0]
 8008fea:	f104 0c14 	add.w	ip, r4, #20
 8008fee:	46ae      	mov	lr, r5
 8008ff0:	f04f 0a00 	mov.w	sl, #0
 8008ff4:	f8bc b000 	ldrh.w	fp, [ip]
 8008ff8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ffc:	fb09 220b 	mla	r2, r9, fp, r2
 8009000:	4452      	add	r2, sl
 8009002:	b289      	uxth	r1, r1
 8009004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009008:	f84e 1b04 	str.w	r1, [lr], #4
 800900c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009010:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009014:	f8be 1000 	ldrh.w	r1, [lr]
 8009018:	fb09 110a 	mla	r1, r9, sl, r1
 800901c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009020:	4567      	cmp	r7, ip
 8009022:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009026:	d8e5      	bhi.n	8008ff4 <__multiply+0x10c>
 8009028:	9a01      	ldr	r2, [sp, #4]
 800902a:	50a9      	str	r1, [r5, r2]
 800902c:	3504      	adds	r5, #4
 800902e:	e799      	b.n	8008f64 <__multiply+0x7c>
 8009030:	3e01      	subs	r6, #1
 8009032:	e79b      	b.n	8008f6c <__multiply+0x84>
 8009034:	0800b61d 	.word	0x0800b61d
 8009038:	0800b62e 	.word	0x0800b62e

0800903c <__pow5mult>:
 800903c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009040:	4615      	mov	r5, r2
 8009042:	f012 0203 	ands.w	r2, r2, #3
 8009046:	4606      	mov	r6, r0
 8009048:	460f      	mov	r7, r1
 800904a:	d007      	beq.n	800905c <__pow5mult+0x20>
 800904c:	4c25      	ldr	r4, [pc, #148]	; (80090e4 <__pow5mult+0xa8>)
 800904e:	3a01      	subs	r2, #1
 8009050:	2300      	movs	r3, #0
 8009052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009056:	f7ff fe53 	bl	8008d00 <__multadd>
 800905a:	4607      	mov	r7, r0
 800905c:	10ad      	asrs	r5, r5, #2
 800905e:	d03d      	beq.n	80090dc <__pow5mult+0xa0>
 8009060:	69f4      	ldr	r4, [r6, #28]
 8009062:	b97c      	cbnz	r4, 8009084 <__pow5mult+0x48>
 8009064:	2010      	movs	r0, #16
 8009066:	f7ff fd35 	bl	8008ad4 <malloc>
 800906a:	4602      	mov	r2, r0
 800906c:	61f0      	str	r0, [r6, #28]
 800906e:	b928      	cbnz	r0, 800907c <__pow5mult+0x40>
 8009070:	4b1d      	ldr	r3, [pc, #116]	; (80090e8 <__pow5mult+0xac>)
 8009072:	481e      	ldr	r0, [pc, #120]	; (80090ec <__pow5mult+0xb0>)
 8009074:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009078:	f001 fb7e 	bl	800a778 <__assert_func>
 800907c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009080:	6004      	str	r4, [r0, #0]
 8009082:	60c4      	str	r4, [r0, #12]
 8009084:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800908c:	b94c      	cbnz	r4, 80090a2 <__pow5mult+0x66>
 800908e:	f240 2171 	movw	r1, #625	; 0x271
 8009092:	4630      	mov	r0, r6
 8009094:	f7ff ff12 	bl	8008ebc <__i2b>
 8009098:	2300      	movs	r3, #0
 800909a:	f8c8 0008 	str.w	r0, [r8, #8]
 800909e:	4604      	mov	r4, r0
 80090a0:	6003      	str	r3, [r0, #0]
 80090a2:	f04f 0900 	mov.w	r9, #0
 80090a6:	07eb      	lsls	r3, r5, #31
 80090a8:	d50a      	bpl.n	80090c0 <__pow5mult+0x84>
 80090aa:	4639      	mov	r1, r7
 80090ac:	4622      	mov	r2, r4
 80090ae:	4630      	mov	r0, r6
 80090b0:	f7ff ff1a 	bl	8008ee8 <__multiply>
 80090b4:	4639      	mov	r1, r7
 80090b6:	4680      	mov	r8, r0
 80090b8:	4630      	mov	r0, r6
 80090ba:	f7ff fdff 	bl	8008cbc <_Bfree>
 80090be:	4647      	mov	r7, r8
 80090c0:	106d      	asrs	r5, r5, #1
 80090c2:	d00b      	beq.n	80090dc <__pow5mult+0xa0>
 80090c4:	6820      	ldr	r0, [r4, #0]
 80090c6:	b938      	cbnz	r0, 80090d8 <__pow5mult+0x9c>
 80090c8:	4622      	mov	r2, r4
 80090ca:	4621      	mov	r1, r4
 80090cc:	4630      	mov	r0, r6
 80090ce:	f7ff ff0b 	bl	8008ee8 <__multiply>
 80090d2:	6020      	str	r0, [r4, #0]
 80090d4:	f8c0 9000 	str.w	r9, [r0]
 80090d8:	4604      	mov	r4, r0
 80090da:	e7e4      	b.n	80090a6 <__pow5mult+0x6a>
 80090dc:	4638      	mov	r0, r7
 80090de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090e2:	bf00      	nop
 80090e4:	0800b778 	.word	0x0800b778
 80090e8:	0800b5ae 	.word	0x0800b5ae
 80090ec:	0800b62e 	.word	0x0800b62e

080090f0 <__lshift>:
 80090f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f4:	460c      	mov	r4, r1
 80090f6:	6849      	ldr	r1, [r1, #4]
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090fe:	68a3      	ldr	r3, [r4, #8]
 8009100:	4607      	mov	r7, r0
 8009102:	4691      	mov	r9, r2
 8009104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009108:	f108 0601 	add.w	r6, r8, #1
 800910c:	42b3      	cmp	r3, r6
 800910e:	db0b      	blt.n	8009128 <__lshift+0x38>
 8009110:	4638      	mov	r0, r7
 8009112:	f7ff fd93 	bl	8008c3c <_Balloc>
 8009116:	4605      	mov	r5, r0
 8009118:	b948      	cbnz	r0, 800912e <__lshift+0x3e>
 800911a:	4602      	mov	r2, r0
 800911c:	4b28      	ldr	r3, [pc, #160]	; (80091c0 <__lshift+0xd0>)
 800911e:	4829      	ldr	r0, [pc, #164]	; (80091c4 <__lshift+0xd4>)
 8009120:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009124:	f001 fb28 	bl	800a778 <__assert_func>
 8009128:	3101      	adds	r1, #1
 800912a:	005b      	lsls	r3, r3, #1
 800912c:	e7ee      	b.n	800910c <__lshift+0x1c>
 800912e:	2300      	movs	r3, #0
 8009130:	f100 0114 	add.w	r1, r0, #20
 8009134:	f100 0210 	add.w	r2, r0, #16
 8009138:	4618      	mov	r0, r3
 800913a:	4553      	cmp	r3, sl
 800913c:	db33      	blt.n	80091a6 <__lshift+0xb6>
 800913e:	6920      	ldr	r0, [r4, #16]
 8009140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009144:	f104 0314 	add.w	r3, r4, #20
 8009148:	f019 091f 	ands.w	r9, r9, #31
 800914c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009150:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009154:	d02b      	beq.n	80091ae <__lshift+0xbe>
 8009156:	f1c9 0e20 	rsb	lr, r9, #32
 800915a:	468a      	mov	sl, r1
 800915c:	2200      	movs	r2, #0
 800915e:	6818      	ldr	r0, [r3, #0]
 8009160:	fa00 f009 	lsl.w	r0, r0, r9
 8009164:	4310      	orrs	r0, r2
 8009166:	f84a 0b04 	str.w	r0, [sl], #4
 800916a:	f853 2b04 	ldr.w	r2, [r3], #4
 800916e:	459c      	cmp	ip, r3
 8009170:	fa22 f20e 	lsr.w	r2, r2, lr
 8009174:	d8f3      	bhi.n	800915e <__lshift+0x6e>
 8009176:	ebac 0304 	sub.w	r3, ip, r4
 800917a:	3b15      	subs	r3, #21
 800917c:	f023 0303 	bic.w	r3, r3, #3
 8009180:	3304      	adds	r3, #4
 8009182:	f104 0015 	add.w	r0, r4, #21
 8009186:	4584      	cmp	ip, r0
 8009188:	bf38      	it	cc
 800918a:	2304      	movcc	r3, #4
 800918c:	50ca      	str	r2, [r1, r3]
 800918e:	b10a      	cbz	r2, 8009194 <__lshift+0xa4>
 8009190:	f108 0602 	add.w	r6, r8, #2
 8009194:	3e01      	subs	r6, #1
 8009196:	4638      	mov	r0, r7
 8009198:	612e      	str	r6, [r5, #16]
 800919a:	4621      	mov	r1, r4
 800919c:	f7ff fd8e 	bl	8008cbc <_Bfree>
 80091a0:	4628      	mov	r0, r5
 80091a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80091aa:	3301      	adds	r3, #1
 80091ac:	e7c5      	b.n	800913a <__lshift+0x4a>
 80091ae:	3904      	subs	r1, #4
 80091b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80091b8:	459c      	cmp	ip, r3
 80091ba:	d8f9      	bhi.n	80091b0 <__lshift+0xc0>
 80091bc:	e7ea      	b.n	8009194 <__lshift+0xa4>
 80091be:	bf00      	nop
 80091c0:	0800b61d 	.word	0x0800b61d
 80091c4:	0800b62e 	.word	0x0800b62e

080091c8 <__mcmp>:
 80091c8:	b530      	push	{r4, r5, lr}
 80091ca:	6902      	ldr	r2, [r0, #16]
 80091cc:	690c      	ldr	r4, [r1, #16]
 80091ce:	1b12      	subs	r2, r2, r4
 80091d0:	d10e      	bne.n	80091f0 <__mcmp+0x28>
 80091d2:	f100 0314 	add.w	r3, r0, #20
 80091d6:	3114      	adds	r1, #20
 80091d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091e8:	42a5      	cmp	r5, r4
 80091ea:	d003      	beq.n	80091f4 <__mcmp+0x2c>
 80091ec:	d305      	bcc.n	80091fa <__mcmp+0x32>
 80091ee:	2201      	movs	r2, #1
 80091f0:	4610      	mov	r0, r2
 80091f2:	bd30      	pop	{r4, r5, pc}
 80091f4:	4283      	cmp	r3, r0
 80091f6:	d3f3      	bcc.n	80091e0 <__mcmp+0x18>
 80091f8:	e7fa      	b.n	80091f0 <__mcmp+0x28>
 80091fa:	f04f 32ff 	mov.w	r2, #4294967295
 80091fe:	e7f7      	b.n	80091f0 <__mcmp+0x28>

08009200 <__mdiff>:
 8009200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	460c      	mov	r4, r1
 8009206:	4606      	mov	r6, r0
 8009208:	4611      	mov	r1, r2
 800920a:	4620      	mov	r0, r4
 800920c:	4690      	mov	r8, r2
 800920e:	f7ff ffdb 	bl	80091c8 <__mcmp>
 8009212:	1e05      	subs	r5, r0, #0
 8009214:	d110      	bne.n	8009238 <__mdiff+0x38>
 8009216:	4629      	mov	r1, r5
 8009218:	4630      	mov	r0, r6
 800921a:	f7ff fd0f 	bl	8008c3c <_Balloc>
 800921e:	b930      	cbnz	r0, 800922e <__mdiff+0x2e>
 8009220:	4b3a      	ldr	r3, [pc, #232]	; (800930c <__mdiff+0x10c>)
 8009222:	4602      	mov	r2, r0
 8009224:	f240 2137 	movw	r1, #567	; 0x237
 8009228:	4839      	ldr	r0, [pc, #228]	; (8009310 <__mdiff+0x110>)
 800922a:	f001 faa5 	bl	800a778 <__assert_func>
 800922e:	2301      	movs	r3, #1
 8009230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009238:	bfa4      	itt	ge
 800923a:	4643      	movge	r3, r8
 800923c:	46a0      	movge	r8, r4
 800923e:	4630      	mov	r0, r6
 8009240:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009244:	bfa6      	itte	ge
 8009246:	461c      	movge	r4, r3
 8009248:	2500      	movge	r5, #0
 800924a:	2501      	movlt	r5, #1
 800924c:	f7ff fcf6 	bl	8008c3c <_Balloc>
 8009250:	b920      	cbnz	r0, 800925c <__mdiff+0x5c>
 8009252:	4b2e      	ldr	r3, [pc, #184]	; (800930c <__mdiff+0x10c>)
 8009254:	4602      	mov	r2, r0
 8009256:	f240 2145 	movw	r1, #581	; 0x245
 800925a:	e7e5      	b.n	8009228 <__mdiff+0x28>
 800925c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009260:	6926      	ldr	r6, [r4, #16]
 8009262:	60c5      	str	r5, [r0, #12]
 8009264:	f104 0914 	add.w	r9, r4, #20
 8009268:	f108 0514 	add.w	r5, r8, #20
 800926c:	f100 0e14 	add.w	lr, r0, #20
 8009270:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009274:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009278:	f108 0210 	add.w	r2, r8, #16
 800927c:	46f2      	mov	sl, lr
 800927e:	2100      	movs	r1, #0
 8009280:	f859 3b04 	ldr.w	r3, [r9], #4
 8009284:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009288:	fa11 f88b 	uxtah	r8, r1, fp
 800928c:	b299      	uxth	r1, r3
 800928e:	0c1b      	lsrs	r3, r3, #16
 8009290:	eba8 0801 	sub.w	r8, r8, r1
 8009294:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009298:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800929c:	fa1f f888 	uxth.w	r8, r8
 80092a0:	1419      	asrs	r1, r3, #16
 80092a2:	454e      	cmp	r6, r9
 80092a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092a8:	f84a 3b04 	str.w	r3, [sl], #4
 80092ac:	d8e8      	bhi.n	8009280 <__mdiff+0x80>
 80092ae:	1b33      	subs	r3, r6, r4
 80092b0:	3b15      	subs	r3, #21
 80092b2:	f023 0303 	bic.w	r3, r3, #3
 80092b6:	3304      	adds	r3, #4
 80092b8:	3415      	adds	r4, #21
 80092ba:	42a6      	cmp	r6, r4
 80092bc:	bf38      	it	cc
 80092be:	2304      	movcc	r3, #4
 80092c0:	441d      	add	r5, r3
 80092c2:	4473      	add	r3, lr
 80092c4:	469e      	mov	lr, r3
 80092c6:	462e      	mov	r6, r5
 80092c8:	4566      	cmp	r6, ip
 80092ca:	d30e      	bcc.n	80092ea <__mdiff+0xea>
 80092cc:	f10c 0203 	add.w	r2, ip, #3
 80092d0:	1b52      	subs	r2, r2, r5
 80092d2:	f022 0203 	bic.w	r2, r2, #3
 80092d6:	3d03      	subs	r5, #3
 80092d8:	45ac      	cmp	ip, r5
 80092da:	bf38      	it	cc
 80092dc:	2200      	movcc	r2, #0
 80092de:	4413      	add	r3, r2
 80092e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80092e4:	b17a      	cbz	r2, 8009306 <__mdiff+0x106>
 80092e6:	6107      	str	r7, [r0, #16]
 80092e8:	e7a4      	b.n	8009234 <__mdiff+0x34>
 80092ea:	f856 8b04 	ldr.w	r8, [r6], #4
 80092ee:	fa11 f288 	uxtah	r2, r1, r8
 80092f2:	1414      	asrs	r4, r2, #16
 80092f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092f8:	b292      	uxth	r2, r2
 80092fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80092fe:	f84e 2b04 	str.w	r2, [lr], #4
 8009302:	1421      	asrs	r1, r4, #16
 8009304:	e7e0      	b.n	80092c8 <__mdiff+0xc8>
 8009306:	3f01      	subs	r7, #1
 8009308:	e7ea      	b.n	80092e0 <__mdiff+0xe0>
 800930a:	bf00      	nop
 800930c:	0800b61d 	.word	0x0800b61d
 8009310:	0800b62e 	.word	0x0800b62e

08009314 <__ulp>:
 8009314:	b082      	sub	sp, #8
 8009316:	ed8d 0b00 	vstr	d0, [sp]
 800931a:	9a01      	ldr	r2, [sp, #4]
 800931c:	4b0f      	ldr	r3, [pc, #60]	; (800935c <__ulp+0x48>)
 800931e:	4013      	ands	r3, r2
 8009320:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009324:	2b00      	cmp	r3, #0
 8009326:	dc08      	bgt.n	800933a <__ulp+0x26>
 8009328:	425b      	negs	r3, r3
 800932a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800932e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009332:	da04      	bge.n	800933e <__ulp+0x2a>
 8009334:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009338:	4113      	asrs	r3, r2
 800933a:	2200      	movs	r2, #0
 800933c:	e008      	b.n	8009350 <__ulp+0x3c>
 800933e:	f1a2 0314 	sub.w	r3, r2, #20
 8009342:	2b1e      	cmp	r3, #30
 8009344:	bfda      	itte	le
 8009346:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800934a:	40da      	lsrle	r2, r3
 800934c:	2201      	movgt	r2, #1
 800934e:	2300      	movs	r3, #0
 8009350:	4619      	mov	r1, r3
 8009352:	4610      	mov	r0, r2
 8009354:	ec41 0b10 	vmov	d0, r0, r1
 8009358:	b002      	add	sp, #8
 800935a:	4770      	bx	lr
 800935c:	7ff00000 	.word	0x7ff00000

08009360 <__b2d>:
 8009360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009364:	6906      	ldr	r6, [r0, #16]
 8009366:	f100 0814 	add.w	r8, r0, #20
 800936a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800936e:	1f37      	subs	r7, r6, #4
 8009370:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009374:	4610      	mov	r0, r2
 8009376:	f7ff fd53 	bl	8008e20 <__hi0bits>
 800937a:	f1c0 0320 	rsb	r3, r0, #32
 800937e:	280a      	cmp	r0, #10
 8009380:	600b      	str	r3, [r1, #0]
 8009382:	491b      	ldr	r1, [pc, #108]	; (80093f0 <__b2d+0x90>)
 8009384:	dc15      	bgt.n	80093b2 <__b2d+0x52>
 8009386:	f1c0 0c0b 	rsb	ip, r0, #11
 800938a:	fa22 f30c 	lsr.w	r3, r2, ip
 800938e:	45b8      	cmp	r8, r7
 8009390:	ea43 0501 	orr.w	r5, r3, r1
 8009394:	bf34      	ite	cc
 8009396:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800939a:	2300      	movcs	r3, #0
 800939c:	3015      	adds	r0, #21
 800939e:	fa02 f000 	lsl.w	r0, r2, r0
 80093a2:	fa23 f30c 	lsr.w	r3, r3, ip
 80093a6:	4303      	orrs	r3, r0
 80093a8:	461c      	mov	r4, r3
 80093aa:	ec45 4b10 	vmov	d0, r4, r5
 80093ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b2:	45b8      	cmp	r8, r7
 80093b4:	bf3a      	itte	cc
 80093b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80093ba:	f1a6 0708 	subcc.w	r7, r6, #8
 80093be:	2300      	movcs	r3, #0
 80093c0:	380b      	subs	r0, #11
 80093c2:	d012      	beq.n	80093ea <__b2d+0x8a>
 80093c4:	f1c0 0120 	rsb	r1, r0, #32
 80093c8:	fa23 f401 	lsr.w	r4, r3, r1
 80093cc:	4082      	lsls	r2, r0
 80093ce:	4322      	orrs	r2, r4
 80093d0:	4547      	cmp	r7, r8
 80093d2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80093d6:	bf8c      	ite	hi
 80093d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80093dc:	2200      	movls	r2, #0
 80093de:	4083      	lsls	r3, r0
 80093e0:	40ca      	lsrs	r2, r1
 80093e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80093e6:	4313      	orrs	r3, r2
 80093e8:	e7de      	b.n	80093a8 <__b2d+0x48>
 80093ea:	ea42 0501 	orr.w	r5, r2, r1
 80093ee:	e7db      	b.n	80093a8 <__b2d+0x48>
 80093f0:	3ff00000 	.word	0x3ff00000

080093f4 <__d2b>:
 80093f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093f8:	460f      	mov	r7, r1
 80093fa:	2101      	movs	r1, #1
 80093fc:	ec59 8b10 	vmov	r8, r9, d0
 8009400:	4616      	mov	r6, r2
 8009402:	f7ff fc1b 	bl	8008c3c <_Balloc>
 8009406:	4604      	mov	r4, r0
 8009408:	b930      	cbnz	r0, 8009418 <__d2b+0x24>
 800940a:	4602      	mov	r2, r0
 800940c:	4b24      	ldr	r3, [pc, #144]	; (80094a0 <__d2b+0xac>)
 800940e:	4825      	ldr	r0, [pc, #148]	; (80094a4 <__d2b+0xb0>)
 8009410:	f240 310f 	movw	r1, #783	; 0x30f
 8009414:	f001 f9b0 	bl	800a778 <__assert_func>
 8009418:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800941c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009420:	bb2d      	cbnz	r5, 800946e <__d2b+0x7a>
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	f1b8 0300 	subs.w	r3, r8, #0
 8009428:	d026      	beq.n	8009478 <__d2b+0x84>
 800942a:	4668      	mov	r0, sp
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	f7ff fd17 	bl	8008e60 <__lo0bits>
 8009432:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009436:	b1e8      	cbz	r0, 8009474 <__d2b+0x80>
 8009438:	f1c0 0320 	rsb	r3, r0, #32
 800943c:	fa02 f303 	lsl.w	r3, r2, r3
 8009440:	430b      	orrs	r3, r1
 8009442:	40c2      	lsrs	r2, r0
 8009444:	6163      	str	r3, [r4, #20]
 8009446:	9201      	str	r2, [sp, #4]
 8009448:	9b01      	ldr	r3, [sp, #4]
 800944a:	61a3      	str	r3, [r4, #24]
 800944c:	2b00      	cmp	r3, #0
 800944e:	bf14      	ite	ne
 8009450:	2202      	movne	r2, #2
 8009452:	2201      	moveq	r2, #1
 8009454:	6122      	str	r2, [r4, #16]
 8009456:	b1bd      	cbz	r5, 8009488 <__d2b+0x94>
 8009458:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800945c:	4405      	add	r5, r0
 800945e:	603d      	str	r5, [r7, #0]
 8009460:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009464:	6030      	str	r0, [r6, #0]
 8009466:	4620      	mov	r0, r4
 8009468:	b003      	add	sp, #12
 800946a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800946e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009472:	e7d6      	b.n	8009422 <__d2b+0x2e>
 8009474:	6161      	str	r1, [r4, #20]
 8009476:	e7e7      	b.n	8009448 <__d2b+0x54>
 8009478:	a801      	add	r0, sp, #4
 800947a:	f7ff fcf1 	bl	8008e60 <__lo0bits>
 800947e:	9b01      	ldr	r3, [sp, #4]
 8009480:	6163      	str	r3, [r4, #20]
 8009482:	3020      	adds	r0, #32
 8009484:	2201      	movs	r2, #1
 8009486:	e7e5      	b.n	8009454 <__d2b+0x60>
 8009488:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800948c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009490:	6038      	str	r0, [r7, #0]
 8009492:	6918      	ldr	r0, [r3, #16]
 8009494:	f7ff fcc4 	bl	8008e20 <__hi0bits>
 8009498:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800949c:	e7e2      	b.n	8009464 <__d2b+0x70>
 800949e:	bf00      	nop
 80094a0:	0800b61d 	.word	0x0800b61d
 80094a4:	0800b62e 	.word	0x0800b62e

080094a8 <__ratio>:
 80094a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	4688      	mov	r8, r1
 80094ae:	4669      	mov	r1, sp
 80094b0:	4681      	mov	r9, r0
 80094b2:	f7ff ff55 	bl	8009360 <__b2d>
 80094b6:	a901      	add	r1, sp, #4
 80094b8:	4640      	mov	r0, r8
 80094ba:	ec55 4b10 	vmov	r4, r5, d0
 80094be:	f7ff ff4f 	bl	8009360 <__b2d>
 80094c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80094ca:	eba3 0c02 	sub.w	ip, r3, r2
 80094ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80094d2:	1a9b      	subs	r3, r3, r2
 80094d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80094d8:	ec51 0b10 	vmov	r0, r1, d0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	bfd6      	itet	le
 80094e0:	460a      	movle	r2, r1
 80094e2:	462a      	movgt	r2, r5
 80094e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80094e8:	468b      	mov	fp, r1
 80094ea:	462f      	mov	r7, r5
 80094ec:	bfd4      	ite	le
 80094ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80094f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80094f6:	4620      	mov	r0, r4
 80094f8:	ee10 2a10 	vmov	r2, s0
 80094fc:	465b      	mov	r3, fp
 80094fe:	4639      	mov	r1, r7
 8009500:	f7f7 f9c4 	bl	800088c <__aeabi_ddiv>
 8009504:	ec41 0b10 	vmov	d0, r0, r1
 8009508:	b003      	add	sp, #12
 800950a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800950e <__copybits>:
 800950e:	3901      	subs	r1, #1
 8009510:	b570      	push	{r4, r5, r6, lr}
 8009512:	1149      	asrs	r1, r1, #5
 8009514:	6914      	ldr	r4, [r2, #16]
 8009516:	3101      	adds	r1, #1
 8009518:	f102 0314 	add.w	r3, r2, #20
 800951c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009520:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009524:	1f05      	subs	r5, r0, #4
 8009526:	42a3      	cmp	r3, r4
 8009528:	d30c      	bcc.n	8009544 <__copybits+0x36>
 800952a:	1aa3      	subs	r3, r4, r2
 800952c:	3b11      	subs	r3, #17
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	3211      	adds	r2, #17
 8009534:	42a2      	cmp	r2, r4
 8009536:	bf88      	it	hi
 8009538:	2300      	movhi	r3, #0
 800953a:	4418      	add	r0, r3
 800953c:	2300      	movs	r3, #0
 800953e:	4288      	cmp	r0, r1
 8009540:	d305      	bcc.n	800954e <__copybits+0x40>
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	f853 6b04 	ldr.w	r6, [r3], #4
 8009548:	f845 6f04 	str.w	r6, [r5, #4]!
 800954c:	e7eb      	b.n	8009526 <__copybits+0x18>
 800954e:	f840 3b04 	str.w	r3, [r0], #4
 8009552:	e7f4      	b.n	800953e <__copybits+0x30>

08009554 <__any_on>:
 8009554:	f100 0214 	add.w	r2, r0, #20
 8009558:	6900      	ldr	r0, [r0, #16]
 800955a:	114b      	asrs	r3, r1, #5
 800955c:	4298      	cmp	r0, r3
 800955e:	b510      	push	{r4, lr}
 8009560:	db11      	blt.n	8009586 <__any_on+0x32>
 8009562:	dd0a      	ble.n	800957a <__any_on+0x26>
 8009564:	f011 011f 	ands.w	r1, r1, #31
 8009568:	d007      	beq.n	800957a <__any_on+0x26>
 800956a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800956e:	fa24 f001 	lsr.w	r0, r4, r1
 8009572:	fa00 f101 	lsl.w	r1, r0, r1
 8009576:	428c      	cmp	r4, r1
 8009578:	d10b      	bne.n	8009592 <__any_on+0x3e>
 800957a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800957e:	4293      	cmp	r3, r2
 8009580:	d803      	bhi.n	800958a <__any_on+0x36>
 8009582:	2000      	movs	r0, #0
 8009584:	bd10      	pop	{r4, pc}
 8009586:	4603      	mov	r3, r0
 8009588:	e7f7      	b.n	800957a <__any_on+0x26>
 800958a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800958e:	2900      	cmp	r1, #0
 8009590:	d0f5      	beq.n	800957e <__any_on+0x2a>
 8009592:	2001      	movs	r0, #1
 8009594:	e7f6      	b.n	8009584 <__any_on+0x30>

08009596 <sulp>:
 8009596:	b570      	push	{r4, r5, r6, lr}
 8009598:	4604      	mov	r4, r0
 800959a:	460d      	mov	r5, r1
 800959c:	ec45 4b10 	vmov	d0, r4, r5
 80095a0:	4616      	mov	r6, r2
 80095a2:	f7ff feb7 	bl	8009314 <__ulp>
 80095a6:	ec51 0b10 	vmov	r0, r1, d0
 80095aa:	b17e      	cbz	r6, 80095cc <sulp+0x36>
 80095ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80095b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dd09      	ble.n	80095cc <sulp+0x36>
 80095b8:	051b      	lsls	r3, r3, #20
 80095ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80095be:	2400      	movs	r4, #0
 80095c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80095c4:	4622      	mov	r2, r4
 80095c6:	462b      	mov	r3, r5
 80095c8:	f7f7 f836 	bl	8000638 <__aeabi_dmul>
 80095cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080095d0 <_strtod_l>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	ed2d 8b02 	vpush	{d8}
 80095d8:	b09b      	sub	sp, #108	; 0x6c
 80095da:	4604      	mov	r4, r0
 80095dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80095de:	2200      	movs	r2, #0
 80095e0:	9216      	str	r2, [sp, #88]	; 0x58
 80095e2:	460d      	mov	r5, r1
 80095e4:	f04f 0800 	mov.w	r8, #0
 80095e8:	f04f 0900 	mov.w	r9, #0
 80095ec:	460a      	mov	r2, r1
 80095ee:	9215      	str	r2, [sp, #84]	; 0x54
 80095f0:	7811      	ldrb	r1, [r2, #0]
 80095f2:	292b      	cmp	r1, #43	; 0x2b
 80095f4:	d04c      	beq.n	8009690 <_strtod_l+0xc0>
 80095f6:	d83a      	bhi.n	800966e <_strtod_l+0x9e>
 80095f8:	290d      	cmp	r1, #13
 80095fa:	d834      	bhi.n	8009666 <_strtod_l+0x96>
 80095fc:	2908      	cmp	r1, #8
 80095fe:	d834      	bhi.n	800966a <_strtod_l+0x9a>
 8009600:	2900      	cmp	r1, #0
 8009602:	d03d      	beq.n	8009680 <_strtod_l+0xb0>
 8009604:	2200      	movs	r2, #0
 8009606:	920a      	str	r2, [sp, #40]	; 0x28
 8009608:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800960a:	7832      	ldrb	r2, [r6, #0]
 800960c:	2a30      	cmp	r2, #48	; 0x30
 800960e:	f040 80b4 	bne.w	800977a <_strtod_l+0x1aa>
 8009612:	7872      	ldrb	r2, [r6, #1]
 8009614:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009618:	2a58      	cmp	r2, #88	; 0x58
 800961a:	d170      	bne.n	80096fe <_strtod_l+0x12e>
 800961c:	9302      	str	r3, [sp, #8]
 800961e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	ab16      	add	r3, sp, #88	; 0x58
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	4a8e      	ldr	r2, [pc, #568]	; (8009860 <_strtod_l+0x290>)
 8009628:	ab17      	add	r3, sp, #92	; 0x5c
 800962a:	a915      	add	r1, sp, #84	; 0x54
 800962c:	4620      	mov	r0, r4
 800962e:	f001 f93f 	bl	800a8b0 <__gethex>
 8009632:	f010 070f 	ands.w	r7, r0, #15
 8009636:	4605      	mov	r5, r0
 8009638:	d005      	beq.n	8009646 <_strtod_l+0x76>
 800963a:	2f06      	cmp	r7, #6
 800963c:	d12a      	bne.n	8009694 <_strtod_l+0xc4>
 800963e:	3601      	adds	r6, #1
 8009640:	2300      	movs	r3, #0
 8009642:	9615      	str	r6, [sp, #84]	; 0x54
 8009644:	930a      	str	r3, [sp, #40]	; 0x28
 8009646:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009648:	2b00      	cmp	r3, #0
 800964a:	f040 857f 	bne.w	800a14c <_strtod_l+0xb7c>
 800964e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009650:	b1db      	cbz	r3, 800968a <_strtod_l+0xba>
 8009652:	4642      	mov	r2, r8
 8009654:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009658:	ec43 2b10 	vmov	d0, r2, r3
 800965c:	b01b      	add	sp, #108	; 0x6c
 800965e:	ecbd 8b02 	vpop	{d8}
 8009662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009666:	2920      	cmp	r1, #32
 8009668:	d1cc      	bne.n	8009604 <_strtod_l+0x34>
 800966a:	3201      	adds	r2, #1
 800966c:	e7bf      	b.n	80095ee <_strtod_l+0x1e>
 800966e:	292d      	cmp	r1, #45	; 0x2d
 8009670:	d1c8      	bne.n	8009604 <_strtod_l+0x34>
 8009672:	2101      	movs	r1, #1
 8009674:	910a      	str	r1, [sp, #40]	; 0x28
 8009676:	1c51      	adds	r1, r2, #1
 8009678:	9115      	str	r1, [sp, #84]	; 0x54
 800967a:	7852      	ldrb	r2, [r2, #1]
 800967c:	2a00      	cmp	r2, #0
 800967e:	d1c3      	bne.n	8009608 <_strtod_l+0x38>
 8009680:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009682:	9515      	str	r5, [sp, #84]	; 0x54
 8009684:	2b00      	cmp	r3, #0
 8009686:	f040 855f 	bne.w	800a148 <_strtod_l+0xb78>
 800968a:	4642      	mov	r2, r8
 800968c:	464b      	mov	r3, r9
 800968e:	e7e3      	b.n	8009658 <_strtod_l+0x88>
 8009690:	2100      	movs	r1, #0
 8009692:	e7ef      	b.n	8009674 <_strtod_l+0xa4>
 8009694:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009696:	b13a      	cbz	r2, 80096a8 <_strtod_l+0xd8>
 8009698:	2135      	movs	r1, #53	; 0x35
 800969a:	a818      	add	r0, sp, #96	; 0x60
 800969c:	f7ff ff37 	bl	800950e <__copybits>
 80096a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80096a2:	4620      	mov	r0, r4
 80096a4:	f7ff fb0a 	bl	8008cbc <_Bfree>
 80096a8:	3f01      	subs	r7, #1
 80096aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096ac:	2f04      	cmp	r7, #4
 80096ae:	d806      	bhi.n	80096be <_strtod_l+0xee>
 80096b0:	e8df f007 	tbb	[pc, r7]
 80096b4:	201d0314 	.word	0x201d0314
 80096b8:	14          	.byte	0x14
 80096b9:	00          	.byte	0x00
 80096ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80096be:	05e9      	lsls	r1, r5, #23
 80096c0:	bf48      	it	mi
 80096c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80096c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096ca:	0d1b      	lsrs	r3, r3, #20
 80096cc:	051b      	lsls	r3, r3, #20
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1b9      	bne.n	8009646 <_strtod_l+0x76>
 80096d2:	f7fe fb03 	bl	8007cdc <__errno>
 80096d6:	2322      	movs	r3, #34	; 0x22
 80096d8:	6003      	str	r3, [r0, #0]
 80096da:	e7b4      	b.n	8009646 <_strtod_l+0x76>
 80096dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80096e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80096e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80096e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80096ec:	e7e7      	b.n	80096be <_strtod_l+0xee>
 80096ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009868 <_strtod_l+0x298>
 80096f2:	e7e4      	b.n	80096be <_strtod_l+0xee>
 80096f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80096f8:	f04f 38ff 	mov.w	r8, #4294967295
 80096fc:	e7df      	b.n	80096be <_strtod_l+0xee>
 80096fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	9215      	str	r2, [sp, #84]	; 0x54
 8009704:	785b      	ldrb	r3, [r3, #1]
 8009706:	2b30      	cmp	r3, #48	; 0x30
 8009708:	d0f9      	beq.n	80096fe <_strtod_l+0x12e>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d09b      	beq.n	8009646 <_strtod_l+0x76>
 800970e:	2301      	movs	r3, #1
 8009710:	f04f 0a00 	mov.w	sl, #0
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009718:	930b      	str	r3, [sp, #44]	; 0x2c
 800971a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800971e:	46d3      	mov	fp, sl
 8009720:	220a      	movs	r2, #10
 8009722:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009724:	7806      	ldrb	r6, [r0, #0]
 8009726:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800972a:	b2d9      	uxtb	r1, r3
 800972c:	2909      	cmp	r1, #9
 800972e:	d926      	bls.n	800977e <_strtod_l+0x1ae>
 8009730:	494c      	ldr	r1, [pc, #304]	; (8009864 <_strtod_l+0x294>)
 8009732:	2201      	movs	r2, #1
 8009734:	f000 ffe6 	bl	800a704 <strncmp>
 8009738:	2800      	cmp	r0, #0
 800973a:	d030      	beq.n	800979e <_strtod_l+0x1ce>
 800973c:	2000      	movs	r0, #0
 800973e:	4632      	mov	r2, r6
 8009740:	9005      	str	r0, [sp, #20]
 8009742:	465e      	mov	r6, fp
 8009744:	4603      	mov	r3, r0
 8009746:	2a65      	cmp	r2, #101	; 0x65
 8009748:	d001      	beq.n	800974e <_strtod_l+0x17e>
 800974a:	2a45      	cmp	r2, #69	; 0x45
 800974c:	d113      	bne.n	8009776 <_strtod_l+0x1a6>
 800974e:	b91e      	cbnz	r6, 8009758 <_strtod_l+0x188>
 8009750:	9a04      	ldr	r2, [sp, #16]
 8009752:	4302      	orrs	r2, r0
 8009754:	d094      	beq.n	8009680 <_strtod_l+0xb0>
 8009756:	2600      	movs	r6, #0
 8009758:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800975a:	1c6a      	adds	r2, r5, #1
 800975c:	9215      	str	r2, [sp, #84]	; 0x54
 800975e:	786a      	ldrb	r2, [r5, #1]
 8009760:	2a2b      	cmp	r2, #43	; 0x2b
 8009762:	d074      	beq.n	800984e <_strtod_l+0x27e>
 8009764:	2a2d      	cmp	r2, #45	; 0x2d
 8009766:	d078      	beq.n	800985a <_strtod_l+0x28a>
 8009768:	f04f 0c00 	mov.w	ip, #0
 800976c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009770:	2909      	cmp	r1, #9
 8009772:	d97f      	bls.n	8009874 <_strtod_l+0x2a4>
 8009774:	9515      	str	r5, [sp, #84]	; 0x54
 8009776:	2700      	movs	r7, #0
 8009778:	e09e      	b.n	80098b8 <_strtod_l+0x2e8>
 800977a:	2300      	movs	r3, #0
 800977c:	e7c8      	b.n	8009710 <_strtod_l+0x140>
 800977e:	f1bb 0f08 	cmp.w	fp, #8
 8009782:	bfd8      	it	le
 8009784:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009786:	f100 0001 	add.w	r0, r0, #1
 800978a:	bfda      	itte	le
 800978c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009790:	9309      	strle	r3, [sp, #36]	; 0x24
 8009792:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009796:	f10b 0b01 	add.w	fp, fp, #1
 800979a:	9015      	str	r0, [sp, #84]	; 0x54
 800979c:	e7c1      	b.n	8009722 <_strtod_l+0x152>
 800979e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	9215      	str	r2, [sp, #84]	; 0x54
 80097a4:	785a      	ldrb	r2, [r3, #1]
 80097a6:	f1bb 0f00 	cmp.w	fp, #0
 80097aa:	d037      	beq.n	800981c <_strtod_l+0x24c>
 80097ac:	9005      	str	r0, [sp, #20]
 80097ae:	465e      	mov	r6, fp
 80097b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d912      	bls.n	80097de <_strtod_l+0x20e>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e7c4      	b.n	8009746 <_strtod_l+0x176>
 80097bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	9215      	str	r2, [sp, #84]	; 0x54
 80097c2:	785a      	ldrb	r2, [r3, #1]
 80097c4:	3001      	adds	r0, #1
 80097c6:	2a30      	cmp	r2, #48	; 0x30
 80097c8:	d0f8      	beq.n	80097bc <_strtod_l+0x1ec>
 80097ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80097ce:	2b08      	cmp	r3, #8
 80097d0:	f200 84c1 	bhi.w	800a156 <_strtod_l+0xb86>
 80097d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097d6:	9005      	str	r0, [sp, #20]
 80097d8:	2000      	movs	r0, #0
 80097da:	930b      	str	r3, [sp, #44]	; 0x2c
 80097dc:	4606      	mov	r6, r0
 80097de:	3a30      	subs	r2, #48	; 0x30
 80097e0:	f100 0301 	add.w	r3, r0, #1
 80097e4:	d014      	beq.n	8009810 <_strtod_l+0x240>
 80097e6:	9905      	ldr	r1, [sp, #20]
 80097e8:	4419      	add	r1, r3
 80097ea:	9105      	str	r1, [sp, #20]
 80097ec:	4633      	mov	r3, r6
 80097ee:	eb00 0c06 	add.w	ip, r0, r6
 80097f2:	210a      	movs	r1, #10
 80097f4:	4563      	cmp	r3, ip
 80097f6:	d113      	bne.n	8009820 <_strtod_l+0x250>
 80097f8:	1833      	adds	r3, r6, r0
 80097fa:	2b08      	cmp	r3, #8
 80097fc:	f106 0601 	add.w	r6, r6, #1
 8009800:	4406      	add	r6, r0
 8009802:	dc1a      	bgt.n	800983a <_strtod_l+0x26a>
 8009804:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009806:	230a      	movs	r3, #10
 8009808:	fb03 2301 	mla	r3, r3, r1, r2
 800980c:	9309      	str	r3, [sp, #36]	; 0x24
 800980e:	2300      	movs	r3, #0
 8009810:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009812:	1c51      	adds	r1, r2, #1
 8009814:	9115      	str	r1, [sp, #84]	; 0x54
 8009816:	7852      	ldrb	r2, [r2, #1]
 8009818:	4618      	mov	r0, r3
 800981a:	e7c9      	b.n	80097b0 <_strtod_l+0x1e0>
 800981c:	4658      	mov	r0, fp
 800981e:	e7d2      	b.n	80097c6 <_strtod_l+0x1f6>
 8009820:	2b08      	cmp	r3, #8
 8009822:	f103 0301 	add.w	r3, r3, #1
 8009826:	dc03      	bgt.n	8009830 <_strtod_l+0x260>
 8009828:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800982a:	434f      	muls	r7, r1
 800982c:	9709      	str	r7, [sp, #36]	; 0x24
 800982e:	e7e1      	b.n	80097f4 <_strtod_l+0x224>
 8009830:	2b10      	cmp	r3, #16
 8009832:	bfd8      	it	le
 8009834:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009838:	e7dc      	b.n	80097f4 <_strtod_l+0x224>
 800983a:	2e10      	cmp	r6, #16
 800983c:	bfdc      	itt	le
 800983e:	230a      	movle	r3, #10
 8009840:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009844:	e7e3      	b.n	800980e <_strtod_l+0x23e>
 8009846:	2300      	movs	r3, #0
 8009848:	9305      	str	r3, [sp, #20]
 800984a:	2301      	movs	r3, #1
 800984c:	e780      	b.n	8009750 <_strtod_l+0x180>
 800984e:	f04f 0c00 	mov.w	ip, #0
 8009852:	1caa      	adds	r2, r5, #2
 8009854:	9215      	str	r2, [sp, #84]	; 0x54
 8009856:	78aa      	ldrb	r2, [r5, #2]
 8009858:	e788      	b.n	800976c <_strtod_l+0x19c>
 800985a:	f04f 0c01 	mov.w	ip, #1
 800985e:	e7f8      	b.n	8009852 <_strtod_l+0x282>
 8009860:	0800b788 	.word	0x0800b788
 8009864:	0800b784 	.word	0x0800b784
 8009868:	7ff00000 	.word	0x7ff00000
 800986c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800986e:	1c51      	adds	r1, r2, #1
 8009870:	9115      	str	r1, [sp, #84]	; 0x54
 8009872:	7852      	ldrb	r2, [r2, #1]
 8009874:	2a30      	cmp	r2, #48	; 0x30
 8009876:	d0f9      	beq.n	800986c <_strtod_l+0x29c>
 8009878:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800987c:	2908      	cmp	r1, #8
 800987e:	f63f af7a 	bhi.w	8009776 <_strtod_l+0x1a6>
 8009882:	3a30      	subs	r2, #48	; 0x30
 8009884:	9208      	str	r2, [sp, #32]
 8009886:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009888:	920c      	str	r2, [sp, #48]	; 0x30
 800988a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800988c:	1c57      	adds	r7, r2, #1
 800988e:	9715      	str	r7, [sp, #84]	; 0x54
 8009890:	7852      	ldrb	r2, [r2, #1]
 8009892:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009896:	f1be 0f09 	cmp.w	lr, #9
 800989a:	d938      	bls.n	800990e <_strtod_l+0x33e>
 800989c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800989e:	1a7f      	subs	r7, r7, r1
 80098a0:	2f08      	cmp	r7, #8
 80098a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80098a6:	dc03      	bgt.n	80098b0 <_strtod_l+0x2e0>
 80098a8:	9908      	ldr	r1, [sp, #32]
 80098aa:	428f      	cmp	r7, r1
 80098ac:	bfa8      	it	ge
 80098ae:	460f      	movge	r7, r1
 80098b0:	f1bc 0f00 	cmp.w	ip, #0
 80098b4:	d000      	beq.n	80098b8 <_strtod_l+0x2e8>
 80098b6:	427f      	negs	r7, r7
 80098b8:	2e00      	cmp	r6, #0
 80098ba:	d14f      	bne.n	800995c <_strtod_l+0x38c>
 80098bc:	9904      	ldr	r1, [sp, #16]
 80098be:	4301      	orrs	r1, r0
 80098c0:	f47f aec1 	bne.w	8009646 <_strtod_l+0x76>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f47f aedb 	bne.w	8009680 <_strtod_l+0xb0>
 80098ca:	2a69      	cmp	r2, #105	; 0x69
 80098cc:	d029      	beq.n	8009922 <_strtod_l+0x352>
 80098ce:	dc26      	bgt.n	800991e <_strtod_l+0x34e>
 80098d0:	2a49      	cmp	r2, #73	; 0x49
 80098d2:	d026      	beq.n	8009922 <_strtod_l+0x352>
 80098d4:	2a4e      	cmp	r2, #78	; 0x4e
 80098d6:	f47f aed3 	bne.w	8009680 <_strtod_l+0xb0>
 80098da:	499b      	ldr	r1, [pc, #620]	; (8009b48 <_strtod_l+0x578>)
 80098dc:	a815      	add	r0, sp, #84	; 0x54
 80098de:	f001 fa27 	bl	800ad30 <__match>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	f43f aecc 	beq.w	8009680 <_strtod_l+0xb0>
 80098e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b28      	cmp	r3, #40	; 0x28
 80098ee:	d12f      	bne.n	8009950 <_strtod_l+0x380>
 80098f0:	4996      	ldr	r1, [pc, #600]	; (8009b4c <_strtod_l+0x57c>)
 80098f2:	aa18      	add	r2, sp, #96	; 0x60
 80098f4:	a815      	add	r0, sp, #84	; 0x54
 80098f6:	f001 fa2f 	bl	800ad58 <__hexnan>
 80098fa:	2805      	cmp	r0, #5
 80098fc:	d128      	bne.n	8009950 <_strtod_l+0x380>
 80098fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009900:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009904:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009908:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800990c:	e69b      	b.n	8009646 <_strtod_l+0x76>
 800990e:	9f08      	ldr	r7, [sp, #32]
 8009910:	210a      	movs	r1, #10
 8009912:	fb01 2107 	mla	r1, r1, r7, r2
 8009916:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800991a:	9208      	str	r2, [sp, #32]
 800991c:	e7b5      	b.n	800988a <_strtod_l+0x2ba>
 800991e:	2a6e      	cmp	r2, #110	; 0x6e
 8009920:	e7d9      	b.n	80098d6 <_strtod_l+0x306>
 8009922:	498b      	ldr	r1, [pc, #556]	; (8009b50 <_strtod_l+0x580>)
 8009924:	a815      	add	r0, sp, #84	; 0x54
 8009926:	f001 fa03 	bl	800ad30 <__match>
 800992a:	2800      	cmp	r0, #0
 800992c:	f43f aea8 	beq.w	8009680 <_strtod_l+0xb0>
 8009930:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009932:	4988      	ldr	r1, [pc, #544]	; (8009b54 <_strtod_l+0x584>)
 8009934:	3b01      	subs	r3, #1
 8009936:	a815      	add	r0, sp, #84	; 0x54
 8009938:	9315      	str	r3, [sp, #84]	; 0x54
 800993a:	f001 f9f9 	bl	800ad30 <__match>
 800993e:	b910      	cbnz	r0, 8009946 <_strtod_l+0x376>
 8009940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009942:	3301      	adds	r3, #1
 8009944:	9315      	str	r3, [sp, #84]	; 0x54
 8009946:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009b64 <_strtod_l+0x594>
 800994a:	f04f 0800 	mov.w	r8, #0
 800994e:	e67a      	b.n	8009646 <_strtod_l+0x76>
 8009950:	4881      	ldr	r0, [pc, #516]	; (8009b58 <_strtod_l+0x588>)
 8009952:	f000 ff09 	bl	800a768 <nan>
 8009956:	ec59 8b10 	vmov	r8, r9, d0
 800995a:	e674      	b.n	8009646 <_strtod_l+0x76>
 800995c:	9b05      	ldr	r3, [sp, #20]
 800995e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009960:	1afb      	subs	r3, r7, r3
 8009962:	f1bb 0f00 	cmp.w	fp, #0
 8009966:	bf08      	it	eq
 8009968:	46b3      	moveq	fp, r6
 800996a:	2e10      	cmp	r6, #16
 800996c:	9308      	str	r3, [sp, #32]
 800996e:	4635      	mov	r5, r6
 8009970:	bfa8      	it	ge
 8009972:	2510      	movge	r5, #16
 8009974:	f7f6 fde6 	bl	8000544 <__aeabi_ui2d>
 8009978:	2e09      	cmp	r6, #9
 800997a:	4680      	mov	r8, r0
 800997c:	4689      	mov	r9, r1
 800997e:	dd13      	ble.n	80099a8 <_strtod_l+0x3d8>
 8009980:	4b76      	ldr	r3, [pc, #472]	; (8009b5c <_strtod_l+0x58c>)
 8009982:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009986:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800998a:	f7f6 fe55 	bl	8000638 <__aeabi_dmul>
 800998e:	4680      	mov	r8, r0
 8009990:	4650      	mov	r0, sl
 8009992:	4689      	mov	r9, r1
 8009994:	f7f6 fdd6 	bl	8000544 <__aeabi_ui2d>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4640      	mov	r0, r8
 800999e:	4649      	mov	r1, r9
 80099a0:	f7f6 fc94 	bl	80002cc <__adddf3>
 80099a4:	4680      	mov	r8, r0
 80099a6:	4689      	mov	r9, r1
 80099a8:	2e0f      	cmp	r6, #15
 80099aa:	dc38      	bgt.n	8009a1e <_strtod_l+0x44e>
 80099ac:	9b08      	ldr	r3, [sp, #32]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f43f ae49 	beq.w	8009646 <_strtod_l+0x76>
 80099b4:	dd24      	ble.n	8009a00 <_strtod_l+0x430>
 80099b6:	2b16      	cmp	r3, #22
 80099b8:	dc0b      	bgt.n	80099d2 <_strtod_l+0x402>
 80099ba:	4968      	ldr	r1, [pc, #416]	; (8009b5c <_strtod_l+0x58c>)
 80099bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099c4:	4642      	mov	r2, r8
 80099c6:	464b      	mov	r3, r9
 80099c8:	f7f6 fe36 	bl	8000638 <__aeabi_dmul>
 80099cc:	4680      	mov	r8, r0
 80099ce:	4689      	mov	r9, r1
 80099d0:	e639      	b.n	8009646 <_strtod_l+0x76>
 80099d2:	9a08      	ldr	r2, [sp, #32]
 80099d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80099d8:	4293      	cmp	r3, r2
 80099da:	db20      	blt.n	8009a1e <_strtod_l+0x44e>
 80099dc:	4c5f      	ldr	r4, [pc, #380]	; (8009b5c <_strtod_l+0x58c>)
 80099de:	f1c6 060f 	rsb	r6, r6, #15
 80099e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80099e6:	4642      	mov	r2, r8
 80099e8:	464b      	mov	r3, r9
 80099ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ee:	f7f6 fe23 	bl	8000638 <__aeabi_dmul>
 80099f2:	9b08      	ldr	r3, [sp, #32]
 80099f4:	1b9e      	subs	r6, r3, r6
 80099f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80099fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80099fe:	e7e3      	b.n	80099c8 <_strtod_l+0x3f8>
 8009a00:	9b08      	ldr	r3, [sp, #32]
 8009a02:	3316      	adds	r3, #22
 8009a04:	db0b      	blt.n	8009a1e <_strtod_l+0x44e>
 8009a06:	9b05      	ldr	r3, [sp, #20]
 8009a08:	1bdf      	subs	r7, r3, r7
 8009a0a:	4b54      	ldr	r3, [pc, #336]	; (8009b5c <_strtod_l+0x58c>)
 8009a0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a14:	4640      	mov	r0, r8
 8009a16:	4649      	mov	r1, r9
 8009a18:	f7f6 ff38 	bl	800088c <__aeabi_ddiv>
 8009a1c:	e7d6      	b.n	80099cc <_strtod_l+0x3fc>
 8009a1e:	9b08      	ldr	r3, [sp, #32]
 8009a20:	1b75      	subs	r5, r6, r5
 8009a22:	441d      	add	r5, r3
 8009a24:	2d00      	cmp	r5, #0
 8009a26:	dd70      	ble.n	8009b0a <_strtod_l+0x53a>
 8009a28:	f015 030f 	ands.w	r3, r5, #15
 8009a2c:	d00a      	beq.n	8009a44 <_strtod_l+0x474>
 8009a2e:	494b      	ldr	r1, [pc, #300]	; (8009b5c <_strtod_l+0x58c>)
 8009a30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a34:	4642      	mov	r2, r8
 8009a36:	464b      	mov	r3, r9
 8009a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a3c:	f7f6 fdfc 	bl	8000638 <__aeabi_dmul>
 8009a40:	4680      	mov	r8, r0
 8009a42:	4689      	mov	r9, r1
 8009a44:	f035 050f 	bics.w	r5, r5, #15
 8009a48:	d04d      	beq.n	8009ae6 <_strtod_l+0x516>
 8009a4a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009a4e:	dd22      	ble.n	8009a96 <_strtod_l+0x4c6>
 8009a50:	2500      	movs	r5, #0
 8009a52:	46ab      	mov	fp, r5
 8009a54:	9509      	str	r5, [sp, #36]	; 0x24
 8009a56:	9505      	str	r5, [sp, #20]
 8009a58:	2322      	movs	r3, #34	; 0x22
 8009a5a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009b64 <_strtod_l+0x594>
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	f04f 0800 	mov.w	r8, #0
 8009a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f43f aded 	beq.w	8009646 <_strtod_l+0x76>
 8009a6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7ff f924 	bl	8008cbc <_Bfree>
 8009a74:	9905      	ldr	r1, [sp, #20]
 8009a76:	4620      	mov	r0, r4
 8009a78:	f7ff f920 	bl	8008cbc <_Bfree>
 8009a7c:	4659      	mov	r1, fp
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f7ff f91c 	bl	8008cbc <_Bfree>
 8009a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a86:	4620      	mov	r0, r4
 8009a88:	f7ff f918 	bl	8008cbc <_Bfree>
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7ff f914 	bl	8008cbc <_Bfree>
 8009a94:	e5d7      	b.n	8009646 <_strtod_l+0x76>
 8009a96:	4b32      	ldr	r3, [pc, #200]	; (8009b60 <_strtod_l+0x590>)
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	112d      	asrs	r5, r5, #4
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	469a      	mov	sl, r3
 8009aa4:	2d01      	cmp	r5, #1
 8009aa6:	dc21      	bgt.n	8009aec <_strtod_l+0x51c>
 8009aa8:	b10b      	cbz	r3, 8009aae <_strtod_l+0x4de>
 8009aaa:	4680      	mov	r8, r0
 8009aac:	4689      	mov	r9, r1
 8009aae:	492c      	ldr	r1, [pc, #176]	; (8009b60 <_strtod_l+0x590>)
 8009ab0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009ab4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009ab8:	4642      	mov	r2, r8
 8009aba:	464b      	mov	r3, r9
 8009abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ac0:	f7f6 fdba 	bl	8000638 <__aeabi_dmul>
 8009ac4:	4b27      	ldr	r3, [pc, #156]	; (8009b64 <_strtod_l+0x594>)
 8009ac6:	460a      	mov	r2, r1
 8009ac8:	400b      	ands	r3, r1
 8009aca:	4927      	ldr	r1, [pc, #156]	; (8009b68 <_strtod_l+0x598>)
 8009acc:	428b      	cmp	r3, r1
 8009ace:	4680      	mov	r8, r0
 8009ad0:	d8be      	bhi.n	8009a50 <_strtod_l+0x480>
 8009ad2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009ad6:	428b      	cmp	r3, r1
 8009ad8:	bf86      	itte	hi
 8009ada:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009b6c <_strtod_l+0x59c>
 8009ade:	f04f 38ff 	movhi.w	r8, #4294967295
 8009ae2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	e07b      	b.n	8009be4 <_strtod_l+0x614>
 8009aec:	07ea      	lsls	r2, r5, #31
 8009aee:	d505      	bpl.n	8009afc <_strtod_l+0x52c>
 8009af0:	9b04      	ldr	r3, [sp, #16]
 8009af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af6:	f7f6 fd9f 	bl	8000638 <__aeabi_dmul>
 8009afa:	2301      	movs	r3, #1
 8009afc:	9a04      	ldr	r2, [sp, #16]
 8009afe:	3208      	adds	r2, #8
 8009b00:	f10a 0a01 	add.w	sl, sl, #1
 8009b04:	106d      	asrs	r5, r5, #1
 8009b06:	9204      	str	r2, [sp, #16]
 8009b08:	e7cc      	b.n	8009aa4 <_strtod_l+0x4d4>
 8009b0a:	d0ec      	beq.n	8009ae6 <_strtod_l+0x516>
 8009b0c:	426d      	negs	r5, r5
 8009b0e:	f015 020f 	ands.w	r2, r5, #15
 8009b12:	d00a      	beq.n	8009b2a <_strtod_l+0x55a>
 8009b14:	4b11      	ldr	r3, [pc, #68]	; (8009b5c <_strtod_l+0x58c>)
 8009b16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f7f6 feb3 	bl	800088c <__aeabi_ddiv>
 8009b26:	4680      	mov	r8, r0
 8009b28:	4689      	mov	r9, r1
 8009b2a:	112d      	asrs	r5, r5, #4
 8009b2c:	d0db      	beq.n	8009ae6 <_strtod_l+0x516>
 8009b2e:	2d1f      	cmp	r5, #31
 8009b30:	dd1e      	ble.n	8009b70 <_strtod_l+0x5a0>
 8009b32:	2500      	movs	r5, #0
 8009b34:	46ab      	mov	fp, r5
 8009b36:	9509      	str	r5, [sp, #36]	; 0x24
 8009b38:	9505      	str	r5, [sp, #20]
 8009b3a:	2322      	movs	r3, #34	; 0x22
 8009b3c:	f04f 0800 	mov.w	r8, #0
 8009b40:	f04f 0900 	mov.w	r9, #0
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	e78d      	b.n	8009a64 <_strtod_l+0x494>
 8009b48:	0800b575 	.word	0x0800b575
 8009b4c:	0800b79c 	.word	0x0800b79c
 8009b50:	0800b56d 	.word	0x0800b56d
 8009b54:	0800b5a4 	.word	0x0800b5a4
 8009b58:	0800b92d 	.word	0x0800b92d
 8009b5c:	0800b6b0 	.word	0x0800b6b0
 8009b60:	0800b688 	.word	0x0800b688
 8009b64:	7ff00000 	.word	0x7ff00000
 8009b68:	7ca00000 	.word	0x7ca00000
 8009b6c:	7fefffff 	.word	0x7fefffff
 8009b70:	f015 0310 	ands.w	r3, r5, #16
 8009b74:	bf18      	it	ne
 8009b76:	236a      	movne	r3, #106	; 0x6a
 8009b78:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009f1c <_strtod_l+0x94c>
 8009b7c:	9304      	str	r3, [sp, #16]
 8009b7e:	4640      	mov	r0, r8
 8009b80:	4649      	mov	r1, r9
 8009b82:	2300      	movs	r3, #0
 8009b84:	07ea      	lsls	r2, r5, #31
 8009b86:	d504      	bpl.n	8009b92 <_strtod_l+0x5c2>
 8009b88:	e9da 2300 	ldrd	r2, r3, [sl]
 8009b8c:	f7f6 fd54 	bl	8000638 <__aeabi_dmul>
 8009b90:	2301      	movs	r3, #1
 8009b92:	106d      	asrs	r5, r5, #1
 8009b94:	f10a 0a08 	add.w	sl, sl, #8
 8009b98:	d1f4      	bne.n	8009b84 <_strtod_l+0x5b4>
 8009b9a:	b10b      	cbz	r3, 8009ba0 <_strtod_l+0x5d0>
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	4689      	mov	r9, r1
 8009ba0:	9b04      	ldr	r3, [sp, #16]
 8009ba2:	b1bb      	cbz	r3, 8009bd4 <_strtod_l+0x604>
 8009ba4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009ba8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	4649      	mov	r1, r9
 8009bb0:	dd10      	ble.n	8009bd4 <_strtod_l+0x604>
 8009bb2:	2b1f      	cmp	r3, #31
 8009bb4:	f340 811e 	ble.w	8009df4 <_strtod_l+0x824>
 8009bb8:	2b34      	cmp	r3, #52	; 0x34
 8009bba:	bfde      	ittt	le
 8009bbc:	f04f 33ff 	movle.w	r3, #4294967295
 8009bc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009bc4:	4093      	lslle	r3, r2
 8009bc6:	f04f 0800 	mov.w	r8, #0
 8009bca:	bfcc      	ite	gt
 8009bcc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009bd0:	ea03 0901 	andle.w	r9, r3, r1
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	4640      	mov	r0, r8
 8009bda:	4649      	mov	r1, r9
 8009bdc:	f7f6 ff94 	bl	8000b08 <__aeabi_dcmpeq>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d1a6      	bne.n	8009b32 <_strtod_l+0x562>
 8009be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bea:	4633      	mov	r3, r6
 8009bec:	465a      	mov	r2, fp
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f7ff f8cc 	bl	8008d8c <__s2b>
 8009bf4:	9009      	str	r0, [sp, #36]	; 0x24
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	f43f af2a 	beq.w	8009a50 <_strtod_l+0x480>
 8009bfc:	9a08      	ldr	r2, [sp, #32]
 8009bfe:	9b05      	ldr	r3, [sp, #20]
 8009c00:	2a00      	cmp	r2, #0
 8009c02:	eba3 0307 	sub.w	r3, r3, r7
 8009c06:	bfa8      	it	ge
 8009c08:	2300      	movge	r3, #0
 8009c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8009c0c:	2500      	movs	r5, #0
 8009c0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009c12:	9312      	str	r3, [sp, #72]	; 0x48
 8009c14:	46ab      	mov	fp, r5
 8009c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c18:	4620      	mov	r0, r4
 8009c1a:	6859      	ldr	r1, [r3, #4]
 8009c1c:	f7ff f80e 	bl	8008c3c <_Balloc>
 8009c20:	9005      	str	r0, [sp, #20]
 8009c22:	2800      	cmp	r0, #0
 8009c24:	f43f af18 	beq.w	8009a58 <_strtod_l+0x488>
 8009c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c2a:	691a      	ldr	r2, [r3, #16]
 8009c2c:	3202      	adds	r2, #2
 8009c2e:	f103 010c 	add.w	r1, r3, #12
 8009c32:	0092      	lsls	r2, r2, #2
 8009c34:	300c      	adds	r0, #12
 8009c36:	f000 fd87 	bl	800a748 <memcpy>
 8009c3a:	ec49 8b10 	vmov	d0, r8, r9
 8009c3e:	aa18      	add	r2, sp, #96	; 0x60
 8009c40:	a917      	add	r1, sp, #92	; 0x5c
 8009c42:	4620      	mov	r0, r4
 8009c44:	f7ff fbd6 	bl	80093f4 <__d2b>
 8009c48:	ec49 8b18 	vmov	d8, r8, r9
 8009c4c:	9016      	str	r0, [sp, #88]	; 0x58
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f43f af02 	beq.w	8009a58 <_strtod_l+0x488>
 8009c54:	2101      	movs	r1, #1
 8009c56:	4620      	mov	r0, r4
 8009c58:	f7ff f930 	bl	8008ebc <__i2b>
 8009c5c:	4683      	mov	fp, r0
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	f43f aefa 	beq.w	8009a58 <_strtod_l+0x488>
 8009c64:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009c66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c68:	2e00      	cmp	r6, #0
 8009c6a:	bfab      	itete	ge
 8009c6c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009c6e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009c70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009c72:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009c76:	bfac      	ite	ge
 8009c78:	eb06 0a03 	addge.w	sl, r6, r3
 8009c7c:	1b9f      	sublt	r7, r3, r6
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	1af6      	subs	r6, r6, r3
 8009c82:	4416      	add	r6, r2
 8009c84:	4ba0      	ldr	r3, [pc, #640]	; (8009f08 <_strtod_l+0x938>)
 8009c86:	3e01      	subs	r6, #1
 8009c88:	429e      	cmp	r6, r3
 8009c8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c8e:	f280 80c4 	bge.w	8009e1a <_strtod_l+0x84a>
 8009c92:	1b9b      	subs	r3, r3, r6
 8009c94:	2b1f      	cmp	r3, #31
 8009c96:	eba2 0203 	sub.w	r2, r2, r3
 8009c9a:	f04f 0101 	mov.w	r1, #1
 8009c9e:	f300 80b0 	bgt.w	8009e02 <_strtod_l+0x832>
 8009ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca6:	930e      	str	r3, [sp, #56]	; 0x38
 8009ca8:	2300      	movs	r3, #0
 8009caa:	930d      	str	r3, [sp, #52]	; 0x34
 8009cac:	eb0a 0602 	add.w	r6, sl, r2
 8009cb0:	9b04      	ldr	r3, [sp, #16]
 8009cb2:	45b2      	cmp	sl, r6
 8009cb4:	4417      	add	r7, r2
 8009cb6:	441f      	add	r7, r3
 8009cb8:	4653      	mov	r3, sl
 8009cba:	bfa8      	it	ge
 8009cbc:	4633      	movge	r3, r6
 8009cbe:	42bb      	cmp	r3, r7
 8009cc0:	bfa8      	it	ge
 8009cc2:	463b      	movge	r3, r7
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfc2      	ittt	gt
 8009cc8:	1af6      	subgt	r6, r6, r3
 8009cca:	1aff      	subgt	r7, r7, r3
 8009ccc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	dd17      	ble.n	8009d06 <_strtod_l+0x736>
 8009cd6:	4659      	mov	r1, fp
 8009cd8:	461a      	mov	r2, r3
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f7ff f9ae 	bl	800903c <__pow5mult>
 8009ce0:	4683      	mov	fp, r0
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	f43f aeb8 	beq.w	8009a58 <_strtod_l+0x488>
 8009ce8:	4601      	mov	r1, r0
 8009cea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009cec:	4620      	mov	r0, r4
 8009cee:	f7ff f8fb 	bl	8008ee8 <__multiply>
 8009cf2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	f43f aeaf 	beq.w	8009a58 <_strtod_l+0x488>
 8009cfa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f7fe ffdd 	bl	8008cbc <_Bfree>
 8009d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d04:	9316      	str	r3, [sp, #88]	; 0x58
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	f300 808c 	bgt.w	8009e24 <_strtod_l+0x854>
 8009d0c:	9b08      	ldr	r3, [sp, #32]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	dd08      	ble.n	8009d24 <_strtod_l+0x754>
 8009d12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d14:	9905      	ldr	r1, [sp, #20]
 8009d16:	4620      	mov	r0, r4
 8009d18:	f7ff f990 	bl	800903c <__pow5mult>
 8009d1c:	9005      	str	r0, [sp, #20]
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	f43f ae9a 	beq.w	8009a58 <_strtod_l+0x488>
 8009d24:	2f00      	cmp	r7, #0
 8009d26:	dd08      	ble.n	8009d3a <_strtod_l+0x76a>
 8009d28:	9905      	ldr	r1, [sp, #20]
 8009d2a:	463a      	mov	r2, r7
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f7ff f9df 	bl	80090f0 <__lshift>
 8009d32:	9005      	str	r0, [sp, #20]
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f43f ae8f 	beq.w	8009a58 <_strtod_l+0x488>
 8009d3a:	f1ba 0f00 	cmp.w	sl, #0
 8009d3e:	dd08      	ble.n	8009d52 <_strtod_l+0x782>
 8009d40:	4659      	mov	r1, fp
 8009d42:	4652      	mov	r2, sl
 8009d44:	4620      	mov	r0, r4
 8009d46:	f7ff f9d3 	bl	80090f0 <__lshift>
 8009d4a:	4683      	mov	fp, r0
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	f43f ae83 	beq.w	8009a58 <_strtod_l+0x488>
 8009d52:	9a05      	ldr	r2, [sp, #20]
 8009d54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009d56:	4620      	mov	r0, r4
 8009d58:	f7ff fa52 	bl	8009200 <__mdiff>
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f43f ae7a 	beq.w	8009a58 <_strtod_l+0x488>
 8009d64:	68c3      	ldr	r3, [r0, #12]
 8009d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60c3      	str	r3, [r0, #12]
 8009d6c:	4659      	mov	r1, fp
 8009d6e:	f7ff fa2b 	bl	80091c8 <__mcmp>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	da60      	bge.n	8009e38 <_strtod_l+0x868>
 8009d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d78:	ea53 0308 	orrs.w	r3, r3, r8
 8009d7c:	f040 8084 	bne.w	8009e88 <_strtod_l+0x8b8>
 8009d80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d17f      	bne.n	8009e88 <_strtod_l+0x8b8>
 8009d88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d8c:	0d1b      	lsrs	r3, r3, #20
 8009d8e:	051b      	lsls	r3, r3, #20
 8009d90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d94:	d978      	bls.n	8009e88 <_strtod_l+0x8b8>
 8009d96:	696b      	ldr	r3, [r5, #20]
 8009d98:	b913      	cbnz	r3, 8009da0 <_strtod_l+0x7d0>
 8009d9a:	692b      	ldr	r3, [r5, #16]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	dd73      	ble.n	8009e88 <_strtod_l+0x8b8>
 8009da0:	4629      	mov	r1, r5
 8009da2:	2201      	movs	r2, #1
 8009da4:	4620      	mov	r0, r4
 8009da6:	f7ff f9a3 	bl	80090f0 <__lshift>
 8009daa:	4659      	mov	r1, fp
 8009dac:	4605      	mov	r5, r0
 8009dae:	f7ff fa0b 	bl	80091c8 <__mcmp>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	dd68      	ble.n	8009e88 <_strtod_l+0x8b8>
 8009db6:	9904      	ldr	r1, [sp, #16]
 8009db8:	4a54      	ldr	r2, [pc, #336]	; (8009f0c <_strtod_l+0x93c>)
 8009dba:	464b      	mov	r3, r9
 8009dbc:	2900      	cmp	r1, #0
 8009dbe:	f000 8084 	beq.w	8009eca <_strtod_l+0x8fa>
 8009dc2:	ea02 0109 	and.w	r1, r2, r9
 8009dc6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009dca:	dc7e      	bgt.n	8009eca <_strtod_l+0x8fa>
 8009dcc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009dd0:	f77f aeb3 	ble.w	8009b3a <_strtod_l+0x56a>
 8009dd4:	4b4e      	ldr	r3, [pc, #312]	; (8009f10 <_strtod_l+0x940>)
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	4649      	mov	r1, r9
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f7f6 fc2c 	bl	8000638 <__aeabi_dmul>
 8009de0:	4b4a      	ldr	r3, [pc, #296]	; (8009f0c <_strtod_l+0x93c>)
 8009de2:	400b      	ands	r3, r1
 8009de4:	4680      	mov	r8, r0
 8009de6:	4689      	mov	r9, r1
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f47f ae3f 	bne.w	8009a6c <_strtod_l+0x49c>
 8009dee:	2322      	movs	r3, #34	; 0x22
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	e63b      	b.n	8009a6c <_strtod_l+0x49c>
 8009df4:	f04f 32ff 	mov.w	r2, #4294967295
 8009df8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dfc:	ea03 0808 	and.w	r8, r3, r8
 8009e00:	e6e8      	b.n	8009bd4 <_strtod_l+0x604>
 8009e02:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009e06:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009e0a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009e0e:	36e2      	adds	r6, #226	; 0xe2
 8009e10:	fa01 f306 	lsl.w	r3, r1, r6
 8009e14:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009e18:	e748      	b.n	8009cac <_strtod_l+0x6dc>
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009e22:	e743      	b.n	8009cac <_strtod_l+0x6dc>
 8009e24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e26:	4632      	mov	r2, r6
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f7ff f961 	bl	80090f0 <__lshift>
 8009e2e:	9016      	str	r0, [sp, #88]	; 0x58
 8009e30:	2800      	cmp	r0, #0
 8009e32:	f47f af6b 	bne.w	8009d0c <_strtod_l+0x73c>
 8009e36:	e60f      	b.n	8009a58 <_strtod_l+0x488>
 8009e38:	46ca      	mov	sl, r9
 8009e3a:	d171      	bne.n	8009f20 <_strtod_l+0x950>
 8009e3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e42:	b352      	cbz	r2, 8009e9a <_strtod_l+0x8ca>
 8009e44:	4a33      	ldr	r2, [pc, #204]	; (8009f14 <_strtod_l+0x944>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d12a      	bne.n	8009ea0 <_strtod_l+0x8d0>
 8009e4a:	9b04      	ldr	r3, [sp, #16]
 8009e4c:	4641      	mov	r1, r8
 8009e4e:	b1fb      	cbz	r3, 8009e90 <_strtod_l+0x8c0>
 8009e50:	4b2e      	ldr	r3, [pc, #184]	; (8009f0c <_strtod_l+0x93c>)
 8009e52:	ea09 0303 	and.w	r3, r9, r3
 8009e56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5e:	d81a      	bhi.n	8009e96 <_strtod_l+0x8c6>
 8009e60:	0d1b      	lsrs	r3, r3, #20
 8009e62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e66:	fa02 f303 	lsl.w	r3, r2, r3
 8009e6a:	4299      	cmp	r1, r3
 8009e6c:	d118      	bne.n	8009ea0 <_strtod_l+0x8d0>
 8009e6e:	4b2a      	ldr	r3, [pc, #168]	; (8009f18 <_strtod_l+0x948>)
 8009e70:	459a      	cmp	sl, r3
 8009e72:	d102      	bne.n	8009e7a <_strtod_l+0x8aa>
 8009e74:	3101      	adds	r1, #1
 8009e76:	f43f adef 	beq.w	8009a58 <_strtod_l+0x488>
 8009e7a:	4b24      	ldr	r3, [pc, #144]	; (8009f0c <_strtod_l+0x93c>)
 8009e7c:	ea0a 0303 	and.w	r3, sl, r3
 8009e80:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009e84:	f04f 0800 	mov.w	r8, #0
 8009e88:	9b04      	ldr	r3, [sp, #16]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1a2      	bne.n	8009dd4 <_strtod_l+0x804>
 8009e8e:	e5ed      	b.n	8009a6c <_strtod_l+0x49c>
 8009e90:	f04f 33ff 	mov.w	r3, #4294967295
 8009e94:	e7e9      	b.n	8009e6a <_strtod_l+0x89a>
 8009e96:	4613      	mov	r3, r2
 8009e98:	e7e7      	b.n	8009e6a <_strtod_l+0x89a>
 8009e9a:	ea53 0308 	orrs.w	r3, r3, r8
 8009e9e:	d08a      	beq.n	8009db6 <_strtod_l+0x7e6>
 8009ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ea2:	b1e3      	cbz	r3, 8009ede <_strtod_l+0x90e>
 8009ea4:	ea13 0f0a 	tst.w	r3, sl
 8009ea8:	d0ee      	beq.n	8009e88 <_strtod_l+0x8b8>
 8009eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eac:	9a04      	ldr	r2, [sp, #16]
 8009eae:	4640      	mov	r0, r8
 8009eb0:	4649      	mov	r1, r9
 8009eb2:	b1c3      	cbz	r3, 8009ee6 <_strtod_l+0x916>
 8009eb4:	f7ff fb6f 	bl	8009596 <sulp>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	ec51 0b18 	vmov	r0, r1, d8
 8009ec0:	f7f6 fa04 	bl	80002cc <__adddf3>
 8009ec4:	4680      	mov	r8, r0
 8009ec6:	4689      	mov	r9, r1
 8009ec8:	e7de      	b.n	8009e88 <_strtod_l+0x8b8>
 8009eca:	4013      	ands	r3, r2
 8009ecc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ed0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009ed4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009ed8:	f04f 38ff 	mov.w	r8, #4294967295
 8009edc:	e7d4      	b.n	8009e88 <_strtod_l+0x8b8>
 8009ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ee0:	ea13 0f08 	tst.w	r3, r8
 8009ee4:	e7e0      	b.n	8009ea8 <_strtod_l+0x8d8>
 8009ee6:	f7ff fb56 	bl	8009596 <sulp>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	ec51 0b18 	vmov	r0, r1, d8
 8009ef2:	f7f6 f9e9 	bl	80002c8 <__aeabi_dsub>
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4680      	mov	r8, r0
 8009efc:	4689      	mov	r9, r1
 8009efe:	f7f6 fe03 	bl	8000b08 <__aeabi_dcmpeq>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d0c0      	beq.n	8009e88 <_strtod_l+0x8b8>
 8009f06:	e618      	b.n	8009b3a <_strtod_l+0x56a>
 8009f08:	fffffc02 	.word	0xfffffc02
 8009f0c:	7ff00000 	.word	0x7ff00000
 8009f10:	39500000 	.word	0x39500000
 8009f14:	000fffff 	.word	0x000fffff
 8009f18:	7fefffff 	.word	0x7fefffff
 8009f1c:	0800b7b0 	.word	0x0800b7b0
 8009f20:	4659      	mov	r1, fp
 8009f22:	4628      	mov	r0, r5
 8009f24:	f7ff fac0 	bl	80094a8 <__ratio>
 8009f28:	ec57 6b10 	vmov	r6, r7, d0
 8009f2c:	ee10 0a10 	vmov	r0, s0
 8009f30:	2200      	movs	r2, #0
 8009f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f36:	4639      	mov	r1, r7
 8009f38:	f7f6 fdfa 	bl	8000b30 <__aeabi_dcmple>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d071      	beq.n	800a024 <_strtod_l+0xa54>
 8009f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d17c      	bne.n	800a040 <_strtod_l+0xa70>
 8009f46:	f1b8 0f00 	cmp.w	r8, #0
 8009f4a:	d15a      	bne.n	800a002 <_strtod_l+0xa32>
 8009f4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d15d      	bne.n	800a010 <_strtod_l+0xa40>
 8009f54:	4b90      	ldr	r3, [pc, #576]	; (800a198 <_strtod_l+0xbc8>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 fdde 	bl	8000b1c <__aeabi_dcmplt>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d15c      	bne.n	800a01e <_strtod_l+0xa4e>
 8009f64:	4630      	mov	r0, r6
 8009f66:	4639      	mov	r1, r7
 8009f68:	4b8c      	ldr	r3, [pc, #560]	; (800a19c <_strtod_l+0xbcc>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f7f6 fb64 	bl	8000638 <__aeabi_dmul>
 8009f70:	4606      	mov	r6, r0
 8009f72:	460f      	mov	r7, r1
 8009f74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009f78:	9606      	str	r6, [sp, #24]
 8009f7a:	9307      	str	r3, [sp, #28]
 8009f7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009f84:	4b86      	ldr	r3, [pc, #536]	; (800a1a0 <_strtod_l+0xbd0>)
 8009f86:	ea0a 0303 	and.w	r3, sl, r3
 8009f8a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f8e:	4b85      	ldr	r3, [pc, #532]	; (800a1a4 <_strtod_l+0xbd4>)
 8009f90:	429a      	cmp	r2, r3
 8009f92:	f040 8090 	bne.w	800a0b6 <_strtod_l+0xae6>
 8009f96:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009f9a:	ec49 8b10 	vmov	d0, r8, r9
 8009f9e:	f7ff f9b9 	bl	8009314 <__ulp>
 8009fa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fa6:	ec51 0b10 	vmov	r0, r1, d0
 8009faa:	f7f6 fb45 	bl	8000638 <__aeabi_dmul>
 8009fae:	4642      	mov	r2, r8
 8009fb0:	464b      	mov	r3, r9
 8009fb2:	f7f6 f98b 	bl	80002cc <__adddf3>
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4979      	ldr	r1, [pc, #484]	; (800a1a0 <_strtod_l+0xbd0>)
 8009fba:	4a7b      	ldr	r2, [pc, #492]	; (800a1a8 <_strtod_l+0xbd8>)
 8009fbc:	4019      	ands	r1, r3
 8009fbe:	4291      	cmp	r1, r2
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	d944      	bls.n	800a04e <_strtod_l+0xa7e>
 8009fc4:	ee18 2a90 	vmov	r2, s17
 8009fc8:	4b78      	ldr	r3, [pc, #480]	; (800a1ac <_strtod_l+0xbdc>)
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d104      	bne.n	8009fd8 <_strtod_l+0xa08>
 8009fce:	ee18 3a10 	vmov	r3, s16
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	f43f ad40 	beq.w	8009a58 <_strtod_l+0x488>
 8009fd8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a1ac <_strtod_l+0xbdc>
 8009fdc:	f04f 38ff 	mov.w	r8, #4294967295
 8009fe0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7fe fe6a 	bl	8008cbc <_Bfree>
 8009fe8:	9905      	ldr	r1, [sp, #20]
 8009fea:	4620      	mov	r0, r4
 8009fec:	f7fe fe66 	bl	8008cbc <_Bfree>
 8009ff0:	4659      	mov	r1, fp
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7fe fe62 	bl	8008cbc <_Bfree>
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f7fe fe5e 	bl	8008cbc <_Bfree>
 800a000:	e609      	b.n	8009c16 <_strtod_l+0x646>
 800a002:	f1b8 0f01 	cmp.w	r8, #1
 800a006:	d103      	bne.n	800a010 <_strtod_l+0xa40>
 800a008:	f1b9 0f00 	cmp.w	r9, #0
 800a00c:	f43f ad95 	beq.w	8009b3a <_strtod_l+0x56a>
 800a010:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a168 <_strtod_l+0xb98>
 800a014:	4f60      	ldr	r7, [pc, #384]	; (800a198 <_strtod_l+0xbc8>)
 800a016:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a01a:	2600      	movs	r6, #0
 800a01c:	e7ae      	b.n	8009f7c <_strtod_l+0x9ac>
 800a01e:	4f5f      	ldr	r7, [pc, #380]	; (800a19c <_strtod_l+0xbcc>)
 800a020:	2600      	movs	r6, #0
 800a022:	e7a7      	b.n	8009f74 <_strtod_l+0x9a4>
 800a024:	4b5d      	ldr	r3, [pc, #372]	; (800a19c <_strtod_l+0xbcc>)
 800a026:	4630      	mov	r0, r6
 800a028:	4639      	mov	r1, r7
 800a02a:	2200      	movs	r2, #0
 800a02c:	f7f6 fb04 	bl	8000638 <__aeabi_dmul>
 800a030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a032:	4606      	mov	r6, r0
 800a034:	460f      	mov	r7, r1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d09c      	beq.n	8009f74 <_strtod_l+0x9a4>
 800a03a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a03e:	e79d      	b.n	8009f7c <_strtod_l+0x9ac>
 800a040:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a170 <_strtod_l+0xba0>
 800a044:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a048:	ec57 6b17 	vmov	r6, r7, d7
 800a04c:	e796      	b.n	8009f7c <_strtod_l+0x9ac>
 800a04e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a052:	9b04      	ldr	r3, [sp, #16]
 800a054:	46ca      	mov	sl, r9
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1c2      	bne.n	8009fe0 <_strtod_l+0xa10>
 800a05a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a05e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a060:	0d1b      	lsrs	r3, r3, #20
 800a062:	051b      	lsls	r3, r3, #20
 800a064:	429a      	cmp	r2, r3
 800a066:	d1bb      	bne.n	8009fe0 <_strtod_l+0xa10>
 800a068:	4630      	mov	r0, r6
 800a06a:	4639      	mov	r1, r7
 800a06c:	f7f6 fe44 	bl	8000cf8 <__aeabi_d2lz>
 800a070:	f7f6 fab4 	bl	80005dc <__aeabi_l2d>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4630      	mov	r0, r6
 800a07a:	4639      	mov	r1, r7
 800a07c:	f7f6 f924 	bl	80002c8 <__aeabi_dsub>
 800a080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a082:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a086:	ea43 0308 	orr.w	r3, r3, r8
 800a08a:	4313      	orrs	r3, r2
 800a08c:	4606      	mov	r6, r0
 800a08e:	460f      	mov	r7, r1
 800a090:	d054      	beq.n	800a13c <_strtod_l+0xb6c>
 800a092:	a339      	add	r3, pc, #228	; (adr r3, 800a178 <_strtod_l+0xba8>)
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f7f6 fd40 	bl	8000b1c <__aeabi_dcmplt>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f47f ace5 	bne.w	8009a6c <_strtod_l+0x49c>
 800a0a2:	a337      	add	r3, pc, #220	; (adr r3, 800a180 <_strtod_l+0xbb0>)
 800a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	f7f6 fd54 	bl	8000b58 <__aeabi_dcmpgt>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d095      	beq.n	8009fe0 <_strtod_l+0xa10>
 800a0b4:	e4da      	b.n	8009a6c <_strtod_l+0x49c>
 800a0b6:	9b04      	ldr	r3, [sp, #16]
 800a0b8:	b333      	cbz	r3, 800a108 <_strtod_l+0xb38>
 800a0ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0c0:	d822      	bhi.n	800a108 <_strtod_l+0xb38>
 800a0c2:	a331      	add	r3, pc, #196	; (adr r3, 800a188 <_strtod_l+0xbb8>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 fd30 	bl	8000b30 <__aeabi_dcmple>
 800a0d0:	b1a0      	cbz	r0, 800a0fc <_strtod_l+0xb2c>
 800a0d2:	4639      	mov	r1, r7
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f7f6 fd87 	bl	8000be8 <__aeabi_d2uiz>
 800a0da:	2801      	cmp	r0, #1
 800a0dc:	bf38      	it	cc
 800a0de:	2001      	movcc	r0, #1
 800a0e0:	f7f6 fa30 	bl	8000544 <__aeabi_ui2d>
 800a0e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	460f      	mov	r7, r1
 800a0ea:	bb23      	cbnz	r3, 800a136 <_strtod_l+0xb66>
 800a0ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0f0:	9010      	str	r0, [sp, #64]	; 0x40
 800a0f2:	9311      	str	r3, [sp, #68]	; 0x44
 800a0f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a0fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a100:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a104:	1a9b      	subs	r3, r3, r2
 800a106:	930f      	str	r3, [sp, #60]	; 0x3c
 800a108:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a10c:	eeb0 0a48 	vmov.f32	s0, s16
 800a110:	eef0 0a68 	vmov.f32	s1, s17
 800a114:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a118:	f7ff f8fc 	bl	8009314 <__ulp>
 800a11c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a120:	ec53 2b10 	vmov	r2, r3, d0
 800a124:	f7f6 fa88 	bl	8000638 <__aeabi_dmul>
 800a128:	ec53 2b18 	vmov	r2, r3, d8
 800a12c:	f7f6 f8ce 	bl	80002cc <__adddf3>
 800a130:	4680      	mov	r8, r0
 800a132:	4689      	mov	r9, r1
 800a134:	e78d      	b.n	800a052 <_strtod_l+0xa82>
 800a136:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a13a:	e7db      	b.n	800a0f4 <_strtod_l+0xb24>
 800a13c:	a314      	add	r3, pc, #80	; (adr r3, 800a190 <_strtod_l+0xbc0>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f7f6 fceb 	bl	8000b1c <__aeabi_dcmplt>
 800a146:	e7b3      	b.n	800a0b0 <_strtod_l+0xae0>
 800a148:	2300      	movs	r3, #0
 800a14a:	930a      	str	r3, [sp, #40]	; 0x28
 800a14c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a14e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	f7ff ba7c 	b.w	800964e <_strtod_l+0x7e>
 800a156:	2a65      	cmp	r2, #101	; 0x65
 800a158:	f43f ab75 	beq.w	8009846 <_strtod_l+0x276>
 800a15c:	2a45      	cmp	r2, #69	; 0x45
 800a15e:	f43f ab72 	beq.w	8009846 <_strtod_l+0x276>
 800a162:	2301      	movs	r3, #1
 800a164:	f7ff bbaa 	b.w	80098bc <_strtod_l+0x2ec>
 800a168:	00000000 	.word	0x00000000
 800a16c:	bff00000 	.word	0xbff00000
 800a170:	00000000 	.word	0x00000000
 800a174:	3ff00000 	.word	0x3ff00000
 800a178:	94a03595 	.word	0x94a03595
 800a17c:	3fdfffff 	.word	0x3fdfffff
 800a180:	35afe535 	.word	0x35afe535
 800a184:	3fe00000 	.word	0x3fe00000
 800a188:	ffc00000 	.word	0xffc00000
 800a18c:	41dfffff 	.word	0x41dfffff
 800a190:	94a03595 	.word	0x94a03595
 800a194:	3fcfffff 	.word	0x3fcfffff
 800a198:	3ff00000 	.word	0x3ff00000
 800a19c:	3fe00000 	.word	0x3fe00000
 800a1a0:	7ff00000 	.word	0x7ff00000
 800a1a4:	7fe00000 	.word	0x7fe00000
 800a1a8:	7c9fffff 	.word	0x7c9fffff
 800a1ac:	7fefffff 	.word	0x7fefffff

0800a1b0 <_strtod_r>:
 800a1b0:	4b01      	ldr	r3, [pc, #4]	; (800a1b8 <_strtod_r+0x8>)
 800a1b2:	f7ff ba0d 	b.w	80095d0 <_strtod_l>
 800a1b6:	bf00      	nop
 800a1b8:	20000070 	.word	0x20000070

0800a1bc <_strtol_l.constprop.0>:
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c2:	d001      	beq.n	800a1c8 <_strtol_l.constprop.0+0xc>
 800a1c4:	2b24      	cmp	r3, #36	; 0x24
 800a1c6:	d906      	bls.n	800a1d6 <_strtol_l.constprop.0+0x1a>
 800a1c8:	f7fd fd88 	bl	8007cdc <__errno>
 800a1cc:	2316      	movs	r3, #22
 800a1ce:	6003      	str	r3, [r0, #0]
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a2bc <_strtol_l.constprop.0+0x100>
 800a1da:	460d      	mov	r5, r1
 800a1dc:	462e      	mov	r6, r5
 800a1de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1e2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a1e6:	f017 0708 	ands.w	r7, r7, #8
 800a1ea:	d1f7      	bne.n	800a1dc <_strtol_l.constprop.0+0x20>
 800a1ec:	2c2d      	cmp	r4, #45	; 0x2d
 800a1ee:	d132      	bne.n	800a256 <_strtol_l.constprop.0+0x9a>
 800a1f0:	782c      	ldrb	r4, [r5, #0]
 800a1f2:	2701      	movs	r7, #1
 800a1f4:	1cb5      	adds	r5, r6, #2
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d05b      	beq.n	800a2b2 <_strtol_l.constprop.0+0xf6>
 800a1fa:	2b10      	cmp	r3, #16
 800a1fc:	d109      	bne.n	800a212 <_strtol_l.constprop.0+0x56>
 800a1fe:	2c30      	cmp	r4, #48	; 0x30
 800a200:	d107      	bne.n	800a212 <_strtol_l.constprop.0+0x56>
 800a202:	782c      	ldrb	r4, [r5, #0]
 800a204:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a208:	2c58      	cmp	r4, #88	; 0x58
 800a20a:	d14d      	bne.n	800a2a8 <_strtol_l.constprop.0+0xec>
 800a20c:	786c      	ldrb	r4, [r5, #1]
 800a20e:	2310      	movs	r3, #16
 800a210:	3502      	adds	r5, #2
 800a212:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a216:	f108 38ff 	add.w	r8, r8, #4294967295
 800a21a:	f04f 0e00 	mov.w	lr, #0
 800a21e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a222:	4676      	mov	r6, lr
 800a224:	fb03 8a19 	mls	sl, r3, r9, r8
 800a228:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a22c:	f1bc 0f09 	cmp.w	ip, #9
 800a230:	d816      	bhi.n	800a260 <_strtol_l.constprop.0+0xa4>
 800a232:	4664      	mov	r4, ip
 800a234:	42a3      	cmp	r3, r4
 800a236:	dd24      	ble.n	800a282 <_strtol_l.constprop.0+0xc6>
 800a238:	f1be 3fff 	cmp.w	lr, #4294967295
 800a23c:	d008      	beq.n	800a250 <_strtol_l.constprop.0+0x94>
 800a23e:	45b1      	cmp	r9, r6
 800a240:	d31c      	bcc.n	800a27c <_strtol_l.constprop.0+0xc0>
 800a242:	d101      	bne.n	800a248 <_strtol_l.constprop.0+0x8c>
 800a244:	45a2      	cmp	sl, r4
 800a246:	db19      	blt.n	800a27c <_strtol_l.constprop.0+0xc0>
 800a248:	fb06 4603 	mla	r6, r6, r3, r4
 800a24c:	f04f 0e01 	mov.w	lr, #1
 800a250:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a254:	e7e8      	b.n	800a228 <_strtol_l.constprop.0+0x6c>
 800a256:	2c2b      	cmp	r4, #43	; 0x2b
 800a258:	bf04      	itt	eq
 800a25a:	782c      	ldrbeq	r4, [r5, #0]
 800a25c:	1cb5      	addeq	r5, r6, #2
 800a25e:	e7ca      	b.n	800a1f6 <_strtol_l.constprop.0+0x3a>
 800a260:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a264:	f1bc 0f19 	cmp.w	ip, #25
 800a268:	d801      	bhi.n	800a26e <_strtol_l.constprop.0+0xb2>
 800a26a:	3c37      	subs	r4, #55	; 0x37
 800a26c:	e7e2      	b.n	800a234 <_strtol_l.constprop.0+0x78>
 800a26e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a272:	f1bc 0f19 	cmp.w	ip, #25
 800a276:	d804      	bhi.n	800a282 <_strtol_l.constprop.0+0xc6>
 800a278:	3c57      	subs	r4, #87	; 0x57
 800a27a:	e7db      	b.n	800a234 <_strtol_l.constprop.0+0x78>
 800a27c:	f04f 3eff 	mov.w	lr, #4294967295
 800a280:	e7e6      	b.n	800a250 <_strtol_l.constprop.0+0x94>
 800a282:	f1be 3fff 	cmp.w	lr, #4294967295
 800a286:	d105      	bne.n	800a294 <_strtol_l.constprop.0+0xd8>
 800a288:	2322      	movs	r3, #34	; 0x22
 800a28a:	6003      	str	r3, [r0, #0]
 800a28c:	4646      	mov	r6, r8
 800a28e:	b942      	cbnz	r2, 800a2a2 <_strtol_l.constprop.0+0xe6>
 800a290:	4630      	mov	r0, r6
 800a292:	e79e      	b.n	800a1d2 <_strtol_l.constprop.0+0x16>
 800a294:	b107      	cbz	r7, 800a298 <_strtol_l.constprop.0+0xdc>
 800a296:	4276      	negs	r6, r6
 800a298:	2a00      	cmp	r2, #0
 800a29a:	d0f9      	beq.n	800a290 <_strtol_l.constprop.0+0xd4>
 800a29c:	f1be 0f00 	cmp.w	lr, #0
 800a2a0:	d000      	beq.n	800a2a4 <_strtol_l.constprop.0+0xe8>
 800a2a2:	1e69      	subs	r1, r5, #1
 800a2a4:	6011      	str	r1, [r2, #0]
 800a2a6:	e7f3      	b.n	800a290 <_strtol_l.constprop.0+0xd4>
 800a2a8:	2430      	movs	r4, #48	; 0x30
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1b1      	bne.n	800a212 <_strtol_l.constprop.0+0x56>
 800a2ae:	2308      	movs	r3, #8
 800a2b0:	e7af      	b.n	800a212 <_strtol_l.constprop.0+0x56>
 800a2b2:	2c30      	cmp	r4, #48	; 0x30
 800a2b4:	d0a5      	beq.n	800a202 <_strtol_l.constprop.0+0x46>
 800a2b6:	230a      	movs	r3, #10
 800a2b8:	e7ab      	b.n	800a212 <_strtol_l.constprop.0+0x56>
 800a2ba:	bf00      	nop
 800a2bc:	0800b7d9 	.word	0x0800b7d9

0800a2c0 <_strtol_r>:
 800a2c0:	f7ff bf7c 	b.w	800a1bc <_strtol_l.constprop.0>

0800a2c4 <__ssputs_r>:
 800a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c8:	688e      	ldr	r6, [r1, #8]
 800a2ca:	461f      	mov	r7, r3
 800a2cc:	42be      	cmp	r6, r7
 800a2ce:	680b      	ldr	r3, [r1, #0]
 800a2d0:	4682      	mov	sl, r0
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	4690      	mov	r8, r2
 800a2d6:	d82c      	bhi.n	800a332 <__ssputs_r+0x6e>
 800a2d8:	898a      	ldrh	r2, [r1, #12]
 800a2da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2de:	d026      	beq.n	800a32e <__ssputs_r+0x6a>
 800a2e0:	6965      	ldr	r5, [r4, #20]
 800a2e2:	6909      	ldr	r1, [r1, #16]
 800a2e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2e8:	eba3 0901 	sub.w	r9, r3, r1
 800a2ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2f0:	1c7b      	adds	r3, r7, #1
 800a2f2:	444b      	add	r3, r9
 800a2f4:	106d      	asrs	r5, r5, #1
 800a2f6:	429d      	cmp	r5, r3
 800a2f8:	bf38      	it	cc
 800a2fa:	461d      	movcc	r5, r3
 800a2fc:	0553      	lsls	r3, r2, #21
 800a2fe:	d527      	bpl.n	800a350 <__ssputs_r+0x8c>
 800a300:	4629      	mov	r1, r5
 800a302:	f7fe fc0f 	bl	8008b24 <_malloc_r>
 800a306:	4606      	mov	r6, r0
 800a308:	b360      	cbz	r0, 800a364 <__ssputs_r+0xa0>
 800a30a:	6921      	ldr	r1, [r4, #16]
 800a30c:	464a      	mov	r2, r9
 800a30e:	f000 fa1b 	bl	800a748 <memcpy>
 800a312:	89a3      	ldrh	r3, [r4, #12]
 800a314:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a31c:	81a3      	strh	r3, [r4, #12]
 800a31e:	6126      	str	r6, [r4, #16]
 800a320:	6165      	str	r5, [r4, #20]
 800a322:	444e      	add	r6, r9
 800a324:	eba5 0509 	sub.w	r5, r5, r9
 800a328:	6026      	str	r6, [r4, #0]
 800a32a:	60a5      	str	r5, [r4, #8]
 800a32c:	463e      	mov	r6, r7
 800a32e:	42be      	cmp	r6, r7
 800a330:	d900      	bls.n	800a334 <__ssputs_r+0x70>
 800a332:	463e      	mov	r6, r7
 800a334:	6820      	ldr	r0, [r4, #0]
 800a336:	4632      	mov	r2, r6
 800a338:	4641      	mov	r1, r8
 800a33a:	f000 f9c9 	bl	800a6d0 <memmove>
 800a33e:	68a3      	ldr	r3, [r4, #8]
 800a340:	1b9b      	subs	r3, r3, r6
 800a342:	60a3      	str	r3, [r4, #8]
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	4433      	add	r3, r6
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	2000      	movs	r0, #0
 800a34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a350:	462a      	mov	r2, r5
 800a352:	f000 fdae 	bl	800aeb2 <_realloc_r>
 800a356:	4606      	mov	r6, r0
 800a358:	2800      	cmp	r0, #0
 800a35a:	d1e0      	bne.n	800a31e <__ssputs_r+0x5a>
 800a35c:	6921      	ldr	r1, [r4, #16]
 800a35e:	4650      	mov	r0, sl
 800a360:	f7fe fb6c 	bl	8008a3c <_free_r>
 800a364:	230c      	movs	r3, #12
 800a366:	f8ca 3000 	str.w	r3, [sl]
 800a36a:	89a3      	ldrh	r3, [r4, #12]
 800a36c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a370:	81a3      	strh	r3, [r4, #12]
 800a372:	f04f 30ff 	mov.w	r0, #4294967295
 800a376:	e7e9      	b.n	800a34c <__ssputs_r+0x88>

0800a378 <_svfiprintf_r>:
 800a378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37c:	4698      	mov	r8, r3
 800a37e:	898b      	ldrh	r3, [r1, #12]
 800a380:	061b      	lsls	r3, r3, #24
 800a382:	b09d      	sub	sp, #116	; 0x74
 800a384:	4607      	mov	r7, r0
 800a386:	460d      	mov	r5, r1
 800a388:	4614      	mov	r4, r2
 800a38a:	d50e      	bpl.n	800a3aa <_svfiprintf_r+0x32>
 800a38c:	690b      	ldr	r3, [r1, #16]
 800a38e:	b963      	cbnz	r3, 800a3aa <_svfiprintf_r+0x32>
 800a390:	2140      	movs	r1, #64	; 0x40
 800a392:	f7fe fbc7 	bl	8008b24 <_malloc_r>
 800a396:	6028      	str	r0, [r5, #0]
 800a398:	6128      	str	r0, [r5, #16]
 800a39a:	b920      	cbnz	r0, 800a3a6 <_svfiprintf_r+0x2e>
 800a39c:	230c      	movs	r3, #12
 800a39e:	603b      	str	r3, [r7, #0]
 800a3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a4:	e0d0      	b.n	800a548 <_svfiprintf_r+0x1d0>
 800a3a6:	2340      	movs	r3, #64	; 0x40
 800a3a8:	616b      	str	r3, [r5, #20]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ae:	2320      	movs	r3, #32
 800a3b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3b8:	2330      	movs	r3, #48	; 0x30
 800a3ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a560 <_svfiprintf_r+0x1e8>
 800a3be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3c2:	f04f 0901 	mov.w	r9, #1
 800a3c6:	4623      	mov	r3, r4
 800a3c8:	469a      	mov	sl, r3
 800a3ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ce:	b10a      	cbz	r2, 800a3d4 <_svfiprintf_r+0x5c>
 800a3d0:	2a25      	cmp	r2, #37	; 0x25
 800a3d2:	d1f9      	bne.n	800a3c8 <_svfiprintf_r+0x50>
 800a3d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a3d8:	d00b      	beq.n	800a3f2 <_svfiprintf_r+0x7a>
 800a3da:	465b      	mov	r3, fp
 800a3dc:	4622      	mov	r2, r4
 800a3de:	4629      	mov	r1, r5
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	f7ff ff6f 	bl	800a2c4 <__ssputs_r>
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	f000 80a9 	beq.w	800a53e <_svfiprintf_r+0x1c6>
 800a3ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ee:	445a      	add	r2, fp
 800a3f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a3f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f000 80a1 	beq.w	800a53e <_svfiprintf_r+0x1c6>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a406:	f10a 0a01 	add.w	sl, sl, #1
 800a40a:	9304      	str	r3, [sp, #16]
 800a40c:	9307      	str	r3, [sp, #28]
 800a40e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a412:	931a      	str	r3, [sp, #104]	; 0x68
 800a414:	4654      	mov	r4, sl
 800a416:	2205      	movs	r2, #5
 800a418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a41c:	4850      	ldr	r0, [pc, #320]	; (800a560 <_svfiprintf_r+0x1e8>)
 800a41e:	f7f5 fef7 	bl	8000210 <memchr>
 800a422:	9a04      	ldr	r2, [sp, #16]
 800a424:	b9d8      	cbnz	r0, 800a45e <_svfiprintf_r+0xe6>
 800a426:	06d0      	lsls	r0, r2, #27
 800a428:	bf44      	itt	mi
 800a42a:	2320      	movmi	r3, #32
 800a42c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a430:	0711      	lsls	r1, r2, #28
 800a432:	bf44      	itt	mi
 800a434:	232b      	movmi	r3, #43	; 0x2b
 800a436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a43a:	f89a 3000 	ldrb.w	r3, [sl]
 800a43e:	2b2a      	cmp	r3, #42	; 0x2a
 800a440:	d015      	beq.n	800a46e <_svfiprintf_r+0xf6>
 800a442:	9a07      	ldr	r2, [sp, #28]
 800a444:	4654      	mov	r4, sl
 800a446:	2000      	movs	r0, #0
 800a448:	f04f 0c0a 	mov.w	ip, #10
 800a44c:	4621      	mov	r1, r4
 800a44e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a452:	3b30      	subs	r3, #48	; 0x30
 800a454:	2b09      	cmp	r3, #9
 800a456:	d94d      	bls.n	800a4f4 <_svfiprintf_r+0x17c>
 800a458:	b1b0      	cbz	r0, 800a488 <_svfiprintf_r+0x110>
 800a45a:	9207      	str	r2, [sp, #28]
 800a45c:	e014      	b.n	800a488 <_svfiprintf_r+0x110>
 800a45e:	eba0 0308 	sub.w	r3, r0, r8
 800a462:	fa09 f303 	lsl.w	r3, r9, r3
 800a466:	4313      	orrs	r3, r2
 800a468:	9304      	str	r3, [sp, #16]
 800a46a:	46a2      	mov	sl, r4
 800a46c:	e7d2      	b.n	800a414 <_svfiprintf_r+0x9c>
 800a46e:	9b03      	ldr	r3, [sp, #12]
 800a470:	1d19      	adds	r1, r3, #4
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	9103      	str	r1, [sp, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	bfbb      	ittet	lt
 800a47a:	425b      	neglt	r3, r3
 800a47c:	f042 0202 	orrlt.w	r2, r2, #2
 800a480:	9307      	strge	r3, [sp, #28]
 800a482:	9307      	strlt	r3, [sp, #28]
 800a484:	bfb8      	it	lt
 800a486:	9204      	strlt	r2, [sp, #16]
 800a488:	7823      	ldrb	r3, [r4, #0]
 800a48a:	2b2e      	cmp	r3, #46	; 0x2e
 800a48c:	d10c      	bne.n	800a4a8 <_svfiprintf_r+0x130>
 800a48e:	7863      	ldrb	r3, [r4, #1]
 800a490:	2b2a      	cmp	r3, #42	; 0x2a
 800a492:	d134      	bne.n	800a4fe <_svfiprintf_r+0x186>
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	1d1a      	adds	r2, r3, #4
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	9203      	str	r2, [sp, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	bfb8      	it	lt
 800a4a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4a4:	3402      	adds	r4, #2
 800a4a6:	9305      	str	r3, [sp, #20]
 800a4a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a570 <_svfiprintf_r+0x1f8>
 800a4ac:	7821      	ldrb	r1, [r4, #0]
 800a4ae:	2203      	movs	r2, #3
 800a4b0:	4650      	mov	r0, sl
 800a4b2:	f7f5 fead 	bl	8000210 <memchr>
 800a4b6:	b138      	cbz	r0, 800a4c8 <_svfiprintf_r+0x150>
 800a4b8:	9b04      	ldr	r3, [sp, #16]
 800a4ba:	eba0 000a 	sub.w	r0, r0, sl
 800a4be:	2240      	movs	r2, #64	; 0x40
 800a4c0:	4082      	lsls	r2, r0
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	3401      	adds	r4, #1
 800a4c6:	9304      	str	r3, [sp, #16]
 800a4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4cc:	4825      	ldr	r0, [pc, #148]	; (800a564 <_svfiprintf_r+0x1ec>)
 800a4ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4d2:	2206      	movs	r2, #6
 800a4d4:	f7f5 fe9c 	bl	8000210 <memchr>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d038      	beq.n	800a54e <_svfiprintf_r+0x1d6>
 800a4dc:	4b22      	ldr	r3, [pc, #136]	; (800a568 <_svfiprintf_r+0x1f0>)
 800a4de:	bb1b      	cbnz	r3, 800a528 <_svfiprintf_r+0x1b0>
 800a4e0:	9b03      	ldr	r3, [sp, #12]
 800a4e2:	3307      	adds	r3, #7
 800a4e4:	f023 0307 	bic.w	r3, r3, #7
 800a4e8:	3308      	adds	r3, #8
 800a4ea:	9303      	str	r3, [sp, #12]
 800a4ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ee:	4433      	add	r3, r6
 800a4f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f2:	e768      	b.n	800a3c6 <_svfiprintf_r+0x4e>
 800a4f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4f8:	460c      	mov	r4, r1
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	e7a6      	b.n	800a44c <_svfiprintf_r+0xd4>
 800a4fe:	2300      	movs	r3, #0
 800a500:	3401      	adds	r4, #1
 800a502:	9305      	str	r3, [sp, #20]
 800a504:	4619      	mov	r1, r3
 800a506:	f04f 0c0a 	mov.w	ip, #10
 800a50a:	4620      	mov	r0, r4
 800a50c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a510:	3a30      	subs	r2, #48	; 0x30
 800a512:	2a09      	cmp	r2, #9
 800a514:	d903      	bls.n	800a51e <_svfiprintf_r+0x1a6>
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0c6      	beq.n	800a4a8 <_svfiprintf_r+0x130>
 800a51a:	9105      	str	r1, [sp, #20]
 800a51c:	e7c4      	b.n	800a4a8 <_svfiprintf_r+0x130>
 800a51e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a522:	4604      	mov	r4, r0
 800a524:	2301      	movs	r3, #1
 800a526:	e7f0      	b.n	800a50a <_svfiprintf_r+0x192>
 800a528:	ab03      	add	r3, sp, #12
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	462a      	mov	r2, r5
 800a52e:	4b0f      	ldr	r3, [pc, #60]	; (800a56c <_svfiprintf_r+0x1f4>)
 800a530:	a904      	add	r1, sp, #16
 800a532:	4638      	mov	r0, r7
 800a534:	f7fc fc84 	bl	8006e40 <_printf_float>
 800a538:	1c42      	adds	r2, r0, #1
 800a53a:	4606      	mov	r6, r0
 800a53c:	d1d6      	bne.n	800a4ec <_svfiprintf_r+0x174>
 800a53e:	89ab      	ldrh	r3, [r5, #12]
 800a540:	065b      	lsls	r3, r3, #25
 800a542:	f53f af2d 	bmi.w	800a3a0 <_svfiprintf_r+0x28>
 800a546:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a548:	b01d      	add	sp, #116	; 0x74
 800a54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54e:	ab03      	add	r3, sp, #12
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	462a      	mov	r2, r5
 800a554:	4b05      	ldr	r3, [pc, #20]	; (800a56c <_svfiprintf_r+0x1f4>)
 800a556:	a904      	add	r1, sp, #16
 800a558:	4638      	mov	r0, r7
 800a55a:	f7fc ff15 	bl	8007388 <_printf_i>
 800a55e:	e7eb      	b.n	800a538 <_svfiprintf_r+0x1c0>
 800a560:	0800b8d9 	.word	0x0800b8d9
 800a564:	0800b8e3 	.word	0x0800b8e3
 800a568:	08006e41 	.word	0x08006e41
 800a56c:	0800a2c5 	.word	0x0800a2c5
 800a570:	0800b8df 	.word	0x0800b8df

0800a574 <__sflush_r>:
 800a574:	898a      	ldrh	r2, [r1, #12]
 800a576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57a:	4605      	mov	r5, r0
 800a57c:	0710      	lsls	r0, r2, #28
 800a57e:	460c      	mov	r4, r1
 800a580:	d458      	bmi.n	800a634 <__sflush_r+0xc0>
 800a582:	684b      	ldr	r3, [r1, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	dc05      	bgt.n	800a594 <__sflush_r+0x20>
 800a588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	dc02      	bgt.n	800a594 <__sflush_r+0x20>
 800a58e:	2000      	movs	r0, #0
 800a590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a596:	2e00      	cmp	r6, #0
 800a598:	d0f9      	beq.n	800a58e <__sflush_r+0x1a>
 800a59a:	2300      	movs	r3, #0
 800a59c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5a0:	682f      	ldr	r7, [r5, #0]
 800a5a2:	6a21      	ldr	r1, [r4, #32]
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	d032      	beq.n	800a60e <__sflush_r+0x9a>
 800a5a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5aa:	89a3      	ldrh	r3, [r4, #12]
 800a5ac:	075a      	lsls	r2, r3, #29
 800a5ae:	d505      	bpl.n	800a5bc <__sflush_r+0x48>
 800a5b0:	6863      	ldr	r3, [r4, #4]
 800a5b2:	1ac0      	subs	r0, r0, r3
 800a5b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5b6:	b10b      	cbz	r3, 800a5bc <__sflush_r+0x48>
 800a5b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5ba:	1ac0      	subs	r0, r0, r3
 800a5bc:	2300      	movs	r3, #0
 800a5be:	4602      	mov	r2, r0
 800a5c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5c2:	6a21      	ldr	r1, [r4, #32]
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	47b0      	blx	r6
 800a5c8:	1c43      	adds	r3, r0, #1
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	d106      	bne.n	800a5dc <__sflush_r+0x68>
 800a5ce:	6829      	ldr	r1, [r5, #0]
 800a5d0:	291d      	cmp	r1, #29
 800a5d2:	d82b      	bhi.n	800a62c <__sflush_r+0xb8>
 800a5d4:	4a29      	ldr	r2, [pc, #164]	; (800a67c <__sflush_r+0x108>)
 800a5d6:	410a      	asrs	r2, r1
 800a5d8:	07d6      	lsls	r6, r2, #31
 800a5da:	d427      	bmi.n	800a62c <__sflush_r+0xb8>
 800a5dc:	2200      	movs	r2, #0
 800a5de:	6062      	str	r2, [r4, #4]
 800a5e0:	04d9      	lsls	r1, r3, #19
 800a5e2:	6922      	ldr	r2, [r4, #16]
 800a5e4:	6022      	str	r2, [r4, #0]
 800a5e6:	d504      	bpl.n	800a5f2 <__sflush_r+0x7e>
 800a5e8:	1c42      	adds	r2, r0, #1
 800a5ea:	d101      	bne.n	800a5f0 <__sflush_r+0x7c>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b903      	cbnz	r3, 800a5f2 <__sflush_r+0x7e>
 800a5f0:	6560      	str	r0, [r4, #84]	; 0x54
 800a5f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5f4:	602f      	str	r7, [r5, #0]
 800a5f6:	2900      	cmp	r1, #0
 800a5f8:	d0c9      	beq.n	800a58e <__sflush_r+0x1a>
 800a5fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5fe:	4299      	cmp	r1, r3
 800a600:	d002      	beq.n	800a608 <__sflush_r+0x94>
 800a602:	4628      	mov	r0, r5
 800a604:	f7fe fa1a 	bl	8008a3c <_free_r>
 800a608:	2000      	movs	r0, #0
 800a60a:	6360      	str	r0, [r4, #52]	; 0x34
 800a60c:	e7c0      	b.n	800a590 <__sflush_r+0x1c>
 800a60e:	2301      	movs	r3, #1
 800a610:	4628      	mov	r0, r5
 800a612:	47b0      	blx	r6
 800a614:	1c41      	adds	r1, r0, #1
 800a616:	d1c8      	bne.n	800a5aa <__sflush_r+0x36>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d0c5      	beq.n	800a5aa <__sflush_r+0x36>
 800a61e:	2b1d      	cmp	r3, #29
 800a620:	d001      	beq.n	800a626 <__sflush_r+0xb2>
 800a622:	2b16      	cmp	r3, #22
 800a624:	d101      	bne.n	800a62a <__sflush_r+0xb6>
 800a626:	602f      	str	r7, [r5, #0]
 800a628:	e7b1      	b.n	800a58e <__sflush_r+0x1a>
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	e7ad      	b.n	800a590 <__sflush_r+0x1c>
 800a634:	690f      	ldr	r7, [r1, #16]
 800a636:	2f00      	cmp	r7, #0
 800a638:	d0a9      	beq.n	800a58e <__sflush_r+0x1a>
 800a63a:	0793      	lsls	r3, r2, #30
 800a63c:	680e      	ldr	r6, [r1, #0]
 800a63e:	bf08      	it	eq
 800a640:	694b      	ldreq	r3, [r1, #20]
 800a642:	600f      	str	r7, [r1, #0]
 800a644:	bf18      	it	ne
 800a646:	2300      	movne	r3, #0
 800a648:	eba6 0807 	sub.w	r8, r6, r7
 800a64c:	608b      	str	r3, [r1, #8]
 800a64e:	f1b8 0f00 	cmp.w	r8, #0
 800a652:	dd9c      	ble.n	800a58e <__sflush_r+0x1a>
 800a654:	6a21      	ldr	r1, [r4, #32]
 800a656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a658:	4643      	mov	r3, r8
 800a65a:	463a      	mov	r2, r7
 800a65c:	4628      	mov	r0, r5
 800a65e:	47b0      	blx	r6
 800a660:	2800      	cmp	r0, #0
 800a662:	dc06      	bgt.n	800a672 <__sflush_r+0xfe>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295
 800a670:	e78e      	b.n	800a590 <__sflush_r+0x1c>
 800a672:	4407      	add	r7, r0
 800a674:	eba8 0800 	sub.w	r8, r8, r0
 800a678:	e7e9      	b.n	800a64e <__sflush_r+0xda>
 800a67a:	bf00      	nop
 800a67c:	dfbffffe 	.word	0xdfbffffe

0800a680 <_fflush_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	690b      	ldr	r3, [r1, #16]
 800a684:	4605      	mov	r5, r0
 800a686:	460c      	mov	r4, r1
 800a688:	b913      	cbnz	r3, 800a690 <_fflush_r+0x10>
 800a68a:	2500      	movs	r5, #0
 800a68c:	4628      	mov	r0, r5
 800a68e:	bd38      	pop	{r3, r4, r5, pc}
 800a690:	b118      	cbz	r0, 800a69a <_fflush_r+0x1a>
 800a692:	6a03      	ldr	r3, [r0, #32]
 800a694:	b90b      	cbnz	r3, 800a69a <_fflush_r+0x1a>
 800a696:	f7fd fa35 	bl	8007b04 <__sinit>
 800a69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d0f3      	beq.n	800a68a <_fflush_r+0xa>
 800a6a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6a4:	07d0      	lsls	r0, r2, #31
 800a6a6:	d404      	bmi.n	800a6b2 <_fflush_r+0x32>
 800a6a8:	0599      	lsls	r1, r3, #22
 800a6aa:	d402      	bmi.n	800a6b2 <_fflush_r+0x32>
 800a6ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ae:	f7fd fb40 	bl	8007d32 <__retarget_lock_acquire_recursive>
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	f7ff ff5d 	bl	800a574 <__sflush_r>
 800a6ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6bc:	07da      	lsls	r2, r3, #31
 800a6be:	4605      	mov	r5, r0
 800a6c0:	d4e4      	bmi.n	800a68c <_fflush_r+0xc>
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	059b      	lsls	r3, r3, #22
 800a6c6:	d4e1      	bmi.n	800a68c <_fflush_r+0xc>
 800a6c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ca:	f7fd fb33 	bl	8007d34 <__retarget_lock_release_recursive>
 800a6ce:	e7dd      	b.n	800a68c <_fflush_r+0xc>

0800a6d0 <memmove>:
 800a6d0:	4288      	cmp	r0, r1
 800a6d2:	b510      	push	{r4, lr}
 800a6d4:	eb01 0402 	add.w	r4, r1, r2
 800a6d8:	d902      	bls.n	800a6e0 <memmove+0x10>
 800a6da:	4284      	cmp	r4, r0
 800a6dc:	4623      	mov	r3, r4
 800a6de:	d807      	bhi.n	800a6f0 <memmove+0x20>
 800a6e0:	1e43      	subs	r3, r0, #1
 800a6e2:	42a1      	cmp	r1, r4
 800a6e4:	d008      	beq.n	800a6f8 <memmove+0x28>
 800a6e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6ee:	e7f8      	b.n	800a6e2 <memmove+0x12>
 800a6f0:	4402      	add	r2, r0
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	428a      	cmp	r2, r1
 800a6f6:	d100      	bne.n	800a6fa <memmove+0x2a>
 800a6f8:	bd10      	pop	{r4, pc}
 800a6fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a702:	e7f7      	b.n	800a6f4 <memmove+0x24>

0800a704 <strncmp>:
 800a704:	b510      	push	{r4, lr}
 800a706:	b16a      	cbz	r2, 800a724 <strncmp+0x20>
 800a708:	3901      	subs	r1, #1
 800a70a:	1884      	adds	r4, r0, r2
 800a70c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a710:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a714:	429a      	cmp	r2, r3
 800a716:	d103      	bne.n	800a720 <strncmp+0x1c>
 800a718:	42a0      	cmp	r0, r4
 800a71a:	d001      	beq.n	800a720 <strncmp+0x1c>
 800a71c:	2a00      	cmp	r2, #0
 800a71e:	d1f5      	bne.n	800a70c <strncmp+0x8>
 800a720:	1ad0      	subs	r0, r2, r3
 800a722:	bd10      	pop	{r4, pc}
 800a724:	4610      	mov	r0, r2
 800a726:	e7fc      	b.n	800a722 <strncmp+0x1e>

0800a728 <_sbrk_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d06      	ldr	r5, [pc, #24]	; (800a744 <_sbrk_r+0x1c>)
 800a72c:	2300      	movs	r3, #0
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	602b      	str	r3, [r5, #0]
 800a734:	f7f7 fd14 	bl	8002160 <_sbrk>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_sbrk_r+0x1a>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_sbrk_r+0x1a>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	20000c78 	.word	0x20000c78

0800a748 <memcpy>:
 800a748:	440a      	add	r2, r1
 800a74a:	4291      	cmp	r1, r2
 800a74c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a750:	d100      	bne.n	800a754 <memcpy+0xc>
 800a752:	4770      	bx	lr
 800a754:	b510      	push	{r4, lr}
 800a756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a75a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a75e:	4291      	cmp	r1, r2
 800a760:	d1f9      	bne.n	800a756 <memcpy+0xe>
 800a762:	bd10      	pop	{r4, pc}
 800a764:	0000      	movs	r0, r0
	...

0800a768 <nan>:
 800a768:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a770 <nan+0x8>
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	00000000 	.word	0x00000000
 800a774:	7ff80000 	.word	0x7ff80000

0800a778 <__assert_func>:
 800a778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a77a:	4614      	mov	r4, r2
 800a77c:	461a      	mov	r2, r3
 800a77e:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <__assert_func+0x2c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4605      	mov	r5, r0
 800a784:	68d8      	ldr	r0, [r3, #12]
 800a786:	b14c      	cbz	r4, 800a79c <__assert_func+0x24>
 800a788:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <__assert_func+0x30>)
 800a78a:	9100      	str	r1, [sp, #0]
 800a78c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a790:	4906      	ldr	r1, [pc, #24]	; (800a7ac <__assert_func+0x34>)
 800a792:	462b      	mov	r3, r5
 800a794:	f000 fbca 	bl	800af2c <fiprintf>
 800a798:	f000 fbda 	bl	800af50 <abort>
 800a79c:	4b04      	ldr	r3, [pc, #16]	; (800a7b0 <__assert_func+0x38>)
 800a79e:	461c      	mov	r4, r3
 800a7a0:	e7f3      	b.n	800a78a <__assert_func+0x12>
 800a7a2:	bf00      	nop
 800a7a4:	2000006c 	.word	0x2000006c
 800a7a8:	0800b8f2 	.word	0x0800b8f2
 800a7ac:	0800b8ff 	.word	0x0800b8ff
 800a7b0:	0800b92d 	.word	0x0800b92d

0800a7b4 <_calloc_r>:
 800a7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7b6:	fba1 2402 	umull	r2, r4, r1, r2
 800a7ba:	b94c      	cbnz	r4, 800a7d0 <_calloc_r+0x1c>
 800a7bc:	4611      	mov	r1, r2
 800a7be:	9201      	str	r2, [sp, #4]
 800a7c0:	f7fe f9b0 	bl	8008b24 <_malloc_r>
 800a7c4:	9a01      	ldr	r2, [sp, #4]
 800a7c6:	4605      	mov	r5, r0
 800a7c8:	b930      	cbnz	r0, 800a7d8 <_calloc_r+0x24>
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	b003      	add	sp, #12
 800a7ce:	bd30      	pop	{r4, r5, pc}
 800a7d0:	220c      	movs	r2, #12
 800a7d2:	6002      	str	r2, [r0, #0]
 800a7d4:	2500      	movs	r5, #0
 800a7d6:	e7f8      	b.n	800a7ca <_calloc_r+0x16>
 800a7d8:	4621      	mov	r1, r4
 800a7da:	f7fd fa2c 	bl	8007c36 <memset>
 800a7de:	e7f4      	b.n	800a7ca <_calloc_r+0x16>

0800a7e0 <rshift>:
 800a7e0:	6903      	ldr	r3, [r0, #16]
 800a7e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a7e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a7ee:	f100 0414 	add.w	r4, r0, #20
 800a7f2:	dd45      	ble.n	800a880 <rshift+0xa0>
 800a7f4:	f011 011f 	ands.w	r1, r1, #31
 800a7f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a7fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a800:	d10c      	bne.n	800a81c <rshift+0x3c>
 800a802:	f100 0710 	add.w	r7, r0, #16
 800a806:	4629      	mov	r1, r5
 800a808:	42b1      	cmp	r1, r6
 800a80a:	d334      	bcc.n	800a876 <rshift+0x96>
 800a80c:	1a9b      	subs	r3, r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	1eea      	subs	r2, r5, #3
 800a812:	4296      	cmp	r6, r2
 800a814:	bf38      	it	cc
 800a816:	2300      	movcc	r3, #0
 800a818:	4423      	add	r3, r4
 800a81a:	e015      	b.n	800a848 <rshift+0x68>
 800a81c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a820:	f1c1 0820 	rsb	r8, r1, #32
 800a824:	40cf      	lsrs	r7, r1
 800a826:	f105 0e04 	add.w	lr, r5, #4
 800a82a:	46a1      	mov	r9, r4
 800a82c:	4576      	cmp	r6, lr
 800a82e:	46f4      	mov	ip, lr
 800a830:	d815      	bhi.n	800a85e <rshift+0x7e>
 800a832:	1a9a      	subs	r2, r3, r2
 800a834:	0092      	lsls	r2, r2, #2
 800a836:	3a04      	subs	r2, #4
 800a838:	3501      	adds	r5, #1
 800a83a:	42ae      	cmp	r6, r5
 800a83c:	bf38      	it	cc
 800a83e:	2200      	movcc	r2, #0
 800a840:	18a3      	adds	r3, r4, r2
 800a842:	50a7      	str	r7, [r4, r2]
 800a844:	b107      	cbz	r7, 800a848 <rshift+0x68>
 800a846:	3304      	adds	r3, #4
 800a848:	1b1a      	subs	r2, r3, r4
 800a84a:	42a3      	cmp	r3, r4
 800a84c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a850:	bf08      	it	eq
 800a852:	2300      	moveq	r3, #0
 800a854:	6102      	str	r2, [r0, #16]
 800a856:	bf08      	it	eq
 800a858:	6143      	streq	r3, [r0, #20]
 800a85a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a85e:	f8dc c000 	ldr.w	ip, [ip]
 800a862:	fa0c fc08 	lsl.w	ip, ip, r8
 800a866:	ea4c 0707 	orr.w	r7, ip, r7
 800a86a:	f849 7b04 	str.w	r7, [r9], #4
 800a86e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a872:	40cf      	lsrs	r7, r1
 800a874:	e7da      	b.n	800a82c <rshift+0x4c>
 800a876:	f851 cb04 	ldr.w	ip, [r1], #4
 800a87a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a87e:	e7c3      	b.n	800a808 <rshift+0x28>
 800a880:	4623      	mov	r3, r4
 800a882:	e7e1      	b.n	800a848 <rshift+0x68>

0800a884 <__hexdig_fun>:
 800a884:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a888:	2b09      	cmp	r3, #9
 800a88a:	d802      	bhi.n	800a892 <__hexdig_fun+0xe>
 800a88c:	3820      	subs	r0, #32
 800a88e:	b2c0      	uxtb	r0, r0
 800a890:	4770      	bx	lr
 800a892:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a896:	2b05      	cmp	r3, #5
 800a898:	d801      	bhi.n	800a89e <__hexdig_fun+0x1a>
 800a89a:	3847      	subs	r0, #71	; 0x47
 800a89c:	e7f7      	b.n	800a88e <__hexdig_fun+0xa>
 800a89e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a8a2:	2b05      	cmp	r3, #5
 800a8a4:	d801      	bhi.n	800a8aa <__hexdig_fun+0x26>
 800a8a6:	3827      	subs	r0, #39	; 0x27
 800a8a8:	e7f1      	b.n	800a88e <__hexdig_fun+0xa>
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	4770      	bx	lr
	...

0800a8b0 <__gethex>:
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	4617      	mov	r7, r2
 800a8b6:	680a      	ldr	r2, [r1, #0]
 800a8b8:	b085      	sub	sp, #20
 800a8ba:	f102 0b02 	add.w	fp, r2, #2
 800a8be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a8c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a8c6:	4681      	mov	r9, r0
 800a8c8:	468a      	mov	sl, r1
 800a8ca:	9302      	str	r3, [sp, #8]
 800a8cc:	32fe      	adds	r2, #254	; 0xfe
 800a8ce:	eb02 030b 	add.w	r3, r2, fp
 800a8d2:	46d8      	mov	r8, fp
 800a8d4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	2830      	cmp	r0, #48	; 0x30
 800a8dc:	d0f7      	beq.n	800a8ce <__gethex+0x1e>
 800a8de:	f7ff ffd1 	bl	800a884 <__hexdig_fun>
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d138      	bne.n	800a95a <__gethex+0xaa>
 800a8e8:	49a7      	ldr	r1, [pc, #668]	; (800ab88 <__gethex+0x2d8>)
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	f7ff ff09 	bl	800a704 <strncmp>
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d169      	bne.n	800a9cc <__gethex+0x11c>
 800a8f8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a8fc:	465d      	mov	r5, fp
 800a8fe:	f7ff ffc1 	bl	800a884 <__hexdig_fun>
 800a902:	2800      	cmp	r0, #0
 800a904:	d064      	beq.n	800a9d0 <__gethex+0x120>
 800a906:	465a      	mov	r2, fp
 800a908:	7810      	ldrb	r0, [r2, #0]
 800a90a:	2830      	cmp	r0, #48	; 0x30
 800a90c:	4690      	mov	r8, r2
 800a90e:	f102 0201 	add.w	r2, r2, #1
 800a912:	d0f9      	beq.n	800a908 <__gethex+0x58>
 800a914:	f7ff ffb6 	bl	800a884 <__hexdig_fun>
 800a918:	2301      	movs	r3, #1
 800a91a:	fab0 f480 	clz	r4, r0
 800a91e:	0964      	lsrs	r4, r4, #5
 800a920:	465e      	mov	r6, fp
 800a922:	9301      	str	r3, [sp, #4]
 800a924:	4642      	mov	r2, r8
 800a926:	4615      	mov	r5, r2
 800a928:	3201      	adds	r2, #1
 800a92a:	7828      	ldrb	r0, [r5, #0]
 800a92c:	f7ff ffaa 	bl	800a884 <__hexdig_fun>
 800a930:	2800      	cmp	r0, #0
 800a932:	d1f8      	bne.n	800a926 <__gethex+0x76>
 800a934:	4994      	ldr	r1, [pc, #592]	; (800ab88 <__gethex+0x2d8>)
 800a936:	2201      	movs	r2, #1
 800a938:	4628      	mov	r0, r5
 800a93a:	f7ff fee3 	bl	800a704 <strncmp>
 800a93e:	b978      	cbnz	r0, 800a960 <__gethex+0xb0>
 800a940:	b946      	cbnz	r6, 800a954 <__gethex+0xa4>
 800a942:	1c6e      	adds	r6, r5, #1
 800a944:	4632      	mov	r2, r6
 800a946:	4615      	mov	r5, r2
 800a948:	3201      	adds	r2, #1
 800a94a:	7828      	ldrb	r0, [r5, #0]
 800a94c:	f7ff ff9a 	bl	800a884 <__hexdig_fun>
 800a950:	2800      	cmp	r0, #0
 800a952:	d1f8      	bne.n	800a946 <__gethex+0x96>
 800a954:	1b73      	subs	r3, r6, r5
 800a956:	009e      	lsls	r6, r3, #2
 800a958:	e004      	b.n	800a964 <__gethex+0xb4>
 800a95a:	2400      	movs	r4, #0
 800a95c:	4626      	mov	r6, r4
 800a95e:	e7e1      	b.n	800a924 <__gethex+0x74>
 800a960:	2e00      	cmp	r6, #0
 800a962:	d1f7      	bne.n	800a954 <__gethex+0xa4>
 800a964:	782b      	ldrb	r3, [r5, #0]
 800a966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a96a:	2b50      	cmp	r3, #80	; 0x50
 800a96c:	d13d      	bne.n	800a9ea <__gethex+0x13a>
 800a96e:	786b      	ldrb	r3, [r5, #1]
 800a970:	2b2b      	cmp	r3, #43	; 0x2b
 800a972:	d02f      	beq.n	800a9d4 <__gethex+0x124>
 800a974:	2b2d      	cmp	r3, #45	; 0x2d
 800a976:	d031      	beq.n	800a9dc <__gethex+0x12c>
 800a978:	1c69      	adds	r1, r5, #1
 800a97a:	f04f 0b00 	mov.w	fp, #0
 800a97e:	7808      	ldrb	r0, [r1, #0]
 800a980:	f7ff ff80 	bl	800a884 <__hexdig_fun>
 800a984:	1e42      	subs	r2, r0, #1
 800a986:	b2d2      	uxtb	r2, r2
 800a988:	2a18      	cmp	r2, #24
 800a98a:	d82e      	bhi.n	800a9ea <__gethex+0x13a>
 800a98c:	f1a0 0210 	sub.w	r2, r0, #16
 800a990:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a994:	f7ff ff76 	bl	800a884 <__hexdig_fun>
 800a998:	f100 3cff 	add.w	ip, r0, #4294967295
 800a99c:	fa5f fc8c 	uxtb.w	ip, ip
 800a9a0:	f1bc 0f18 	cmp.w	ip, #24
 800a9a4:	d91d      	bls.n	800a9e2 <__gethex+0x132>
 800a9a6:	f1bb 0f00 	cmp.w	fp, #0
 800a9aa:	d000      	beq.n	800a9ae <__gethex+0xfe>
 800a9ac:	4252      	negs	r2, r2
 800a9ae:	4416      	add	r6, r2
 800a9b0:	f8ca 1000 	str.w	r1, [sl]
 800a9b4:	b1dc      	cbz	r4, 800a9ee <__gethex+0x13e>
 800a9b6:	9b01      	ldr	r3, [sp, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	bf14      	ite	ne
 800a9bc:	f04f 0800 	movne.w	r8, #0
 800a9c0:	f04f 0806 	moveq.w	r8, #6
 800a9c4:	4640      	mov	r0, r8
 800a9c6:	b005      	add	sp, #20
 800a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9cc:	4645      	mov	r5, r8
 800a9ce:	4626      	mov	r6, r4
 800a9d0:	2401      	movs	r4, #1
 800a9d2:	e7c7      	b.n	800a964 <__gethex+0xb4>
 800a9d4:	f04f 0b00 	mov.w	fp, #0
 800a9d8:	1ca9      	adds	r1, r5, #2
 800a9da:	e7d0      	b.n	800a97e <__gethex+0xce>
 800a9dc:	f04f 0b01 	mov.w	fp, #1
 800a9e0:	e7fa      	b.n	800a9d8 <__gethex+0x128>
 800a9e2:	230a      	movs	r3, #10
 800a9e4:	fb03 0002 	mla	r0, r3, r2, r0
 800a9e8:	e7d0      	b.n	800a98c <__gethex+0xdc>
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	e7e0      	b.n	800a9b0 <__gethex+0x100>
 800a9ee:	eba5 0308 	sub.w	r3, r5, r8
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	2b07      	cmp	r3, #7
 800a9f8:	dc0a      	bgt.n	800aa10 <__gethex+0x160>
 800a9fa:	4648      	mov	r0, r9
 800a9fc:	f7fe f91e 	bl	8008c3c <_Balloc>
 800aa00:	4604      	mov	r4, r0
 800aa02:	b940      	cbnz	r0, 800aa16 <__gethex+0x166>
 800aa04:	4b61      	ldr	r3, [pc, #388]	; (800ab8c <__gethex+0x2dc>)
 800aa06:	4602      	mov	r2, r0
 800aa08:	21e4      	movs	r1, #228	; 0xe4
 800aa0a:	4861      	ldr	r0, [pc, #388]	; (800ab90 <__gethex+0x2e0>)
 800aa0c:	f7ff feb4 	bl	800a778 <__assert_func>
 800aa10:	3101      	adds	r1, #1
 800aa12:	105b      	asrs	r3, r3, #1
 800aa14:	e7ef      	b.n	800a9f6 <__gethex+0x146>
 800aa16:	f100 0a14 	add.w	sl, r0, #20
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	495a      	ldr	r1, [pc, #360]	; (800ab88 <__gethex+0x2d8>)
 800aa1e:	f8cd a004 	str.w	sl, [sp, #4]
 800aa22:	469b      	mov	fp, r3
 800aa24:	45a8      	cmp	r8, r5
 800aa26:	d342      	bcc.n	800aaae <__gethex+0x1fe>
 800aa28:	9801      	ldr	r0, [sp, #4]
 800aa2a:	f840 bb04 	str.w	fp, [r0], #4
 800aa2e:	eba0 000a 	sub.w	r0, r0, sl
 800aa32:	1080      	asrs	r0, r0, #2
 800aa34:	6120      	str	r0, [r4, #16]
 800aa36:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800aa3a:	4658      	mov	r0, fp
 800aa3c:	f7fe f9f0 	bl	8008e20 <__hi0bits>
 800aa40:	683d      	ldr	r5, [r7, #0]
 800aa42:	eba8 0000 	sub.w	r0, r8, r0
 800aa46:	42a8      	cmp	r0, r5
 800aa48:	dd59      	ble.n	800aafe <__gethex+0x24e>
 800aa4a:	eba0 0805 	sub.w	r8, r0, r5
 800aa4e:	4641      	mov	r1, r8
 800aa50:	4620      	mov	r0, r4
 800aa52:	f7fe fd7f 	bl	8009554 <__any_on>
 800aa56:	4683      	mov	fp, r0
 800aa58:	b1b8      	cbz	r0, 800aa8a <__gethex+0x1da>
 800aa5a:	f108 33ff 	add.w	r3, r8, #4294967295
 800aa5e:	1159      	asrs	r1, r3, #5
 800aa60:	f003 021f 	and.w	r2, r3, #31
 800aa64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aa68:	f04f 0b01 	mov.w	fp, #1
 800aa6c:	fa0b f202 	lsl.w	r2, fp, r2
 800aa70:	420a      	tst	r2, r1
 800aa72:	d00a      	beq.n	800aa8a <__gethex+0x1da>
 800aa74:	455b      	cmp	r3, fp
 800aa76:	dd06      	ble.n	800aa86 <__gethex+0x1d6>
 800aa78:	f1a8 0102 	sub.w	r1, r8, #2
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f7fe fd69 	bl	8009554 <__any_on>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d138      	bne.n	800aaf8 <__gethex+0x248>
 800aa86:	f04f 0b02 	mov.w	fp, #2
 800aa8a:	4641      	mov	r1, r8
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f7ff fea7 	bl	800a7e0 <rshift>
 800aa92:	4446      	add	r6, r8
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	42b3      	cmp	r3, r6
 800aa98:	da41      	bge.n	800ab1e <__gethex+0x26e>
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4648      	mov	r0, r9
 800aa9e:	f7fe f90d 	bl	8008cbc <_Bfree>
 800aaa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800aaac:	e78a      	b.n	800a9c4 <__gethex+0x114>
 800aaae:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800aab2:	2a2e      	cmp	r2, #46	; 0x2e
 800aab4:	d014      	beq.n	800aae0 <__gethex+0x230>
 800aab6:	2b20      	cmp	r3, #32
 800aab8:	d106      	bne.n	800aac8 <__gethex+0x218>
 800aaba:	9b01      	ldr	r3, [sp, #4]
 800aabc:	f843 bb04 	str.w	fp, [r3], #4
 800aac0:	f04f 0b00 	mov.w	fp, #0
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	465b      	mov	r3, fp
 800aac8:	7828      	ldrb	r0, [r5, #0]
 800aaca:	9303      	str	r3, [sp, #12]
 800aacc:	f7ff feda 	bl	800a884 <__hexdig_fun>
 800aad0:	9b03      	ldr	r3, [sp, #12]
 800aad2:	f000 000f 	and.w	r0, r0, #15
 800aad6:	4098      	lsls	r0, r3
 800aad8:	ea4b 0b00 	orr.w	fp, fp, r0
 800aadc:	3304      	adds	r3, #4
 800aade:	e7a1      	b.n	800aa24 <__gethex+0x174>
 800aae0:	45a8      	cmp	r8, r5
 800aae2:	d8e8      	bhi.n	800aab6 <__gethex+0x206>
 800aae4:	2201      	movs	r2, #1
 800aae6:	4628      	mov	r0, r5
 800aae8:	9303      	str	r3, [sp, #12]
 800aaea:	f7ff fe0b 	bl	800a704 <strncmp>
 800aaee:	4926      	ldr	r1, [pc, #152]	; (800ab88 <__gethex+0x2d8>)
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d1df      	bne.n	800aab6 <__gethex+0x206>
 800aaf6:	e795      	b.n	800aa24 <__gethex+0x174>
 800aaf8:	f04f 0b03 	mov.w	fp, #3
 800aafc:	e7c5      	b.n	800aa8a <__gethex+0x1da>
 800aafe:	da0b      	bge.n	800ab18 <__gethex+0x268>
 800ab00:	eba5 0800 	sub.w	r8, r5, r0
 800ab04:	4621      	mov	r1, r4
 800ab06:	4642      	mov	r2, r8
 800ab08:	4648      	mov	r0, r9
 800ab0a:	f7fe faf1 	bl	80090f0 <__lshift>
 800ab0e:	eba6 0608 	sub.w	r6, r6, r8
 800ab12:	4604      	mov	r4, r0
 800ab14:	f100 0a14 	add.w	sl, r0, #20
 800ab18:	f04f 0b00 	mov.w	fp, #0
 800ab1c:	e7ba      	b.n	800aa94 <__gethex+0x1e4>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	42b3      	cmp	r3, r6
 800ab22:	dd73      	ble.n	800ac0c <__gethex+0x35c>
 800ab24:	1b9e      	subs	r6, r3, r6
 800ab26:	42b5      	cmp	r5, r6
 800ab28:	dc34      	bgt.n	800ab94 <__gethex+0x2e4>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d023      	beq.n	800ab78 <__gethex+0x2c8>
 800ab30:	2b03      	cmp	r3, #3
 800ab32:	d025      	beq.n	800ab80 <__gethex+0x2d0>
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d115      	bne.n	800ab64 <__gethex+0x2b4>
 800ab38:	42b5      	cmp	r5, r6
 800ab3a:	d113      	bne.n	800ab64 <__gethex+0x2b4>
 800ab3c:	2d01      	cmp	r5, #1
 800ab3e:	d10b      	bne.n	800ab58 <__gethex+0x2a8>
 800ab40:	9a02      	ldr	r2, [sp, #8]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6013      	str	r3, [r2, #0]
 800ab46:	2301      	movs	r3, #1
 800ab48:	6123      	str	r3, [r4, #16]
 800ab4a:	f8ca 3000 	str.w	r3, [sl]
 800ab4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab50:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ab54:	601c      	str	r4, [r3, #0]
 800ab56:	e735      	b.n	800a9c4 <__gethex+0x114>
 800ab58:	1e69      	subs	r1, r5, #1
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f7fe fcfa 	bl	8009554 <__any_on>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d1ed      	bne.n	800ab40 <__gethex+0x290>
 800ab64:	4621      	mov	r1, r4
 800ab66:	4648      	mov	r0, r9
 800ab68:	f7fe f8a8 	bl	8008cbc <_Bfree>
 800ab6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab6e:	2300      	movs	r3, #0
 800ab70:	6013      	str	r3, [r2, #0]
 800ab72:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ab76:	e725      	b.n	800a9c4 <__gethex+0x114>
 800ab78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1f2      	bne.n	800ab64 <__gethex+0x2b4>
 800ab7e:	e7df      	b.n	800ab40 <__gethex+0x290>
 800ab80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1dc      	bne.n	800ab40 <__gethex+0x290>
 800ab86:	e7ed      	b.n	800ab64 <__gethex+0x2b4>
 800ab88:	0800b784 	.word	0x0800b784
 800ab8c:	0800b61d 	.word	0x0800b61d
 800ab90:	0800b92e 	.word	0x0800b92e
 800ab94:	f106 38ff 	add.w	r8, r6, #4294967295
 800ab98:	f1bb 0f00 	cmp.w	fp, #0
 800ab9c:	d133      	bne.n	800ac06 <__gethex+0x356>
 800ab9e:	f1b8 0f00 	cmp.w	r8, #0
 800aba2:	d004      	beq.n	800abae <__gethex+0x2fe>
 800aba4:	4641      	mov	r1, r8
 800aba6:	4620      	mov	r0, r4
 800aba8:	f7fe fcd4 	bl	8009554 <__any_on>
 800abac:	4683      	mov	fp, r0
 800abae:	ea4f 1268 	mov.w	r2, r8, asr #5
 800abb2:	2301      	movs	r3, #1
 800abb4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800abb8:	f008 081f 	and.w	r8, r8, #31
 800abbc:	fa03 f308 	lsl.w	r3, r3, r8
 800abc0:	4213      	tst	r3, r2
 800abc2:	4631      	mov	r1, r6
 800abc4:	4620      	mov	r0, r4
 800abc6:	bf18      	it	ne
 800abc8:	f04b 0b02 	orrne.w	fp, fp, #2
 800abcc:	1bad      	subs	r5, r5, r6
 800abce:	f7ff fe07 	bl	800a7e0 <rshift>
 800abd2:	687e      	ldr	r6, [r7, #4]
 800abd4:	f04f 0802 	mov.w	r8, #2
 800abd8:	f1bb 0f00 	cmp.w	fp, #0
 800abdc:	d04a      	beq.n	800ac74 <__gethex+0x3c4>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d016      	beq.n	800ac12 <__gethex+0x362>
 800abe4:	2b03      	cmp	r3, #3
 800abe6:	d018      	beq.n	800ac1a <__gethex+0x36a>
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d109      	bne.n	800ac00 <__gethex+0x350>
 800abec:	f01b 0f02 	tst.w	fp, #2
 800abf0:	d006      	beq.n	800ac00 <__gethex+0x350>
 800abf2:	f8da 3000 	ldr.w	r3, [sl]
 800abf6:	ea4b 0b03 	orr.w	fp, fp, r3
 800abfa:	f01b 0f01 	tst.w	fp, #1
 800abfe:	d10f      	bne.n	800ac20 <__gethex+0x370>
 800ac00:	f048 0810 	orr.w	r8, r8, #16
 800ac04:	e036      	b.n	800ac74 <__gethex+0x3c4>
 800ac06:	f04f 0b01 	mov.w	fp, #1
 800ac0a:	e7d0      	b.n	800abae <__gethex+0x2fe>
 800ac0c:	f04f 0801 	mov.w	r8, #1
 800ac10:	e7e2      	b.n	800abd8 <__gethex+0x328>
 800ac12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac14:	f1c3 0301 	rsb	r3, r3, #1
 800ac18:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d0ef      	beq.n	800ac00 <__gethex+0x350>
 800ac20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac24:	f104 0214 	add.w	r2, r4, #20
 800ac28:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ac2c:	9301      	str	r3, [sp, #4]
 800ac2e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ac32:	2300      	movs	r3, #0
 800ac34:	4694      	mov	ip, r2
 800ac36:	f852 1b04 	ldr.w	r1, [r2], #4
 800ac3a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ac3e:	d01e      	beq.n	800ac7e <__gethex+0x3ce>
 800ac40:	3101      	adds	r1, #1
 800ac42:	f8cc 1000 	str.w	r1, [ip]
 800ac46:	f1b8 0f02 	cmp.w	r8, #2
 800ac4a:	f104 0214 	add.w	r2, r4, #20
 800ac4e:	d13d      	bne.n	800accc <__gethex+0x41c>
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	3b01      	subs	r3, #1
 800ac54:	42ab      	cmp	r3, r5
 800ac56:	d10b      	bne.n	800ac70 <__gethex+0x3c0>
 800ac58:	1169      	asrs	r1, r5, #5
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	f005 051f 	and.w	r5, r5, #31
 800ac60:	fa03 f505 	lsl.w	r5, r3, r5
 800ac64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac68:	421d      	tst	r5, r3
 800ac6a:	bf18      	it	ne
 800ac6c:	f04f 0801 	movne.w	r8, #1
 800ac70:	f048 0820 	orr.w	r8, r8, #32
 800ac74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac76:	601c      	str	r4, [r3, #0]
 800ac78:	9b02      	ldr	r3, [sp, #8]
 800ac7a:	601e      	str	r6, [r3, #0]
 800ac7c:	e6a2      	b.n	800a9c4 <__gethex+0x114>
 800ac7e:	4290      	cmp	r0, r2
 800ac80:	f842 3c04 	str.w	r3, [r2, #-4]
 800ac84:	d8d6      	bhi.n	800ac34 <__gethex+0x384>
 800ac86:	68a2      	ldr	r2, [r4, #8]
 800ac88:	4593      	cmp	fp, r2
 800ac8a:	db17      	blt.n	800acbc <__gethex+0x40c>
 800ac8c:	6861      	ldr	r1, [r4, #4]
 800ac8e:	4648      	mov	r0, r9
 800ac90:	3101      	adds	r1, #1
 800ac92:	f7fd ffd3 	bl	8008c3c <_Balloc>
 800ac96:	4682      	mov	sl, r0
 800ac98:	b918      	cbnz	r0, 800aca2 <__gethex+0x3f2>
 800ac9a:	4b1b      	ldr	r3, [pc, #108]	; (800ad08 <__gethex+0x458>)
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	2184      	movs	r1, #132	; 0x84
 800aca0:	e6b3      	b.n	800aa0a <__gethex+0x15a>
 800aca2:	6922      	ldr	r2, [r4, #16]
 800aca4:	3202      	adds	r2, #2
 800aca6:	f104 010c 	add.w	r1, r4, #12
 800acaa:	0092      	lsls	r2, r2, #2
 800acac:	300c      	adds	r0, #12
 800acae:	f7ff fd4b 	bl	800a748 <memcpy>
 800acb2:	4621      	mov	r1, r4
 800acb4:	4648      	mov	r0, r9
 800acb6:	f7fe f801 	bl	8008cbc <_Bfree>
 800acba:	4654      	mov	r4, sl
 800acbc:	6922      	ldr	r2, [r4, #16]
 800acbe:	1c51      	adds	r1, r2, #1
 800acc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800acc4:	6121      	str	r1, [r4, #16]
 800acc6:	2101      	movs	r1, #1
 800acc8:	6151      	str	r1, [r2, #20]
 800acca:	e7bc      	b.n	800ac46 <__gethex+0x396>
 800accc:	6921      	ldr	r1, [r4, #16]
 800acce:	4559      	cmp	r1, fp
 800acd0:	dd0b      	ble.n	800acea <__gethex+0x43a>
 800acd2:	2101      	movs	r1, #1
 800acd4:	4620      	mov	r0, r4
 800acd6:	f7ff fd83 	bl	800a7e0 <rshift>
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	3601      	adds	r6, #1
 800acde:	42b3      	cmp	r3, r6
 800ace0:	f6ff aedb 	blt.w	800aa9a <__gethex+0x1ea>
 800ace4:	f04f 0801 	mov.w	r8, #1
 800ace8:	e7c2      	b.n	800ac70 <__gethex+0x3c0>
 800acea:	f015 051f 	ands.w	r5, r5, #31
 800acee:	d0f9      	beq.n	800ace4 <__gethex+0x434>
 800acf0:	9b01      	ldr	r3, [sp, #4]
 800acf2:	441a      	add	r2, r3
 800acf4:	f1c5 0520 	rsb	r5, r5, #32
 800acf8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800acfc:	f7fe f890 	bl	8008e20 <__hi0bits>
 800ad00:	42a8      	cmp	r0, r5
 800ad02:	dbe6      	blt.n	800acd2 <__gethex+0x422>
 800ad04:	e7ee      	b.n	800ace4 <__gethex+0x434>
 800ad06:	bf00      	nop
 800ad08:	0800b61d 	.word	0x0800b61d

0800ad0c <L_shift>:
 800ad0c:	f1c2 0208 	rsb	r2, r2, #8
 800ad10:	0092      	lsls	r2, r2, #2
 800ad12:	b570      	push	{r4, r5, r6, lr}
 800ad14:	f1c2 0620 	rsb	r6, r2, #32
 800ad18:	6843      	ldr	r3, [r0, #4]
 800ad1a:	6804      	ldr	r4, [r0, #0]
 800ad1c:	fa03 f506 	lsl.w	r5, r3, r6
 800ad20:	432c      	orrs	r4, r5
 800ad22:	40d3      	lsrs	r3, r2
 800ad24:	6004      	str	r4, [r0, #0]
 800ad26:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad2a:	4288      	cmp	r0, r1
 800ad2c:	d3f4      	bcc.n	800ad18 <L_shift+0xc>
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}

0800ad30 <__match>:
 800ad30:	b530      	push	{r4, r5, lr}
 800ad32:	6803      	ldr	r3, [r0, #0]
 800ad34:	3301      	adds	r3, #1
 800ad36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad3a:	b914      	cbnz	r4, 800ad42 <__match+0x12>
 800ad3c:	6003      	str	r3, [r0, #0]
 800ad3e:	2001      	movs	r0, #1
 800ad40:	bd30      	pop	{r4, r5, pc}
 800ad42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ad4a:	2d19      	cmp	r5, #25
 800ad4c:	bf98      	it	ls
 800ad4e:	3220      	addls	r2, #32
 800ad50:	42a2      	cmp	r2, r4
 800ad52:	d0f0      	beq.n	800ad36 <__match+0x6>
 800ad54:	2000      	movs	r0, #0
 800ad56:	e7f3      	b.n	800ad40 <__match+0x10>

0800ad58 <__hexnan>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	680b      	ldr	r3, [r1, #0]
 800ad5e:	6801      	ldr	r1, [r0, #0]
 800ad60:	115e      	asrs	r6, r3, #5
 800ad62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad66:	f013 031f 	ands.w	r3, r3, #31
 800ad6a:	b087      	sub	sp, #28
 800ad6c:	bf18      	it	ne
 800ad6e:	3604      	addne	r6, #4
 800ad70:	2500      	movs	r5, #0
 800ad72:	1f37      	subs	r7, r6, #4
 800ad74:	4682      	mov	sl, r0
 800ad76:	4690      	mov	r8, r2
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad7e:	46b9      	mov	r9, r7
 800ad80:	463c      	mov	r4, r7
 800ad82:	9502      	str	r5, [sp, #8]
 800ad84:	46ab      	mov	fp, r5
 800ad86:	784a      	ldrb	r2, [r1, #1]
 800ad88:	1c4b      	adds	r3, r1, #1
 800ad8a:	9303      	str	r3, [sp, #12]
 800ad8c:	b342      	cbz	r2, 800ade0 <__hexnan+0x88>
 800ad8e:	4610      	mov	r0, r2
 800ad90:	9105      	str	r1, [sp, #20]
 800ad92:	9204      	str	r2, [sp, #16]
 800ad94:	f7ff fd76 	bl	800a884 <__hexdig_fun>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d14f      	bne.n	800ae3c <__hexnan+0xe4>
 800ad9c:	9a04      	ldr	r2, [sp, #16]
 800ad9e:	9905      	ldr	r1, [sp, #20]
 800ada0:	2a20      	cmp	r2, #32
 800ada2:	d818      	bhi.n	800add6 <__hexnan+0x7e>
 800ada4:	9b02      	ldr	r3, [sp, #8]
 800ada6:	459b      	cmp	fp, r3
 800ada8:	dd13      	ble.n	800add2 <__hexnan+0x7a>
 800adaa:	454c      	cmp	r4, r9
 800adac:	d206      	bcs.n	800adbc <__hexnan+0x64>
 800adae:	2d07      	cmp	r5, #7
 800adb0:	dc04      	bgt.n	800adbc <__hexnan+0x64>
 800adb2:	462a      	mov	r2, r5
 800adb4:	4649      	mov	r1, r9
 800adb6:	4620      	mov	r0, r4
 800adb8:	f7ff ffa8 	bl	800ad0c <L_shift>
 800adbc:	4544      	cmp	r4, r8
 800adbe:	d950      	bls.n	800ae62 <__hexnan+0x10a>
 800adc0:	2300      	movs	r3, #0
 800adc2:	f1a4 0904 	sub.w	r9, r4, #4
 800adc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800adca:	f8cd b008 	str.w	fp, [sp, #8]
 800adce:	464c      	mov	r4, r9
 800add0:	461d      	mov	r5, r3
 800add2:	9903      	ldr	r1, [sp, #12]
 800add4:	e7d7      	b.n	800ad86 <__hexnan+0x2e>
 800add6:	2a29      	cmp	r2, #41	; 0x29
 800add8:	d155      	bne.n	800ae86 <__hexnan+0x12e>
 800adda:	3102      	adds	r1, #2
 800addc:	f8ca 1000 	str.w	r1, [sl]
 800ade0:	f1bb 0f00 	cmp.w	fp, #0
 800ade4:	d04f      	beq.n	800ae86 <__hexnan+0x12e>
 800ade6:	454c      	cmp	r4, r9
 800ade8:	d206      	bcs.n	800adf8 <__hexnan+0xa0>
 800adea:	2d07      	cmp	r5, #7
 800adec:	dc04      	bgt.n	800adf8 <__hexnan+0xa0>
 800adee:	462a      	mov	r2, r5
 800adf0:	4649      	mov	r1, r9
 800adf2:	4620      	mov	r0, r4
 800adf4:	f7ff ff8a 	bl	800ad0c <L_shift>
 800adf8:	4544      	cmp	r4, r8
 800adfa:	d934      	bls.n	800ae66 <__hexnan+0x10e>
 800adfc:	f1a8 0204 	sub.w	r2, r8, #4
 800ae00:	4623      	mov	r3, r4
 800ae02:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae06:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae0a:	429f      	cmp	r7, r3
 800ae0c:	d2f9      	bcs.n	800ae02 <__hexnan+0xaa>
 800ae0e:	1b3b      	subs	r3, r7, r4
 800ae10:	f023 0303 	bic.w	r3, r3, #3
 800ae14:	3304      	adds	r3, #4
 800ae16:	3e03      	subs	r6, #3
 800ae18:	3401      	adds	r4, #1
 800ae1a:	42a6      	cmp	r6, r4
 800ae1c:	bf38      	it	cc
 800ae1e:	2304      	movcc	r3, #4
 800ae20:	4443      	add	r3, r8
 800ae22:	2200      	movs	r2, #0
 800ae24:	f843 2b04 	str.w	r2, [r3], #4
 800ae28:	429f      	cmp	r7, r3
 800ae2a:	d2fb      	bcs.n	800ae24 <__hexnan+0xcc>
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	b91b      	cbnz	r3, 800ae38 <__hexnan+0xe0>
 800ae30:	4547      	cmp	r7, r8
 800ae32:	d126      	bne.n	800ae82 <__hexnan+0x12a>
 800ae34:	2301      	movs	r3, #1
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	2005      	movs	r0, #5
 800ae3a:	e025      	b.n	800ae88 <__hexnan+0x130>
 800ae3c:	3501      	adds	r5, #1
 800ae3e:	2d08      	cmp	r5, #8
 800ae40:	f10b 0b01 	add.w	fp, fp, #1
 800ae44:	dd06      	ble.n	800ae54 <__hexnan+0xfc>
 800ae46:	4544      	cmp	r4, r8
 800ae48:	d9c3      	bls.n	800add2 <__hexnan+0x7a>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae50:	2501      	movs	r5, #1
 800ae52:	3c04      	subs	r4, #4
 800ae54:	6822      	ldr	r2, [r4, #0]
 800ae56:	f000 000f 	and.w	r0, r0, #15
 800ae5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ae5e:	6020      	str	r0, [r4, #0]
 800ae60:	e7b7      	b.n	800add2 <__hexnan+0x7a>
 800ae62:	2508      	movs	r5, #8
 800ae64:	e7b5      	b.n	800add2 <__hexnan+0x7a>
 800ae66:	9b01      	ldr	r3, [sp, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d0df      	beq.n	800ae2c <__hexnan+0xd4>
 800ae6c:	f1c3 0320 	rsb	r3, r3, #32
 800ae70:	f04f 32ff 	mov.w	r2, #4294967295
 800ae74:	40da      	lsrs	r2, r3
 800ae76:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ae7a:	4013      	ands	r3, r2
 800ae7c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ae80:	e7d4      	b.n	800ae2c <__hexnan+0xd4>
 800ae82:	3f04      	subs	r7, #4
 800ae84:	e7d2      	b.n	800ae2c <__hexnan+0xd4>
 800ae86:	2004      	movs	r0, #4
 800ae88:	b007      	add	sp, #28
 800ae8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae8e <__ascii_mbtowc>:
 800ae8e:	b082      	sub	sp, #8
 800ae90:	b901      	cbnz	r1, 800ae94 <__ascii_mbtowc+0x6>
 800ae92:	a901      	add	r1, sp, #4
 800ae94:	b142      	cbz	r2, 800aea8 <__ascii_mbtowc+0x1a>
 800ae96:	b14b      	cbz	r3, 800aeac <__ascii_mbtowc+0x1e>
 800ae98:	7813      	ldrb	r3, [r2, #0]
 800ae9a:	600b      	str	r3, [r1, #0]
 800ae9c:	7812      	ldrb	r2, [r2, #0]
 800ae9e:	1e10      	subs	r0, r2, #0
 800aea0:	bf18      	it	ne
 800aea2:	2001      	movne	r0, #1
 800aea4:	b002      	add	sp, #8
 800aea6:	4770      	bx	lr
 800aea8:	4610      	mov	r0, r2
 800aeaa:	e7fb      	b.n	800aea4 <__ascii_mbtowc+0x16>
 800aeac:	f06f 0001 	mvn.w	r0, #1
 800aeb0:	e7f8      	b.n	800aea4 <__ascii_mbtowc+0x16>

0800aeb2 <_realloc_r>:
 800aeb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb6:	4680      	mov	r8, r0
 800aeb8:	4614      	mov	r4, r2
 800aeba:	460e      	mov	r6, r1
 800aebc:	b921      	cbnz	r1, 800aec8 <_realloc_r+0x16>
 800aebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aec2:	4611      	mov	r1, r2
 800aec4:	f7fd be2e 	b.w	8008b24 <_malloc_r>
 800aec8:	b92a      	cbnz	r2, 800aed6 <_realloc_r+0x24>
 800aeca:	f7fd fdb7 	bl	8008a3c <_free_r>
 800aece:	4625      	mov	r5, r4
 800aed0:	4628      	mov	r0, r5
 800aed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed6:	f000 f842 	bl	800af5e <_malloc_usable_size_r>
 800aeda:	4284      	cmp	r4, r0
 800aedc:	4607      	mov	r7, r0
 800aede:	d802      	bhi.n	800aee6 <_realloc_r+0x34>
 800aee0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aee4:	d812      	bhi.n	800af0c <_realloc_r+0x5a>
 800aee6:	4621      	mov	r1, r4
 800aee8:	4640      	mov	r0, r8
 800aeea:	f7fd fe1b 	bl	8008b24 <_malloc_r>
 800aeee:	4605      	mov	r5, r0
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d0ed      	beq.n	800aed0 <_realloc_r+0x1e>
 800aef4:	42bc      	cmp	r4, r7
 800aef6:	4622      	mov	r2, r4
 800aef8:	4631      	mov	r1, r6
 800aefa:	bf28      	it	cs
 800aefc:	463a      	movcs	r2, r7
 800aefe:	f7ff fc23 	bl	800a748 <memcpy>
 800af02:	4631      	mov	r1, r6
 800af04:	4640      	mov	r0, r8
 800af06:	f7fd fd99 	bl	8008a3c <_free_r>
 800af0a:	e7e1      	b.n	800aed0 <_realloc_r+0x1e>
 800af0c:	4635      	mov	r5, r6
 800af0e:	e7df      	b.n	800aed0 <_realloc_r+0x1e>

0800af10 <__ascii_wctomb>:
 800af10:	b149      	cbz	r1, 800af26 <__ascii_wctomb+0x16>
 800af12:	2aff      	cmp	r2, #255	; 0xff
 800af14:	bf85      	ittet	hi
 800af16:	238a      	movhi	r3, #138	; 0x8a
 800af18:	6003      	strhi	r3, [r0, #0]
 800af1a:	700a      	strbls	r2, [r1, #0]
 800af1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800af20:	bf98      	it	ls
 800af22:	2001      	movls	r0, #1
 800af24:	4770      	bx	lr
 800af26:	4608      	mov	r0, r1
 800af28:	4770      	bx	lr
	...

0800af2c <fiprintf>:
 800af2c:	b40e      	push	{r1, r2, r3}
 800af2e:	b503      	push	{r0, r1, lr}
 800af30:	4601      	mov	r1, r0
 800af32:	ab03      	add	r3, sp, #12
 800af34:	4805      	ldr	r0, [pc, #20]	; (800af4c <fiprintf+0x20>)
 800af36:	f853 2b04 	ldr.w	r2, [r3], #4
 800af3a:	6800      	ldr	r0, [r0, #0]
 800af3c:	9301      	str	r3, [sp, #4]
 800af3e:	f000 f83f 	bl	800afc0 <_vfiprintf_r>
 800af42:	b002      	add	sp, #8
 800af44:	f85d eb04 	ldr.w	lr, [sp], #4
 800af48:	b003      	add	sp, #12
 800af4a:	4770      	bx	lr
 800af4c:	2000006c 	.word	0x2000006c

0800af50 <abort>:
 800af50:	b508      	push	{r3, lr}
 800af52:	2006      	movs	r0, #6
 800af54:	f000 fa0c 	bl	800b370 <raise>
 800af58:	2001      	movs	r0, #1
 800af5a:	f7f7 f889 	bl	8002070 <_exit>

0800af5e <_malloc_usable_size_r>:
 800af5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af62:	1f18      	subs	r0, r3, #4
 800af64:	2b00      	cmp	r3, #0
 800af66:	bfbc      	itt	lt
 800af68:	580b      	ldrlt	r3, [r1, r0]
 800af6a:	18c0      	addlt	r0, r0, r3
 800af6c:	4770      	bx	lr

0800af6e <__sfputc_r>:
 800af6e:	6893      	ldr	r3, [r2, #8]
 800af70:	3b01      	subs	r3, #1
 800af72:	2b00      	cmp	r3, #0
 800af74:	b410      	push	{r4}
 800af76:	6093      	str	r3, [r2, #8]
 800af78:	da08      	bge.n	800af8c <__sfputc_r+0x1e>
 800af7a:	6994      	ldr	r4, [r2, #24]
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	db01      	blt.n	800af84 <__sfputc_r+0x16>
 800af80:	290a      	cmp	r1, #10
 800af82:	d103      	bne.n	800af8c <__sfputc_r+0x1e>
 800af84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af88:	f000 b934 	b.w	800b1f4 <__swbuf_r>
 800af8c:	6813      	ldr	r3, [r2, #0]
 800af8e:	1c58      	adds	r0, r3, #1
 800af90:	6010      	str	r0, [r2, #0]
 800af92:	7019      	strb	r1, [r3, #0]
 800af94:	4608      	mov	r0, r1
 800af96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <__sfputs_r>:
 800af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9e:	4606      	mov	r6, r0
 800afa0:	460f      	mov	r7, r1
 800afa2:	4614      	mov	r4, r2
 800afa4:	18d5      	adds	r5, r2, r3
 800afa6:	42ac      	cmp	r4, r5
 800afa8:	d101      	bne.n	800afae <__sfputs_r+0x12>
 800afaa:	2000      	movs	r0, #0
 800afac:	e007      	b.n	800afbe <__sfputs_r+0x22>
 800afae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb2:	463a      	mov	r2, r7
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7ff ffda 	bl	800af6e <__sfputc_r>
 800afba:	1c43      	adds	r3, r0, #1
 800afbc:	d1f3      	bne.n	800afa6 <__sfputs_r+0xa>
 800afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afc0 <_vfiprintf_r>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	460d      	mov	r5, r1
 800afc6:	b09d      	sub	sp, #116	; 0x74
 800afc8:	4614      	mov	r4, r2
 800afca:	4698      	mov	r8, r3
 800afcc:	4606      	mov	r6, r0
 800afce:	b118      	cbz	r0, 800afd8 <_vfiprintf_r+0x18>
 800afd0:	6a03      	ldr	r3, [r0, #32]
 800afd2:	b90b      	cbnz	r3, 800afd8 <_vfiprintf_r+0x18>
 800afd4:	f7fc fd96 	bl	8007b04 <__sinit>
 800afd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afda:	07d9      	lsls	r1, r3, #31
 800afdc:	d405      	bmi.n	800afea <_vfiprintf_r+0x2a>
 800afde:	89ab      	ldrh	r3, [r5, #12]
 800afe0:	059a      	lsls	r2, r3, #22
 800afe2:	d402      	bmi.n	800afea <_vfiprintf_r+0x2a>
 800afe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afe6:	f7fc fea4 	bl	8007d32 <__retarget_lock_acquire_recursive>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	071b      	lsls	r3, r3, #28
 800afee:	d501      	bpl.n	800aff4 <_vfiprintf_r+0x34>
 800aff0:	692b      	ldr	r3, [r5, #16]
 800aff2:	b99b      	cbnz	r3, 800b01c <_vfiprintf_r+0x5c>
 800aff4:	4629      	mov	r1, r5
 800aff6:	4630      	mov	r0, r6
 800aff8:	f000 f93a 	bl	800b270 <__swsetup_r>
 800affc:	b170      	cbz	r0, 800b01c <_vfiprintf_r+0x5c>
 800affe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b000:	07dc      	lsls	r4, r3, #31
 800b002:	d504      	bpl.n	800b00e <_vfiprintf_r+0x4e>
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	b01d      	add	sp, #116	; 0x74
 800b00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00e:	89ab      	ldrh	r3, [r5, #12]
 800b010:	0598      	lsls	r0, r3, #22
 800b012:	d4f7      	bmi.n	800b004 <_vfiprintf_r+0x44>
 800b014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b016:	f7fc fe8d 	bl	8007d34 <__retarget_lock_release_recursive>
 800b01a:	e7f3      	b.n	800b004 <_vfiprintf_r+0x44>
 800b01c:	2300      	movs	r3, #0
 800b01e:	9309      	str	r3, [sp, #36]	; 0x24
 800b020:	2320      	movs	r3, #32
 800b022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b026:	f8cd 800c 	str.w	r8, [sp, #12]
 800b02a:	2330      	movs	r3, #48	; 0x30
 800b02c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b1e0 <_vfiprintf_r+0x220>
 800b030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b034:	f04f 0901 	mov.w	r9, #1
 800b038:	4623      	mov	r3, r4
 800b03a:	469a      	mov	sl, r3
 800b03c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b040:	b10a      	cbz	r2, 800b046 <_vfiprintf_r+0x86>
 800b042:	2a25      	cmp	r2, #37	; 0x25
 800b044:	d1f9      	bne.n	800b03a <_vfiprintf_r+0x7a>
 800b046:	ebba 0b04 	subs.w	fp, sl, r4
 800b04a:	d00b      	beq.n	800b064 <_vfiprintf_r+0xa4>
 800b04c:	465b      	mov	r3, fp
 800b04e:	4622      	mov	r2, r4
 800b050:	4629      	mov	r1, r5
 800b052:	4630      	mov	r0, r6
 800b054:	f7ff ffa2 	bl	800af9c <__sfputs_r>
 800b058:	3001      	adds	r0, #1
 800b05a:	f000 80a9 	beq.w	800b1b0 <_vfiprintf_r+0x1f0>
 800b05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b060:	445a      	add	r2, fp
 800b062:	9209      	str	r2, [sp, #36]	; 0x24
 800b064:	f89a 3000 	ldrb.w	r3, [sl]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 80a1 	beq.w	800b1b0 <_vfiprintf_r+0x1f0>
 800b06e:	2300      	movs	r3, #0
 800b070:	f04f 32ff 	mov.w	r2, #4294967295
 800b074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b078:	f10a 0a01 	add.w	sl, sl, #1
 800b07c:	9304      	str	r3, [sp, #16]
 800b07e:	9307      	str	r3, [sp, #28]
 800b080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b084:	931a      	str	r3, [sp, #104]	; 0x68
 800b086:	4654      	mov	r4, sl
 800b088:	2205      	movs	r2, #5
 800b08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b08e:	4854      	ldr	r0, [pc, #336]	; (800b1e0 <_vfiprintf_r+0x220>)
 800b090:	f7f5 f8be 	bl	8000210 <memchr>
 800b094:	9a04      	ldr	r2, [sp, #16]
 800b096:	b9d8      	cbnz	r0, 800b0d0 <_vfiprintf_r+0x110>
 800b098:	06d1      	lsls	r1, r2, #27
 800b09a:	bf44      	itt	mi
 800b09c:	2320      	movmi	r3, #32
 800b09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0a2:	0713      	lsls	r3, r2, #28
 800b0a4:	bf44      	itt	mi
 800b0a6:	232b      	movmi	r3, #43	; 0x2b
 800b0a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b0b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0b2:	d015      	beq.n	800b0e0 <_vfiprintf_r+0x120>
 800b0b4:	9a07      	ldr	r2, [sp, #28]
 800b0b6:	4654      	mov	r4, sl
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	f04f 0c0a 	mov.w	ip, #10
 800b0be:	4621      	mov	r1, r4
 800b0c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0c4:	3b30      	subs	r3, #48	; 0x30
 800b0c6:	2b09      	cmp	r3, #9
 800b0c8:	d94d      	bls.n	800b166 <_vfiprintf_r+0x1a6>
 800b0ca:	b1b0      	cbz	r0, 800b0fa <_vfiprintf_r+0x13a>
 800b0cc:	9207      	str	r2, [sp, #28]
 800b0ce:	e014      	b.n	800b0fa <_vfiprintf_r+0x13a>
 800b0d0:	eba0 0308 	sub.w	r3, r0, r8
 800b0d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	9304      	str	r3, [sp, #16]
 800b0dc:	46a2      	mov	sl, r4
 800b0de:	e7d2      	b.n	800b086 <_vfiprintf_r+0xc6>
 800b0e0:	9b03      	ldr	r3, [sp, #12]
 800b0e2:	1d19      	adds	r1, r3, #4
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	9103      	str	r1, [sp, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	bfbb      	ittet	lt
 800b0ec:	425b      	neglt	r3, r3
 800b0ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b0f2:	9307      	strge	r3, [sp, #28]
 800b0f4:	9307      	strlt	r3, [sp, #28]
 800b0f6:	bfb8      	it	lt
 800b0f8:	9204      	strlt	r2, [sp, #16]
 800b0fa:	7823      	ldrb	r3, [r4, #0]
 800b0fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b0fe:	d10c      	bne.n	800b11a <_vfiprintf_r+0x15a>
 800b100:	7863      	ldrb	r3, [r4, #1]
 800b102:	2b2a      	cmp	r3, #42	; 0x2a
 800b104:	d134      	bne.n	800b170 <_vfiprintf_r+0x1b0>
 800b106:	9b03      	ldr	r3, [sp, #12]
 800b108:	1d1a      	adds	r2, r3, #4
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	9203      	str	r2, [sp, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	bfb8      	it	lt
 800b112:	f04f 33ff 	movlt.w	r3, #4294967295
 800b116:	3402      	adds	r4, #2
 800b118:	9305      	str	r3, [sp, #20]
 800b11a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b1f0 <_vfiprintf_r+0x230>
 800b11e:	7821      	ldrb	r1, [r4, #0]
 800b120:	2203      	movs	r2, #3
 800b122:	4650      	mov	r0, sl
 800b124:	f7f5 f874 	bl	8000210 <memchr>
 800b128:	b138      	cbz	r0, 800b13a <_vfiprintf_r+0x17a>
 800b12a:	9b04      	ldr	r3, [sp, #16]
 800b12c:	eba0 000a 	sub.w	r0, r0, sl
 800b130:	2240      	movs	r2, #64	; 0x40
 800b132:	4082      	lsls	r2, r0
 800b134:	4313      	orrs	r3, r2
 800b136:	3401      	adds	r4, #1
 800b138:	9304      	str	r3, [sp, #16]
 800b13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b13e:	4829      	ldr	r0, [pc, #164]	; (800b1e4 <_vfiprintf_r+0x224>)
 800b140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b144:	2206      	movs	r2, #6
 800b146:	f7f5 f863 	bl	8000210 <memchr>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d03f      	beq.n	800b1ce <_vfiprintf_r+0x20e>
 800b14e:	4b26      	ldr	r3, [pc, #152]	; (800b1e8 <_vfiprintf_r+0x228>)
 800b150:	bb1b      	cbnz	r3, 800b19a <_vfiprintf_r+0x1da>
 800b152:	9b03      	ldr	r3, [sp, #12]
 800b154:	3307      	adds	r3, #7
 800b156:	f023 0307 	bic.w	r3, r3, #7
 800b15a:	3308      	adds	r3, #8
 800b15c:	9303      	str	r3, [sp, #12]
 800b15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b160:	443b      	add	r3, r7
 800b162:	9309      	str	r3, [sp, #36]	; 0x24
 800b164:	e768      	b.n	800b038 <_vfiprintf_r+0x78>
 800b166:	fb0c 3202 	mla	r2, ip, r2, r3
 800b16a:	460c      	mov	r4, r1
 800b16c:	2001      	movs	r0, #1
 800b16e:	e7a6      	b.n	800b0be <_vfiprintf_r+0xfe>
 800b170:	2300      	movs	r3, #0
 800b172:	3401      	adds	r4, #1
 800b174:	9305      	str	r3, [sp, #20]
 800b176:	4619      	mov	r1, r3
 800b178:	f04f 0c0a 	mov.w	ip, #10
 800b17c:	4620      	mov	r0, r4
 800b17e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b182:	3a30      	subs	r2, #48	; 0x30
 800b184:	2a09      	cmp	r2, #9
 800b186:	d903      	bls.n	800b190 <_vfiprintf_r+0x1d0>
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d0c6      	beq.n	800b11a <_vfiprintf_r+0x15a>
 800b18c:	9105      	str	r1, [sp, #20]
 800b18e:	e7c4      	b.n	800b11a <_vfiprintf_r+0x15a>
 800b190:	fb0c 2101 	mla	r1, ip, r1, r2
 800b194:	4604      	mov	r4, r0
 800b196:	2301      	movs	r3, #1
 800b198:	e7f0      	b.n	800b17c <_vfiprintf_r+0x1bc>
 800b19a:	ab03      	add	r3, sp, #12
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	462a      	mov	r2, r5
 800b1a0:	4b12      	ldr	r3, [pc, #72]	; (800b1ec <_vfiprintf_r+0x22c>)
 800b1a2:	a904      	add	r1, sp, #16
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f7fb fe4b 	bl	8006e40 <_printf_float>
 800b1aa:	4607      	mov	r7, r0
 800b1ac:	1c78      	adds	r0, r7, #1
 800b1ae:	d1d6      	bne.n	800b15e <_vfiprintf_r+0x19e>
 800b1b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1b2:	07d9      	lsls	r1, r3, #31
 800b1b4:	d405      	bmi.n	800b1c2 <_vfiprintf_r+0x202>
 800b1b6:	89ab      	ldrh	r3, [r5, #12]
 800b1b8:	059a      	lsls	r2, r3, #22
 800b1ba:	d402      	bmi.n	800b1c2 <_vfiprintf_r+0x202>
 800b1bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1be:	f7fc fdb9 	bl	8007d34 <__retarget_lock_release_recursive>
 800b1c2:	89ab      	ldrh	r3, [r5, #12]
 800b1c4:	065b      	lsls	r3, r3, #25
 800b1c6:	f53f af1d 	bmi.w	800b004 <_vfiprintf_r+0x44>
 800b1ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1cc:	e71c      	b.n	800b008 <_vfiprintf_r+0x48>
 800b1ce:	ab03      	add	r3, sp, #12
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	462a      	mov	r2, r5
 800b1d4:	4b05      	ldr	r3, [pc, #20]	; (800b1ec <_vfiprintf_r+0x22c>)
 800b1d6:	a904      	add	r1, sp, #16
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7fc f8d5 	bl	8007388 <_printf_i>
 800b1de:	e7e4      	b.n	800b1aa <_vfiprintf_r+0x1ea>
 800b1e0:	0800b8d9 	.word	0x0800b8d9
 800b1e4:	0800b8e3 	.word	0x0800b8e3
 800b1e8:	08006e41 	.word	0x08006e41
 800b1ec:	0800af9d 	.word	0x0800af9d
 800b1f0:	0800b8df 	.word	0x0800b8df

0800b1f4 <__swbuf_r>:
 800b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f6:	460e      	mov	r6, r1
 800b1f8:	4614      	mov	r4, r2
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	b118      	cbz	r0, 800b206 <__swbuf_r+0x12>
 800b1fe:	6a03      	ldr	r3, [r0, #32]
 800b200:	b90b      	cbnz	r3, 800b206 <__swbuf_r+0x12>
 800b202:	f7fc fc7f 	bl	8007b04 <__sinit>
 800b206:	69a3      	ldr	r3, [r4, #24]
 800b208:	60a3      	str	r3, [r4, #8]
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	071a      	lsls	r2, r3, #28
 800b20e:	d525      	bpl.n	800b25c <__swbuf_r+0x68>
 800b210:	6923      	ldr	r3, [r4, #16]
 800b212:	b31b      	cbz	r3, 800b25c <__swbuf_r+0x68>
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	6922      	ldr	r2, [r4, #16]
 800b218:	1a98      	subs	r0, r3, r2
 800b21a:	6963      	ldr	r3, [r4, #20]
 800b21c:	b2f6      	uxtb	r6, r6
 800b21e:	4283      	cmp	r3, r0
 800b220:	4637      	mov	r7, r6
 800b222:	dc04      	bgt.n	800b22e <__swbuf_r+0x3a>
 800b224:	4621      	mov	r1, r4
 800b226:	4628      	mov	r0, r5
 800b228:	f7ff fa2a 	bl	800a680 <_fflush_r>
 800b22c:	b9e0      	cbnz	r0, 800b268 <__swbuf_r+0x74>
 800b22e:	68a3      	ldr	r3, [r4, #8]
 800b230:	3b01      	subs	r3, #1
 800b232:	60a3      	str	r3, [r4, #8]
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	6022      	str	r2, [r4, #0]
 800b23a:	701e      	strb	r6, [r3, #0]
 800b23c:	6962      	ldr	r2, [r4, #20]
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	429a      	cmp	r2, r3
 800b242:	d004      	beq.n	800b24e <__swbuf_r+0x5a>
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	07db      	lsls	r3, r3, #31
 800b248:	d506      	bpl.n	800b258 <__swbuf_r+0x64>
 800b24a:	2e0a      	cmp	r6, #10
 800b24c:	d104      	bne.n	800b258 <__swbuf_r+0x64>
 800b24e:	4621      	mov	r1, r4
 800b250:	4628      	mov	r0, r5
 800b252:	f7ff fa15 	bl	800a680 <_fflush_r>
 800b256:	b938      	cbnz	r0, 800b268 <__swbuf_r+0x74>
 800b258:	4638      	mov	r0, r7
 800b25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b25c:	4621      	mov	r1, r4
 800b25e:	4628      	mov	r0, r5
 800b260:	f000 f806 	bl	800b270 <__swsetup_r>
 800b264:	2800      	cmp	r0, #0
 800b266:	d0d5      	beq.n	800b214 <__swbuf_r+0x20>
 800b268:	f04f 37ff 	mov.w	r7, #4294967295
 800b26c:	e7f4      	b.n	800b258 <__swbuf_r+0x64>
	...

0800b270 <__swsetup_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4b2a      	ldr	r3, [pc, #168]	; (800b31c <__swsetup_r+0xac>)
 800b274:	4605      	mov	r5, r0
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	460c      	mov	r4, r1
 800b27a:	b118      	cbz	r0, 800b284 <__swsetup_r+0x14>
 800b27c:	6a03      	ldr	r3, [r0, #32]
 800b27e:	b90b      	cbnz	r3, 800b284 <__swsetup_r+0x14>
 800b280:	f7fc fc40 	bl	8007b04 <__sinit>
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b28a:	0718      	lsls	r0, r3, #28
 800b28c:	d422      	bmi.n	800b2d4 <__swsetup_r+0x64>
 800b28e:	06d9      	lsls	r1, r3, #27
 800b290:	d407      	bmi.n	800b2a2 <__swsetup_r+0x32>
 800b292:	2309      	movs	r3, #9
 800b294:	602b      	str	r3, [r5, #0]
 800b296:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b29a:	81a3      	strh	r3, [r4, #12]
 800b29c:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a0:	e034      	b.n	800b30c <__swsetup_r+0x9c>
 800b2a2:	0758      	lsls	r0, r3, #29
 800b2a4:	d512      	bpl.n	800b2cc <__swsetup_r+0x5c>
 800b2a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2a8:	b141      	cbz	r1, 800b2bc <__swsetup_r+0x4c>
 800b2aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2ae:	4299      	cmp	r1, r3
 800b2b0:	d002      	beq.n	800b2b8 <__swsetup_r+0x48>
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f7fd fbc2 	bl	8008a3c <_free_r>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	6363      	str	r3, [r4, #52]	; 0x34
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2c2:	81a3      	strh	r3, [r4, #12]
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	6063      	str	r3, [r4, #4]
 800b2c8:	6923      	ldr	r3, [r4, #16]
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	89a3      	ldrh	r3, [r4, #12]
 800b2ce:	f043 0308 	orr.w	r3, r3, #8
 800b2d2:	81a3      	strh	r3, [r4, #12]
 800b2d4:	6923      	ldr	r3, [r4, #16]
 800b2d6:	b94b      	cbnz	r3, 800b2ec <__swsetup_r+0x7c>
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2e2:	d003      	beq.n	800b2ec <__swsetup_r+0x7c>
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f000 f884 	bl	800b3f4 <__smakebuf_r>
 800b2ec:	89a0      	ldrh	r0, [r4, #12]
 800b2ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2f2:	f010 0301 	ands.w	r3, r0, #1
 800b2f6:	d00a      	beq.n	800b30e <__swsetup_r+0x9e>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60a3      	str	r3, [r4, #8]
 800b2fc:	6963      	ldr	r3, [r4, #20]
 800b2fe:	425b      	negs	r3, r3
 800b300:	61a3      	str	r3, [r4, #24]
 800b302:	6923      	ldr	r3, [r4, #16]
 800b304:	b943      	cbnz	r3, 800b318 <__swsetup_r+0xa8>
 800b306:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b30a:	d1c4      	bne.n	800b296 <__swsetup_r+0x26>
 800b30c:	bd38      	pop	{r3, r4, r5, pc}
 800b30e:	0781      	lsls	r1, r0, #30
 800b310:	bf58      	it	pl
 800b312:	6963      	ldrpl	r3, [r4, #20]
 800b314:	60a3      	str	r3, [r4, #8]
 800b316:	e7f4      	b.n	800b302 <__swsetup_r+0x92>
 800b318:	2000      	movs	r0, #0
 800b31a:	e7f7      	b.n	800b30c <__swsetup_r+0x9c>
 800b31c:	2000006c 	.word	0x2000006c

0800b320 <_raise_r>:
 800b320:	291f      	cmp	r1, #31
 800b322:	b538      	push	{r3, r4, r5, lr}
 800b324:	4604      	mov	r4, r0
 800b326:	460d      	mov	r5, r1
 800b328:	d904      	bls.n	800b334 <_raise_r+0x14>
 800b32a:	2316      	movs	r3, #22
 800b32c:	6003      	str	r3, [r0, #0]
 800b32e:	f04f 30ff 	mov.w	r0, #4294967295
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b336:	b112      	cbz	r2, 800b33e <_raise_r+0x1e>
 800b338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b33c:	b94b      	cbnz	r3, 800b352 <_raise_r+0x32>
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 f830 	bl	800b3a4 <_getpid_r>
 800b344:	462a      	mov	r2, r5
 800b346:	4601      	mov	r1, r0
 800b348:	4620      	mov	r0, r4
 800b34a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b34e:	f000 b817 	b.w	800b380 <_kill_r>
 800b352:	2b01      	cmp	r3, #1
 800b354:	d00a      	beq.n	800b36c <_raise_r+0x4c>
 800b356:	1c59      	adds	r1, r3, #1
 800b358:	d103      	bne.n	800b362 <_raise_r+0x42>
 800b35a:	2316      	movs	r3, #22
 800b35c:	6003      	str	r3, [r0, #0]
 800b35e:	2001      	movs	r0, #1
 800b360:	e7e7      	b.n	800b332 <_raise_r+0x12>
 800b362:	2400      	movs	r4, #0
 800b364:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b368:	4628      	mov	r0, r5
 800b36a:	4798      	blx	r3
 800b36c:	2000      	movs	r0, #0
 800b36e:	e7e0      	b.n	800b332 <_raise_r+0x12>

0800b370 <raise>:
 800b370:	4b02      	ldr	r3, [pc, #8]	; (800b37c <raise+0xc>)
 800b372:	4601      	mov	r1, r0
 800b374:	6818      	ldr	r0, [r3, #0]
 800b376:	f7ff bfd3 	b.w	800b320 <_raise_r>
 800b37a:	bf00      	nop
 800b37c:	2000006c 	.word	0x2000006c

0800b380 <_kill_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4d07      	ldr	r5, [pc, #28]	; (800b3a0 <_kill_r+0x20>)
 800b384:	2300      	movs	r3, #0
 800b386:	4604      	mov	r4, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	4611      	mov	r1, r2
 800b38c:	602b      	str	r3, [r5, #0]
 800b38e:	f7f6 fe5f 	bl	8002050 <_kill>
 800b392:	1c43      	adds	r3, r0, #1
 800b394:	d102      	bne.n	800b39c <_kill_r+0x1c>
 800b396:	682b      	ldr	r3, [r5, #0]
 800b398:	b103      	cbz	r3, 800b39c <_kill_r+0x1c>
 800b39a:	6023      	str	r3, [r4, #0]
 800b39c:	bd38      	pop	{r3, r4, r5, pc}
 800b39e:	bf00      	nop
 800b3a0:	20000c78 	.word	0x20000c78

0800b3a4 <_getpid_r>:
 800b3a4:	f7f6 be4c 	b.w	8002040 <_getpid>

0800b3a8 <__swhatbuf_r>:
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b0:	2900      	cmp	r1, #0
 800b3b2:	b096      	sub	sp, #88	; 0x58
 800b3b4:	4615      	mov	r5, r2
 800b3b6:	461e      	mov	r6, r3
 800b3b8:	da0d      	bge.n	800b3d6 <__swhatbuf_r+0x2e>
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b3c0:	f04f 0100 	mov.w	r1, #0
 800b3c4:	bf0c      	ite	eq
 800b3c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b3ca:	2340      	movne	r3, #64	; 0x40
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	6031      	str	r1, [r6, #0]
 800b3d0:	602b      	str	r3, [r5, #0]
 800b3d2:	b016      	add	sp, #88	; 0x58
 800b3d4:	bd70      	pop	{r4, r5, r6, pc}
 800b3d6:	466a      	mov	r2, sp
 800b3d8:	f000 f848 	bl	800b46c <_fstat_r>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	dbec      	blt.n	800b3ba <__swhatbuf_r+0x12>
 800b3e0:	9901      	ldr	r1, [sp, #4]
 800b3e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b3e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b3ea:	4259      	negs	r1, r3
 800b3ec:	4159      	adcs	r1, r3
 800b3ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3f2:	e7eb      	b.n	800b3cc <__swhatbuf_r+0x24>

0800b3f4 <__smakebuf_r>:
 800b3f4:	898b      	ldrh	r3, [r1, #12]
 800b3f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3f8:	079d      	lsls	r5, r3, #30
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	d507      	bpl.n	800b410 <__smakebuf_r+0x1c>
 800b400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	6123      	str	r3, [r4, #16]
 800b408:	2301      	movs	r3, #1
 800b40a:	6163      	str	r3, [r4, #20]
 800b40c:	b002      	add	sp, #8
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	ab01      	add	r3, sp, #4
 800b412:	466a      	mov	r2, sp
 800b414:	f7ff ffc8 	bl	800b3a8 <__swhatbuf_r>
 800b418:	9900      	ldr	r1, [sp, #0]
 800b41a:	4605      	mov	r5, r0
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7fd fb81 	bl	8008b24 <_malloc_r>
 800b422:	b948      	cbnz	r0, 800b438 <__smakebuf_r+0x44>
 800b424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b428:	059a      	lsls	r2, r3, #22
 800b42a:	d4ef      	bmi.n	800b40c <__smakebuf_r+0x18>
 800b42c:	f023 0303 	bic.w	r3, r3, #3
 800b430:	f043 0302 	orr.w	r3, r3, #2
 800b434:	81a3      	strh	r3, [r4, #12]
 800b436:	e7e3      	b.n	800b400 <__smakebuf_r+0xc>
 800b438:	89a3      	ldrh	r3, [r4, #12]
 800b43a:	6020      	str	r0, [r4, #0]
 800b43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b440:	81a3      	strh	r3, [r4, #12]
 800b442:	9b00      	ldr	r3, [sp, #0]
 800b444:	6163      	str	r3, [r4, #20]
 800b446:	9b01      	ldr	r3, [sp, #4]
 800b448:	6120      	str	r0, [r4, #16]
 800b44a:	b15b      	cbz	r3, 800b464 <__smakebuf_r+0x70>
 800b44c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b450:	4630      	mov	r0, r6
 800b452:	f000 f81d 	bl	800b490 <_isatty_r>
 800b456:	b128      	cbz	r0, 800b464 <__smakebuf_r+0x70>
 800b458:	89a3      	ldrh	r3, [r4, #12]
 800b45a:	f023 0303 	bic.w	r3, r3, #3
 800b45e:	f043 0301 	orr.w	r3, r3, #1
 800b462:	81a3      	strh	r3, [r4, #12]
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	431d      	orrs	r5, r3
 800b468:	81a5      	strh	r5, [r4, #12]
 800b46a:	e7cf      	b.n	800b40c <__smakebuf_r+0x18>

0800b46c <_fstat_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4d07      	ldr	r5, [pc, #28]	; (800b48c <_fstat_r+0x20>)
 800b470:	2300      	movs	r3, #0
 800b472:	4604      	mov	r4, r0
 800b474:	4608      	mov	r0, r1
 800b476:	4611      	mov	r1, r2
 800b478:	602b      	str	r3, [r5, #0]
 800b47a:	f7f6 fe48 	bl	800210e <_fstat>
 800b47e:	1c43      	adds	r3, r0, #1
 800b480:	d102      	bne.n	800b488 <_fstat_r+0x1c>
 800b482:	682b      	ldr	r3, [r5, #0]
 800b484:	b103      	cbz	r3, 800b488 <_fstat_r+0x1c>
 800b486:	6023      	str	r3, [r4, #0]
 800b488:	bd38      	pop	{r3, r4, r5, pc}
 800b48a:	bf00      	nop
 800b48c:	20000c78 	.word	0x20000c78

0800b490 <_isatty_r>:
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4d06      	ldr	r5, [pc, #24]	; (800b4ac <_isatty_r+0x1c>)
 800b494:	2300      	movs	r3, #0
 800b496:	4604      	mov	r4, r0
 800b498:	4608      	mov	r0, r1
 800b49a:	602b      	str	r3, [r5, #0]
 800b49c:	f7f6 fe47 	bl	800212e <_isatty>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_isatty_r+0x1a>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_isatty_r+0x1a>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	20000c78 	.word	0x20000c78

0800b4b0 <_init>:
 800b4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b2:	bf00      	nop
 800b4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4b6:	bc08      	pop	{r3}
 800b4b8:	469e      	mov	lr, r3
 800b4ba:	4770      	bx	lr

0800b4bc <_fini>:
 800b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4be:	bf00      	nop
 800b4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c2:	bc08      	pop	{r3}
 800b4c4:	469e      	mov	lr, r3
 800b4c6:	4770      	bx	lr
