
RTC_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800b758  0800b758  0001b758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc30  0800bc30  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc30  0800bc30  0001bc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc38  0800bc38  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc38  0800bc38  0001bc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc3c  0800bc3c  0001bc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bc40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000a7c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c58  20000c58  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001bda7  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041ca  00000000  00000000  0003bff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018d0  00000000  00000000  000401c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000134a  00000000  00000000  00041a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aa41  00000000  00000000  00042dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021c13  00000000  00000000  0006d81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb12c  00000000  00000000  0008f42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007dd8  00000000  00000000  0018a55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00192334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b740 	.word	0x0800b740

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800b740 	.word	0x0800b740

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <MX_ADC1_Init+0x9c>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_ADC1_Init+0x98>)
 800104a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_ADC1_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001072:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <MX_ADC1_Init+0xa0>)
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_ADC1_Init+0x98>)
 800107e:	2201      	movs	r2, #1
 8001080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_ADC1_Init+0x98>)
 800108c:	2201      	movs	r2, #1
 800108e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_ADC1_Init+0x98>)
 8001092:	f001 fc09 	bl	80028a8 <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800109c:	f001 f822 	bl	80020e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_ADC1_Init+0xa4>)
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_ADC1_Init+0x98>)
 80010b2:	f001 fc3d 	bl	8002930 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010bc:	f001 f812 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200001f8 	.word	0x200001f8
 80010cc:	40012000 	.word	0x40012000
 80010d0:	0f000001 	.word	0x0f000001
 80010d4:	10000012 	.word	0x10000012

080010d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_ADC_MspInit+0x3c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10d      	bne.n	8001106 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_ADC_MspInit+0x40>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_ADC_MspInit+0x40>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <HAL_ADC_MspInit+0x40>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40012000 	.word	0x40012000
 8001118:	40023800 	.word	0x40023800

0800111c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_DAC_Init+0x4c>)
 800112c:	4a0f      	ldr	r2, [pc, #60]	; (800116c <MX_DAC_Init+0x50>)
 800112e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_DAC_Init+0x4c>)
 8001132:	f001 ff3c 	bl	8002fae <HAL_DAC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800113c:	f000 ffd2 	bl	80020e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_DAC_Init+0x4c>)
 8001150:	f001 ff4f 	bl	8002ff2 <HAL_DAC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800115a:	f000 ffc3 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000240 	.word	0x20000240
 800116c:	40007400 	.word	0x40007400

08001170 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_DAC_MspInit+0x7c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d127      	bne.n	80011e2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 800119c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011ca:	2310      	movs	r3, #16
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ce:	2303      	movs	r3, #3
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_DAC_MspInit+0x84>)
 80011de:	f002 fa7f 	bl	80036e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40007400 	.word	0x40007400
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020000 	.word	0x40020000

080011f8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_ETH_Init+0x84>)
 80011fe:	4a20      	ldr	r2, [pc, #128]	; (8001280 <MX_ETH_Init+0x88>)
 8001200:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <MX_ETH_Init+0x8c>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_ETH_Init+0x8c>)
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_ETH_Init+0x8c>)
 8001210:	22e1      	movs	r2, #225	; 0xe1
 8001212:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_ETH_Init+0x8c>)
 8001216:	2200      	movs	r2, #0
 8001218:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_ETH_Init+0x8c>)
 800121c:	2200      	movs	r2, #0
 800121e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_ETH_Init+0x8c>)
 8001222:	2200      	movs	r2, #0
 8001224:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_ETH_Init+0x84>)
 8001228:	4a16      	ldr	r2, [pc, #88]	; (8001284 <MX_ETH_Init+0x8c>)
 800122a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_ETH_Init+0x84>)
 800122e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001232:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_ETH_Init+0x84>)
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <MX_ETH_Init+0x90>)
 8001238:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_ETH_Init+0x84>)
 800123c:	4a13      	ldr	r2, [pc, #76]	; (800128c <MX_ETH_Init+0x94>)
 800123e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_ETH_Init+0x84>)
 8001242:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001246:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <MX_ETH_Init+0x84>)
 800124a:	f001 ff21 	bl	8003090 <HAL_ETH_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001254:	f000 ff46 	bl	80020e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001258:	2238      	movs	r2, #56	; 0x38
 800125a:	2100      	movs	r1, #0
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <MX_ETH_Init+0x98>)
 800125e:	f006 fe32 	bl	8007ec6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_ETH_Init+0x98>)
 8001264:	2221      	movs	r2, #33	; 0x21
 8001266:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_ETH_Init+0x98>)
 800126a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800126e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MX_ETH_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200003cc 	.word	0x200003cc
 8001280:	40028000 	.word	0x40028000
 8001284:	2000047c 	.word	0x2000047c
 8001288:	200002f4 	.word	0x200002f4
 800128c:	20000254 	.word	0x20000254
 8001290:	20000394 	.word	0x20000394

08001294 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	; 0x38
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a55      	ldr	r2, [pc, #340]	; (8001408 <HAL_ETH_MspInit+0x174>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	f040 80a4 	bne.w	8001400 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a52      	ldr	r2, [pc, #328]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	623b      	str	r3, [r7, #32]
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	4b4c      	ldr	r3, [pc, #304]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b49      	ldr	r3, [pc, #292]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	4a44      	ldr	r2, [pc, #272]	; (800140c <HAL_ETH_MspInit+0x178>)
 80012fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001300:	4b42      	ldr	r3, [pc, #264]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	4b3e      	ldr	r3, [pc, #248]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a3d      	ldr	r2, [pc, #244]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b3b      	ldr	r3, [pc, #236]	; (800140c <HAL_ETH_MspInit+0x178>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_ETH_MspInit+0x178>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a36      	ldr	r2, [pc, #216]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b34      	ldr	r3, [pc, #208]	; (800140c <HAL_ETH_MspInit+0x178>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_ETH_MspInit+0x178>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	4a2f      	ldr	r2, [pc, #188]	; (800140c <HAL_ETH_MspInit+0x178>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	6313      	str	r3, [r2, #48]	; 0x30
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	4a28      	ldr	r2, [pc, #160]	; (800140c <HAL_ETH_MspInit+0x178>)
 800136a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136e:	6313      	str	r3, [r2, #48]	; 0x30
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_ETH_MspInit+0x178>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800137c:	2332      	movs	r3, #50	; 0x32
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800138c:	230b      	movs	r3, #11
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	481e      	ldr	r0, [pc, #120]	; (8001410 <HAL_ETH_MspInit+0x17c>)
 8001398:	f002 f9a2 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800139c:	2386      	movs	r3, #134	; 0x86
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ac:	230b      	movs	r3, #11
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4817      	ldr	r0, [pc, #92]	; (8001414 <HAL_ETH_MspInit+0x180>)
 80013b8:	f002 f992 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ce:	230b      	movs	r3, #11
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	480f      	ldr	r0, [pc, #60]	; (8001418 <HAL_ETH_MspInit+0x184>)
 80013da:	f002 f981 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f0:	230b      	movs	r3, #11
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <HAL_ETH_MspInit+0x188>)
 80013fc:	f002 f970 	bl	80036e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001400:	bf00      	nop
 8001402:	3738      	adds	r7, #56	; 0x38
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40028000 	.word	0x40028000
 800140c:	40023800 	.word	0x40023800
 8001410:	40020800 	.word	0x40020800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40021800 	.word	0x40021800

08001420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	4b62      	ldr	r3, [pc, #392]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a61      	ldr	r2, [pc, #388]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b5f      	ldr	r3, [pc, #380]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a53      	ldr	r2, [pc, #332]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b4d      	ldr	r3, [pc, #308]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a4c      	ldr	r2, [pc, #304]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a45      	ldr	r2, [pc, #276]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a3e      	ldr	r2, [pc, #248]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <MX_GPIO_Init+0x1a4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2108      	movs	r1, #8
 80014e2:	4839      	ldr	r0, [pc, #228]	; (80015c8 <MX_GPIO_Init+0x1a8>)
 80014e4:	f002 fac0 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f244 0181 	movw	r1, #16513	; 0x4081
 80014ee:	4837      	ldr	r0, [pc, #220]	; (80015cc <MX_GPIO_Init+0x1ac>)
 80014f0:	f002 faba 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2140      	movs	r1, #64	; 0x40
 80014f8:	4835      	ldr	r0, [pc, #212]	; (80015d0 <MX_GPIO_Init+0x1b0>)
 80014fa:	f002 fab5 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80014fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001504:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	482f      	ldr	r0, [pc, #188]	; (80015d4 <MX_GPIO_Init+0x1b4>)
 8001516:	f002 f8e3 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800151a:	2308      	movs	r3, #8
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4619      	mov	r1, r3
 8001530:	4825      	ldr	r0, [pc, #148]	; (80015c8 <MX_GPIO_Init+0x1a8>)
 8001532:	f002 f8d5 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001536:	f244 0381 	movw	r3, #16513	; 0x4081
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	481f      	ldr	r0, [pc, #124]	; (80015cc <MX_GPIO_Init+0x1ac>)
 8001550:	f002 f8c6 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001554:	2302      	movs	r3, #2
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001558:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155e:	2301      	movs	r3, #1
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4819      	ldr	r0, [pc, #100]	; (80015d0 <MX_GPIO_Init+0x1b0>)
 800156a:	f002 f8b9 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <MX_GPIO_Init+0x1b0>)
 8001586:	f002 f8ab 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <MX_GPIO_Init+0x1b0>)
 800159e:	f002 f89f 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BTN_down_Pin|BTN_up_Pin|BTN_select_Pin;
 80015a2:	23e0      	movs	r3, #224	; 0xe0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <MX_GPIO_Init+0x1b8>)
 80015b8:	f002 f892 	bl	80036e0 <HAL_GPIO_Init>

}
 80015bc:	bf00      	nop
 80015be:	3730      	adds	r7, #48	; 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40021800 	.word	0x40021800
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00

080015dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_I2C1_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <MX_I2C1_Init+0x7c>)
 80015ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_I2C1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_I2C1_Init+0x74>)
 80015fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_I2C1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_I2C1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2C1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <MX_I2C1_Init+0x74>)
 800161a:	f002 fa57 	bl	8003acc <HAL_I2C_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001624:	f000 fd5e 	bl	80020e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001628:	2100      	movs	r1, #0
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <MX_I2C1_Init+0x74>)
 800162c:	f002 ffc7 	bl	80045be <HAL_I2CEx_ConfigAnalogFilter>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001636:	f000 fd55 	bl	80020e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800163a:	2100      	movs	r1, #0
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_I2C1_Init+0x74>)
 800163e:	f002 fffa 	bl	8004636 <HAL_I2CEx_ConfigDigitalFilter>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001648:	f000 fd4c 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000484 	.word	0x20000484
 8001654:	40005400 	.word	0x40005400
 8001658:	000186a0 	.word	0x000186a0

0800165c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <HAL_I2C_MspInit+0x84>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12c      	bne.n	80016d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800169a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a0:	2312      	movs	r3, #18
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ac:	2304      	movs	r3, #4
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	480c      	ldr	r0, [pc, #48]	; (80016e8 <HAL_I2C_MspInit+0x8c>)
 80016b8:	f002 f812 	bl	80036e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40005400 	.word	0x40005400
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020400 	.word	0x40020400

080016ec <LCD_SendInternal>:
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	460b      	mov	r3, r1
 80016f8:	71bb      	strb	r3, [r7, #6]
 80016fa:	4613      	mov	r3, r2
 80016fc:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	b299      	uxth	r1, r3
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	2201      	movs	r2, #1
 8001708:	4822      	ldr	r0, [pc, #136]	; (8001794 <LCD_SendInternal+0xa8>)
 800170a:	f002 fc21 	bl	8003f50 <HAL_I2C_IsDeviceReady>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d000      	beq.n	800171a <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8001718:	e7f1      	b.n	80016fe <LCD_SendInternal+0x12>
            break;
 800171a:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	f023 030f 	bic.w	r3, r3, #15
 8001722:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 800172a:	7bba      	ldrb	r2, [r7, #14]
 800172c:	797b      	ldrb	r3, [r7, #5]
 800172e:	4313      	orrs	r3, r2
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f043 030c 	orr.w	r3, r3, #12
 8001736:	b2db      	uxtb	r3, r3
 8001738:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 800173a:	7bba      	ldrb	r2, [r7, #14]
 800173c:	797b      	ldrb	r3, [r7, #5]
 800173e:	4313      	orrs	r3, r2
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	b2db      	uxtb	r3, r3
 8001748:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 800174a:	7b7a      	ldrb	r2, [r7, #13]
 800174c:	797b      	ldrb	r3, [r7, #5]
 800174e:	4313      	orrs	r3, r2
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f043 030c 	orr.w	r3, r3, #12
 8001756:	b2db      	uxtb	r3, r3
 8001758:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 800175a:	7b7a      	ldrb	r2, [r7, #13]
 800175c:	797b      	ldrb	r3, [r7, #5]
 800175e:	4313      	orrs	r3, r2
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f043 0308 	orr.w	r3, r3, #8
 8001766:	b2db      	uxtb	r3, r3
 8001768:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	b299      	uxth	r1, r3
 800176e:	f107 0208 	add.w	r2, r7, #8
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2304      	movs	r3, #4
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <LCD_SendInternal+0xa8>)
 800177c:	f002 faea 	bl	8003d54 <HAL_I2C_Master_Transmit>
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8001784:	2005      	movs	r0, #5
 8001786:	f001 f86b 	bl	8002860 <HAL_Delay>
    return res;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000484 	.word	0x20000484

08001798 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 80017a8:	79b9      	ldrb	r1, [r7, #6]
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2200      	movs	r2, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff9c 	bl	80016ec <LCD_SendInternal>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 80017cc:	79b9      	ldrb	r1, [r7, #6]
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2201      	movs	r2, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff8a 	bl	80016ec <LCD_SendInternal>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2130      	movs	r1, #48	; 0x30
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ffd2 	bl	8001798 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2102      	movs	r1, #2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ffcd 	bl	8001798 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	210c      	movs	r1, #12
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ffc8 	bl	8001798 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2101      	movs	r1, #1
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ffc3 	bl	8001798 <LCD_SendCommand>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	6039      	str	r1, [r7, #0]
 8001824:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 8001826:	e009      	b.n	800183c <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ffc3 	bl	80017bc <LCD_SendData>
        str++;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f1      	bne.n	8001828 <LCD_SendString+0xe>
    }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <_write>:
void LCD_Init(uint8_t lcd_addr);
void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd);
void LCD_SendString(uint8_t lcd_addr, char *str);

int _write(int file, char *ptr, int len)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	b29a      	uxth	r2, r3
 8001860:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	4804      	ldr	r0, [pc, #16]	; (8001878 <_write+0x28>)
 8001868:	f004 fd1b 	bl	80062a2 <HAL_UART_Transmit>

	return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200005b8 	.word	0x200005b8

0800187c <get_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001882:	2200      	movs	r2, #0
 8001884:	4943      	ldr	r1, [pc, #268]	; (8001994 <get_time+0x118>)
 8001886:	4844      	ldr	r0, [pc, #272]	; (8001998 <get_time+0x11c>)
 8001888:	f003 ff9a 	bl	80057c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800188c:	2200      	movs	r2, #0
 800188e:	4943      	ldr	r1, [pc, #268]	; (800199c <get_time+0x120>)
 8001890:	4841      	ldr	r0, [pc, #260]	; (8001998 <get_time+0x11c>)
 8001892:	f004 f877 	bl	8005984 <HAL_RTC_GetDate>

	if (strcmp(ampm[sTime.TimeFormat], "AM") == 0 && sTime.Hours == 12)
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <get_time+0x118>)
 8001898:	78db      	ldrb	r3, [r3, #3]
 800189a:	461a      	mov	r2, r3
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	4a3f      	ldr	r2, [pc, #252]	; (80019a0 <get_time+0x124>)
 80018a4:	4413      	add	r3, r2
 80018a6:	493f      	ldr	r1, [pc, #252]	; (80019a4 <get_time+0x128>)
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fca1 	bl	80001f0 <strcmp>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d106      	bne.n	80018c2 <get_time+0x46>
 80018b4:	4b37      	ldr	r3, [pc, #220]	; (8001994 <get_time+0x118>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	d102      	bne.n	80018c2 <get_time+0x46>
	{
		sTime.Hours = 0;
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <get_time+0x118>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
	}

	if (selection == 0)
 80018c2:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <get_time+0x12c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <get_time+0x6e>
		sprintf((char*)showDate, "%04d-%02d-%02d      ", 2000+sDate.Year, sDate.Month, sDate.Date);
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <get_time+0x120>)
 80018cc:	78db      	ldrb	r3, [r3, #3]
 80018ce:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80018d2:	4b32      	ldr	r3, [pc, #200]	; (800199c <get_time+0x120>)
 80018d4:	785b      	ldrb	r3, [r3, #1]
 80018d6:	4619      	mov	r1, r3
 80018d8:	4b30      	ldr	r3, [pc, #192]	; (800199c <get_time+0x120>)
 80018da:	789b      	ldrb	r3, [r3, #2]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	460b      	mov	r3, r1
 80018e0:	4932      	ldr	r1, [pc, #200]	; (80019ac <get_time+0x130>)
 80018e2:	4833      	ldr	r0, [pc, #204]	; (80019b0 <get_time+0x134>)
 80018e4:	f006 fa8c 	bl	8007e00 <siprintf>
 80018e8:	e03a      	b.n	8001960 <get_time+0xe4>
	else if (selection == 1)
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <get_time+0x12c>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10f      	bne.n	8001912 <get_time+0x96>
		sprintf((char*)showDate, "%04d-%02d-%02d[HOUR]", 2000+sDate.Year, sDate.Month, sDate.Date);
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <get_time+0x120>)
 80018f4:	78db      	ldrb	r3, [r3, #3]
 80018f6:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <get_time+0x120>)
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	4619      	mov	r1, r3
 8001900:	4b26      	ldr	r3, [pc, #152]	; (800199c <get_time+0x120>)
 8001902:	789b      	ldrb	r3, [r3, #2]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	460b      	mov	r3, r1
 8001908:	492a      	ldr	r1, [pc, #168]	; (80019b4 <get_time+0x138>)
 800190a:	4829      	ldr	r0, [pc, #164]	; (80019b0 <get_time+0x134>)
 800190c:	f006 fa78 	bl	8007e00 <siprintf>
 8001910:	e026      	b.n	8001960 <get_time+0xe4>
	else if (selection == 2)
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <get_time+0x12c>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d10f      	bne.n	800193a <get_time+0xbe>
	    sprintf((char*)showDate, "%04d-%02d-%02d[MIN] ", 2000+sDate.Year, sDate.Month, sDate.Date);
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <get_time+0x120>)
 800191c:	78db      	ldrb	r3, [r3, #3]
 800191e:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <get_time+0x120>)
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	4619      	mov	r1, r3
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <get_time+0x120>)
 800192a:	789b      	ldrb	r3, [r3, #2]
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	460b      	mov	r3, r1
 8001930:	4921      	ldr	r1, [pc, #132]	; (80019b8 <get_time+0x13c>)
 8001932:	481f      	ldr	r0, [pc, #124]	; (80019b0 <get_time+0x134>)
 8001934:	f006 fa64 	bl	8007e00 <siprintf>
 8001938:	e012      	b.n	8001960 <get_time+0xe4>
	else if (selection == 3)
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <get_time+0x12c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d10e      	bne.n	8001960 <get_time+0xe4>
	    sprintf((char*)showDate, "%04d-%02d-%02d[SEC] ", 2000+sDate.Year, sDate.Month, sDate.Date);
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <get_time+0x120>)
 8001944:	78db      	ldrb	r3, [r3, #3]
 8001946:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <get_time+0x120>)
 800194c:	785b      	ldrb	r3, [r3, #1]
 800194e:	4619      	mov	r1, r3
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <get_time+0x120>)
 8001952:	789b      	ldrb	r3, [r3, #2]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	460b      	mov	r3, r1
 8001958:	4918      	ldr	r1, [pc, #96]	; (80019bc <get_time+0x140>)
 800195a:	4815      	ldr	r0, [pc, #84]	; (80019b0 <get_time+0x134>)
 800195c:	f006 fa50 	bl	8007e00 <siprintf>

	sprintf((char *)showTime, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <get_time+0x118>)
 8001962:	78db      	ldrb	r3, [r3, #3]
 8001964:	461a      	mov	r2, r3
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <get_time+0x124>)
 800196e:	441a      	add	r2, r3
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <get_time+0x118>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <get_time+0x118>)
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	4619      	mov	r1, r3
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <get_time+0x118>)
 800197e:	789b      	ldrb	r3, [r3, #2]
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	9100      	str	r1, [sp, #0]
 8001984:	4603      	mov	r3, r0
 8001986:	490e      	ldr	r1, [pc, #56]	; (80019c0 <get_time+0x144>)
 8001988:	480e      	ldr	r0, [pc, #56]	; (80019c4 <get_time+0x148>)
 800198a:	f006 fa39 	bl	8007e00 <siprintf>
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200004dc 	.word	0x200004dc
 8001998:	2000054c 	.word	0x2000054c
 800199c:	200004d8 	.word	0x200004d8
 80019a0:	20000000 	.word	0x20000000
 80019a4:	0800b758 	.word	0x0800b758
 80019a8:	2000052e 	.word	0x2000052e
 80019ac:	0800b75c 	.word	0x0800b75c
 80019b0:	20000510 	.word	0x20000510
 80019b4:	0800b774 	.word	0x0800b774
 80019b8:	0800b78c 	.word	0x0800b78c
 80019bc:	0800b7a4 	.word	0x0800b7a4
 80019c0:	0800b7bc 	.word	0x0800b7bc
 80019c4:	200004f0 	.word	0x200004f0

080019c8 <delay_us>:

float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void delay_us(uint16_t time) {
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <delay_us+0x30>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1))<time);
 80019da:	bf00      	nop
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <delay_us+0x30>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3f9      	bcc.n	80019dc <delay_us+0x14>
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000570 	.word	0x20000570

080019fc <Set_Pin_Output>:
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001a18:	887b      	ldrh	r3, [r7, #2]
 8001a1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	4619      	mov	r1, r3
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f001 fe58 	bl	80036e0 <HAL_GPIO_Init>
}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f001 fe3a 	bl	80036e0 <HAL_GPIO_Init>
}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <DHT11_Start>:
void DHT11_Start (void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_GPIO_Port, DHT11_Pin);  // set the pin as output
 8001a78:	2108      	movs	r1, #8
 8001a7a:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <DHT11_Start+0x2c>)
 8001a7c:	f7ff ffbe 	bl	80019fc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_GPIO_Port, DHT11_Pin, 0);   // pull the pin low
 8001a80:	2200      	movs	r2, #0
 8001a82:	2108      	movs	r1, #8
 8001a84:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <DHT11_Start+0x2c>)
 8001a86:	f001 ffef 	bl	8003a68 <HAL_GPIO_WritePin>
	delay_us(18000);   // wait for 18ms
 8001a8a:	f244 6050 	movw	r0, #18000	; 0x4650
 8001a8e:	f7ff ff9b 	bl	80019c8 <delay_us>
	Set_Pin_Input(DHT11_GPIO_Port, DHT11_Pin);    // set as input
 8001a92:	2108      	movs	r1, #8
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <DHT11_Start+0x2c>)
 8001a96:	f7ff ffcf 	bl	8001a38 <Set_Pin_Input>
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <DHT11_Check_Response>:
uint8_t DHT11_Check_Response (void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 8001aae:	2028      	movs	r0, #40	; 0x28
 8001ab0:	f7ff ff8a 	bl	80019c8 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))
 8001ab4:	2108      	movs	r1, #8
 8001ab6:	4811      	ldr	r0, [pc, #68]	; (8001afc <DHT11_Check_Response+0x58>)
 8001ab8:	f001 ffbe 	bl	8003a38 <HAL_GPIO_ReadPin>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10e      	bne.n	8001ae0 <DHT11_Check_Response+0x3c>
	{
		delay_us (80);
 8001ac2:	2050      	movs	r0, #80	; 0x50
 8001ac4:	f7ff ff80 	bl	80019c8 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin))) Response = 1;
 8001ac8:	2108      	movs	r1, #8
 8001aca:	480c      	ldr	r0, [pc, #48]	; (8001afc <DHT11_Check_Response+0x58>)
 8001acc:	f001 ffb4 	bl	8003a38 <HAL_GPIO_ReadPin>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <DHT11_Check_Response+0x38>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	e001      	b.n	8001ae0 <DHT11_Check_Response+0x3c>
		else Response = -1;
 8001adc:	23ff      	movs	r3, #255	; 0xff
 8001ade:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go low
 8001ae0:	bf00      	nop
 8001ae2:	2108      	movs	r1, #8
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <DHT11_Check_Response+0x58>)
 8001ae6:	f001 ffa7 	bl	8003a38 <HAL_GPIO_ReadPin>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f8      	bne.n	8001ae2 <DHT11_Check_Response+0x3e>

	return Response;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020000 	.word	0x40020000

08001b00 <DHT11_Read>:
uint8_t DHT11_Read (void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	71bb      	strb	r3, [r7, #6]
 8001b0a:	e037      	b.n	8001b7c <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go high
 8001b0c:	bf00      	nop
 8001b0e:	2108      	movs	r1, #8
 8001b10:	481e      	ldr	r0, [pc, #120]	; (8001b8c <DHT11_Read+0x8c>)
 8001b12:	f001 ff91 	bl	8003a38 <HAL_GPIO_ReadPin>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f8      	beq.n	8001b0e <DHT11_Read+0xe>
		delay_us (40);   // wait for 40 us
 8001b1c:	2028      	movs	r0, #40	; 0x28
 8001b1e:	f7ff ff53 	bl	80019c8 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))   // if the pin is low
 8001b22:	2108      	movs	r1, #8
 8001b24:	4819      	ldr	r0, [pc, #100]	; (8001b8c <DHT11_Read+0x8c>)
 8001b26:	f001 ff87 	bl	8003a38 <HAL_GPIO_ReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10e      	bne.n	8001b4e <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2201      	movs	r2, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	b25a      	sxtb	r2, r3
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	4013      	ands	r3, r2
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	e00b      	b.n	8001b66 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001b4e:	79bb      	ldrb	r3, [r7, #6]
 8001b50:	f1c3 0307 	rsb	r3, r3, #7
 8001b54:	2201      	movs	r2, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	b25a      	sxtb	r2, r3
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));  // wait for the pin to go low
 8001b66:	bf00      	nop
 8001b68:	2108      	movs	r1, #8
 8001b6a:	4808      	ldr	r0, [pc, #32]	; (8001b8c <DHT11_Read+0x8c>)
 8001b6c:	f001 ff64 	bl	8003a38 <HAL_GPIO_ReadPin>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f8      	bne.n	8001b68 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8001b76:	79bb      	ldrb	r3, [r7, #6]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	71bb      	strb	r3, [r7, #6]
 8001b7c:	79bb      	ldrb	r3, [r7, #6]
 8001b7e:	2b07      	cmp	r3, #7
 8001b80:	d9c4      	bls.n	8001b0c <DHT11_Read+0xc>
	}
	return i;
 8001b82:	79fb      	ldrb	r3, [r7, #7]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40020000 	.word	0x40020000

08001b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b96:	f000 fdf1 	bl	800277c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b9a:	f000 f8a1 	bl	8001ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b9e:	f7ff fc3f 	bl	8001420 <MX_GPIO_Init>
  MX_ETH_Init();
 8001ba2:	f7ff fb29 	bl	80011f8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001ba6:	f000 fcc5 	bl	8002534 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001baa:	f000 fd35 	bl	8002618 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8001bae:	f000 fa9f 	bl	80020f0 <MX_RTC_Init>
  MX_I2C1_Init();
 8001bb2:	f7ff fd13 	bl	80015dc <MX_I2C1_Init>
  MX_ADC1_Init();
 8001bb6:	f7ff fa3b 	bl	8001030 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001bba:	f000 fc49 	bl	8002450 <MX_TIM1_Init>
  MX_DAC_Init();
 8001bbe:	f7ff faad 	bl	800111c <MX_DAC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001bc2:	f000 f8f9 	bl	8001db8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(LCD_ADDR);
 8001bc6:	204e      	movs	r0, #78	; 0x4e
 8001bc8:	f7ff fe0a 	bl	80017e0 <LCD_Init>
  HAL_TIM_Base_Start(&htim1);
 8001bcc:	4837      	ldr	r0, [pc, #220]	; (8001cac <main+0x11c>)
 8001bce:	f004 f835 	bl	8005c3c <HAL_TIM_Base_Start>
  DHT11_Start();
 8001bd2:	f7ff ff4f 	bl	8001a74 <DHT11_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Presence = DHT11_Check_Response();
 8001bd6:	f7ff ff65 	bl	8001aa4 <DHT11_Check_Response>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <main+0x120>)
 8001be0:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read ();
 8001be2:	f7ff ff8d 	bl	8001b00 <DHT11_Read>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b32      	ldr	r3, [pc, #200]	; (8001cb4 <main+0x124>)
 8001bec:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read ();
 8001bee:	f7ff ff87 	bl	8001b00 <DHT11_Read>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <main+0x128>)
 8001bf8:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read ();
 8001bfa:	f7ff ff81 	bl	8001b00 <DHT11_Read>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <main+0x12c>)
 8001c04:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read ();
 8001c06:	f7ff ff7b 	bl	8001b00 <DHT11_Read>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <main+0x130>)
 8001c10:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 8001c12:	f7ff ff75 	bl	8001b00 <DHT11_Read>
 8001c16:	4603      	mov	r3, r0
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <main+0x134>)
 8001c1c:	801a      	strh	r2, [r3, #0]

	  TEMP = Temp_byte1;
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <main+0x12c>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <main+0x138>)
 8001c26:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <main+0x124>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <main+0x13c>)
 8001c30:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) TEMP;
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <main+0x138>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <main+0x140>)
 8001c40:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) RH;
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <main+0x13c>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c50:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <main+0x144>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]

	  char dhtvalue[30];
	  sprintf(dhtvalue, "%3.1f, %2.1f        ", Temperature, Humidity);
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <main+0x140>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fc94 	bl	8000588 <__aeabi_f2d>
 8001c60:	4604      	mov	r4, r0
 8001c62:	460d      	mov	r5, r1
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <main+0x144>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc8d 	bl	8000588 <__aeabi_f2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4638      	mov	r0, r7
 8001c74:	e9cd 2300 	strd	r2, r3, [sp]
 8001c78:	4622      	mov	r2, r4
 8001c7a:	462b      	mov	r3, r5
 8001c7c:	4916      	ldr	r1, [pc, #88]	; (8001cd8 <main+0x148>)
 8001c7e:	f006 f8bf 	bl	8007e00 <siprintf>

	  get_time();
 8001c82:	f7ff fdfb 	bl	800187c <get_time>

	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	204e      	movs	r0, #78	; 0x4e
 8001c8a:	f7ff fd85 	bl	8001798 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, dhtvalue);
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4619      	mov	r1, r3
 8001c92:	204e      	movs	r0, #78	; 0x4e
 8001c94:	f7ff fdc1 	bl	800181a <LCD_SendString>


	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001c98:	21c0      	movs	r1, #192	; 0xc0
 8001c9a:	204e      	movs	r0, #78	; 0x4e
 8001c9c:	f7ff fd7c 	bl	8001798 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 8001ca0:	490e      	ldr	r1, [pc, #56]	; (8001cdc <main+0x14c>)
 8001ca2:	204e      	movs	r0, #78	; 0x4e
 8001ca4:	f7ff fdb9 	bl	800181a <LCD_SendString>
  {
 8001ca8:	e795      	b.n	8001bd6 <main+0x46>
 8001caa:	bf00      	nop
 8001cac:	20000570 	.word	0x20000570
 8001cb0:	20000544 	.word	0x20000544
 8001cb4:	2000052f 	.word	0x2000052f
 8001cb8:	20000530 	.word	0x20000530
 8001cbc:	20000531 	.word	0x20000531
 8001cc0:	20000532 	.word	0x20000532
 8001cc4:	20000534 	.word	0x20000534
 8001cc8:	20000538 	.word	0x20000538
 8001ccc:	20000536 	.word	0x20000536
 8001cd0:	2000053c 	.word	0x2000053c
 8001cd4:	20000540 	.word	0x20000540
 8001cd8:	0800b7d0 	.word	0x0800b7d0
 8001cdc:	200004f0 	.word	0x200004f0

08001ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b094      	sub	sp, #80	; 0x50
 8001ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce6:	f107 0320 	add.w	r3, r7, #32
 8001cea:	2230      	movs	r2, #48	; 0x30
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f006 f8e9 	bl	8007ec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <SystemClock_Config+0xd0>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <SystemClock_Config+0xd0>)
 8001d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <SystemClock_Config+0xd0>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d20:	2300      	movs	r3, #0
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <SystemClock_Config+0xd4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <SystemClock_Config+0xd4>)
 8001d2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <SystemClock_Config+0xd4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d46:	2301      	movs	r3, #1
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d54:	2304      	movs	r3, #4
 8001d56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d58:	23a8      	movs	r3, #168	; 0xa8
 8001d5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d60:	2307      	movs	r3, #7
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d64:	f107 0320 	add.w	r3, r7, #32
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 fdc1 	bl	80048f0 <HAL_RCC_OscConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d74:	f000 f9b6 	bl	80020e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d78:	230f      	movs	r3, #15
 8001d7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	2105      	movs	r1, #5
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 f822 	bl	8004de0 <HAL_RCC_ClockConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001da2:	f000 f99f 	bl	80020e4 <Error_Handler>
  }
}
 8001da6:	bf00      	nop
 8001da8:	3750      	adds	r7, #80	; 0x50
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40007000 	.word	0x40007000

08001db8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2007      	movs	r0, #7
 8001dc2:	f001 f8be 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001dc6:	2007      	movs	r0, #7
 8001dc8:	f001 f8d7 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2017      	movs	r0, #23
 8001dd2:	f001 f8b6 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001dd6:	2017      	movs	r0, #23
 8001dd8:	f001 f8cf 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2028      	movs	r0, #40	; 0x28
 8001de2:	f001 f8ae 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001de6:	2028      	movs	r0, #40	; 0x28
 8001de8:	f001 f8c7 	bl	8002f7a <HAL_NVIC_EnableIRQ>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick = 0;

	if (GPIO_Pin == GPIO_PIN_1)
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d11d      	bne.n	8001e3c <HAL_GPIO_EXTI_Callback+0x4c>
	{
		if (HAL_GetTick() - before_tick >= 300)
 8001e00:	f000 fd22 	bl	8002848 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b9f      	ldr	r3, [pc, #636]	; (8002084 <HAL_GPIO_EXTI_Callback+0x294>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e10:	f0c0 815d 	bcc.w	80020ce <HAL_GPIO_EXTI_Callback+0x2de>
		{
			before_tick = HAL_GetTick();
 8001e14:	f000 fd18 	bl	8002848 <HAL_GetTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4a9a      	ldr	r2, [pc, #616]	; (8002084 <HAL_GPIO_EXTI_Callback+0x294>)
 8001e1c:	6013      	str	r3, [r2, #0]

			selection++;
 8001e1e:	4b9a      	ldr	r3, [pc, #616]	; (8002088 <HAL_GPIO_EXTI_Callback+0x298>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b98      	ldr	r3, [pc, #608]	; (8002088 <HAL_GPIO_EXTI_Callback+0x298>)
 8001e28:	701a      	strb	r2, [r3, #0]

			if (selection > 3)
 8001e2a:	4b97      	ldr	r3, [pc, #604]	; (8002088 <HAL_GPIO_EXTI_Callback+0x298>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	f240 814d 	bls.w	80020ce <HAL_GPIO_EXTI_Callback+0x2de>
				selection = 0;
 8001e34:	4b94      	ldr	r3, [pc, #592]	; (8002088 <HAL_GPIO_EXTI_Callback+0x298>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
					sTime.Seconds--;
			}
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		}
	}
}
 8001e3a:	e148      	b.n	80020ce <HAL_GPIO_EXTI_Callback+0x2de>
	else if (GPIO_Pin == GPIO_PIN_6)
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	d17e      	bne.n	8001f40 <HAL_GPIO_EXTI_Callback+0x150>
		if (HAL_GetTick() - before_tick >= 300)
 8001e42:	f000 fd01 	bl	8002848 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b8e      	ldr	r3, [pc, #568]	; (8002084 <HAL_GPIO_EXTI_Callback+0x294>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e52:	f0c0 813c 	bcc.w	80020ce <HAL_GPIO_EXTI_Callback+0x2de>
			before_tick = HAL_GetTick();
 8001e56:	f000 fcf7 	bl	8002848 <HAL_GetTick>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a89      	ldr	r2, [pc, #548]	; (8002084 <HAL_GPIO_EXTI_Callback+0x294>)
 8001e5e:	6013      	str	r3, [r2, #0]
			if (selection == 1) // hour select
 8001e60:	4b89      	ldr	r3, [pc, #548]	; (8002088 <HAL_GPIO_EXTI_Callback+0x298>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d142      	bne.n	8001eee <HAL_GPIO_EXTI_Callback+0xfe>
				sTime.Hours++;
 8001e68:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	4b86      	ldr	r3, [pc, #536]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001e72:	701a      	strb	r2, [r3, #0]
				if (sTime.Hours == 12)
 8001e74:	4b85      	ldr	r3, [pc, #532]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d130      	bne.n	8001ede <HAL_GPIO_EXTI_Callback+0xee>
					if (strcmp(ampm[sTime.TimeFormat], "AM") == 0)
 8001e7c:	4b83      	ldr	r3, [pc, #524]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001e7e:	78db      	ldrb	r3, [r3, #3]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	4a81      	ldr	r2, [pc, #516]	; (8002090 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4981      	ldr	r1, [pc, #516]	; (8002094 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe f9ae 	bl	80001f0 <strcmp>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d110      	bne.n	8001ebc <HAL_GPIO_EXTI_Callback+0xcc>
						strcpy(ampm[sTime.TimeFormat], "PM");
 8001e9a:	4b7c      	ldr	r3, [pc, #496]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001e9c:	78db      	ldrb	r3, [r3, #3]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a7a      	ldr	r2, [pc, #488]	; (8002090 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a7b      	ldr	r2, [pc, #492]	; (8002098 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001eac:	8811      	ldrh	r1, [r2, #0]
 8001eae:	7892      	ldrb	r2, [r2, #2]
 8001eb0:	8019      	strh	r1, [r3, #0]
 8001eb2:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 12;
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	e03b      	b.n	8001f34 <HAL_GPIO_EXTI_Callback+0x144>
						strcpy(ampm[sTime.TimeFormat], "AM");
 8001ebc:	4b73      	ldr	r3, [pc, #460]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001ebe:	78db      	ldrb	r3, [r3, #3]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a71      	ldr	r2, [pc, #452]	; (8002090 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a71      	ldr	r2, [pc, #452]	; (8002094 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001ece:	8811      	ldrh	r1, [r2, #0]
 8001ed0:	7892      	ldrb	r2, [r2, #2]
 8001ed2:	8019      	strh	r1, [r3, #0]
 8001ed4:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 0;
 8001ed6:	4b6d      	ldr	r3, [pc, #436]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e02a      	b.n	8001f34 <HAL_GPIO_EXTI_Callback+0x144>
				else if (sTime.Hours > 12)
 8001ede:	4b6b      	ldr	r3, [pc, #428]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d926      	bls.n	8001f34 <HAL_GPIO_EXTI_Callback+0x144>
					sTime.Hours = 1;
 8001ee6:	4b69      	ldr	r3, [pc, #420]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e022      	b.n	8001f34 <HAL_GPIO_EXTI_Callback+0x144>
			else if (selection == 2) // minutes select
 8001eee:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_GPIO_EXTI_Callback+0x298>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d10d      	bne.n	8001f12 <HAL_GPIO_EXTI_Callback+0x122>
				sTime.Minutes++;
 8001ef6:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	3301      	adds	r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001f00:	705a      	strb	r2, [r3, #1]
				if (sTime.Minutes > 59)
 8001f02:	4b62      	ldr	r3, [pc, #392]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001f04:	785b      	ldrb	r3, [r3, #1]
 8001f06:	2b3b      	cmp	r3, #59	; 0x3b
 8001f08:	d914      	bls.n	8001f34 <HAL_GPIO_EXTI_Callback+0x144>
					sTime.Minutes = 0;
 8001f0a:	4b60      	ldr	r3, [pc, #384]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	705a      	strb	r2, [r3, #1]
 8001f10:	e010      	b.n	8001f34 <HAL_GPIO_EXTI_Callback+0x144>
			else if (selection == 3) // second select
 8001f12:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <HAL_GPIO_EXTI_Callback+0x298>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d10c      	bne.n	8001f34 <HAL_GPIO_EXTI_Callback+0x144>
				sTime.Seconds++;
 8001f1a:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001f1c:	789b      	ldrb	r3, [r3, #2]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b5a      	ldr	r3, [pc, #360]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001f24:	709a      	strb	r2, [r3, #2]
				if (sTime.Seconds > 59)
 8001f26:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001f28:	789b      	ldrb	r3, [r3, #2]
 8001f2a:	2b3b      	cmp	r3, #59	; 0x3b
 8001f2c:	d902      	bls.n	8001f34 <HAL_GPIO_EXTI_Callback+0x144>
					sTime.Seconds = 0;
 8001f2e:	4b57      	ldr	r3, [pc, #348]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001f34:	2200      	movs	r2, #0
 8001f36:	4955      	ldr	r1, [pc, #340]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001f38:	4858      	ldr	r0, [pc, #352]	; (800209c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001f3a:	f003 fba7 	bl	800568c <HAL_RTC_SetTime>
}
 8001f3e:	e0c6      	b.n	80020ce <HAL_GPIO_EXTI_Callback+0x2de>
	else if (GPIO_Pin == GPIO_PIN_5)
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	f040 80c3 	bne.w	80020ce <HAL_GPIO_EXTI_Callback+0x2de>
		if (HAL_GetTick() - before_tick >= 300)
 8001f48:	f000 fc7e 	bl	8002848 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b4d      	ldr	r3, [pc, #308]	; (8002084 <HAL_GPIO_EXTI_Callback+0x294>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001f58:	f0c0 80b9 	bcc.w	80020ce <HAL_GPIO_EXTI_Callback+0x2de>
			before_tick = HAL_GetTick();
 8001f5c:	f000 fc74 	bl	8002848 <HAL_GetTick>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4a48      	ldr	r2, [pc, #288]	; (8002084 <HAL_GPIO_EXTI_Callback+0x294>)
 8001f64:	6013      	str	r3, [r2, #0]
			if (selection == 1)
 8001f66:	4b48      	ldr	r3, [pc, #288]	; (8002088 <HAL_GPIO_EXTI_Callback+0x298>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d176      	bne.n	800205c <HAL_GPIO_EXTI_Callback+0x26c>
				if (sTime.Hours == 0)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d130      	bne.n	8001fd8 <HAL_GPIO_EXTI_Callback+0x1e8>
					if (strcmp(ampm[sTime.TimeFormat], "AM") == 0)
 8001f76:	4b45      	ldr	r3, [pc, #276]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001f78:	78db      	ldrb	r3, [r3, #3]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	4a43      	ldr	r2, [pc, #268]	; (8002090 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001f84:	4413      	add	r3, r2
 8001f86:	4943      	ldr	r1, [pc, #268]	; (8002094 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe f931 	bl	80001f0 <strcmp>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d110      	bne.n	8001fb6 <HAL_GPIO_EXTI_Callback+0x1c6>
						strcpy(ampm[sTime.TimeFormat], "PM");
 8001f94:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001f96:	78db      	ldrb	r3, [r3, #3]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a3c      	ldr	r2, [pc, #240]	; (8002098 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001fa6:	8811      	ldrh	r1, [r2, #0]
 8001fa8:	7892      	ldrb	r2, [r2, #2]
 8001faa:	8019      	strh	r1, [r3, #0]
 8001fac:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 11;
 8001fae:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001fb0:	220b      	movs	r2, #11
 8001fb2:	701a      	strb	r2, [r3, #0]
 8001fb4:	e086      	b.n	80020c4 <HAL_GPIO_EXTI_Callback+0x2d4>
						strcpy(ampm[sTime.TimeFormat], "AM");
 8001fb6:	4b35      	ldr	r3, [pc, #212]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001fb8:	78db      	ldrb	r3, [r3, #3]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a33      	ldr	r2, [pc, #204]	; (8002090 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4a33      	ldr	r2, [pc, #204]	; (8002094 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001fc8:	8811      	ldrh	r1, [r2, #0]
 8001fca:	7892      	ldrb	r2, [r2, #2]
 8001fcc:	8019      	strh	r1, [r3, #0]
 8001fce:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 11;
 8001fd0:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001fd2:	220b      	movs	r2, #11
 8001fd4:	701a      	strb	r2, [r3, #0]
 8001fd6:	e075      	b.n	80020c4 <HAL_GPIO_EXTI_Callback+0x2d4>
				else if (strcmp(ampm[sTime.TimeFormat], "PM") == 0 && sTime.Hours == 1)
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001fda:	78db      	ldrb	r3, [r3, #3]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a2a      	ldr	r2, [pc, #168]	; (8002090 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001fe6:	4413      	add	r3, r2
 8001fe8:	492b      	ldr	r1, [pc, #172]	; (8002098 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe f900 	bl	80001f0 <strcmp>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d107      	bne.n	8002006 <HAL_GPIO_EXTI_Callback+0x216>
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d103      	bne.n	8002006 <HAL_GPIO_EXTI_Callback+0x216>
					sTime.Hours = 12;
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8002000:	220c      	movs	r2, #12
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e05e      	b.n	80020c4 <HAL_GPIO_EXTI_Callback+0x2d4>
				else if (strcmp(ampm[sTime.TimeFormat], "PM") == 0 && sTime.Hours == 12)
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8002008:	78db      	ldrb	r3, [r3, #3]
 800200a:	461a      	mov	r2, r3
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002014:	4413      	add	r3, r2
 8002016:	4920      	ldr	r1, [pc, #128]	; (8002098 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe f8e9 	bl	80001f0 <strcmp>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d114      	bne.n	800204e <HAL_GPIO_EXTI_Callback+0x25e>
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b0c      	cmp	r3, #12
 800202a:	d110      	bne.n	800204e <HAL_GPIO_EXTI_Callback+0x25e>
					strcpy(ampm[sTime.TimeFormat], "AM");
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 800202e:	78db      	ldrb	r3, [r3, #3]
 8002030:	461a      	mov	r2, r3
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	4a15      	ldr	r2, [pc, #84]	; (8002090 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800203a:	4413      	add	r3, r2
 800203c:	4a15      	ldr	r2, [pc, #84]	; (8002094 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800203e:	8811      	ldrh	r1, [r2, #0]
 8002040:	7892      	ldrb	r2, [r2, #2]
 8002042:	8019      	strh	r1, [r3, #0]
 8002044:	709a      	strb	r2, [r3, #2]
					sTime.Hours = 11;
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8002048:	220b      	movs	r2, #11
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e03a      	b.n	80020c4 <HAL_GPIO_EXTI_Callback+0x2d4>
					sTime.Hours--;
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	3b01      	subs	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	e033      	b.n	80020c4 <HAL_GPIO_EXTI_Callback+0x2d4>
			else if (selection == 2)
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_GPIO_EXTI_Callback+0x298>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d11d      	bne.n	80020a0 <HAL_GPIO_EXTI_Callback+0x2b0>
				if (sTime.Minutes == 0)
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d103      	bne.n	8002074 <HAL_GPIO_EXTI_Callback+0x284>
					sTime.Minutes = 59;
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 800206e:	223b      	movs	r2, #59	; 0x3b
 8002070:	705a      	strb	r2, [r3, #1]
 8002072:	e027      	b.n	80020c4 <HAL_GPIO_EXTI_Callback+0x2d4>
					sTime.Minutes--;
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 8002076:	785b      	ldrb	r3, [r3, #1]
 8002078:	3b01      	subs	r3, #1
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_GPIO_EXTI_Callback+0x29c>)
 800207e:	705a      	strb	r2, [r3, #1]
 8002080:	e020      	b.n	80020c4 <HAL_GPIO_EXTI_Callback+0x2d4>
 8002082:	bf00      	nop
 8002084:	20000548 	.word	0x20000548
 8002088:	2000052e 	.word	0x2000052e
 800208c:	200004dc 	.word	0x200004dc
 8002090:	20000000 	.word	0x20000000
 8002094:	0800b758 	.word	0x0800b758
 8002098:	0800b7e8 	.word	0x0800b7e8
 800209c:	2000054c 	.word	0x2000054c
			else if (selection == 3)
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d10d      	bne.n	80020c4 <HAL_GPIO_EXTI_Callback+0x2d4>
				if (sTime.Seconds == 0)
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_GPIO_EXTI_Callback+0x2ec>)
 80020aa:	789b      	ldrb	r3, [r3, #2]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d103      	bne.n	80020b8 <HAL_GPIO_EXTI_Callback+0x2c8>
					sTime.Seconds = 59;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_GPIO_EXTI_Callback+0x2ec>)
 80020b2:	223b      	movs	r2, #59	; 0x3b
 80020b4:	709a      	strb	r2, [r3, #2]
 80020b6:	e005      	b.n	80020c4 <HAL_GPIO_EXTI_Callback+0x2d4>
					sTime.Seconds--;
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_GPIO_EXTI_Callback+0x2ec>)
 80020ba:	789b      	ldrb	r3, [r3, #2]
 80020bc:	3b01      	subs	r3, #1
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_GPIO_EXTI_Callback+0x2ec>)
 80020c2:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80020c4:	2200      	movs	r2, #0
 80020c6:	4905      	ldr	r1, [pc, #20]	; (80020dc <HAL_GPIO_EXTI_Callback+0x2ec>)
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80020ca:	f003 fadf 	bl	800568c <HAL_RTC_SetTime>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	2000052e 	.word	0x2000052e
 80020dc:	200004dc 	.word	0x200004dc
 80020e0:	2000054c 	.word	0x2000054c

080020e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i
}
 80020ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ec:	e7fe      	b.n	80020ec <Error_Handler+0x8>
	...

080020f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002104:	2300      	movs	r3, #0
 8002106:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002108:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <MX_RTC_Init+0xb0>)
 800210a:	4a26      	ldr	r2, [pc, #152]	; (80021a4 <MX_RTC_Init+0xb4>)
 800210c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <MX_RTC_Init+0xb0>)
 8002110:	2240      	movs	r2, #64	; 0x40
 8002112:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <MX_RTC_Init+0xb0>)
 8002116:	227f      	movs	r2, #127	; 0x7f
 8002118:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <MX_RTC_Init+0xb0>)
 800211c:	22ff      	movs	r2, #255	; 0xff
 800211e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002120:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <MX_RTC_Init+0xb0>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <MX_RTC_Init+0xb0>)
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <MX_RTC_Init+0xb0>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002132:	481b      	ldr	r0, [pc, #108]	; (80021a0 <MX_RTC_Init+0xb0>)
 8002134:	f003 fa34 	bl	80055a0 <HAL_RTC_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800213e:	f7ff ffd1 	bl	80020e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8002142:	230c      	movs	r3, #12
 8002144:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002146:	2300      	movs	r3, #0
 8002148:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800214a:	2300      	movs	r3, #0
 800214c:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800214e:	2300      	movs	r3, #0
 8002150:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2201      	movs	r2, #1
 800215e:	4619      	mov	r1, r3
 8002160:	480f      	ldr	r0, [pc, #60]	; (80021a0 <MX_RTC_Init+0xb0>)
 8002162:	f003 fa93 	bl	800568c <HAL_RTC_SetTime>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 800216c:	f7ff ffba 	bl	80020e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002170:	2303      	movs	r3, #3
 8002172:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8002174:	2311      	movs	r3, #17
 8002176:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002178:	2301      	movs	r3, #1
 800217a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 800217c:	2323      	movs	r3, #35	; 0x23
 800217e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002180:	463b      	mov	r3, r7
 8002182:	2201      	movs	r2, #1
 8002184:	4619      	mov	r1, r3
 8002186:	4806      	ldr	r0, [pc, #24]	; (80021a0 <MX_RTC_Init+0xb0>)
 8002188:	f003 fb78 	bl	800587c <HAL_RTC_SetDate>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8002192:	f7ff ffa7 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	2000054c 	.word	0x2000054c
 80021a4:	40002800 	.word	0x40002800

080021a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08e      	sub	sp, #56	; 0x38
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	2230      	movs	r2, #48	; 0x30
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f005 fe84 	bl	8007ec6 <memset>
  if(rtcHandle->Instance==RTC)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <HAL_RTC_MspInit+0x4c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d111      	bne.n	80021ec <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021c8:	2320      	movs	r3, #32
 80021ca:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 f822 	bl	8005220 <HAL_RCCEx_PeriphCLKConfig>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80021e2:	f7ff ff7f 	bl	80020e4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <HAL_RTC_MspInit+0x50>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021ec:	bf00      	nop
 80021ee:	3738      	adds	r7, #56	; 0x38
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40002800 	.word	0x40002800
 80021f8:	42470e3c 	.word	0x42470e3c

080021fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <HAL_MspInit+0x4c>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <HAL_MspInit+0x4c>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_MspInit+0x4c>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_MspInit+0x4c>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a08      	ldr	r2, [pc, #32]	; (8002248 <HAL_MspInit+0x4c>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_MspInit+0x4c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <NMI_Handler+0x4>

08002252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <HardFault_Handler+0x4>

08002258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <MemManage_Handler+0x4>

0800225e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002262:	e7fe      	b.n	8002262 <BusFault_Handler+0x4>

08002264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <UsageFault_Handler+0x4>

0800226a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002298:	f000 fac2 	bl	8002820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}

080022a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80022a4:	2002      	movs	r0, #2
 80022a6:	f001 fbf9 	bl	8003a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}

080022ae <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_down_Pin);
 80022b2:	2020      	movs	r0, #32
 80022b4:	f001 fbf2 	bl	8003a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_up_Pin);
 80022b8:	2040      	movs	r0, #64	; 0x40
 80022ba:	f001 fbef 	bl	8003a9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_select_Pin);
 80022be:	2080      	movs	r0, #128	; 0x80
 80022c0:	f001 fbec 	bl	8003a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80022cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022d0:	f001 fbe4 	bl	8003a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return 1;
 80022dc:	2301      	movs	r3, #1
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_kill>:

int _kill(int pid, int sig)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022f2:	f005 fe3b 	bl	8007f6c <__errno>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2216      	movs	r2, #22
 80022fa:	601a      	str	r2, [r3, #0]
  return -1;
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_exit>:

void _exit (int status)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002310:	f04f 31ff 	mov.w	r1, #4294967295
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ffe7 	bl	80022e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800231a:	e7fe      	b.n	800231a <_exit+0x12>

0800231c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e00a      	b.n	8002344 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800232e:	f3af 8000 	nop.w
 8002332:	4601      	mov	r1, r0
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	60ba      	str	r2, [r7, #8]
 800233a:	b2ca      	uxtb	r2, r1
 800233c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbf0      	blt.n	800232e <_read+0x12>
  }

  return len;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800237e:	605a      	str	r2, [r3, #4]
  return 0;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_isatty>:

int _isatty(int file)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <_sbrk+0x5c>)
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <_sbrk+0x60>)
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <_sbrk+0x64>)
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <_sbrk+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d207      	bcs.n	8002400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f0:	f005 fdbc 	bl	8007f6c <__errno>
 80023f4:	4603      	mov	r3, r0
 80023f6:	220c      	movs	r2, #12
 80023f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e009      	b.n	8002414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <_sbrk+0x64>)
 8002410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20030000 	.word	0x20030000
 8002420:	00000400 	.word	0x00000400
 8002424:	2000056c 	.word	0x2000056c
 8002428:	20000c58 	.word	0x20000c58

0800242c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <SystemInit+0x20>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <SystemInit+0x20>)
 8002438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800243c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002456:	f107 0308 	add.w	r3, r7, #8
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002464:	463b      	mov	r3, r7
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <MX_TIM1_Init+0x98>)
 800246e:	4a1f      	ldr	r2, [pc, #124]	; (80024ec <MX_TIM1_Init+0x9c>)
 8002470:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <MX_TIM1_Init+0x98>)
 8002474:	22a7      	movs	r2, #167	; 0xa7
 8002476:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <MX_TIM1_Init+0x98>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <MX_TIM1_Init+0x98>)
 8002480:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002484:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <MX_TIM1_Init+0x98>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <MX_TIM1_Init+0x98>)
 800248e:	2200      	movs	r2, #0
 8002490:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <MX_TIM1_Init+0x98>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002498:	4813      	ldr	r0, [pc, #76]	; (80024e8 <MX_TIM1_Init+0x98>)
 800249a:	f003 fb7f 	bl	8005b9c <HAL_TIM_Base_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80024a4:	f7ff fe1e 	bl	80020e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	4619      	mov	r1, r3
 80024b4:	480c      	ldr	r0, [pc, #48]	; (80024e8 <MX_TIM1_Init+0x98>)
 80024b6:	f003 fc29 	bl	8005d0c <HAL_TIM_ConfigClockSource>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024c0:	f7ff fe10 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024cc:	463b      	mov	r3, r7
 80024ce:	4619      	mov	r1, r3
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_TIM1_Init+0x98>)
 80024d2:	f003 fe1d 	bl	8006110 <HAL_TIMEx_MasterConfigSynchronization>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80024dc:	f7ff fe02 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000570 	.word	0x20000570
 80024ec:	40010000 	.word	0x40010000

080024f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0b      	ldr	r2, [pc, #44]	; (800252c <HAL_TIM_Base_MspInit+0x3c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10d      	bne.n	800251e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_TIM_Base_MspInit+0x40>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <HAL_TIM_Base_MspInit+0x40>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_TIM_Base_MspInit+0x40>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40010000 	.word	0x40010000
 8002530:	40023800 	.word	0x40023800

08002534 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <MX_USART3_UART_Init+0x4c>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <MX_USART3_UART_Init+0x50>)
 800253c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <MX_USART3_UART_Init+0x4c>)
 8002540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002544:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <MX_USART3_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <MX_USART3_UART_Init+0x4c>)
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <MX_USART3_UART_Init+0x4c>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <MX_USART3_UART_Init+0x4c>)
 800255a:	220c      	movs	r2, #12
 800255c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <MX_USART3_UART_Init+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <MX_USART3_UART_Init+0x4c>)
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800256a:	4805      	ldr	r0, [pc, #20]	; (8002580 <MX_USART3_UART_Init+0x4c>)
 800256c:	f003 fe4c 	bl	8006208 <HAL_UART_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002576:	f7ff fdb5 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200005b8 	.word	0x200005b8
 8002584:	40004800 	.word	0x40004800

08002588 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a19      	ldr	r2, [pc, #100]	; (800260c <HAL_UART_MspInit+0x84>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d12c      	bne.n	8002604 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <HAL_UART_MspInit+0x88>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	4a17      	ldr	r2, [pc, #92]	; (8002610 <HAL_UART_MspInit+0x88>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_UART_MspInit+0x88>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_UART_MspInit+0x88>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a10      	ldr	r2, [pc, #64]	; (8002610 <HAL_UART_MspInit+0x88>)
 80025d0:	f043 0308 	orr.w	r3, r3, #8
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_UART_MspInit+0x88>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80025e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025f4:	2307      	movs	r3, #7
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4619      	mov	r1, r3
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <HAL_UART_MspInit+0x8c>)
 8002600:	f001 f86e 	bl	80036e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002604:	bf00      	nop
 8002606:	3728      	adds	r7, #40	; 0x28
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40004800 	.word	0x40004800
 8002610:	40023800 	.word	0x40023800
 8002614:	40020c00 	.word	0x40020c00

08002618 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800261e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002622:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002626:	2204      	movs	r2, #4
 8002628:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800262c:	2202      	movs	r2, #2
 800262e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002638:	2202      	movs	r2, #2
 800263a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800263e:	2201      	movs	r2, #1
 8002640:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800264a:	2200      	movs	r2, #0
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002650:	2201      	movs	r2, #1
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800265c:	f002 f82a 	bl	80046b4 <HAL_PCD_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002666:	f7ff fd3d 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200005fc 	.word	0x200005fc

08002674 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002694:	d13f      	bne.n	8002716 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_PCD_MspInit+0xac>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a20      	ldr	r2, [pc, #128]	; (8002720 <HAL_PCD_MspInit+0xac>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_PCD_MspInit+0xac>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80026b2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80026b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026c4:	230a      	movs	r3, #10
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4619      	mov	r1, r3
 80026ce:	4815      	ldr	r0, [pc, #84]	; (8002724 <HAL_PCD_MspInit+0xb0>)
 80026d0:	f001 f806 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80026d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	480e      	ldr	r0, [pc, #56]	; (8002724 <HAL_PCD_MspInit+0xb0>)
 80026ea:	f000 fff9 	bl	80036e0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <HAL_PCD_MspInit+0xac>)
 80026f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f2:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <HAL_PCD_MspInit+0xac>)
 80026f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f8:	6353      	str	r3, [r2, #52]	; 0x34
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_PCD_MspInit+0xac>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_PCD_MspInit+0xac>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_PCD_MspInit+0xac>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	; 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	40020000 	.word	0x40020000

08002728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002760 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800272c:	480d      	ldr	r0, [pc, #52]	; (8002764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800272e:	490e      	ldr	r1, [pc, #56]	; (8002768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002730:	4a0e      	ldr	r2, [pc, #56]	; (800276c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002744:	4c0b      	ldr	r4, [pc, #44]	; (8002774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002752:	f7ff fe6b 	bl	800242c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002756:	f005 fc0f 	bl	8007f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800275a:	f7ff fa19 	bl	8001b90 <main>
  bx  lr    
 800275e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002760:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002768:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800276c:	0800bc40 	.word	0x0800bc40
  ldr r2, =_sbss
 8002770:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002774:	20000c58 	.word	0x20000c58

08002778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002778:	e7fe      	b.n	8002778 <ADC_IRQHandler>
	...

0800277c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <HAL_Init+0x40>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_Init+0x40>)
 8002792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a07      	ldr	r2, [pc, #28]	; (80027bc <HAL_Init+0x40>)
 800279e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a4:	2003      	movs	r0, #3
 80027a6:	f000 fbc1 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f000 f808 	bl	80027c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b0:	f7ff fd24 	bl	80021fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023c00 	.word	0x40023c00

080027c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_InitTick+0x54>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_InitTick+0x58>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4619      	mov	r1, r3
 80027d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fbd9 	bl	8002f96 <HAL_SYSTICK_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00e      	b.n	800280c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b0f      	cmp	r3, #15
 80027f2:	d80a      	bhi.n	800280a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f4:	2200      	movs	r2, #0
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f000 fba1 	bl	8002f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002800:	4a06      	ldr	r2, [pc, #24]	; (800281c <HAL_InitTick+0x5c>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000008 	.word	0x20000008
 8002818:	20000010 	.word	0x20000010
 800281c:	2000000c 	.word	0x2000000c

08002820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x20>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_IncTick+0x24>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <HAL_IncTick+0x24>)
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000010 	.word	0x20000010
 8002844:	20000b08 	.word	0x20000b08

08002848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_GetTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000b08 	.word	0x20000b08

08002860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff ffee 	bl	8002848 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d005      	beq.n	8002886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_Delay+0x44>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002886:	bf00      	nop
 8002888:	f7ff ffde 	bl	8002848 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d8f7      	bhi.n	8002888 <HAL_Delay+0x28>
  {
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000010 	.word	0x20000010

080028a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e033      	b.n	8002926 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fc06 	bl	80010d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d118      	bne.n	8002918 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ee:	f023 0302 	bic.w	r3, r3, #2
 80028f2:	f043 0202 	orr.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f94a 	bl	8002b94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f023 0303 	bic.w	r3, r3, #3
 800290e:	f043 0201 	orr.w	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
 8002916:	e001      	b.n	800291c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1c>
 8002948:	2302      	movs	r3, #2
 800294a:	e113      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x244>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b09      	cmp	r3, #9
 800295a:	d925      	bls.n	80029a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68d9      	ldr	r1, [r3, #12]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	3b1e      	subs	r3, #30
 8002972:	2207      	movs	r2, #7
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43da      	mvns	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	400a      	ands	r2, r1
 8002980:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68d9      	ldr	r1, [r3, #12]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	4618      	mov	r0, r3
 8002994:	4603      	mov	r3, r0
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4403      	add	r3, r0
 800299a:	3b1e      	subs	r3, #30
 800299c:	409a      	lsls	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	e022      	b.n	80029ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6919      	ldr	r1, [r3, #16]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	2207      	movs	r2, #7
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	400a      	ands	r2, r1
 80029ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6919      	ldr	r1, [r3, #16]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	4618      	mov	r0, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4403      	add	r3, r0
 80029e4:	409a      	lsls	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d824      	bhi.n	8002a40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	3b05      	subs	r3, #5
 8002a08:	221f      	movs	r2, #31
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	400a      	ands	r2, r1
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	4618      	mov	r0, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b05      	subs	r3, #5
 8002a32:	fa00 f203 	lsl.w	r2, r0, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a3e:	e04c      	b.n	8002ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b0c      	cmp	r3, #12
 8002a46:	d824      	bhi.n	8002a92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	3b23      	subs	r3, #35	; 0x23
 8002a5a:	221f      	movs	r2, #31
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43da      	mvns	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	400a      	ands	r2, r1
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4618      	mov	r0, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	3b23      	subs	r3, #35	; 0x23
 8002a84:	fa00 f203 	lsl.w	r2, r0, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a90:	e023      	b.n	8002ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b41      	subs	r3, #65	; 0x41
 8002aa4:	221f      	movs	r2, #31
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	3b41      	subs	r3, #65	; 0x41
 8002ace:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ada:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <HAL_ADC_ConfigChannel+0x250>)
 8002adc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a28      	ldr	r2, [pc, #160]	; (8002b84 <HAL_ADC_ConfigChannel+0x254>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d10f      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1d8>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b12      	cmp	r3, #18
 8002aee:	d10b      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <HAL_ADC_ConfigChannel+0x254>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d12b      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x23a>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <HAL_ADC_ConfigChannel+0x258>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <HAL_ADC_ConfigChannel+0x1f4>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b11      	cmp	r3, #17
 8002b22:	d122      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <HAL_ADC_ConfigChannel+0x258>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d111      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b46:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_ADC_ConfigChannel+0x25c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a11      	ldr	r2, [pc, #68]	; (8002b90 <HAL_ADC_ConfigChannel+0x260>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	0c9a      	lsrs	r2, r3, #18
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	40012300 	.word	0x40012300
 8002b84:	40012000 	.word	0x40012000
 8002b88:	10000012 	.word	0x10000012
 8002b8c:	20000008 	.word	0x20000008
 8002b90:	431bde83 	.word	0x431bde83

08002b94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b9c:	4b79      	ldr	r3, [pc, #484]	; (8002d84 <ADC_Init+0x1f0>)
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	021a      	lsls	r2, r3, #8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6899      	ldr	r1, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	4a58      	ldr	r2, [pc, #352]	; (8002d88 <ADC_Init+0x1f4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	e00f      	b.n	8002c92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0202 	bic.w	r2, r2, #2
 8002ca0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6899      	ldr	r1, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7e1b      	ldrb	r3, [r3, #24]
 8002cac:	005a      	lsls	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01b      	beq.n	8002cf8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	3b01      	subs	r3, #1
 8002cec:	035a      	lsls	r2, r3, #13
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	e007      	b.n	8002d08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	051a      	lsls	r2, r3, #20
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6899      	ldr	r1, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d4a:	025a      	lsls	r2, r3, #9
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6899      	ldr	r1, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	029a      	lsls	r2, r3, #10
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	609a      	str	r2, [r3, #8]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	40012300 	.word	0x40012300
 8002d88:	0f000001 	.word	0x0f000001

08002d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da8:	4013      	ands	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dbe:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	60d3      	str	r3, [r2, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <__NVIC_GetPriorityGrouping+0x18>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f003 0307 	and.w	r3, r3, #7
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	db0b      	blt.n	8002e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	4907      	ldr	r1, [pc, #28]	; (8002e28 <__NVIC_EnableIRQ+0x38>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2001      	movs	r0, #1
 8002e12:	fa00 f202 	lsl.w	r2, r0, r2
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000e100 	.word	0xe000e100

08002e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	db0a      	blt.n	8002e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	490c      	ldr	r1, [pc, #48]	; (8002e78 <__NVIC_SetPriority+0x4c>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	0112      	lsls	r2, r2, #4
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e54:	e00a      	b.n	8002e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <__NVIC_SetPriority+0x50>)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	3b04      	subs	r3, #4
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	440b      	add	r3, r1
 8002e6a:	761a      	strb	r2, [r3, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000e100 	.word	0xe000e100
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f1c3 0307 	rsb	r3, r3, #7
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	bf28      	it	cs
 8002e9e:	2304      	movcs	r3, #4
 8002ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d902      	bls.n	8002eb0 <NVIC_EncodePriority+0x30>
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3b03      	subs	r3, #3
 8002eae:	e000      	b.n	8002eb2 <NVIC_EncodePriority+0x32>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43d9      	mvns	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	4313      	orrs	r3, r2
         );
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f7ff ff8e 	bl	8002e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff29 	bl	8002d8c <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff3e 	bl	8002dd4 <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff8e 	bl	8002e80 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5d 	bl	8002e2c <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff31 	bl	8002df0 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa2 	bl	8002ee8 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e014      	b.n	8002fea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	791b      	ldrb	r3, [r3, #4]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d105      	bne.n	8002fd6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7fe f8cd 	bl	8001170 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b087      	sub	sp, #28
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	795b      	ldrb	r3, [r3, #5]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_DAC_ConfigChannel+0x18>
 8003006:	2302      	movs	r3, #2
 8003008:	e03c      	b.n	8003084 <HAL_DAC_ConfigChannel+0x92>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2202      	movs	r2, #2
 8003014:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4013      	ands	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6819      	ldr	r1, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	22c0      	movs	r2, #192	; 0xc0
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43da      	mvns	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	400a      	ands	r2, r1
 8003074:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e06c      	b.n	800317c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2223      	movs	r2, #35	; 0x23
 80030b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7fe f8ed 	bl	8001294 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	4b31      	ldr	r3, [pc, #196]	; (8003184 <HAL_ETH_Init+0xf4>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	4a30      	ldr	r2, [pc, #192]	; (8003184 <HAL_ETH_Init+0xf4>)
 80030c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ca:	4b2e      	ldr	r3, [pc, #184]	; (8003184 <HAL_ETH_Init+0xf4>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80030d6:	4b2c      	ldr	r3, [pc, #176]	; (8003188 <HAL_ETH_Init+0xf8>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <HAL_ETH_Init+0xf8>)
 80030dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80030e2:	4b29      	ldr	r3, [pc, #164]	; (8003188 <HAL_ETH_Init+0xf8>)
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	4927      	ldr	r1, [pc, #156]	; (8003188 <HAL_ETH_Init+0xf8>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80030f0:	4b25      	ldr	r3, [pc, #148]	; (8003188 <HAL_ETH_Init+0xf8>)
 80030f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800310a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800310c:	f7ff fb9c 	bl	8002848 <HAL_GetTick>
 8003110:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003112:	e011      	b.n	8003138 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003114:	f7ff fb98 	bl	8002848 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003122:	d909      	bls.n	8003138 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2204      	movs	r2, #4
 8003128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	22e0      	movs	r2, #224	; 0xe0
 8003130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e021      	b.n	800317c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e4      	bne.n	8003114 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f958 	bl	8003400 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f9ff 	bl	8003554 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fa55 	bl	8003606 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	461a      	mov	r2, r3
 8003162:	2100      	movs	r1, #0
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f9bd 	bl	80034e4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2210      	movs	r2, #16
 8003176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	40013800 	.word	0x40013800

0800318c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4b51      	ldr	r3, [pc, #324]	; (80032e8 <ETH_SetMACConfig+0x15c>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	7c1b      	ldrb	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <ETH_SetMACConfig+0x28>
 80031ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80031b2:	e000      	b.n	80031b6 <ETH_SetMACConfig+0x2a>
 80031b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	7c5b      	ldrb	r3, [r3, #17]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <ETH_SetMACConfig+0x38>
 80031be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031c2:	e000      	b.n	80031c6 <ETH_SetMACConfig+0x3a>
 80031c4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	7fdb      	ldrb	r3, [r3, #31]
 80031d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80031d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	7f92      	ldrb	r2, [r2, #30]
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	d102      	bne.n	80031ea <ETH_SetMACConfig+0x5e>
 80031e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031e8:	e000      	b.n	80031ec <ETH_SetMACConfig+0x60>
 80031ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80031ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	7f1b      	ldrb	r3, [r3, #28]
 80031f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	791b      	ldrb	r3, [r3, #4]
 8003200:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003202:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	f892 2020 	ldrb.w	r2, [r2, #32]
 800320a:	2a00      	cmp	r2, #0
 800320c:	d102      	bne.n	8003214 <ETH_SetMACConfig+0x88>
 800320e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003212:	e000      	b.n	8003216 <ETH_SetMACConfig+0x8a>
 8003214:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003216:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	7bdb      	ldrb	r3, [r3, #15]
 800321c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800321e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003224:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800322c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800322e:	4313      	orrs	r3, r2
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003246:	2001      	movs	r0, #1
 8003248:	f7ff fb0a 	bl	8002860 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003262:	4013      	ands	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003272:	2a00      	cmp	r2, #0
 8003274:	d101      	bne.n	800327a <ETH_SetMACConfig+0xee>
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	e000      	b.n	800327c <ETH_SetMACConfig+0xf0>
 800327a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800327c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003282:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800328a:	2a01      	cmp	r2, #1
 800328c:	d101      	bne.n	8003292 <ETH_SetMACConfig+0x106>
 800328e:	2208      	movs	r2, #8
 8003290:	e000      	b.n	8003294 <ETH_SetMACConfig+0x108>
 8003292:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003294:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800329c:	2a01      	cmp	r2, #1
 800329e:	d101      	bne.n	80032a4 <ETH_SetMACConfig+0x118>
 80032a0:	2204      	movs	r2, #4
 80032a2:	e000      	b.n	80032a6 <ETH_SetMACConfig+0x11a>
 80032a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80032a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80032ae:	2a01      	cmp	r2, #1
 80032b0:	d101      	bne.n	80032b6 <ETH_SetMACConfig+0x12a>
 80032b2:	2202      	movs	r2, #2
 80032b4:	e000      	b.n	80032b8 <ETH_SetMACConfig+0x12c>
 80032b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032b8:	4313      	orrs	r3, r2
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032d0:	2001      	movs	r0, #1
 80032d2:	f7ff fac5 	bl	8002860 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	619a      	str	r2, [r3, #24]
}
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	ff20810f 	.word	0xff20810f

080032ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <ETH_SetDMAConfig+0x110>)
 8003306:	4013      	ands	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	7b1b      	ldrb	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <ETH_SetDMAConfig+0x2c>
 8003312:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003316:	e000      	b.n	800331a <ETH_SetDMAConfig+0x2e>
 8003318:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	7b5b      	ldrb	r3, [r3, #13]
 800331e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003320:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	7f52      	ldrb	r2, [r2, #29]
 8003326:	2a00      	cmp	r2, #0
 8003328:	d102      	bne.n	8003330 <ETH_SetDMAConfig+0x44>
 800332a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800332e:	e000      	b.n	8003332 <ETH_SetDMAConfig+0x46>
 8003330:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003332:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	7b9b      	ldrb	r3, [r3, #14]
 8003338:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800333a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003340:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	7f1b      	ldrb	r3, [r3, #28]
 8003346:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003348:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	7f9b      	ldrb	r3, [r3, #30]
 800334e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003350:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003356:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800335e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003360:	4313      	orrs	r3, r2
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003370:	461a      	mov	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003382:	2001      	movs	r0, #1
 8003384:	f7ff fa6c 	bl	8002860 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003390:	461a      	mov	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	791b      	ldrb	r3, [r3, #4]
 800339a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80033a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80033ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80033b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80033be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80033c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033e0:	2001      	movs	r0, #1
 80033e2:	f7ff fa3d 	bl	8002860 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6013      	str	r3, [r2, #0]
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	f8de3f23 	.word	0xf8de3f23

08003400 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b0a6      	sub	sp, #152	; 0x98
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003408:	2301      	movs	r3, #1
 800340a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003414:	2300      	movs	r3, #0
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003418:	2300      	movs	r3, #0
 800341a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003436:	2300      	movs	r3, #0
 8003438:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800343c:	2300      	movs	r3, #0
 800343e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003440:	2300      	movs	r3, #0
 8003442:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003446:	2300      	movs	r3, #0
 8003448:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800344a:	2300      	movs	r3, #0
 800344c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003456:	2300      	movs	r3, #0
 8003458:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003462:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003466:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800346c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800346e:	2300      	movs	r3, #0
 8003470:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003474:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff fe86 	bl	800318c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003480:	2301      	movs	r3, #1
 8003482:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003484:	2301      	movs	r3, #1
 8003486:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800348e:	2301      	movs	r3, #1
 8003490:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003496:	2300      	movs	r3, #0
 8003498:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80034a2:	2300      	movs	r3, #0
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80034ac:	2301      	movs	r3, #1
 80034ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80034b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034b4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80034b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80034bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80034d0:	f107 0308 	add.w	r3, r7, #8
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff ff08 	bl	80032ec <ETH_SetDMAConfig>
}
 80034dc:	bf00      	nop
 80034de:	3798      	adds	r7, #152	; 0x98
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3305      	adds	r3, #5
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	3204      	adds	r2, #4
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <ETH_MACAddressConfig+0x68>)
 8003506:	4413      	add	r3, r2
 8003508:	461a      	mov	r2, r3
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3303      	adds	r3, #3
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	061a      	lsls	r2, r3, #24
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3302      	adds	r3, #2
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3301      	adds	r3, #1
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	4313      	orrs	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	7812      	ldrb	r2, [r2, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <ETH_MACAddressConfig+0x6c>)
 8003536:	4413      	add	r3, r2
 8003538:	461a      	mov	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	6013      	str	r3, [r2, #0]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40028040 	.word	0x40028040
 8003550:	40028044 	.word	0x40028044

08003554 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e03e      	b.n	80035e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68d9      	ldr	r1, [r3, #12]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2200      	movs	r2, #0
 800357e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2200      	movs	r2, #0
 800358a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	3206      	adds	r2, #6
 8003594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d80c      	bhi.n	80035c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68d9      	ldr	r1, [r3, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	440b      	add	r3, r1
 80035bc:	461a      	mov	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	e004      	b.n	80035ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	461a      	mov	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3301      	adds	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d9bd      	bls.n	8003562 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f8:	611a      	str	r2, [r3, #16]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003606:	b480      	push	{r7}
 8003608:	b085      	sub	sp, #20
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e046      	b.n	80036a2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6919      	ldr	r1, [r3, #16]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	440b      	add	r3, r1
 8003624:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2200      	movs	r2, #0
 8003630:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2200      	movs	r2, #0
 800363c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2200      	movs	r2, #0
 8003642:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003650:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003658:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	3212      	adds	r2, #18
 800366e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d80c      	bhi.n	8003692 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6919      	ldr	r1, [r3, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	440b      	add	r3, r1
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60da      	str	r2, [r3, #12]
 8003690:	e004      	b.n	800369c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	461a      	mov	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d9b5      	bls.n	8003614 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d2:	60da      	str	r2, [r3, #12]
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e177      	b.n	80039ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	f040 8166 	bne.w	80039e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d005      	beq.n	8003732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372e:	2b02      	cmp	r3, #2
 8003730:	d130      	bne.n	8003794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003768:	2201      	movs	r2, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 0201 	and.w	r2, r3, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b03      	cmp	r3, #3
 800379e:	d017      	beq.n	80037d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2203      	movs	r2, #3
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d123      	bne.n	8003824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	220f      	movs	r2, #15
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80c0 	beq.w	80039e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b66      	ldr	r3, [pc, #408]	; (8003a04 <HAL_GPIO_Init+0x324>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a65      	ldr	r2, [pc, #404]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b63      	ldr	r3, [pc, #396]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003882:	4a61      	ldr	r2, [pc, #388]	; (8003a08 <HAL_GPIO_Init+0x328>)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_GPIO_Init+0x32c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d037      	beq.n	800391e <HAL_GPIO_Init+0x23e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <HAL_GPIO_Init+0x330>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <HAL_GPIO_Init+0x23a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <HAL_GPIO_Init+0x334>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d02b      	beq.n	8003916 <HAL_GPIO_Init+0x236>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a55      	ldr	r2, [pc, #340]	; (8003a18 <HAL_GPIO_Init+0x338>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d025      	beq.n	8003912 <HAL_GPIO_Init+0x232>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a54      	ldr	r2, [pc, #336]	; (8003a1c <HAL_GPIO_Init+0x33c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01f      	beq.n	800390e <HAL_GPIO_Init+0x22e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a53      	ldr	r2, [pc, #332]	; (8003a20 <HAL_GPIO_Init+0x340>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d019      	beq.n	800390a <HAL_GPIO_Init+0x22a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_GPIO_Init+0x344>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_GPIO_Init+0x226>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a51      	ldr	r2, [pc, #324]	; (8003a28 <HAL_GPIO_Init+0x348>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00d      	beq.n	8003902 <HAL_GPIO_Init+0x222>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a50      	ldr	r2, [pc, #320]	; (8003a2c <HAL_GPIO_Init+0x34c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <HAL_GPIO_Init+0x21e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4f      	ldr	r2, [pc, #316]	; (8003a30 <HAL_GPIO_Init+0x350>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_GPIO_Init+0x21a>
 80038f6:	2309      	movs	r3, #9
 80038f8:	e012      	b.n	8003920 <HAL_GPIO_Init+0x240>
 80038fa:	230a      	movs	r3, #10
 80038fc:	e010      	b.n	8003920 <HAL_GPIO_Init+0x240>
 80038fe:	2308      	movs	r3, #8
 8003900:	e00e      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003902:	2307      	movs	r3, #7
 8003904:	e00c      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003906:	2306      	movs	r3, #6
 8003908:	e00a      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800390a:	2305      	movs	r3, #5
 800390c:	e008      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800390e:	2304      	movs	r3, #4
 8003910:	e006      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003912:	2303      	movs	r3, #3
 8003914:	e004      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003916:	2302      	movs	r3, #2
 8003918:	e002      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800391e:	2300      	movs	r3, #0
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f002 0203 	and.w	r2, r2, #3
 8003926:	0092      	lsls	r2, r2, #2
 8003928:	4093      	lsls	r3, r2
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003930:	4935      	ldr	r1, [pc, #212]	; (8003a08 <HAL_GPIO_Init+0x328>)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	089b      	lsrs	r3, r3, #2
 8003936:	3302      	adds	r3, #2
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393e:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <HAL_GPIO_Init+0x354>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003962:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <HAL_GPIO_Init+0x354>)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003968:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <HAL_GPIO_Init+0x354>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800398c:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <HAL_GPIO_Init+0x354>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003992:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_GPIO_Init+0x354>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b6:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <HAL_GPIO_Init+0x354>)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039bc:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <HAL_GPIO_Init+0x354>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <HAL_GPIO_Init+0x354>)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3301      	adds	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	f67f ae84 	bls.w	80036fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3724      	adds	r7, #36	; 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40013800 	.word	0x40013800
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40020400 	.word	0x40020400
 8003a14:	40020800 	.word	0x40020800
 8003a18:	40020c00 	.word	0x40020c00
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40021400 	.word	0x40021400
 8003a24:	40021800 	.word	0x40021800
 8003a28:	40021c00 	.word	0x40021c00
 8003a2c:	40022000 	.word	0x40022000
 8003a30:	40022400 	.word	0x40022400
 8003a34:	40013c00 	.word	0x40013c00

08003a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e001      	b.n	8003a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
 8003a74:	4613      	mov	r3, r2
 8003a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a78:	787b      	ldrb	r3, [r7, #1]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a84:	e003      	b.n	8003a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a86:	887b      	ldrh	r3, [r7, #2]
 8003a88:	041a      	lsls	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	619a      	str	r2, [r3, #24]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ab2:	4a05      	ldr	r2, [pc, #20]	; (8003ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe f998 	bl	8001df0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40013c00 	.word	0x40013c00

08003acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e12b      	b.n	8003d36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd fdb2 	bl	800165c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b30:	f001 fb4e 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 8003b34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4a81      	ldr	r2, [pc, #516]	; (8003d40 <HAL_I2C_Init+0x274>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d807      	bhi.n	8003b50 <HAL_I2C_Init+0x84>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a80      	ldr	r2, [pc, #512]	; (8003d44 <HAL_I2C_Init+0x278>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bf94      	ite	ls
 8003b48:	2301      	movls	r3, #1
 8003b4a:	2300      	movhi	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e006      	b.n	8003b5e <HAL_I2C_Init+0x92>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a7d      	ldr	r2, [pc, #500]	; (8003d48 <HAL_I2C_Init+0x27c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	bf94      	ite	ls
 8003b58:	2301      	movls	r3, #1
 8003b5a:	2300      	movhi	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0e7      	b.n	8003d36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a78      	ldr	r2, [pc, #480]	; (8003d4c <HAL_I2C_Init+0x280>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	0c9b      	lsrs	r3, r3, #18
 8003b70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4a6a      	ldr	r2, [pc, #424]	; (8003d40 <HAL_I2C_Init+0x274>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d802      	bhi.n	8003ba0 <HAL_I2C_Init+0xd4>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	e009      	b.n	8003bb4 <HAL_I2C_Init+0xe8>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	4a69      	ldr	r2, [pc, #420]	; (8003d50 <HAL_I2C_Init+0x284>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	495c      	ldr	r1, [pc, #368]	; (8003d40 <HAL_I2C_Init+0x274>)
 8003bd0:	428b      	cmp	r3, r1
 8003bd2:	d819      	bhi.n	8003c08 <HAL_I2C_Init+0x13c>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e59      	subs	r1, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8003be2:	1c59      	adds	r1, r3, #1
 8003be4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003be8:	400b      	ands	r3, r1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_I2C_Init+0x138>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1e59      	subs	r1, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c02:	e051      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c04:	2304      	movs	r3, #4
 8003c06:	e04f      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d111      	bne.n	8003c34 <HAL_I2C_Init+0x168>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e58      	subs	r0, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	440b      	add	r3, r1
 8003c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e012      	b.n	8003c5a <HAL_I2C_Init+0x18e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e58      	subs	r0, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	0099      	lsls	r1, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_I2C_Init+0x196>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e022      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10e      	bne.n	8003c88 <HAL_I2C_Init+0x1bc>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1e58      	subs	r0, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6859      	ldr	r1, [r3, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	440b      	add	r3, r1
 8003c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c86:	e00f      	b.n	8003ca8 <HAL_I2C_Init+0x1dc>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1e58      	subs	r0, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	0099      	lsls	r1, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	6809      	ldr	r1, [r1, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69da      	ldr	r2, [r3, #28]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6911      	ldr	r1, [r2, #16]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68d2      	ldr	r2, [r2, #12]
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	000186a0 	.word	0x000186a0
 8003d44:	001e847f 	.word	0x001e847f
 8003d48:	003d08ff 	.word	0x003d08ff
 8003d4c:	431bde83 	.word	0x431bde83
 8003d50:	10624dd3 	.word	0x10624dd3

08003d54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	460b      	mov	r3, r1
 8003d62:	817b      	strh	r3, [r7, #10]
 8003d64:	4613      	mov	r3, r2
 8003d66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d68:	f7fe fd6e 	bl	8002848 <HAL_GetTick>
 8003d6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	f040 80e0 	bne.w	8003f3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2319      	movs	r3, #25
 8003d82:	2201      	movs	r2, #1
 8003d84:	4970      	ldr	r1, [pc, #448]	; (8003f48 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fa92 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d92:	2302      	movs	r3, #2
 8003d94:	e0d3      	b.n	8003f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_I2C_Master_Transmit+0x50>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e0cc      	b.n	8003f3e <HAL_I2C_Master_Transmit+0x1ea>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d007      	beq.n	8003dca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2221      	movs	r2, #33	; 0x21
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2210      	movs	r2, #16
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	893a      	ldrh	r2, [r7, #8]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a50      	ldr	r2, [pc, #320]	; (8003f4c <HAL_I2C_Master_Transmit+0x1f8>)
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e0c:	8979      	ldrh	r1, [r7, #10]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	6a3a      	ldr	r2, [r7, #32]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f9ca 	bl	80041ac <I2C_MasterRequestWrite>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e08d      	b.n	8003f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e38:	e066      	b.n	8003f08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	6a39      	ldr	r1, [r7, #32]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fb0c 	bl	800445c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00d      	beq.n	8003e66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d107      	bne.n	8003e62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e06b      	b.n	8003f3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	781a      	ldrb	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d11b      	bne.n	8003edc <HAL_I2C_Master_Transmit+0x188>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d017      	beq.n	8003edc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	781a      	ldrb	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	6a39      	ldr	r1, [r7, #32]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fafc 	bl	80044de <I2C_WaitOnBTFFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d107      	bne.n	8003f04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e01a      	b.n	8003f3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d194      	bne.n	8003e3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	00100002 	.word	0x00100002
 8003f4c:	ffff0000 	.word	0xffff0000

08003f50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f60:	f7fe fc72 	bl	8002848 <HAL_GetTick>
 8003f64:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	f040 8111 	bne.w	800419a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2319      	movs	r3, #25
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4988      	ldr	r1, [pc, #544]	; (80041a4 <HAL_I2C_IsDeviceReady+0x254>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f994 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e104      	b.n	800419c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_I2C_IsDeviceReady+0x50>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e0fd      	b.n	800419c <HAL_I2C_IsDeviceReady+0x24c>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d007      	beq.n	8003fc6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2224      	movs	r2, #36	; 0x24
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a70      	ldr	r2, [pc, #448]	; (80041a8 <HAL_I2C_IsDeviceReady+0x258>)
 8003fe8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2200      	movs	r2, #0
 8004002:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f952 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004020:	d103      	bne.n	800402a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e0b6      	b.n	800419c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800402e:	897b      	ldrh	r3, [r7, #10]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800403c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800403e:	f7fe fc03 	bl	8002848 <HAL_GetTick>
 8004042:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b02      	cmp	r3, #2
 8004050:	bf0c      	ite	eq
 8004052:	2301      	moveq	r3, #1
 8004054:	2300      	movne	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004068:	bf0c      	ite	eq
 800406a:	2301      	moveq	r3, #1
 800406c:	2300      	movne	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004072:	e025      	b.n	80040c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004074:	f7fe fbe8 	bl	8002848 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <HAL_I2C_IsDeviceReady+0x13a>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	22a0      	movs	r2, #160	; 0xa0
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b02      	cmp	r3, #2
 800409e:	bf0c      	ite	eq
 80040a0:	2301      	moveq	r3, #1
 80040a2:	2300      	movne	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2ba0      	cmp	r3, #160	; 0xa0
 80040ca:	d005      	beq.n	80040d8 <HAL_I2C_IsDeviceReady+0x188>
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <HAL_I2C_IsDeviceReady+0x188>
 80040d2:	7dbb      	ldrb	r3, [r7, #22]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0cd      	beq.n	8004074 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d129      	bne.n	8004142 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2319      	movs	r3, #25
 800411a:	2201      	movs	r2, #1
 800411c:	4921      	ldr	r1, [pc, #132]	; (80041a4 <HAL_I2C_IsDeviceReady+0x254>)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f8c6 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e036      	b.n	800419c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e02c      	b.n	800419c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004150:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800415a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2319      	movs	r3, #25
 8004162:	2201      	movs	r2, #1
 8004164:	490f      	ldr	r1, [pc, #60]	; (80041a4 <HAL_I2C_IsDeviceReady+0x254>)
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f8a2 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e012      	b.n	800419c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	3301      	adds	r3, #1
 800417a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	429a      	cmp	r2, r3
 8004182:	f4ff af32 	bcc.w	8003fea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800419a:	2302      	movs	r3, #2
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	3720      	adds	r7, #32
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	00100002 	.word	0x00100002
 80041a8:	ffff0000 	.word	0xffff0000

080041ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	460b      	mov	r3, r1
 80041ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d006      	beq.n	80041d6 <I2C_MasterRequestWrite+0x2a>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d003      	beq.n	80041d6 <I2C_MasterRequestWrite+0x2a>
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041d4:	d108      	bne.n	80041e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e00b      	b.n	8004200 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	2b12      	cmp	r3, #18
 80041ee:	d107      	bne.n	8004200 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f84f 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00d      	beq.n	8004234 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004226:	d103      	bne.n	8004230 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e035      	b.n	80042a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423c:	d108      	bne.n	8004250 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800423e:	897b      	ldrh	r3, [r7, #10]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	e01b      	b.n	8004288 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004250:	897b      	ldrh	r3, [r7, #10]
 8004252:	11db      	asrs	r3, r3, #7
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f003 0306 	and.w	r3, r3, #6
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f063 030f 	orn	r3, r3, #15
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	490e      	ldr	r1, [pc, #56]	; (80042a8 <I2C_MasterRequestWrite+0xfc>)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f875 	bl	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e010      	b.n	80042a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4907      	ldr	r1, [pc, #28]	; (80042ac <I2C_MasterRequestWrite+0x100>)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f865 	bl	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	00010008 	.word	0x00010008
 80042ac:	00010002 	.word	0x00010002

080042b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	4613      	mov	r3, r2
 80042be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c0:	e025      	b.n	800430e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d021      	beq.n	800430e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ca:	f7fe fabd 	bl	8002848 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d302      	bcc.n	80042e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d116      	bne.n	800430e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f043 0220 	orr.w	r2, r3, #32
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e023      	b.n	8004356 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d10d      	bne.n	8004334 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4013      	ands	r3, r2
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	e00c      	b.n	800434e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	429a      	cmp	r2, r3
 8004352:	d0b6      	beq.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800436c:	e051      	b.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437c:	d123      	bne.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004396:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0204 	orr.w	r2, r3, #4
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e046      	b.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d021      	beq.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fe fa3b 	bl	8002848 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e020      	b.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10c      	bne.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	43da      	mvns	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	e00b      	b.n	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	43da      	mvns	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d18d      	bne.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004468:	e02d      	b.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f878 	bl	8004560 <I2C_IsAcknowledgeFailed>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e02d      	b.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d021      	beq.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004482:	f7fe f9e1 	bl	8002848 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	d302      	bcc.n	8004498 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f043 0220 	orr.w	r2, r3, #32
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e007      	b.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b80      	cmp	r3, #128	; 0x80
 80044d2:	d1ca      	bne.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ea:	e02d      	b.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f837 	bl	8004560 <I2C_IsAcknowledgeFailed>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e02d      	b.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d021      	beq.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004504:	f7fe f9a0 	bl	8002848 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	429a      	cmp	r2, r3
 8004512:	d302      	bcc.n	800451a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d116      	bne.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e007      	b.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d1ca      	bne.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004576:	d11b      	bne.n	80045b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004580:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f043 0204 	orr.w	r2, r3, #4
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d129      	bne.n	8004628 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2224      	movs	r2, #36	; 0x24
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0201 	bic.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0210 	bic.w	r2, r2, #16
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	e000      	b.n	800462a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004628:	2302      	movs	r3, #2
  }
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b20      	cmp	r3, #32
 800464e:	d12a      	bne.n	80046a6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2224      	movs	r2, #36	; 0x24
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004670:	89fb      	ldrh	r3, [r7, #14]
 8004672:	f023 030f 	bic.w	r3, r3, #15
 8004676:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	b29a      	uxth	r2, r3
 800467c:	89fb      	ldrh	r3, [r7, #14]
 800467e:	4313      	orrs	r3, r2
 8004680:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	89fa      	ldrh	r2, [r7, #14]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e000      	b.n	80046a8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80046a6:	2302      	movs	r3, #2
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b6:	b08f      	sub	sp, #60	; 0x3c
 80046b8:	af0a      	add	r7, sp, #40	; 0x28
 80046ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e10f      	b.n	80048e6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fd ffc7 	bl	8002674 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2203      	movs	r2, #3
 80046ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f002 f9a2 	bl	8006a4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	687e      	ldr	r6, [r7, #4]
 8004712:	466d      	mov	r5, sp
 8004714:	f106 0410 	add.w	r4, r6, #16
 8004718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800471a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800471c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800471e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004720:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004724:	e885 0003 	stmia.w	r5, {r0, r1}
 8004728:	1d33      	adds	r3, r6, #4
 800472a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800472c:	6838      	ldr	r0, [r7, #0]
 800472e:	f002 f92d 	bl	800698c <USB_CoreInit>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0d0      	b.n	80048e6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f002 f990 	bl	8006a70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]
 8004754:	e04a      	b.n	80047ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	333d      	adds	r3, #61	; 0x3d
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800476a:	7bfa      	ldrb	r2, [r7, #15]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	333c      	adds	r3, #60	; 0x3c
 800477a:	7bfa      	ldrb	r2, [r7, #15]
 800477c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800477e:	7bfa      	ldrb	r2, [r7, #15]
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	b298      	uxth	r0, r3
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	3344      	adds	r3, #68	; 0x44
 8004792:	4602      	mov	r2, r0
 8004794:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004796:	7bfa      	ldrb	r2, [r7, #15]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	3340      	adds	r3, #64	; 0x40
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047aa:	7bfa      	ldrb	r2, [r7, #15]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	3348      	adds	r3, #72	; 0x48
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047be:	7bfa      	ldrb	r2, [r7, #15]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	334c      	adds	r3, #76	; 0x4c
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047d2:	7bfa      	ldrb	r2, [r7, #15]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	3354      	adds	r3, #84	; 0x54
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	3301      	adds	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d3af      	bcc.n	8004756 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
 80047fa:	e044      	b.n	8004886 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047fc:	7bfa      	ldrb	r2, [r7, #15]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004824:	7bfa      	ldrb	r2, [r7, #15]
 8004826:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004828:	7bfa      	ldrb	r2, [r7, #15]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800483e:	7bfa      	ldrb	r2, [r7, #15]
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004854:	7bfa      	ldrb	r2, [r7, #15]
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800486a:	7bfa      	ldrb	r2, [r7, #15]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	3301      	adds	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
 8004886:	7bfa      	ldrb	r2, [r7, #15]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d3b5      	bcc.n	80047fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	687e      	ldr	r6, [r7, #4]
 8004898:	466d      	mov	r5, sp
 800489a:	f106 0410 	add.w	r4, r6, #16
 800489e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80048ae:	1d33      	adds	r3, r6, #4
 80048b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048b2:	6838      	ldr	r0, [r7, #0]
 80048b4:	f002 f928 	bl	8006b08 <USB_DevInit>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00d      	b.n	80048e6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f002 faf3 	bl	8006eca <USB_DevDisconnect>

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080048f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e267      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d075      	beq.n	80049fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800490e:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b04      	cmp	r3, #4
 8004918:	d00c      	beq.n	8004934 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800491a:	4b85      	ldr	r3, [pc, #532]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004922:	2b08      	cmp	r3, #8
 8004924:	d112      	bne.n	800494c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004926:	4b82      	ldr	r3, [pc, #520]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004932:	d10b      	bne.n	800494c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004934:	4b7e      	ldr	r3, [pc, #504]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d05b      	beq.n	80049f8 <HAL_RCC_OscConfig+0x108>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d157      	bne.n	80049f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e242      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004954:	d106      	bne.n	8004964 <HAL_RCC_OscConfig+0x74>
 8004956:	4b76      	ldr	r3, [pc, #472]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a75      	ldr	r2, [pc, #468]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e01d      	b.n	80049a0 <HAL_RCC_OscConfig+0xb0>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800496c:	d10c      	bne.n	8004988 <HAL_RCC_OscConfig+0x98>
 800496e:	4b70      	ldr	r3, [pc, #448]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a6f      	ldr	r2, [pc, #444]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4b6d      	ldr	r3, [pc, #436]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a6c      	ldr	r2, [pc, #432]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e00b      	b.n	80049a0 <HAL_RCC_OscConfig+0xb0>
 8004988:	4b69      	ldr	r3, [pc, #420]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a68      	ldr	r2, [pc, #416]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 800498e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	4b66      	ldr	r3, [pc, #408]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a65      	ldr	r2, [pc, #404]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 800499a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d013      	beq.n	80049d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7fd ff4e 	bl	8002848 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b0:	f7fd ff4a 	bl	8002848 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	; 0x64
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e207      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c2:	4b5b      	ldr	r3, [pc, #364]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0xc0>
 80049ce:	e014      	b.n	80049fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fd ff3a 	bl	8002848 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fd ff36 	bl	8002848 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e1f3      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ea:	4b51      	ldr	r3, [pc, #324]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0xe8>
 80049f6:	e000      	b.n	80049fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d063      	beq.n	8004ace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a06:	4b4a      	ldr	r3, [pc, #296]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a12:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d11c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a1e:	4b44      	ldr	r3, [pc, #272]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d116      	bne.n	8004a58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2a:	4b41      	ldr	r3, [pc, #260]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_RCC_OscConfig+0x152>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d001      	beq.n	8004a42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e1c7      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a42:	4b3b      	ldr	r3, [pc, #236]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	4937      	ldr	r1, [pc, #220]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a56:	e03a      	b.n	8004ace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d020      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a60:	4b34      	ldr	r3, [pc, #208]	; (8004b34 <HAL_RCC_OscConfig+0x244>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a66:	f7fd feef 	bl	8002848 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a6e:	f7fd feeb 	bl	8002848 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e1a8      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a80:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8c:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4925      	ldr	r1, [pc, #148]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	600b      	str	r3, [r1, #0]
 8004aa0:	e015      	b.n	8004ace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aa2:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <HAL_RCC_OscConfig+0x244>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fd fece 	bl	8002848 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab0:	f7fd feca 	bl	8002848 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e187      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d036      	beq.n	8004b48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d016      	beq.n	8004b10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <HAL_RCC_OscConfig+0x248>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae8:	f7fd feae 	bl	8002848 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004af0:	f7fd feaa 	bl	8002848 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e167      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCC_OscConfig+0x240>)
 8004b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x200>
 8004b0e:	e01b      	b.n	8004b48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_RCC_OscConfig+0x248>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b16:	f7fd fe97 	bl	8002848 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1c:	e00e      	b.n	8004b3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b1e:	f7fd fe93 	bl	8002848 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d907      	bls.n	8004b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e150      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
 8004b30:	40023800 	.word	0x40023800
 8004b34:	42470000 	.word	0x42470000
 8004b38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3c:	4b88      	ldr	r3, [pc, #544]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1ea      	bne.n	8004b1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8097 	beq.w	8004c84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b5a:	4b81      	ldr	r3, [pc, #516]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10f      	bne.n	8004b86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	4b7d      	ldr	r3, [pc, #500]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	4a7c      	ldr	r2, [pc, #496]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b74:	6413      	str	r3, [r2, #64]	; 0x40
 8004b76:	4b7a      	ldr	r3, [pc, #488]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b82:	2301      	movs	r3, #1
 8004b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b86:	4b77      	ldr	r3, [pc, #476]	; (8004d64 <HAL_RCC_OscConfig+0x474>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d118      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b92:	4b74      	ldr	r3, [pc, #464]	; (8004d64 <HAL_RCC_OscConfig+0x474>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a73      	ldr	r2, [pc, #460]	; (8004d64 <HAL_RCC_OscConfig+0x474>)
 8004b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b9e:	f7fd fe53 	bl	8002848 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba6:	f7fd fe4f 	bl	8002848 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e10c      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb8:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <HAL_RCC_OscConfig+0x474>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d106      	bne.n	8004bda <HAL_RCC_OscConfig+0x2ea>
 8004bcc:	4b64      	ldr	r3, [pc, #400]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	4a63      	ldr	r2, [pc, #396]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd8:	e01c      	b.n	8004c14 <HAL_RCC_OscConfig+0x324>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b05      	cmp	r3, #5
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCC_OscConfig+0x30c>
 8004be2:	4b5f      	ldr	r3, [pc, #380]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be6:	4a5e      	ldr	r2, [pc, #376]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004be8:	f043 0304 	orr.w	r3, r3, #4
 8004bec:	6713      	str	r3, [r2, #112]	; 0x70
 8004bee:	4b5c      	ldr	r3, [pc, #368]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	4a5b      	ldr	r2, [pc, #364]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfa:	e00b      	b.n	8004c14 <HAL_RCC_OscConfig+0x324>
 8004bfc:	4b58      	ldr	r3, [pc, #352]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c00:	4a57      	ldr	r2, [pc, #348]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	6713      	str	r3, [r2, #112]	; 0x70
 8004c08:	4b55      	ldr	r3, [pc, #340]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	4a54      	ldr	r2, [pc, #336]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004c0e:	f023 0304 	bic.w	r3, r3, #4
 8004c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d015      	beq.n	8004c48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fd fe14 	bl	8002848 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c22:	e00a      	b.n	8004c3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c24:	f7fd fe10 	bl	8002848 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e0cb      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3a:	4b49      	ldr	r3, [pc, #292]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ee      	beq.n	8004c24 <HAL_RCC_OscConfig+0x334>
 8004c46:	e014      	b.n	8004c72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c48:	f7fd fdfe 	bl	8002848 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c4e:	e00a      	b.n	8004c66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c50:	f7fd fdfa 	bl	8002848 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e0b5      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c66:	4b3e      	ldr	r3, [pc, #248]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1ee      	bne.n	8004c50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d105      	bne.n	8004c84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c78:	4b39      	ldr	r3, [pc, #228]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	4a38      	ldr	r2, [pc, #224]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80a1 	beq.w	8004dd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c8e:	4b34      	ldr	r3, [pc, #208]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d05c      	beq.n	8004d54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d141      	bne.n	8004d26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca2:	4b31      	ldr	r3, [pc, #196]	; (8004d68 <HAL_RCC_OscConfig+0x478>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca8:	f7fd fdce 	bl	8002848 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fd fdca 	bl	8002848 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e087      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc2:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69da      	ldr	r2, [r3, #28]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	019b      	lsls	r3, r3, #6
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	085b      	lsrs	r3, r3, #1
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	061b      	lsls	r3, r3, #24
 8004cf2:	491b      	ldr	r1, [pc, #108]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_RCC_OscConfig+0x478>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfe:	f7fd fda3 	bl	8002848 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d06:	f7fd fd9f 	bl	8002848 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e05c      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d18:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x416>
 8004d24:	e054      	b.n	8004dd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <HAL_RCC_OscConfig+0x478>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7fd fd8c 	bl	8002848 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fd fd88 	bl	8002848 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e045      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_RCC_OscConfig+0x470>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x444>
 8004d52:	e03d      	b.n	8004dd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d107      	bne.n	8004d6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e038      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40007000 	.word	0x40007000
 8004d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <HAL_RCC_OscConfig+0x4ec>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d028      	beq.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d121      	bne.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d11a      	bne.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d111      	bne.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	085b      	lsrs	r3, r3, #1
 8004db4:	3b01      	subs	r3, #1
 8004db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d107      	bne.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d001      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40023800 	.word	0x40023800

08004de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0cc      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004df4:	4b68      	ldr	r3, [pc, #416]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d90c      	bls.n	8004e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b65      	ldr	r3, [pc, #404]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0a:	4b63      	ldr	r3, [pc, #396]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0b8      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d020      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e34:	4b59      	ldr	r3, [pc, #356]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4a58      	ldr	r2, [pc, #352]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e4c:	4b53      	ldr	r3, [pc, #332]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	4a52      	ldr	r2, [pc, #328]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e58:	4b50      	ldr	r3, [pc, #320]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	494d      	ldr	r1, [pc, #308]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d044      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d107      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7e:	4b47      	ldr	r3, [pc, #284]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d119      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e07f      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9e:	4b3f      	ldr	r3, [pc, #252]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e06f      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eae:	4b3b      	ldr	r3, [pc, #236]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e067      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ebe:	4b37      	ldr	r3, [pc, #220]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f023 0203 	bic.w	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4934      	ldr	r1, [pc, #208]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ed0:	f7fd fcba 	bl	8002848 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed6:	e00a      	b.n	8004eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed8:	f7fd fcb6 	bl	8002848 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e04f      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 020c 	and.w	r2, r3, #12
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d1eb      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f00:	4b25      	ldr	r3, [pc, #148]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d20c      	bcs.n	8004f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0e:	4b22      	ldr	r3, [pc, #136]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f16:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d001      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e032      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4916      	ldr	r1, [pc, #88]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d009      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	490e      	ldr	r1, [pc, #56]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f66:	f000 f821 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	091b      	lsrs	r3, r3, #4
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	490a      	ldr	r1, [pc, #40]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f78:	5ccb      	ldrb	r3, [r1, r3]
 8004f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7e:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f82:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fd fc1a 	bl	80027c0 <HAL_InitTick>

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40023c00 	.word	0x40023c00
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	0800b7ec 	.word	0x0800b7ec
 8004fa4:	20000008 	.word	0x20000008
 8004fa8:	2000000c 	.word	0x2000000c

08004fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb0:	b094      	sub	sp, #80	; 0x50
 8004fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb8:	2300      	movs	r3, #0
 8004fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fc4:	4b79      	ldr	r3, [pc, #484]	; (80051ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 030c 	and.w	r3, r3, #12
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d00d      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0x40>
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	f200 80e1 	bhi.w	8005198 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d003      	beq.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fde:	e0db      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fe0:	4b73      	ldr	r3, [pc, #460]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fe2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004fe4:	e0db      	b.n	800519e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fe6:	4b73      	ldr	r3, [pc, #460]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fea:	e0d8      	b.n	800519e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fec:	4b6f      	ldr	r3, [pc, #444]	; (80051ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ff6:	4b6d      	ldr	r3, [pc, #436]	; (80051ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d063      	beq.n	80050ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005002:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <HAL_RCC_GetSysClockFreq+0x200>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	099b      	lsrs	r3, r3, #6
 8005008:	2200      	movs	r2, #0
 800500a:	63bb      	str	r3, [r7, #56]	; 0x38
 800500c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005014:	633b      	str	r3, [r7, #48]	; 0x30
 8005016:	2300      	movs	r3, #0
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
 800501a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800501e:	4622      	mov	r2, r4
 8005020:	462b      	mov	r3, r5
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	0159      	lsls	r1, r3, #5
 800502c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005030:	0150      	lsls	r0, r2, #5
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4621      	mov	r1, r4
 8005038:	1a51      	subs	r1, r2, r1
 800503a:	6139      	str	r1, [r7, #16]
 800503c:	4629      	mov	r1, r5
 800503e:	eb63 0301 	sbc.w	r3, r3, r1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005050:	4659      	mov	r1, fp
 8005052:	018b      	lsls	r3, r1, #6
 8005054:	4651      	mov	r1, sl
 8005056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800505a:	4651      	mov	r1, sl
 800505c:	018a      	lsls	r2, r1, #6
 800505e:	4651      	mov	r1, sl
 8005060:	ebb2 0801 	subs.w	r8, r2, r1
 8005064:	4659      	mov	r1, fp
 8005066:	eb63 0901 	sbc.w	r9, r3, r1
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800507a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800507e:	4690      	mov	r8, r2
 8005080:	4699      	mov	r9, r3
 8005082:	4623      	mov	r3, r4
 8005084:	eb18 0303 	adds.w	r3, r8, r3
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	462b      	mov	r3, r5
 800508c:	eb49 0303 	adc.w	r3, r9, r3
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800509e:	4629      	mov	r1, r5
 80050a0:	024b      	lsls	r3, r1, #9
 80050a2:	4621      	mov	r1, r4
 80050a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050a8:	4621      	mov	r1, r4
 80050aa:	024a      	lsls	r2, r1, #9
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b2:	2200      	movs	r2, #0
 80050b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050bc:	f7fb fe04 	bl	8000cc8 <__aeabi_uldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4613      	mov	r3, r2
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c8:	e058      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ca:	4b38      	ldr	r3, [pc, #224]	; (80051ac <HAL_RCC_GetSysClockFreq+0x200>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	099b      	lsrs	r3, r3, #6
 80050d0:	2200      	movs	r2, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	4611      	mov	r1, r2
 80050d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050da:	623b      	str	r3, [r7, #32]
 80050dc:	2300      	movs	r3, #0
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
 80050e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050e4:	4642      	mov	r2, r8
 80050e6:	464b      	mov	r3, r9
 80050e8:	f04f 0000 	mov.w	r0, #0
 80050ec:	f04f 0100 	mov.w	r1, #0
 80050f0:	0159      	lsls	r1, r3, #5
 80050f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050f6:	0150      	lsls	r0, r2, #5
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4641      	mov	r1, r8
 80050fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005102:	4649      	mov	r1, r9
 8005104:	eb63 0b01 	sbc.w	fp, r3, r1
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005114:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005118:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800511c:	ebb2 040a 	subs.w	r4, r2, sl
 8005120:	eb63 050b 	sbc.w	r5, r3, fp
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	00eb      	lsls	r3, r5, #3
 800512e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005132:	00e2      	lsls	r2, r4, #3
 8005134:	4614      	mov	r4, r2
 8005136:	461d      	mov	r5, r3
 8005138:	4643      	mov	r3, r8
 800513a:	18e3      	adds	r3, r4, r3
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	464b      	mov	r3, r9
 8005140:	eb45 0303 	adc.w	r3, r5, r3
 8005144:	607b      	str	r3, [r7, #4]
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005152:	4629      	mov	r1, r5
 8005154:	028b      	lsls	r3, r1, #10
 8005156:	4621      	mov	r1, r4
 8005158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800515c:	4621      	mov	r1, r4
 800515e:	028a      	lsls	r2, r1, #10
 8005160:	4610      	mov	r0, r2
 8005162:	4619      	mov	r1, r3
 8005164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005166:	2200      	movs	r2, #0
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	61fa      	str	r2, [r7, #28]
 800516c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005170:	f7fb fdaa 	bl	8000cc8 <__aeabi_uldivmod>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4613      	mov	r3, r2
 800517a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_RCC_GetSysClockFreq+0x200>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	0c1b      	lsrs	r3, r3, #16
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	3301      	adds	r3, #1
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800518c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800518e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005196:	e002      	b.n	800519e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800519a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800519c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800519e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3750      	adds	r7, #80	; 0x50
 80051a4:	46bd      	mov	sp, r7
 80051a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051aa:	bf00      	nop
 80051ac:	40023800 	.word	0x40023800
 80051b0:	00f42400 	.word	0x00f42400
 80051b4:	007a1200 	.word	0x007a1200

080051b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051bc:	4b03      	ldr	r3, [pc, #12]	; (80051cc <HAL_RCC_GetHCLKFreq+0x14>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000008 	.word	0x20000008

080051d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051d4:	f7ff fff0 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0a9b      	lsrs	r3, r3, #10
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4903      	ldr	r1, [pc, #12]	; (80051f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40023800 	.word	0x40023800
 80051f4:	0800b7fc 	.word	0x0800b7fc

080051f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051fc:	f7ff ffdc 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	0b5b      	lsrs	r3, r3, #13
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4903      	ldr	r1, [pc, #12]	; (800521c <HAL_RCC_GetPCLK2Freq+0x24>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40023800 	.word	0x40023800
 800521c:	0800b7fc 	.word	0x0800b7fc

08005220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10b      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005244:	2b00      	cmp	r3, #0
 8005246:	d105      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005250:	2b00      	cmp	r3, #0
 8005252:	d075      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005254:	4b91      	ldr	r3, [pc, #580]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800525a:	f7fd faf5 	bl	8002848 <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005260:	e008      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005262:	f7fd faf1 	bl	8002848 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e189      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005274:	4b8a      	ldr	r3, [pc, #552]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f0      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	019a      	lsls	r2, r3, #6
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	071b      	lsls	r3, r3, #28
 8005298:	4981      	ldr	r1, [pc, #516]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01f      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052ac:	4b7c      	ldr	r3, [pc, #496]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b2:	0f1b      	lsrs	r3, r3, #28
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	019a      	lsls	r2, r3, #6
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	431a      	orrs	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	071b      	lsls	r3, r3, #28
 80052cc:	4974      	ldr	r1, [pc, #464]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052d4:	4b72      	ldr	r3, [pc, #456]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052da:	f023 021f 	bic.w	r2, r3, #31
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	496e      	ldr	r1, [pc, #440]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00d      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	019a      	lsls	r2, r3, #6
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	061b      	lsls	r3, r3, #24
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	071b      	lsls	r3, r3, #28
 800530c:	4964      	ldr	r1, [pc, #400]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005314:	4b61      	ldr	r3, [pc, #388]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005316:	2201      	movs	r2, #1
 8005318:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800531a:	f7fd fa95 	bl	8002848 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005322:	f7fd fa91 	bl	8002848 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e129      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005334:	4b5a      	ldr	r3, [pc, #360]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005354:	2b00      	cmp	r3, #0
 8005356:	d079      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005358:	4b52      	ldr	r3, [pc, #328]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800535e:	f7fd fa73 	bl	8002848 <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005366:	f7fd fa6f 	bl	8002848 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e107      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005378:	4b49      	ldr	r3, [pc, #292]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005384:	d0ef      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d020      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005392:	4b43      	ldr	r3, [pc, #268]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	0f1b      	lsrs	r3, r3, #28
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	019a      	lsls	r2, r3, #6
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	061b      	lsls	r3, r3, #24
 80053ac:	431a      	orrs	r2, r3
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	071b      	lsls	r3, r3, #28
 80053b2:	493b      	ldr	r1, [pc, #236]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053ba:	4b39      	ldr	r3, [pc, #228]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	4934      	ldr	r1, [pc, #208]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01e      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053e0:	4b2f      	ldr	r3, [pc, #188]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	0e1b      	lsrs	r3, r3, #24
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	019a      	lsls	r2, r3, #6
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	061b      	lsls	r3, r3, #24
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	071b      	lsls	r3, r3, #28
 8005400:	4927      	ldr	r1, [pc, #156]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005408:	4b25      	ldr	r3, [pc, #148]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800540a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800540e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	4922      	ldr	r1, [pc, #136]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800541e:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005420:	2201      	movs	r2, #1
 8005422:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005424:	f7fd fa10 	bl	8002848 <HAL_GetTick>
 8005428:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800542a:	e008      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800542c:	f7fd fa0c 	bl	8002848 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e0a4      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800543e:	4b18      	ldr	r3, [pc, #96]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800544a:	d1ef      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 808b 	beq.w	8005570 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	4a0f      	ldr	r2, [pc, #60]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005468:	6413      	str	r3, [r2, #64]	; 0x40
 800546a:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005476:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a0b      	ldr	r2, [pc, #44]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800547c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005480:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005482:	f7fd f9e1 	bl	8002848 <HAL_GetTick>
 8005486:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005488:	e010      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800548a:	f7fd f9dd 	bl	8002848 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d909      	bls.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e075      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800549c:	42470068 	.word	0x42470068
 80054a0:	40023800 	.word	0x40023800
 80054a4:	42470070 	.word	0x42470070
 80054a8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054ac:	4b38      	ldr	r3, [pc, #224]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0e8      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054b8:	4b36      	ldr	r3, [pc, #216]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d02f      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d028      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054d6:	4b2f      	ldr	r3, [pc, #188]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054e0:	4b2d      	ldr	r3, [pc, #180]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054e6:	4b2c      	ldr	r3, [pc, #176]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054ec:	4a29      	ldr	r2, [pc, #164]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054f2:	4b28      	ldr	r3, [pc, #160]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d114      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80054fe:	f7fd f9a3 	bl	8002848 <HAL_GetTick>
 8005502:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005504:	e00a      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005506:	f7fd f99f 	bl	8002848 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	f241 3288 	movw	r2, #5000	; 0x1388
 8005514:	4293      	cmp	r3, r2
 8005516:	d901      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e035      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551c:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0ee      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005534:	d10d      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005536:	4b17      	ldr	r3, [pc, #92]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554a:	4912      	ldr	r1, [pc, #72]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800554c:	4313      	orrs	r3, r2
 800554e:	608b      	str	r3, [r1, #8]
 8005550:	e005      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005558:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800555c:	6093      	str	r3, [r2, #8]
 800555e:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005560:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556a:	490a      	ldr	r1, [pc, #40]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800556c:	4313      	orrs	r3, r2
 800556e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005584:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40007000 	.word	0x40007000
 8005594:	40023800 	.word	0x40023800
 8005598:	42470e40 	.word	0x42470e40
 800559c:	424711e0 	.word	0x424711e0

080055a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e066      	b.n	8005684 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	7f5b      	ldrb	r3, [r3, #29]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d105      	bne.n	80055cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fc fdee 	bl	80021a8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	22ca      	movs	r2, #202	; 0xca
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2253      	movs	r2, #83	; 0x53
 80055e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fa45 	bl	8005a72 <RTC_EnterInitMode>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d12c      	bne.n	800564c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005604:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6899      	ldr	r1, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	68d2      	ldr	r2, [r2, #12]
 800562c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6919      	ldr	r1, [r3, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	041a      	lsls	r2, r3, #16
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fa4c 	bl	8005ae0 <RTC_ExitInitMode>
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d113      	bne.n	800567a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	22ff      	movs	r2, #255	; 0xff
 8005680:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005682:	7bfb      	ldrb	r3, [r7, #15]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	7f1b      	ldrb	r3, [r3, #28]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_RTC_SetTime+0x1c>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e087      	b.n	80057b8 <HAL_RTC_SetTime+0x12c>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2202      	movs	r2, #2
 80056b2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d126      	bne.n	8005708 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d102      	bne.n	80056ce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2200      	movs	r2, #0
 80056cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fa29 	bl	8005b2a <RTC_ByteToBcd2>
 80056d8:	4603      	mov	r3, r0
 80056da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fa22 	bl	8005b2a <RTC_ByteToBcd2>
 80056e6:	4603      	mov	r3, r0
 80056e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	789b      	ldrb	r3, [r3, #2]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fa1a 	bl	8005b2a <RTC_ByteToBcd2>
 80056f6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056f8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	78db      	ldrb	r3, [r3, #3]
 8005700:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e018      	b.n	800573a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2200      	movs	r2, #0
 800571a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005728:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800572e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	78db      	ldrb	r3, [r3, #3]
 8005734:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	22ca      	movs	r2, #202	; 0xca
 8005740:	625a      	str	r2, [r3, #36]	; 0x24
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2253      	movs	r2, #83	; 0x53
 8005748:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 f991 	bl	8005a72 <RTC_EnterInitMode>
 8005750:	4603      	mov	r3, r0
 8005752:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005754:	7cfb      	ldrb	r3, [r7, #19]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d120      	bne.n	800579c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005764:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005768:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005778:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	431a      	orrs	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f9a4 	bl	8005ae0 <RTC_ExitInitMode>
 8005798:	4603      	mov	r3, r0
 800579a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800579c:	7cfb      	ldrb	r3, [r7, #19]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d102      	bne.n	80057a8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	22ff      	movs	r2, #255	; 0xff
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	771a      	strb	r2, [r3, #28]

  return status;
 80057b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd90      	pop	{r4, r7, pc}

080057c0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80057f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80057f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	0c1b      	lsrs	r3, r3, #16
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005802:	b2da      	uxtb	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005812:	b2da      	uxtb	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005820:	b2da      	uxtb	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	0d9b      	lsrs	r3, r3, #22
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	b2da      	uxtb	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d11a      	bne.n	8005872 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f000 f98f 	bl	8005b64 <RTC_Bcd2ToByte>
 8005846:	4603      	mov	r3, r0
 8005848:	461a      	mov	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	785b      	ldrb	r3, [r3, #1]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f986 	bl	8005b64 <RTC_Bcd2ToByte>
 8005858:	4603      	mov	r3, r0
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	789b      	ldrb	r3, [r3, #2]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f97d 	bl	8005b64 <RTC_Bcd2ToByte>
 800586a:	4603      	mov	r3, r0
 800586c:	461a      	mov	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	7f1b      	ldrb	r3, [r3, #28]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_RTC_SetDate+0x1c>
 8005894:	2302      	movs	r3, #2
 8005896:	e071      	b.n	800597c <HAL_RTC_SetDate+0x100>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2202      	movs	r2, #2
 80058a2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10e      	bne.n	80058c8 <HAL_RTC_SetDate+0x4c>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	785b      	ldrb	r3, [r3, #1]
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	330a      	adds	r3, #10
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d11c      	bne.n	8005908 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	78db      	ldrb	r3, [r3, #3]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f929 	bl	8005b2a <RTC_ByteToBcd2>
 80058d8:	4603      	mov	r3, r0
 80058da:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 f922 	bl	8005b2a <RTC_ByteToBcd2>
 80058e6:	4603      	mov	r3, r0
 80058e8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058ea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	789b      	ldrb	r3, [r3, #2]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f91a 	bl	8005b2a <RTC_ByteToBcd2>
 80058f6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058f8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e00e      	b.n	8005926 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	78db      	ldrb	r3, [r3, #3]
 800590c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005914:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800591a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	22ca      	movs	r2, #202	; 0xca
 800592c:	625a      	str	r2, [r3, #36]	; 0x24
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2253      	movs	r2, #83	; 0x53
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f89b 	bl	8005a72 <RTC_EnterInitMode>
 800593c:	4603      	mov	r3, r0
 800593e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005940:	7cfb      	ldrb	r3, [r7, #19]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10c      	bne.n	8005960 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005950:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005954:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f8c2 	bl	8005ae0 <RTC_ExitInitMode>
 800595c:	4603      	mov	r3, r0
 800595e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	771a      	strb	r2, [r3, #28]

  return status;
 800597a:	7cfb      	ldrb	r3, [r7, #19]
}
 800597c:	4618      	mov	r0, r3
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	bd90      	pop	{r4, r7, pc}

08005984 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800599e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	0c1b      	lsrs	r3, r3, #16
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	0a1b      	lsrs	r3, r3, #8
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	0b5b      	lsrs	r3, r3, #13
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d11a      	bne.n	8005a18 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	78db      	ldrb	r3, [r3, #3]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f8bc 	bl	8005b64 <RTC_Bcd2ToByte>
 80059ec:	4603      	mov	r3, r0
 80059ee:	461a      	mov	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	785b      	ldrb	r3, [r3, #1]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 f8b3 	bl	8005b64 <RTC_Bcd2ToByte>
 80059fe:	4603      	mov	r3, r0
 8005a00:	461a      	mov	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	789b      	ldrb	r3, [r3, #2]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f8aa 	bl	8005b64 <RTC_Bcd2ToByte>
 8005a10:	4603      	mov	r3, r0
 8005a12:	461a      	mov	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a3c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a3e:	f7fc ff03 	bl	8002848 <HAL_GetTick>
 8005a42:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a44:	e009      	b.n	8005a5a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a46:	f7fc feff 	bl	8002848 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a54:	d901      	bls.n	8005a5a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e007      	b.n	8005a6a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0ee      	beq.n	8005a46 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d122      	bne.n	8005ad6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aa0:	f7fc fed2 	bl	8002848 <HAL_GetTick>
 8005aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005aa6:	e00c      	b.n	8005ac2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005aa8:	f7fc fece 	bl	8002848 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ab6:	d904      	bls.n	8005ac2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2204      	movs	r2, #4
 8005abc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <RTC_EnterInitMode+0x64>
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d1e8      	bne.n	8005aa8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005afa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff ff89 	bl	8005a22 <HAL_RTC_WaitForSynchro>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2204      	movs	r2, #4
 8005b1a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	4603      	mov	r3, r0
 8005b32:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005b38:	e005      	b.n	8005b46 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	3b0a      	subs	r3, #10
 8005b44:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	2b09      	cmp	r3, #9
 8005b4a:	d8f6      	bhi.n	8005b3a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	b2db      	uxtb	r3, r3
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	091b      	lsrs	r3, r3, #4
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	0092      	lsls	r2, r2, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	b2db      	uxtb	r3, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e041      	b.n	8005c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fc fc94 	bl	80024f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f000 f95e 	bl	8005e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d001      	beq.n	8005c54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e046      	b.n	8005ce2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a23      	ldr	r2, [pc, #140]	; (8005cf0 <HAL_TIM_Base_Start+0xb4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d022      	beq.n	8005cac <HAL_TIM_Base_Start+0x70>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6e:	d01d      	beq.n	8005cac <HAL_TIM_Base_Start+0x70>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1f      	ldr	r2, [pc, #124]	; (8005cf4 <HAL_TIM_Base_Start+0xb8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d018      	beq.n	8005cac <HAL_TIM_Base_Start+0x70>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1e      	ldr	r2, [pc, #120]	; (8005cf8 <HAL_TIM_Base_Start+0xbc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d013      	beq.n	8005cac <HAL_TIM_Base_Start+0x70>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1c      	ldr	r2, [pc, #112]	; (8005cfc <HAL_TIM_Base_Start+0xc0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00e      	beq.n	8005cac <HAL_TIM_Base_Start+0x70>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1b      	ldr	r2, [pc, #108]	; (8005d00 <HAL_TIM_Base_Start+0xc4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d009      	beq.n	8005cac <HAL_TIM_Base_Start+0x70>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <HAL_TIM_Base_Start+0xc8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_TIM_Base_Start+0x70>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <HAL_TIM_Base_Start+0xcc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d111      	bne.n	8005cd0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b06      	cmp	r3, #6
 8005cbc:	d010      	beq.n	8005ce0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0201 	orr.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cce:	e007      	b.n	8005ce0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40010400 	.word	0x40010400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40001800 	.word	0x40001800

08005d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_TIM_ConfigClockSource+0x1c>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e0b4      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x186>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d60:	d03e      	beq.n	8005de0 <HAL_TIM_ConfigClockSource+0xd4>
 8005d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d66:	f200 8087 	bhi.w	8005e78 <HAL_TIM_ConfigClockSource+0x16c>
 8005d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6e:	f000 8086 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x172>
 8005d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d76:	d87f      	bhi.n	8005e78 <HAL_TIM_ConfigClockSource+0x16c>
 8005d78:	2b70      	cmp	r3, #112	; 0x70
 8005d7a:	d01a      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0xa6>
 8005d7c:	2b70      	cmp	r3, #112	; 0x70
 8005d7e:	d87b      	bhi.n	8005e78 <HAL_TIM_ConfigClockSource+0x16c>
 8005d80:	2b60      	cmp	r3, #96	; 0x60
 8005d82:	d050      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x11a>
 8005d84:	2b60      	cmp	r3, #96	; 0x60
 8005d86:	d877      	bhi.n	8005e78 <HAL_TIM_ConfigClockSource+0x16c>
 8005d88:	2b50      	cmp	r3, #80	; 0x50
 8005d8a:	d03c      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0xfa>
 8005d8c:	2b50      	cmp	r3, #80	; 0x50
 8005d8e:	d873      	bhi.n	8005e78 <HAL_TIM_ConfigClockSource+0x16c>
 8005d90:	2b40      	cmp	r3, #64	; 0x40
 8005d92:	d058      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x13a>
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	d86f      	bhi.n	8005e78 <HAL_TIM_ConfigClockSource+0x16c>
 8005d98:	2b30      	cmp	r3, #48	; 0x30
 8005d9a:	d064      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x15a>
 8005d9c:	2b30      	cmp	r3, #48	; 0x30
 8005d9e:	d86b      	bhi.n	8005e78 <HAL_TIM_ConfigClockSource+0x16c>
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d060      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x15a>
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d867      	bhi.n	8005e78 <HAL_TIM_ConfigClockSource+0x16c>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d05c      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x15a>
 8005dac:	2b10      	cmp	r3, #16
 8005dae:	d05a      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x15a>
 8005db0:	e062      	b.n	8005e78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6899      	ldr	r1, [r3, #8]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f000 f985 	bl	80060d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	609a      	str	r2, [r3, #8]
      break;
 8005dde:	e04f      	b.n	8005e80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	6899      	ldr	r1, [r3, #8]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f000 f96e 	bl	80060d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e02:	609a      	str	r2, [r3, #8]
      break;
 8005e04:	e03c      	b.n	8005e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6859      	ldr	r1, [r3, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f000 f8e2 	bl	8005fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2150      	movs	r1, #80	; 0x50
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 f93b 	bl	800609a <TIM_ITRx_SetConfig>
      break;
 8005e24:	e02c      	b.n	8005e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6859      	ldr	r1, [r3, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	461a      	mov	r2, r3
 8005e34:	f000 f901 	bl	800603a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2160      	movs	r1, #96	; 0x60
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f92b 	bl	800609a <TIM_ITRx_SetConfig>
      break;
 8005e44:	e01c      	b.n	8005e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6859      	ldr	r1, [r3, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f000 f8c2 	bl	8005fdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2140      	movs	r1, #64	; 0x40
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 f91b 	bl	800609a <TIM_ITRx_SetConfig>
      break;
 8005e64:	e00c      	b.n	8005e80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4610      	mov	r0, r2
 8005e72:	f000 f912 	bl	800609a <TIM_ITRx_SetConfig>
      break;
 8005e76:	e003      	b.n	8005e80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e7c:	e000      	b.n	8005e80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a40      	ldr	r2, [pc, #256]	; (8005fb0 <TIM_Base_SetConfig+0x114>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eba:	d00f      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a3d      	ldr	r2, [pc, #244]	; (8005fb4 <TIM_Base_SetConfig+0x118>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00b      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a3c      	ldr	r2, [pc, #240]	; (8005fb8 <TIM_Base_SetConfig+0x11c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d007      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a3b      	ldr	r2, [pc, #236]	; (8005fbc <TIM_Base_SetConfig+0x120>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a3a      	ldr	r2, [pc, #232]	; (8005fc0 <TIM_Base_SetConfig+0x124>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d108      	bne.n	8005eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2f      	ldr	r2, [pc, #188]	; (8005fb0 <TIM_Base_SetConfig+0x114>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d02b      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efc:	d027      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2c      	ldr	r2, [pc, #176]	; (8005fb4 <TIM_Base_SetConfig+0x118>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d023      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2b      	ldr	r2, [pc, #172]	; (8005fb8 <TIM_Base_SetConfig+0x11c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d01f      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2a      	ldr	r2, [pc, #168]	; (8005fbc <TIM_Base_SetConfig+0x120>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01b      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a29      	ldr	r2, [pc, #164]	; (8005fc0 <TIM_Base_SetConfig+0x124>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d017      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a28      	ldr	r2, [pc, #160]	; (8005fc4 <TIM_Base_SetConfig+0x128>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a27      	ldr	r2, [pc, #156]	; (8005fc8 <TIM_Base_SetConfig+0x12c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00f      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <TIM_Base_SetConfig+0x130>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00b      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a25      	ldr	r2, [pc, #148]	; (8005fd0 <TIM_Base_SetConfig+0x134>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d007      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a24      	ldr	r2, [pc, #144]	; (8005fd4 <TIM_Base_SetConfig+0x138>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d003      	beq.n	8005f4e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a23      	ldr	r2, [pc, #140]	; (8005fd8 <TIM_Base_SetConfig+0x13c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d108      	bne.n	8005f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a0a      	ldr	r2, [pc, #40]	; (8005fb0 <TIM_Base_SetConfig+0x114>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_Base_SetConfig+0xf8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a0c      	ldr	r2, [pc, #48]	; (8005fc0 <TIM_Base_SetConfig+0x124>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d103      	bne.n	8005f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	615a      	str	r2, [r3, #20]
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40010400 	.word	0x40010400
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	40014800 	.word	0x40014800
 8005fd0:	40001800 	.word	0x40001800
 8005fd4:	40001c00 	.word	0x40001c00
 8005fd8:	40002000 	.word	0x40002000

08005fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f023 0201 	bic.w	r2, r3, #1
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f023 030a 	bic.w	r3, r3, #10
 8006018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800603a:	b480      	push	{r7}
 800603c:	b087      	sub	sp, #28
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f023 0210 	bic.w	r2, r3, #16
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006064:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	031b      	lsls	r3, r3, #12
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006076:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	621a      	str	r2, [r3, #32]
}
 800608e:	bf00      	nop
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f043 0307 	orr.w	r3, r3, #7
 80060bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	609a      	str	r2, [r3, #8]
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	021a      	lsls	r2, r3, #8
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006124:	2302      	movs	r3, #2
 8006126:	e05a      	b.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a21      	ldr	r2, [pc, #132]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d022      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006174:	d01d      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1d      	ldr	r2, [pc, #116]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d018      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d013      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1a      	ldr	r2, [pc, #104]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00e      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a18      	ldr	r2, [pc, #96]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d009      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a17      	ldr	r2, [pc, #92]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d004      	beq.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a15      	ldr	r2, [pc, #84]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10c      	bne.n	80061cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40000c00 	.word	0x40000c00
 80061fc:	40010400 	.word	0x40010400
 8006200:	40014000 	.word	0x40014000
 8006204:	40001800 	.word	0x40001800

08006208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e03f      	b.n	800629a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fc f9aa 	bl	8002588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2224      	movs	r2, #36	; 0x24
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800624a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f929 	bl	80064a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b08a      	sub	sp, #40	; 0x28
 80062a6:	af02      	add	r7, sp, #8
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d17c      	bne.n	80063bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <HAL_UART_Transmit+0x2c>
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e075      	b.n	80063be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_UART_Transmit+0x3e>
 80062dc:	2302      	movs	r3, #2
 80062de:	e06e      	b.n	80063be <HAL_UART_Transmit+0x11c>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2221      	movs	r2, #33	; 0x21
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062f6:	f7fc faa7 	bl	8002848 <HAL_GetTick>
 80062fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	88fa      	ldrh	r2, [r7, #6]
 8006306:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006310:	d108      	bne.n	8006324 <HAL_UART_Transmit+0x82>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	e003      	b.n	800632c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006334:	e02a      	b.n	800638c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2200      	movs	r2, #0
 800633e:	2180      	movs	r1, #128	; 0x80
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 f840 	bl	80063c6 <UART_WaitOnFlagUntilTimeout>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e036      	b.n	80063be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006364:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	3302      	adds	r3, #2
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e007      	b.n	800637e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	3301      	adds	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1cf      	bne.n	8006336 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2200      	movs	r2, #0
 800639e:	2140      	movs	r1, #64	; 0x40
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f810 	bl	80063c6 <UART_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e006      	b.n	80063be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b090      	sub	sp, #64	; 0x40
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	60b9      	str	r1, [r7, #8]
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	4613      	mov	r3, r2
 80063d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d6:	e050      	b.n	800647a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d04c      	beq.n	800647a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80063e6:	f7fc fa2f 	bl	8002848 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d241      	bcs.n	800647a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	330c      	adds	r3, #12
 80063fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800640c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	330c      	adds	r3, #12
 8006414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006416:	637a      	str	r2, [r7, #52]	; 0x34
 8006418:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800641c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e5      	bne.n	80063f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3314      	adds	r3, #20
 8006430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	613b      	str	r3, [r7, #16]
   return(result);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f023 0301 	bic.w	r3, r3, #1
 8006440:	63bb      	str	r3, [r7, #56]	; 0x38
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3314      	adds	r3, #20
 8006448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800644a:	623a      	str	r2, [r7, #32]
 800644c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	69f9      	ldr	r1, [r7, #28]
 8006450:	6a3a      	ldr	r2, [r7, #32]
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	61bb      	str	r3, [r7, #24]
   return(result);
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e5      	bne.n	800642a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2220      	movs	r2, #32
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e00f      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4013      	ands	r3, r2
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	429a      	cmp	r2, r3
 8006488:	bf0c      	ite	eq
 800648a:	2301      	moveq	r3, #1
 800648c:	2300      	movne	r3, #0
 800648e:	b2db      	uxtb	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	429a      	cmp	r2, r3
 8006496:	d09f      	beq.n	80063d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3740      	adds	r7, #64	; 0x40
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a8:	b0c0      	sub	sp, #256	; 0x100
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c0:	68d9      	ldr	r1, [r3, #12]
 80064c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	ea40 0301 	orr.w	r3, r0, r1
 80064cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	431a      	orrs	r2, r3
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064fc:	f021 010c 	bic.w	r1, r1, #12
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800650a:	430b      	orrs	r3, r1
 800650c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800650e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800651a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651e:	6999      	ldr	r1, [r3, #24]
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	ea40 0301 	orr.w	r3, r0, r1
 800652a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b8f      	ldr	r3, [pc, #572]	; (8006770 <UART_SetConfig+0x2cc>)
 8006534:	429a      	cmp	r2, r3
 8006536:	d005      	beq.n	8006544 <UART_SetConfig+0xa0>
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b8d      	ldr	r3, [pc, #564]	; (8006774 <UART_SetConfig+0x2d0>)
 8006540:	429a      	cmp	r2, r3
 8006542:	d104      	bne.n	800654e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006544:	f7fe fe58 	bl	80051f8 <HAL_RCC_GetPCLK2Freq>
 8006548:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800654c:	e003      	b.n	8006556 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800654e:	f7fe fe3f 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 8006552:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006560:	f040 810c 	bne.w	800677c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006568:	2200      	movs	r2, #0
 800656a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800656e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006572:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006576:	4622      	mov	r2, r4
 8006578:	462b      	mov	r3, r5
 800657a:	1891      	adds	r1, r2, r2
 800657c:	65b9      	str	r1, [r7, #88]	; 0x58
 800657e:	415b      	adcs	r3, r3
 8006580:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006586:	4621      	mov	r1, r4
 8006588:	eb12 0801 	adds.w	r8, r2, r1
 800658c:	4629      	mov	r1, r5
 800658e:	eb43 0901 	adc.w	r9, r3, r1
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800659e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065a6:	4690      	mov	r8, r2
 80065a8:	4699      	mov	r9, r3
 80065aa:	4623      	mov	r3, r4
 80065ac:	eb18 0303 	adds.w	r3, r8, r3
 80065b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065b4:	462b      	mov	r3, r5
 80065b6:	eb49 0303 	adc.w	r3, r9, r3
 80065ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065d2:	460b      	mov	r3, r1
 80065d4:	18db      	adds	r3, r3, r3
 80065d6:	653b      	str	r3, [r7, #80]	; 0x50
 80065d8:	4613      	mov	r3, r2
 80065da:	eb42 0303 	adc.w	r3, r2, r3
 80065de:	657b      	str	r3, [r7, #84]	; 0x54
 80065e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065e8:	f7fa fb6e 	bl	8000cc8 <__aeabi_uldivmod>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4b61      	ldr	r3, [pc, #388]	; (8006778 <UART_SetConfig+0x2d4>)
 80065f2:	fba3 2302 	umull	r2, r3, r3, r2
 80065f6:	095b      	lsrs	r3, r3, #5
 80065f8:	011c      	lsls	r4, r3, #4
 80065fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006604:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006608:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800660c:	4642      	mov	r2, r8
 800660e:	464b      	mov	r3, r9
 8006610:	1891      	adds	r1, r2, r2
 8006612:	64b9      	str	r1, [r7, #72]	; 0x48
 8006614:	415b      	adcs	r3, r3
 8006616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006618:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800661c:	4641      	mov	r1, r8
 800661e:	eb12 0a01 	adds.w	sl, r2, r1
 8006622:	4649      	mov	r1, r9
 8006624:	eb43 0b01 	adc.w	fp, r3, r1
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006634:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800663c:	4692      	mov	sl, r2
 800663e:	469b      	mov	fp, r3
 8006640:	4643      	mov	r3, r8
 8006642:	eb1a 0303 	adds.w	r3, sl, r3
 8006646:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800664a:	464b      	mov	r3, r9
 800664c:	eb4b 0303 	adc.w	r3, fp, r3
 8006650:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006660:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006664:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006668:	460b      	mov	r3, r1
 800666a:	18db      	adds	r3, r3, r3
 800666c:	643b      	str	r3, [r7, #64]	; 0x40
 800666e:	4613      	mov	r3, r2
 8006670:	eb42 0303 	adc.w	r3, r2, r3
 8006674:	647b      	str	r3, [r7, #68]	; 0x44
 8006676:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800667a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800667e:	f7fa fb23 	bl	8000cc8 <__aeabi_uldivmod>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4611      	mov	r1, r2
 8006688:	4b3b      	ldr	r3, [pc, #236]	; (8006778 <UART_SetConfig+0x2d4>)
 800668a:	fba3 2301 	umull	r2, r3, r3, r1
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	2264      	movs	r2, #100	; 0x64
 8006692:	fb02 f303 	mul.w	r3, r2, r3
 8006696:	1acb      	subs	r3, r1, r3
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800669e:	4b36      	ldr	r3, [pc, #216]	; (8006778 <UART_SetConfig+0x2d4>)
 80066a0:	fba3 2302 	umull	r2, r3, r3, r2
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066ac:	441c      	add	r4, r3
 80066ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066c0:	4642      	mov	r2, r8
 80066c2:	464b      	mov	r3, r9
 80066c4:	1891      	adds	r1, r2, r2
 80066c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80066c8:	415b      	adcs	r3, r3
 80066ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066d0:	4641      	mov	r1, r8
 80066d2:	1851      	adds	r1, r2, r1
 80066d4:	6339      	str	r1, [r7, #48]	; 0x30
 80066d6:	4649      	mov	r1, r9
 80066d8:	414b      	adcs	r3, r1
 80066da:	637b      	str	r3, [r7, #52]	; 0x34
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066e8:	4659      	mov	r1, fp
 80066ea:	00cb      	lsls	r3, r1, #3
 80066ec:	4651      	mov	r1, sl
 80066ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066f2:	4651      	mov	r1, sl
 80066f4:	00ca      	lsls	r2, r1, #3
 80066f6:	4610      	mov	r0, r2
 80066f8:	4619      	mov	r1, r3
 80066fa:	4603      	mov	r3, r0
 80066fc:	4642      	mov	r2, r8
 80066fe:	189b      	adds	r3, r3, r2
 8006700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006704:	464b      	mov	r3, r9
 8006706:	460a      	mov	r2, r1
 8006708:	eb42 0303 	adc.w	r3, r2, r3
 800670c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800671c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006720:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006724:	460b      	mov	r3, r1
 8006726:	18db      	adds	r3, r3, r3
 8006728:	62bb      	str	r3, [r7, #40]	; 0x28
 800672a:	4613      	mov	r3, r2
 800672c:	eb42 0303 	adc.w	r3, r2, r3
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006736:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800673a:	f7fa fac5 	bl	8000cc8 <__aeabi_uldivmod>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <UART_SetConfig+0x2d4>)
 8006744:	fba3 1302 	umull	r1, r3, r3, r2
 8006748:	095b      	lsrs	r3, r3, #5
 800674a:	2164      	movs	r1, #100	; 0x64
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	3332      	adds	r3, #50	; 0x32
 8006756:	4a08      	ldr	r2, [pc, #32]	; (8006778 <UART_SetConfig+0x2d4>)
 8006758:	fba2 2303 	umull	r2, r3, r2, r3
 800675c:	095b      	lsrs	r3, r3, #5
 800675e:	f003 0207 	and.w	r2, r3, #7
 8006762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4422      	add	r2, r4
 800676a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800676c:	e106      	b.n	800697c <UART_SetConfig+0x4d8>
 800676e:	bf00      	nop
 8006770:	40011000 	.word	0x40011000
 8006774:	40011400 	.word	0x40011400
 8006778:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800677c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006780:	2200      	movs	r2, #0
 8006782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006786:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800678a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800678e:	4642      	mov	r2, r8
 8006790:	464b      	mov	r3, r9
 8006792:	1891      	adds	r1, r2, r2
 8006794:	6239      	str	r1, [r7, #32]
 8006796:	415b      	adcs	r3, r3
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800679e:	4641      	mov	r1, r8
 80067a0:	1854      	adds	r4, r2, r1
 80067a2:	4649      	mov	r1, r9
 80067a4:	eb43 0501 	adc.w	r5, r3, r1
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	f04f 0300 	mov.w	r3, #0
 80067b0:	00eb      	lsls	r3, r5, #3
 80067b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067b6:	00e2      	lsls	r2, r4, #3
 80067b8:	4614      	mov	r4, r2
 80067ba:	461d      	mov	r5, r3
 80067bc:	4643      	mov	r3, r8
 80067be:	18e3      	adds	r3, r4, r3
 80067c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067c4:	464b      	mov	r3, r9
 80067c6:	eb45 0303 	adc.w	r3, r5, r3
 80067ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067ea:	4629      	mov	r1, r5
 80067ec:	008b      	lsls	r3, r1, #2
 80067ee:	4621      	mov	r1, r4
 80067f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067f4:	4621      	mov	r1, r4
 80067f6:	008a      	lsls	r2, r1, #2
 80067f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067fc:	f7fa fa64 	bl	8000cc8 <__aeabi_uldivmod>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4b60      	ldr	r3, [pc, #384]	; (8006988 <UART_SetConfig+0x4e4>)
 8006806:	fba3 2302 	umull	r2, r3, r3, r2
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	011c      	lsls	r4, r3, #4
 800680e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006812:	2200      	movs	r2, #0
 8006814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006818:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800681c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	1891      	adds	r1, r2, r2
 8006826:	61b9      	str	r1, [r7, #24]
 8006828:	415b      	adcs	r3, r3
 800682a:	61fb      	str	r3, [r7, #28]
 800682c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006830:	4641      	mov	r1, r8
 8006832:	1851      	adds	r1, r2, r1
 8006834:	6139      	str	r1, [r7, #16]
 8006836:	4649      	mov	r1, r9
 8006838:	414b      	adcs	r3, r1
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006848:	4659      	mov	r1, fp
 800684a:	00cb      	lsls	r3, r1, #3
 800684c:	4651      	mov	r1, sl
 800684e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006852:	4651      	mov	r1, sl
 8006854:	00ca      	lsls	r2, r1, #3
 8006856:	4610      	mov	r0, r2
 8006858:	4619      	mov	r1, r3
 800685a:	4603      	mov	r3, r0
 800685c:	4642      	mov	r2, r8
 800685e:	189b      	adds	r3, r3, r2
 8006860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006864:	464b      	mov	r3, r9
 8006866:	460a      	mov	r2, r1
 8006868:	eb42 0303 	adc.w	r3, r2, r3
 800686c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	67bb      	str	r3, [r7, #120]	; 0x78
 800687a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800687c:	f04f 0200 	mov.w	r2, #0
 8006880:	f04f 0300 	mov.w	r3, #0
 8006884:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006888:	4649      	mov	r1, r9
 800688a:	008b      	lsls	r3, r1, #2
 800688c:	4641      	mov	r1, r8
 800688e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006892:	4641      	mov	r1, r8
 8006894:	008a      	lsls	r2, r1, #2
 8006896:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800689a:	f7fa fa15 	bl	8000cc8 <__aeabi_uldivmod>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4611      	mov	r1, r2
 80068a4:	4b38      	ldr	r3, [pc, #224]	; (8006988 <UART_SetConfig+0x4e4>)
 80068a6:	fba3 2301 	umull	r2, r3, r3, r1
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	2264      	movs	r2, #100	; 0x64
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	1acb      	subs	r3, r1, r3
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	3332      	adds	r3, #50	; 0x32
 80068b8:	4a33      	ldr	r2, [pc, #204]	; (8006988 <UART_SetConfig+0x4e4>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068c4:	441c      	add	r4, r3
 80068c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ca:	2200      	movs	r2, #0
 80068cc:	673b      	str	r3, [r7, #112]	; 0x70
 80068ce:	677a      	str	r2, [r7, #116]	; 0x74
 80068d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068d4:	4642      	mov	r2, r8
 80068d6:	464b      	mov	r3, r9
 80068d8:	1891      	adds	r1, r2, r2
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	415b      	adcs	r3, r3
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068e4:	4641      	mov	r1, r8
 80068e6:	1851      	adds	r1, r2, r1
 80068e8:	6039      	str	r1, [r7, #0]
 80068ea:	4649      	mov	r1, r9
 80068ec:	414b      	adcs	r3, r1
 80068ee:	607b      	str	r3, [r7, #4]
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068fc:	4659      	mov	r1, fp
 80068fe:	00cb      	lsls	r3, r1, #3
 8006900:	4651      	mov	r1, sl
 8006902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006906:	4651      	mov	r1, sl
 8006908:	00ca      	lsls	r2, r1, #3
 800690a:	4610      	mov	r0, r2
 800690c:	4619      	mov	r1, r3
 800690e:	4603      	mov	r3, r0
 8006910:	4642      	mov	r2, r8
 8006912:	189b      	adds	r3, r3, r2
 8006914:	66bb      	str	r3, [r7, #104]	; 0x68
 8006916:	464b      	mov	r3, r9
 8006918:	460a      	mov	r2, r1
 800691a:	eb42 0303 	adc.w	r3, r2, r3
 800691e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	663b      	str	r3, [r7, #96]	; 0x60
 800692a:	667a      	str	r2, [r7, #100]	; 0x64
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006938:	4649      	mov	r1, r9
 800693a:	008b      	lsls	r3, r1, #2
 800693c:	4641      	mov	r1, r8
 800693e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006942:	4641      	mov	r1, r8
 8006944:	008a      	lsls	r2, r1, #2
 8006946:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800694a:	f7fa f9bd 	bl	8000cc8 <__aeabi_uldivmod>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <UART_SetConfig+0x4e4>)
 8006954:	fba3 1302 	umull	r1, r3, r3, r2
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	2164      	movs	r1, #100	; 0x64
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	3332      	adds	r3, #50	; 0x32
 8006966:	4a08      	ldr	r2, [pc, #32]	; (8006988 <UART_SetConfig+0x4e4>)
 8006968:	fba2 2303 	umull	r2, r3, r2, r3
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	f003 020f 	and.w	r2, r3, #15
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4422      	add	r2, r4
 800697a:	609a      	str	r2, [r3, #8]
}
 800697c:	bf00      	nop
 800697e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006982:	46bd      	mov	sp, r7
 8006984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006988:	51eb851f 	.word	0x51eb851f

0800698c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800698c:	b084      	sub	sp, #16
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	f107 001c 	add.w	r0, r7, #28
 800699a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d122      	bne.n	80069ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80069b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d105      	bne.n	80069de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 faa2 	bl	8006f28 <USB_CoreReset>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]
 80069e8:	e01a      	b.n	8006a20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa96 	bl	8006f28 <USB_CoreReset>
 80069fc:	4603      	mov	r3, r0
 80069fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d106      	bne.n	8006a14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	639a      	str	r2, [r3, #56]	; 0x38
 8006a12:	e005      	b.n	8006a20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d10b      	bne.n	8006a3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f043 0206 	orr.w	r2, r3, #6
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f043 0220 	orr.w	r2, r3, #32
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a4a:	b004      	add	sp, #16
 8006a4c:	4770      	bx	lr

08006a4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f023 0201 	bic.w	r2, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d115      	bne.n	8006abe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	f7fb fede 	bl	8002860 <HAL_Delay>
      ms++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa2e 	bl	8006f0c <USB_GetMode>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d01e      	beq.n	8006af4 <USB_SetCurrentMode+0x84>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b31      	cmp	r3, #49	; 0x31
 8006aba:	d9f0      	bls.n	8006a9e <USB_SetCurrentMode+0x2e>
 8006abc:	e01a      	b.n	8006af4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d115      	bne.n	8006af0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ad0:	2001      	movs	r0, #1
 8006ad2:	f7fb fec5 	bl	8002860 <HAL_Delay>
      ms++;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fa15 	bl	8006f0c <USB_GetMode>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <USB_SetCurrentMode+0x84>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b31      	cmp	r3, #49	; 0x31
 8006aec:	d9f0      	bls.n	8006ad0 <USB_SetCurrentMode+0x60>
 8006aee:	e001      	b.n	8006af4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e005      	b.n	8006b00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b32      	cmp	r3, #50	; 0x32
 8006af8:	d101      	bne.n	8006afe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b08:	b084      	sub	sp, #16
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	e009      	b.n	8006b3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3340      	adds	r3, #64	; 0x40
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	2200      	movs	r2, #0
 8006b34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2b0e      	cmp	r3, #14
 8006b40:	d9f2      	bls.n	8006b28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d11c      	bne.n	8006b82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b56:	f043 0302 	orr.w	r3, r3, #2
 8006b5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8006b80:	e00b      	b.n	8006b9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bac:	4619      	mov	r1, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	680b      	ldr	r3, [r1, #0]
 8006bb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d10c      	bne.n	8006bda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f965 	bl	8006e98 <USB_SetDevSpeed>
 8006bce:	e008      	b.n	8006be2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f960 	bl	8006e98 <USB_SetDevSpeed>
 8006bd8:	e003      	b.n	8006be2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bda:	2103      	movs	r1, #3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f95b 	bl	8006e98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006be2:	2110      	movs	r1, #16
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f8f3 	bl	8006dd0 <USB_FlushTxFifo>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f91f 	bl	8006e38 <USB_FlushRxFifo>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c16:	461a      	mov	r2, r3
 8006c18:	2300      	movs	r3, #0
 8006c1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c22:	461a      	mov	r2, r3
 8006c24:	2300      	movs	r3, #0
 8006c26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	e043      	b.n	8006cb6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c44:	d118      	bne.n	8006c78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	e013      	b.n	8006c8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	e008      	b.n	8006c8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	461a      	mov	r2, r3
 8006c86:	2300      	movs	r3, #0
 8006c88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c96:	461a      	mov	r2, r3
 8006c98:	2300      	movs	r3, #0
 8006c9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d3b7      	bcc.n	8006c2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	e043      	b.n	8006d4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cda:	d118      	bne.n	8006d0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	e013      	b.n	8006d20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	461a      	mov	r2, r3
 8006d06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	e008      	b.n	8006d20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d3b7      	bcc.n	8006cc4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d105      	bne.n	8006d88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	f043 0210 	orr.w	r2, r3, #16
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	699a      	ldr	r2, [r3, #24]
 8006d8c:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <USB_DevInit+0x2c4>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d005      	beq.n	8006da6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f043 0208 	orr.w	r2, r3, #8
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d107      	bne.n	8006dbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006db4:	f043 0304 	orr.w	r3, r3, #4
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dc8:	b004      	add	sp, #16
 8006dca:	4770      	bx	lr
 8006dcc:	803c3800 	.word	0x803c3800

08006dd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3301      	adds	r3, #1
 8006de2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a13      	ldr	r2, [pc, #76]	; (8006e34 <USB_FlushTxFifo+0x64>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d901      	bls.n	8006df0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e01b      	b.n	8006e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	daf2      	bge.n	8006dde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	019b      	lsls	r3, r3, #6
 8006e00:	f043 0220 	orr.w	r2, r3, #32
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4a08      	ldr	r2, [pc, #32]	; (8006e34 <USB_FlushTxFifo+0x64>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d901      	bls.n	8006e1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e006      	b.n	8006e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d0f0      	beq.n	8006e08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	00030d40 	.word	0x00030d40

08006e38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3301      	adds	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4a11      	ldr	r2, [pc, #68]	; (8006e94 <USB_FlushRxFifo+0x5c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d901      	bls.n	8006e56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e018      	b.n	8006e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	daf2      	bge.n	8006e44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2210      	movs	r2, #16
 8006e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a08      	ldr	r2, [pc, #32]	; (8006e94 <USB_FlushRxFifo+0x5c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d901      	bls.n	8006e7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e006      	b.n	8006e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0310 	and.w	r3, r3, #16
 8006e82:	2b10      	cmp	r3, #16
 8006e84:	d0f0      	beq.n	8006e68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	00030d40 	.word	0x00030d40

08006e98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	68f9      	ldr	r1, [r7, #12]
 8006eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ee4:	f023 0303 	bic.w	r3, r3, #3
 8006ee8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ef8:	f043 0302 	orr.w	r3, r3, #2
 8006efc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	f003 0301 	and.w	r3, r3, #1
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4a13      	ldr	r2, [pc, #76]	; (8006f8c <USB_CoreReset+0x64>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d901      	bls.n	8006f46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e01b      	b.n	8006f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	daf2      	bge.n	8006f34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f043 0201 	orr.w	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4a09      	ldr	r2, [pc, #36]	; (8006f8c <USB_CoreReset+0x64>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d901      	bls.n	8006f70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e006      	b.n	8006f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d0f0      	beq.n	8006f5e <USB_CoreReset+0x36>

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	00030d40 	.word	0x00030d40

08006f90 <__cvt>:
 8006f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f94:	ec55 4b10 	vmov	r4, r5, d0
 8006f98:	2d00      	cmp	r5, #0
 8006f9a:	460e      	mov	r6, r1
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	462b      	mov	r3, r5
 8006fa0:	bfbb      	ittet	lt
 8006fa2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006fa6:	461d      	movlt	r5, r3
 8006fa8:	2300      	movge	r3, #0
 8006faa:	232d      	movlt	r3, #45	; 0x2d
 8006fac:	700b      	strb	r3, [r1, #0]
 8006fae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006fb4:	4691      	mov	r9, r2
 8006fb6:	f023 0820 	bic.w	r8, r3, #32
 8006fba:	bfbc      	itt	lt
 8006fbc:	4622      	movlt	r2, r4
 8006fbe:	4614      	movlt	r4, r2
 8006fc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fc4:	d005      	beq.n	8006fd2 <__cvt+0x42>
 8006fc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006fca:	d100      	bne.n	8006fce <__cvt+0x3e>
 8006fcc:	3601      	adds	r6, #1
 8006fce:	2102      	movs	r1, #2
 8006fd0:	e000      	b.n	8006fd4 <__cvt+0x44>
 8006fd2:	2103      	movs	r1, #3
 8006fd4:	ab03      	add	r3, sp, #12
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	ab02      	add	r3, sp, #8
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	ec45 4b10 	vmov	d0, r4, r5
 8006fe0:	4653      	mov	r3, sl
 8006fe2:	4632      	mov	r2, r6
 8006fe4:	f001 f880 	bl	80080e8 <_dtoa_r>
 8006fe8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fec:	4607      	mov	r7, r0
 8006fee:	d102      	bne.n	8006ff6 <__cvt+0x66>
 8006ff0:	f019 0f01 	tst.w	r9, #1
 8006ff4:	d022      	beq.n	800703c <__cvt+0xac>
 8006ff6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ffa:	eb07 0906 	add.w	r9, r7, r6
 8006ffe:	d110      	bne.n	8007022 <__cvt+0x92>
 8007000:	783b      	ldrb	r3, [r7, #0]
 8007002:	2b30      	cmp	r3, #48	; 0x30
 8007004:	d10a      	bne.n	800701c <__cvt+0x8c>
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 fd7b 	bl	8000b08 <__aeabi_dcmpeq>
 8007012:	b918      	cbnz	r0, 800701c <__cvt+0x8c>
 8007014:	f1c6 0601 	rsb	r6, r6, #1
 8007018:	f8ca 6000 	str.w	r6, [sl]
 800701c:	f8da 3000 	ldr.w	r3, [sl]
 8007020:	4499      	add	r9, r3
 8007022:	2200      	movs	r2, #0
 8007024:	2300      	movs	r3, #0
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f7f9 fd6d 	bl	8000b08 <__aeabi_dcmpeq>
 800702e:	b108      	cbz	r0, 8007034 <__cvt+0xa4>
 8007030:	f8cd 900c 	str.w	r9, [sp, #12]
 8007034:	2230      	movs	r2, #48	; 0x30
 8007036:	9b03      	ldr	r3, [sp, #12]
 8007038:	454b      	cmp	r3, r9
 800703a:	d307      	bcc.n	800704c <__cvt+0xbc>
 800703c:	9b03      	ldr	r3, [sp, #12]
 800703e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007040:	1bdb      	subs	r3, r3, r7
 8007042:	4638      	mov	r0, r7
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	b004      	add	sp, #16
 8007048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704c:	1c59      	adds	r1, r3, #1
 800704e:	9103      	str	r1, [sp, #12]
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e7f0      	b.n	8007036 <__cvt+0xa6>

08007054 <__exponent>:
 8007054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007056:	4603      	mov	r3, r0
 8007058:	2900      	cmp	r1, #0
 800705a:	bfb8      	it	lt
 800705c:	4249      	neglt	r1, r1
 800705e:	f803 2b02 	strb.w	r2, [r3], #2
 8007062:	bfb4      	ite	lt
 8007064:	222d      	movlt	r2, #45	; 0x2d
 8007066:	222b      	movge	r2, #43	; 0x2b
 8007068:	2909      	cmp	r1, #9
 800706a:	7042      	strb	r2, [r0, #1]
 800706c:	dd2a      	ble.n	80070c4 <__exponent+0x70>
 800706e:	f10d 0207 	add.w	r2, sp, #7
 8007072:	4617      	mov	r7, r2
 8007074:	260a      	movs	r6, #10
 8007076:	4694      	mov	ip, r2
 8007078:	fb91 f5f6 	sdiv	r5, r1, r6
 800707c:	fb06 1415 	mls	r4, r6, r5, r1
 8007080:	3430      	adds	r4, #48	; 0x30
 8007082:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007086:	460c      	mov	r4, r1
 8007088:	2c63      	cmp	r4, #99	; 0x63
 800708a:	f102 32ff 	add.w	r2, r2, #4294967295
 800708e:	4629      	mov	r1, r5
 8007090:	dcf1      	bgt.n	8007076 <__exponent+0x22>
 8007092:	3130      	adds	r1, #48	; 0x30
 8007094:	f1ac 0402 	sub.w	r4, ip, #2
 8007098:	f802 1c01 	strb.w	r1, [r2, #-1]
 800709c:	1c41      	adds	r1, r0, #1
 800709e:	4622      	mov	r2, r4
 80070a0:	42ba      	cmp	r2, r7
 80070a2:	d30a      	bcc.n	80070ba <__exponent+0x66>
 80070a4:	f10d 0209 	add.w	r2, sp, #9
 80070a8:	eba2 020c 	sub.w	r2, r2, ip
 80070ac:	42bc      	cmp	r4, r7
 80070ae:	bf88      	it	hi
 80070b0:	2200      	movhi	r2, #0
 80070b2:	4413      	add	r3, r2
 80070b4:	1a18      	subs	r0, r3, r0
 80070b6:	b003      	add	sp, #12
 80070b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80070be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80070c2:	e7ed      	b.n	80070a0 <__exponent+0x4c>
 80070c4:	2330      	movs	r3, #48	; 0x30
 80070c6:	3130      	adds	r1, #48	; 0x30
 80070c8:	7083      	strb	r3, [r0, #2]
 80070ca:	70c1      	strb	r1, [r0, #3]
 80070cc:	1d03      	adds	r3, r0, #4
 80070ce:	e7f1      	b.n	80070b4 <__exponent+0x60>

080070d0 <_printf_float>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	ed2d 8b02 	vpush	{d8}
 80070d8:	b08d      	sub	sp, #52	; 0x34
 80070da:	460c      	mov	r4, r1
 80070dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070e0:	4616      	mov	r6, r2
 80070e2:	461f      	mov	r7, r3
 80070e4:	4605      	mov	r5, r0
 80070e6:	f000 fef7 	bl	8007ed8 <_localeconv_r>
 80070ea:	f8d0 a000 	ldr.w	sl, [r0]
 80070ee:	4650      	mov	r0, sl
 80070f0:	f7f9 f8de 	bl	80002b0 <strlen>
 80070f4:	2300      	movs	r3, #0
 80070f6:	930a      	str	r3, [sp, #40]	; 0x28
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	9305      	str	r3, [sp, #20]
 80070fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007100:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007104:	3307      	adds	r3, #7
 8007106:	f023 0307 	bic.w	r3, r3, #7
 800710a:	f103 0208 	add.w	r2, r3, #8
 800710e:	f8c8 2000 	str.w	r2, [r8]
 8007112:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007116:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800711a:	9307      	str	r3, [sp, #28]
 800711c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007120:	ee08 0a10 	vmov	s16, r0
 8007124:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007128:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800712c:	4b9e      	ldr	r3, [pc, #632]	; (80073a8 <_printf_float+0x2d8>)
 800712e:	f04f 32ff 	mov.w	r2, #4294967295
 8007132:	f7f9 fd1b 	bl	8000b6c <__aeabi_dcmpun>
 8007136:	bb88      	cbnz	r0, 800719c <_printf_float+0xcc>
 8007138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800713c:	4b9a      	ldr	r3, [pc, #616]	; (80073a8 <_printf_float+0x2d8>)
 800713e:	f04f 32ff 	mov.w	r2, #4294967295
 8007142:	f7f9 fcf5 	bl	8000b30 <__aeabi_dcmple>
 8007146:	bb48      	cbnz	r0, 800719c <_printf_float+0xcc>
 8007148:	2200      	movs	r2, #0
 800714a:	2300      	movs	r3, #0
 800714c:	4640      	mov	r0, r8
 800714e:	4649      	mov	r1, r9
 8007150:	f7f9 fce4 	bl	8000b1c <__aeabi_dcmplt>
 8007154:	b110      	cbz	r0, 800715c <_printf_float+0x8c>
 8007156:	232d      	movs	r3, #45	; 0x2d
 8007158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800715c:	4a93      	ldr	r2, [pc, #588]	; (80073ac <_printf_float+0x2dc>)
 800715e:	4b94      	ldr	r3, [pc, #592]	; (80073b0 <_printf_float+0x2e0>)
 8007160:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007164:	bf94      	ite	ls
 8007166:	4690      	movls	r8, r2
 8007168:	4698      	movhi	r8, r3
 800716a:	2303      	movs	r3, #3
 800716c:	6123      	str	r3, [r4, #16]
 800716e:	9b05      	ldr	r3, [sp, #20]
 8007170:	f023 0304 	bic.w	r3, r3, #4
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	f04f 0900 	mov.w	r9, #0
 800717a:	9700      	str	r7, [sp, #0]
 800717c:	4633      	mov	r3, r6
 800717e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007180:	4621      	mov	r1, r4
 8007182:	4628      	mov	r0, r5
 8007184:	f000 f9da 	bl	800753c <_printf_common>
 8007188:	3001      	adds	r0, #1
 800718a:	f040 8090 	bne.w	80072ae <_printf_float+0x1de>
 800718e:	f04f 30ff 	mov.w	r0, #4294967295
 8007192:	b00d      	add	sp, #52	; 0x34
 8007194:	ecbd 8b02 	vpop	{d8}
 8007198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719c:	4642      	mov	r2, r8
 800719e:	464b      	mov	r3, r9
 80071a0:	4640      	mov	r0, r8
 80071a2:	4649      	mov	r1, r9
 80071a4:	f7f9 fce2 	bl	8000b6c <__aeabi_dcmpun>
 80071a8:	b140      	cbz	r0, 80071bc <_printf_float+0xec>
 80071aa:	464b      	mov	r3, r9
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bfbc      	itt	lt
 80071b0:	232d      	movlt	r3, #45	; 0x2d
 80071b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071b6:	4a7f      	ldr	r2, [pc, #508]	; (80073b4 <_printf_float+0x2e4>)
 80071b8:	4b7f      	ldr	r3, [pc, #508]	; (80073b8 <_printf_float+0x2e8>)
 80071ba:	e7d1      	b.n	8007160 <_printf_float+0x90>
 80071bc:	6863      	ldr	r3, [r4, #4]
 80071be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80071c2:	9206      	str	r2, [sp, #24]
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	d13f      	bne.n	8007248 <_printf_float+0x178>
 80071c8:	2306      	movs	r3, #6
 80071ca:	6063      	str	r3, [r4, #4]
 80071cc:	9b05      	ldr	r3, [sp, #20]
 80071ce:	6861      	ldr	r1, [r4, #4]
 80071d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071d4:	2300      	movs	r3, #0
 80071d6:	9303      	str	r3, [sp, #12]
 80071d8:	ab0a      	add	r3, sp, #40	; 0x28
 80071da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071de:	ab09      	add	r3, sp, #36	; 0x24
 80071e0:	ec49 8b10 	vmov	d0, r8, r9
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	6022      	str	r2, [r4, #0]
 80071e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071ec:	4628      	mov	r0, r5
 80071ee:	f7ff fecf 	bl	8006f90 <__cvt>
 80071f2:	9b06      	ldr	r3, [sp, #24]
 80071f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071f6:	2b47      	cmp	r3, #71	; 0x47
 80071f8:	4680      	mov	r8, r0
 80071fa:	d108      	bne.n	800720e <_printf_float+0x13e>
 80071fc:	1cc8      	adds	r0, r1, #3
 80071fe:	db02      	blt.n	8007206 <_printf_float+0x136>
 8007200:	6863      	ldr	r3, [r4, #4]
 8007202:	4299      	cmp	r1, r3
 8007204:	dd41      	ble.n	800728a <_printf_float+0x1ba>
 8007206:	f1ab 0302 	sub.w	r3, fp, #2
 800720a:	fa5f fb83 	uxtb.w	fp, r3
 800720e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007212:	d820      	bhi.n	8007256 <_printf_float+0x186>
 8007214:	3901      	subs	r1, #1
 8007216:	465a      	mov	r2, fp
 8007218:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800721c:	9109      	str	r1, [sp, #36]	; 0x24
 800721e:	f7ff ff19 	bl	8007054 <__exponent>
 8007222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007224:	1813      	adds	r3, r2, r0
 8007226:	2a01      	cmp	r2, #1
 8007228:	4681      	mov	r9, r0
 800722a:	6123      	str	r3, [r4, #16]
 800722c:	dc02      	bgt.n	8007234 <_printf_float+0x164>
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	07d2      	lsls	r2, r2, #31
 8007232:	d501      	bpl.n	8007238 <_printf_float+0x168>
 8007234:	3301      	adds	r3, #1
 8007236:	6123      	str	r3, [r4, #16]
 8007238:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800723c:	2b00      	cmp	r3, #0
 800723e:	d09c      	beq.n	800717a <_printf_float+0xaa>
 8007240:	232d      	movs	r3, #45	; 0x2d
 8007242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007246:	e798      	b.n	800717a <_printf_float+0xaa>
 8007248:	9a06      	ldr	r2, [sp, #24]
 800724a:	2a47      	cmp	r2, #71	; 0x47
 800724c:	d1be      	bne.n	80071cc <_printf_float+0xfc>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1bc      	bne.n	80071cc <_printf_float+0xfc>
 8007252:	2301      	movs	r3, #1
 8007254:	e7b9      	b.n	80071ca <_printf_float+0xfa>
 8007256:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800725a:	d118      	bne.n	800728e <_printf_float+0x1be>
 800725c:	2900      	cmp	r1, #0
 800725e:	6863      	ldr	r3, [r4, #4]
 8007260:	dd0b      	ble.n	800727a <_printf_float+0x1aa>
 8007262:	6121      	str	r1, [r4, #16]
 8007264:	b913      	cbnz	r3, 800726c <_printf_float+0x19c>
 8007266:	6822      	ldr	r2, [r4, #0]
 8007268:	07d0      	lsls	r0, r2, #31
 800726a:	d502      	bpl.n	8007272 <_printf_float+0x1a2>
 800726c:	3301      	adds	r3, #1
 800726e:	440b      	add	r3, r1
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	65a1      	str	r1, [r4, #88]	; 0x58
 8007274:	f04f 0900 	mov.w	r9, #0
 8007278:	e7de      	b.n	8007238 <_printf_float+0x168>
 800727a:	b913      	cbnz	r3, 8007282 <_printf_float+0x1b2>
 800727c:	6822      	ldr	r2, [r4, #0]
 800727e:	07d2      	lsls	r2, r2, #31
 8007280:	d501      	bpl.n	8007286 <_printf_float+0x1b6>
 8007282:	3302      	adds	r3, #2
 8007284:	e7f4      	b.n	8007270 <_printf_float+0x1a0>
 8007286:	2301      	movs	r3, #1
 8007288:	e7f2      	b.n	8007270 <_printf_float+0x1a0>
 800728a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800728e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007290:	4299      	cmp	r1, r3
 8007292:	db05      	blt.n	80072a0 <_printf_float+0x1d0>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	6121      	str	r1, [r4, #16]
 8007298:	07d8      	lsls	r0, r3, #31
 800729a:	d5ea      	bpl.n	8007272 <_printf_float+0x1a2>
 800729c:	1c4b      	adds	r3, r1, #1
 800729e:	e7e7      	b.n	8007270 <_printf_float+0x1a0>
 80072a0:	2900      	cmp	r1, #0
 80072a2:	bfd4      	ite	le
 80072a4:	f1c1 0202 	rsble	r2, r1, #2
 80072a8:	2201      	movgt	r2, #1
 80072aa:	4413      	add	r3, r2
 80072ac:	e7e0      	b.n	8007270 <_printf_float+0x1a0>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	055a      	lsls	r2, r3, #21
 80072b2:	d407      	bmi.n	80072c4 <_printf_float+0x1f4>
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	4642      	mov	r2, r8
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	d12c      	bne.n	800731c <_printf_float+0x24c>
 80072c2:	e764      	b.n	800718e <_printf_float+0xbe>
 80072c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072c8:	f240 80e0 	bls.w	800748c <_printf_float+0x3bc>
 80072cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072d0:	2200      	movs	r2, #0
 80072d2:	2300      	movs	r3, #0
 80072d4:	f7f9 fc18 	bl	8000b08 <__aeabi_dcmpeq>
 80072d8:	2800      	cmp	r0, #0
 80072da:	d034      	beq.n	8007346 <_printf_float+0x276>
 80072dc:	4a37      	ldr	r2, [pc, #220]	; (80073bc <_printf_float+0x2ec>)
 80072de:	2301      	movs	r3, #1
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f af51 	beq.w	800718e <_printf_float+0xbe>
 80072ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072f0:	429a      	cmp	r2, r3
 80072f2:	db02      	blt.n	80072fa <_printf_float+0x22a>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	07d8      	lsls	r0, r3, #31
 80072f8:	d510      	bpl.n	800731c <_printf_float+0x24c>
 80072fa:	ee18 3a10 	vmov	r3, s16
 80072fe:	4652      	mov	r2, sl
 8007300:	4631      	mov	r1, r6
 8007302:	4628      	mov	r0, r5
 8007304:	47b8      	blx	r7
 8007306:	3001      	adds	r0, #1
 8007308:	f43f af41 	beq.w	800718e <_printf_float+0xbe>
 800730c:	f04f 0800 	mov.w	r8, #0
 8007310:	f104 091a 	add.w	r9, r4, #26
 8007314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007316:	3b01      	subs	r3, #1
 8007318:	4543      	cmp	r3, r8
 800731a:	dc09      	bgt.n	8007330 <_printf_float+0x260>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	079b      	lsls	r3, r3, #30
 8007320:	f100 8107 	bmi.w	8007532 <_printf_float+0x462>
 8007324:	68e0      	ldr	r0, [r4, #12]
 8007326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007328:	4298      	cmp	r0, r3
 800732a:	bfb8      	it	lt
 800732c:	4618      	movlt	r0, r3
 800732e:	e730      	b.n	8007192 <_printf_float+0xc2>
 8007330:	2301      	movs	r3, #1
 8007332:	464a      	mov	r2, r9
 8007334:	4631      	mov	r1, r6
 8007336:	4628      	mov	r0, r5
 8007338:	47b8      	blx	r7
 800733a:	3001      	adds	r0, #1
 800733c:	f43f af27 	beq.w	800718e <_printf_float+0xbe>
 8007340:	f108 0801 	add.w	r8, r8, #1
 8007344:	e7e6      	b.n	8007314 <_printf_float+0x244>
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	dc39      	bgt.n	80073c0 <_printf_float+0x2f0>
 800734c:	4a1b      	ldr	r2, [pc, #108]	; (80073bc <_printf_float+0x2ec>)
 800734e:	2301      	movs	r3, #1
 8007350:	4631      	mov	r1, r6
 8007352:	4628      	mov	r0, r5
 8007354:	47b8      	blx	r7
 8007356:	3001      	adds	r0, #1
 8007358:	f43f af19 	beq.w	800718e <_printf_float+0xbe>
 800735c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007360:	4313      	orrs	r3, r2
 8007362:	d102      	bne.n	800736a <_printf_float+0x29a>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	07d9      	lsls	r1, r3, #31
 8007368:	d5d8      	bpl.n	800731c <_printf_float+0x24c>
 800736a:	ee18 3a10 	vmov	r3, s16
 800736e:	4652      	mov	r2, sl
 8007370:	4631      	mov	r1, r6
 8007372:	4628      	mov	r0, r5
 8007374:	47b8      	blx	r7
 8007376:	3001      	adds	r0, #1
 8007378:	f43f af09 	beq.w	800718e <_printf_float+0xbe>
 800737c:	f04f 0900 	mov.w	r9, #0
 8007380:	f104 0a1a 	add.w	sl, r4, #26
 8007384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007386:	425b      	negs	r3, r3
 8007388:	454b      	cmp	r3, r9
 800738a:	dc01      	bgt.n	8007390 <_printf_float+0x2c0>
 800738c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738e:	e792      	b.n	80072b6 <_printf_float+0x1e6>
 8007390:	2301      	movs	r3, #1
 8007392:	4652      	mov	r2, sl
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	47b8      	blx	r7
 800739a:	3001      	adds	r0, #1
 800739c:	f43f aef7 	beq.w	800718e <_printf_float+0xbe>
 80073a0:	f109 0901 	add.w	r9, r9, #1
 80073a4:	e7ee      	b.n	8007384 <_printf_float+0x2b4>
 80073a6:	bf00      	nop
 80073a8:	7fefffff 	.word	0x7fefffff
 80073ac:	0800b804 	.word	0x0800b804
 80073b0:	0800b808 	.word	0x0800b808
 80073b4:	0800b80c 	.word	0x0800b80c
 80073b8:	0800b810 	.word	0x0800b810
 80073bc:	0800b814 	.word	0x0800b814
 80073c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073c4:	429a      	cmp	r2, r3
 80073c6:	bfa8      	it	ge
 80073c8:	461a      	movge	r2, r3
 80073ca:	2a00      	cmp	r2, #0
 80073cc:	4691      	mov	r9, r2
 80073ce:	dc37      	bgt.n	8007440 <_printf_float+0x370>
 80073d0:	f04f 0b00 	mov.w	fp, #0
 80073d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073d8:	f104 021a 	add.w	r2, r4, #26
 80073dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073de:	9305      	str	r3, [sp, #20]
 80073e0:	eba3 0309 	sub.w	r3, r3, r9
 80073e4:	455b      	cmp	r3, fp
 80073e6:	dc33      	bgt.n	8007450 <_printf_float+0x380>
 80073e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ec:	429a      	cmp	r2, r3
 80073ee:	db3b      	blt.n	8007468 <_printf_float+0x398>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	07da      	lsls	r2, r3, #31
 80073f4:	d438      	bmi.n	8007468 <_printf_float+0x398>
 80073f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80073fa:	eba2 0903 	sub.w	r9, r2, r3
 80073fe:	9b05      	ldr	r3, [sp, #20]
 8007400:	1ad2      	subs	r2, r2, r3
 8007402:	4591      	cmp	r9, r2
 8007404:	bfa8      	it	ge
 8007406:	4691      	movge	r9, r2
 8007408:	f1b9 0f00 	cmp.w	r9, #0
 800740c:	dc35      	bgt.n	800747a <_printf_float+0x3aa>
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007416:	f104 0a1a 	add.w	sl, r4, #26
 800741a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800741e:	1a9b      	subs	r3, r3, r2
 8007420:	eba3 0309 	sub.w	r3, r3, r9
 8007424:	4543      	cmp	r3, r8
 8007426:	f77f af79 	ble.w	800731c <_printf_float+0x24c>
 800742a:	2301      	movs	r3, #1
 800742c:	4652      	mov	r2, sl
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f aeaa 	beq.w	800718e <_printf_float+0xbe>
 800743a:	f108 0801 	add.w	r8, r8, #1
 800743e:	e7ec      	b.n	800741a <_printf_float+0x34a>
 8007440:	4613      	mov	r3, r2
 8007442:	4631      	mov	r1, r6
 8007444:	4642      	mov	r2, r8
 8007446:	4628      	mov	r0, r5
 8007448:	47b8      	blx	r7
 800744a:	3001      	adds	r0, #1
 800744c:	d1c0      	bne.n	80073d0 <_printf_float+0x300>
 800744e:	e69e      	b.n	800718e <_printf_float+0xbe>
 8007450:	2301      	movs	r3, #1
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	9205      	str	r2, [sp, #20]
 8007458:	47b8      	blx	r7
 800745a:	3001      	adds	r0, #1
 800745c:	f43f ae97 	beq.w	800718e <_printf_float+0xbe>
 8007460:	9a05      	ldr	r2, [sp, #20]
 8007462:	f10b 0b01 	add.w	fp, fp, #1
 8007466:	e7b9      	b.n	80073dc <_printf_float+0x30c>
 8007468:	ee18 3a10 	vmov	r3, s16
 800746c:	4652      	mov	r2, sl
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	d1be      	bne.n	80073f6 <_printf_float+0x326>
 8007478:	e689      	b.n	800718e <_printf_float+0xbe>
 800747a:	9a05      	ldr	r2, [sp, #20]
 800747c:	464b      	mov	r3, r9
 800747e:	4442      	add	r2, r8
 8007480:	4631      	mov	r1, r6
 8007482:	4628      	mov	r0, r5
 8007484:	47b8      	blx	r7
 8007486:	3001      	adds	r0, #1
 8007488:	d1c1      	bne.n	800740e <_printf_float+0x33e>
 800748a:	e680      	b.n	800718e <_printf_float+0xbe>
 800748c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800748e:	2a01      	cmp	r2, #1
 8007490:	dc01      	bgt.n	8007496 <_printf_float+0x3c6>
 8007492:	07db      	lsls	r3, r3, #31
 8007494:	d53a      	bpl.n	800750c <_printf_float+0x43c>
 8007496:	2301      	movs	r3, #1
 8007498:	4642      	mov	r2, r8
 800749a:	4631      	mov	r1, r6
 800749c:	4628      	mov	r0, r5
 800749e:	47b8      	blx	r7
 80074a0:	3001      	adds	r0, #1
 80074a2:	f43f ae74 	beq.w	800718e <_printf_float+0xbe>
 80074a6:	ee18 3a10 	vmov	r3, s16
 80074aa:	4652      	mov	r2, sl
 80074ac:	4631      	mov	r1, r6
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b8      	blx	r7
 80074b2:	3001      	adds	r0, #1
 80074b4:	f43f ae6b 	beq.w	800718e <_printf_float+0xbe>
 80074b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074bc:	2200      	movs	r2, #0
 80074be:	2300      	movs	r3, #0
 80074c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80074c4:	f7f9 fb20 	bl	8000b08 <__aeabi_dcmpeq>
 80074c8:	b9d8      	cbnz	r0, 8007502 <_printf_float+0x432>
 80074ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80074ce:	f108 0201 	add.w	r2, r8, #1
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	d10e      	bne.n	80074fa <_printf_float+0x42a>
 80074dc:	e657      	b.n	800718e <_printf_float+0xbe>
 80074de:	2301      	movs	r3, #1
 80074e0:	4652      	mov	r2, sl
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	f43f ae50 	beq.w	800718e <_printf_float+0xbe>
 80074ee:	f108 0801 	add.w	r8, r8, #1
 80074f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f4:	3b01      	subs	r3, #1
 80074f6:	4543      	cmp	r3, r8
 80074f8:	dcf1      	bgt.n	80074de <_printf_float+0x40e>
 80074fa:	464b      	mov	r3, r9
 80074fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007500:	e6da      	b.n	80072b8 <_printf_float+0x1e8>
 8007502:	f04f 0800 	mov.w	r8, #0
 8007506:	f104 0a1a 	add.w	sl, r4, #26
 800750a:	e7f2      	b.n	80074f2 <_printf_float+0x422>
 800750c:	2301      	movs	r3, #1
 800750e:	4642      	mov	r2, r8
 8007510:	e7df      	b.n	80074d2 <_printf_float+0x402>
 8007512:	2301      	movs	r3, #1
 8007514:	464a      	mov	r2, r9
 8007516:	4631      	mov	r1, r6
 8007518:	4628      	mov	r0, r5
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	f43f ae36 	beq.w	800718e <_printf_float+0xbe>
 8007522:	f108 0801 	add.w	r8, r8, #1
 8007526:	68e3      	ldr	r3, [r4, #12]
 8007528:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800752a:	1a5b      	subs	r3, r3, r1
 800752c:	4543      	cmp	r3, r8
 800752e:	dcf0      	bgt.n	8007512 <_printf_float+0x442>
 8007530:	e6f8      	b.n	8007324 <_printf_float+0x254>
 8007532:	f04f 0800 	mov.w	r8, #0
 8007536:	f104 0919 	add.w	r9, r4, #25
 800753a:	e7f4      	b.n	8007526 <_printf_float+0x456>

0800753c <_printf_common>:
 800753c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007540:	4616      	mov	r6, r2
 8007542:	4699      	mov	r9, r3
 8007544:	688a      	ldr	r2, [r1, #8]
 8007546:	690b      	ldr	r3, [r1, #16]
 8007548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800754c:	4293      	cmp	r3, r2
 800754e:	bfb8      	it	lt
 8007550:	4613      	movlt	r3, r2
 8007552:	6033      	str	r3, [r6, #0]
 8007554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007558:	4607      	mov	r7, r0
 800755a:	460c      	mov	r4, r1
 800755c:	b10a      	cbz	r2, 8007562 <_printf_common+0x26>
 800755e:	3301      	adds	r3, #1
 8007560:	6033      	str	r3, [r6, #0]
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	0699      	lsls	r1, r3, #26
 8007566:	bf42      	ittt	mi
 8007568:	6833      	ldrmi	r3, [r6, #0]
 800756a:	3302      	addmi	r3, #2
 800756c:	6033      	strmi	r3, [r6, #0]
 800756e:	6825      	ldr	r5, [r4, #0]
 8007570:	f015 0506 	ands.w	r5, r5, #6
 8007574:	d106      	bne.n	8007584 <_printf_common+0x48>
 8007576:	f104 0a19 	add.w	sl, r4, #25
 800757a:	68e3      	ldr	r3, [r4, #12]
 800757c:	6832      	ldr	r2, [r6, #0]
 800757e:	1a9b      	subs	r3, r3, r2
 8007580:	42ab      	cmp	r3, r5
 8007582:	dc26      	bgt.n	80075d2 <_printf_common+0x96>
 8007584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007588:	1e13      	subs	r3, r2, #0
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	bf18      	it	ne
 800758e:	2301      	movne	r3, #1
 8007590:	0692      	lsls	r2, r2, #26
 8007592:	d42b      	bmi.n	80075ec <_printf_common+0xb0>
 8007594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007598:	4649      	mov	r1, r9
 800759a:	4638      	mov	r0, r7
 800759c:	47c0      	blx	r8
 800759e:	3001      	adds	r0, #1
 80075a0:	d01e      	beq.n	80075e0 <_printf_common+0xa4>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	6922      	ldr	r2, [r4, #16]
 80075a6:	f003 0306 	and.w	r3, r3, #6
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	bf02      	ittt	eq
 80075ae:	68e5      	ldreq	r5, [r4, #12]
 80075b0:	6833      	ldreq	r3, [r6, #0]
 80075b2:	1aed      	subeq	r5, r5, r3
 80075b4:	68a3      	ldr	r3, [r4, #8]
 80075b6:	bf0c      	ite	eq
 80075b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075bc:	2500      	movne	r5, #0
 80075be:	4293      	cmp	r3, r2
 80075c0:	bfc4      	itt	gt
 80075c2:	1a9b      	subgt	r3, r3, r2
 80075c4:	18ed      	addgt	r5, r5, r3
 80075c6:	2600      	movs	r6, #0
 80075c8:	341a      	adds	r4, #26
 80075ca:	42b5      	cmp	r5, r6
 80075cc:	d11a      	bne.n	8007604 <_printf_common+0xc8>
 80075ce:	2000      	movs	r0, #0
 80075d0:	e008      	b.n	80075e4 <_printf_common+0xa8>
 80075d2:	2301      	movs	r3, #1
 80075d4:	4652      	mov	r2, sl
 80075d6:	4649      	mov	r1, r9
 80075d8:	4638      	mov	r0, r7
 80075da:	47c0      	blx	r8
 80075dc:	3001      	adds	r0, #1
 80075de:	d103      	bne.n	80075e8 <_printf_common+0xac>
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295
 80075e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e8:	3501      	adds	r5, #1
 80075ea:	e7c6      	b.n	800757a <_printf_common+0x3e>
 80075ec:	18e1      	adds	r1, r4, r3
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	2030      	movs	r0, #48	; 0x30
 80075f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075f6:	4422      	add	r2, r4
 80075f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007600:	3302      	adds	r3, #2
 8007602:	e7c7      	b.n	8007594 <_printf_common+0x58>
 8007604:	2301      	movs	r3, #1
 8007606:	4622      	mov	r2, r4
 8007608:	4649      	mov	r1, r9
 800760a:	4638      	mov	r0, r7
 800760c:	47c0      	blx	r8
 800760e:	3001      	adds	r0, #1
 8007610:	d0e6      	beq.n	80075e0 <_printf_common+0xa4>
 8007612:	3601      	adds	r6, #1
 8007614:	e7d9      	b.n	80075ca <_printf_common+0x8e>
	...

08007618 <_printf_i>:
 8007618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	7e0f      	ldrb	r7, [r1, #24]
 800761e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007620:	2f78      	cmp	r7, #120	; 0x78
 8007622:	4691      	mov	r9, r2
 8007624:	4680      	mov	r8, r0
 8007626:	460c      	mov	r4, r1
 8007628:	469a      	mov	sl, r3
 800762a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800762e:	d807      	bhi.n	8007640 <_printf_i+0x28>
 8007630:	2f62      	cmp	r7, #98	; 0x62
 8007632:	d80a      	bhi.n	800764a <_printf_i+0x32>
 8007634:	2f00      	cmp	r7, #0
 8007636:	f000 80d4 	beq.w	80077e2 <_printf_i+0x1ca>
 800763a:	2f58      	cmp	r7, #88	; 0x58
 800763c:	f000 80c0 	beq.w	80077c0 <_printf_i+0x1a8>
 8007640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007648:	e03a      	b.n	80076c0 <_printf_i+0xa8>
 800764a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800764e:	2b15      	cmp	r3, #21
 8007650:	d8f6      	bhi.n	8007640 <_printf_i+0x28>
 8007652:	a101      	add	r1, pc, #4	; (adr r1, 8007658 <_printf_i+0x40>)
 8007654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007658:	080076b1 	.word	0x080076b1
 800765c:	080076c5 	.word	0x080076c5
 8007660:	08007641 	.word	0x08007641
 8007664:	08007641 	.word	0x08007641
 8007668:	08007641 	.word	0x08007641
 800766c:	08007641 	.word	0x08007641
 8007670:	080076c5 	.word	0x080076c5
 8007674:	08007641 	.word	0x08007641
 8007678:	08007641 	.word	0x08007641
 800767c:	08007641 	.word	0x08007641
 8007680:	08007641 	.word	0x08007641
 8007684:	080077c9 	.word	0x080077c9
 8007688:	080076f1 	.word	0x080076f1
 800768c:	08007783 	.word	0x08007783
 8007690:	08007641 	.word	0x08007641
 8007694:	08007641 	.word	0x08007641
 8007698:	080077eb 	.word	0x080077eb
 800769c:	08007641 	.word	0x08007641
 80076a0:	080076f1 	.word	0x080076f1
 80076a4:	08007641 	.word	0x08007641
 80076a8:	08007641 	.word	0x08007641
 80076ac:	0800778b 	.word	0x0800778b
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	1d1a      	adds	r2, r3, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	602a      	str	r2, [r5, #0]
 80076b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076c0:	2301      	movs	r3, #1
 80076c2:	e09f      	b.n	8007804 <_printf_i+0x1ec>
 80076c4:	6820      	ldr	r0, [r4, #0]
 80076c6:	682b      	ldr	r3, [r5, #0]
 80076c8:	0607      	lsls	r7, r0, #24
 80076ca:	f103 0104 	add.w	r1, r3, #4
 80076ce:	6029      	str	r1, [r5, #0]
 80076d0:	d501      	bpl.n	80076d6 <_printf_i+0xbe>
 80076d2:	681e      	ldr	r6, [r3, #0]
 80076d4:	e003      	b.n	80076de <_printf_i+0xc6>
 80076d6:	0646      	lsls	r6, r0, #25
 80076d8:	d5fb      	bpl.n	80076d2 <_printf_i+0xba>
 80076da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076de:	2e00      	cmp	r6, #0
 80076e0:	da03      	bge.n	80076ea <_printf_i+0xd2>
 80076e2:	232d      	movs	r3, #45	; 0x2d
 80076e4:	4276      	negs	r6, r6
 80076e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ea:	485a      	ldr	r0, [pc, #360]	; (8007854 <_printf_i+0x23c>)
 80076ec:	230a      	movs	r3, #10
 80076ee:	e012      	b.n	8007716 <_printf_i+0xfe>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	6820      	ldr	r0, [r4, #0]
 80076f4:	1d19      	adds	r1, r3, #4
 80076f6:	6029      	str	r1, [r5, #0]
 80076f8:	0605      	lsls	r5, r0, #24
 80076fa:	d501      	bpl.n	8007700 <_printf_i+0xe8>
 80076fc:	681e      	ldr	r6, [r3, #0]
 80076fe:	e002      	b.n	8007706 <_printf_i+0xee>
 8007700:	0641      	lsls	r1, r0, #25
 8007702:	d5fb      	bpl.n	80076fc <_printf_i+0xe4>
 8007704:	881e      	ldrh	r6, [r3, #0]
 8007706:	4853      	ldr	r0, [pc, #332]	; (8007854 <_printf_i+0x23c>)
 8007708:	2f6f      	cmp	r7, #111	; 0x6f
 800770a:	bf0c      	ite	eq
 800770c:	2308      	moveq	r3, #8
 800770e:	230a      	movne	r3, #10
 8007710:	2100      	movs	r1, #0
 8007712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007716:	6865      	ldr	r5, [r4, #4]
 8007718:	60a5      	str	r5, [r4, #8]
 800771a:	2d00      	cmp	r5, #0
 800771c:	bfa2      	ittt	ge
 800771e:	6821      	ldrge	r1, [r4, #0]
 8007720:	f021 0104 	bicge.w	r1, r1, #4
 8007724:	6021      	strge	r1, [r4, #0]
 8007726:	b90e      	cbnz	r6, 800772c <_printf_i+0x114>
 8007728:	2d00      	cmp	r5, #0
 800772a:	d04b      	beq.n	80077c4 <_printf_i+0x1ac>
 800772c:	4615      	mov	r5, r2
 800772e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007732:	fb03 6711 	mls	r7, r3, r1, r6
 8007736:	5dc7      	ldrb	r7, [r0, r7]
 8007738:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800773c:	4637      	mov	r7, r6
 800773e:	42bb      	cmp	r3, r7
 8007740:	460e      	mov	r6, r1
 8007742:	d9f4      	bls.n	800772e <_printf_i+0x116>
 8007744:	2b08      	cmp	r3, #8
 8007746:	d10b      	bne.n	8007760 <_printf_i+0x148>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	07de      	lsls	r6, r3, #31
 800774c:	d508      	bpl.n	8007760 <_printf_i+0x148>
 800774e:	6923      	ldr	r3, [r4, #16]
 8007750:	6861      	ldr	r1, [r4, #4]
 8007752:	4299      	cmp	r1, r3
 8007754:	bfde      	ittt	le
 8007756:	2330      	movle	r3, #48	; 0x30
 8007758:	f805 3c01 	strble.w	r3, [r5, #-1]
 800775c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007760:	1b52      	subs	r2, r2, r5
 8007762:	6122      	str	r2, [r4, #16]
 8007764:	f8cd a000 	str.w	sl, [sp]
 8007768:	464b      	mov	r3, r9
 800776a:	aa03      	add	r2, sp, #12
 800776c:	4621      	mov	r1, r4
 800776e:	4640      	mov	r0, r8
 8007770:	f7ff fee4 	bl	800753c <_printf_common>
 8007774:	3001      	adds	r0, #1
 8007776:	d14a      	bne.n	800780e <_printf_i+0x1f6>
 8007778:	f04f 30ff 	mov.w	r0, #4294967295
 800777c:	b004      	add	sp, #16
 800777e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	f043 0320 	orr.w	r3, r3, #32
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	4833      	ldr	r0, [pc, #204]	; (8007858 <_printf_i+0x240>)
 800778c:	2778      	movs	r7, #120	; 0x78
 800778e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	6829      	ldr	r1, [r5, #0]
 8007796:	061f      	lsls	r7, r3, #24
 8007798:	f851 6b04 	ldr.w	r6, [r1], #4
 800779c:	d402      	bmi.n	80077a4 <_printf_i+0x18c>
 800779e:	065f      	lsls	r7, r3, #25
 80077a0:	bf48      	it	mi
 80077a2:	b2b6      	uxthmi	r6, r6
 80077a4:	07df      	lsls	r7, r3, #31
 80077a6:	bf48      	it	mi
 80077a8:	f043 0320 	orrmi.w	r3, r3, #32
 80077ac:	6029      	str	r1, [r5, #0]
 80077ae:	bf48      	it	mi
 80077b0:	6023      	strmi	r3, [r4, #0]
 80077b2:	b91e      	cbnz	r6, 80077bc <_printf_i+0x1a4>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	f023 0320 	bic.w	r3, r3, #32
 80077ba:	6023      	str	r3, [r4, #0]
 80077bc:	2310      	movs	r3, #16
 80077be:	e7a7      	b.n	8007710 <_printf_i+0xf8>
 80077c0:	4824      	ldr	r0, [pc, #144]	; (8007854 <_printf_i+0x23c>)
 80077c2:	e7e4      	b.n	800778e <_printf_i+0x176>
 80077c4:	4615      	mov	r5, r2
 80077c6:	e7bd      	b.n	8007744 <_printf_i+0x12c>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	6826      	ldr	r6, [r4, #0]
 80077cc:	6961      	ldr	r1, [r4, #20]
 80077ce:	1d18      	adds	r0, r3, #4
 80077d0:	6028      	str	r0, [r5, #0]
 80077d2:	0635      	lsls	r5, r6, #24
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	d501      	bpl.n	80077dc <_printf_i+0x1c4>
 80077d8:	6019      	str	r1, [r3, #0]
 80077da:	e002      	b.n	80077e2 <_printf_i+0x1ca>
 80077dc:	0670      	lsls	r0, r6, #25
 80077de:	d5fb      	bpl.n	80077d8 <_printf_i+0x1c0>
 80077e0:	8019      	strh	r1, [r3, #0]
 80077e2:	2300      	movs	r3, #0
 80077e4:	6123      	str	r3, [r4, #16]
 80077e6:	4615      	mov	r5, r2
 80077e8:	e7bc      	b.n	8007764 <_printf_i+0x14c>
 80077ea:	682b      	ldr	r3, [r5, #0]
 80077ec:	1d1a      	adds	r2, r3, #4
 80077ee:	602a      	str	r2, [r5, #0]
 80077f0:	681d      	ldr	r5, [r3, #0]
 80077f2:	6862      	ldr	r2, [r4, #4]
 80077f4:	2100      	movs	r1, #0
 80077f6:	4628      	mov	r0, r5
 80077f8:	f7f8 fd0a 	bl	8000210 <memchr>
 80077fc:	b108      	cbz	r0, 8007802 <_printf_i+0x1ea>
 80077fe:	1b40      	subs	r0, r0, r5
 8007800:	6060      	str	r0, [r4, #4]
 8007802:	6863      	ldr	r3, [r4, #4]
 8007804:	6123      	str	r3, [r4, #16]
 8007806:	2300      	movs	r3, #0
 8007808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800780c:	e7aa      	b.n	8007764 <_printf_i+0x14c>
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	462a      	mov	r2, r5
 8007812:	4649      	mov	r1, r9
 8007814:	4640      	mov	r0, r8
 8007816:	47d0      	blx	sl
 8007818:	3001      	adds	r0, #1
 800781a:	d0ad      	beq.n	8007778 <_printf_i+0x160>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	079b      	lsls	r3, r3, #30
 8007820:	d413      	bmi.n	800784a <_printf_i+0x232>
 8007822:	68e0      	ldr	r0, [r4, #12]
 8007824:	9b03      	ldr	r3, [sp, #12]
 8007826:	4298      	cmp	r0, r3
 8007828:	bfb8      	it	lt
 800782a:	4618      	movlt	r0, r3
 800782c:	e7a6      	b.n	800777c <_printf_i+0x164>
 800782e:	2301      	movs	r3, #1
 8007830:	4632      	mov	r2, r6
 8007832:	4649      	mov	r1, r9
 8007834:	4640      	mov	r0, r8
 8007836:	47d0      	blx	sl
 8007838:	3001      	adds	r0, #1
 800783a:	d09d      	beq.n	8007778 <_printf_i+0x160>
 800783c:	3501      	adds	r5, #1
 800783e:	68e3      	ldr	r3, [r4, #12]
 8007840:	9903      	ldr	r1, [sp, #12]
 8007842:	1a5b      	subs	r3, r3, r1
 8007844:	42ab      	cmp	r3, r5
 8007846:	dcf2      	bgt.n	800782e <_printf_i+0x216>
 8007848:	e7eb      	b.n	8007822 <_printf_i+0x20a>
 800784a:	2500      	movs	r5, #0
 800784c:	f104 0619 	add.w	r6, r4, #25
 8007850:	e7f5      	b.n	800783e <_printf_i+0x226>
 8007852:	bf00      	nop
 8007854:	0800b816 	.word	0x0800b816
 8007858:	0800b827 	.word	0x0800b827

0800785c <_scanf_float>:
 800785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	b087      	sub	sp, #28
 8007862:	4617      	mov	r7, r2
 8007864:	9303      	str	r3, [sp, #12]
 8007866:	688b      	ldr	r3, [r1, #8]
 8007868:	1e5a      	subs	r2, r3, #1
 800786a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800786e:	bf83      	ittte	hi
 8007870:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007874:	195b      	addhi	r3, r3, r5
 8007876:	9302      	strhi	r3, [sp, #8]
 8007878:	2300      	movls	r3, #0
 800787a:	bf86      	itte	hi
 800787c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007880:	608b      	strhi	r3, [r1, #8]
 8007882:	9302      	strls	r3, [sp, #8]
 8007884:	680b      	ldr	r3, [r1, #0]
 8007886:	468b      	mov	fp, r1
 8007888:	2500      	movs	r5, #0
 800788a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800788e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007892:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007896:	4680      	mov	r8, r0
 8007898:	460c      	mov	r4, r1
 800789a:	465e      	mov	r6, fp
 800789c:	46aa      	mov	sl, r5
 800789e:	46a9      	mov	r9, r5
 80078a0:	9501      	str	r5, [sp, #4]
 80078a2:	68a2      	ldr	r2, [r4, #8]
 80078a4:	b152      	cbz	r2, 80078bc <_scanf_float+0x60>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b4e      	cmp	r3, #78	; 0x4e
 80078ac:	d864      	bhi.n	8007978 <_scanf_float+0x11c>
 80078ae:	2b40      	cmp	r3, #64	; 0x40
 80078b0:	d83c      	bhi.n	800792c <_scanf_float+0xd0>
 80078b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80078b6:	b2c8      	uxtb	r0, r1
 80078b8:	280e      	cmp	r0, #14
 80078ba:	d93a      	bls.n	8007932 <_scanf_float+0xd6>
 80078bc:	f1b9 0f00 	cmp.w	r9, #0
 80078c0:	d003      	beq.n	80078ca <_scanf_float+0x6e>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078ce:	f1ba 0f01 	cmp.w	sl, #1
 80078d2:	f200 8113 	bhi.w	8007afc <_scanf_float+0x2a0>
 80078d6:	455e      	cmp	r6, fp
 80078d8:	f200 8105 	bhi.w	8007ae6 <_scanf_float+0x28a>
 80078dc:	2501      	movs	r5, #1
 80078de:	4628      	mov	r0, r5
 80078e0:	b007      	add	sp, #28
 80078e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80078ea:	2a0d      	cmp	r2, #13
 80078ec:	d8e6      	bhi.n	80078bc <_scanf_float+0x60>
 80078ee:	a101      	add	r1, pc, #4	; (adr r1, 80078f4 <_scanf_float+0x98>)
 80078f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078f4:	08007a33 	.word	0x08007a33
 80078f8:	080078bd 	.word	0x080078bd
 80078fc:	080078bd 	.word	0x080078bd
 8007900:	080078bd 	.word	0x080078bd
 8007904:	08007a93 	.word	0x08007a93
 8007908:	08007a6b 	.word	0x08007a6b
 800790c:	080078bd 	.word	0x080078bd
 8007910:	080078bd 	.word	0x080078bd
 8007914:	08007a41 	.word	0x08007a41
 8007918:	080078bd 	.word	0x080078bd
 800791c:	080078bd 	.word	0x080078bd
 8007920:	080078bd 	.word	0x080078bd
 8007924:	080078bd 	.word	0x080078bd
 8007928:	080079f9 	.word	0x080079f9
 800792c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007930:	e7db      	b.n	80078ea <_scanf_float+0x8e>
 8007932:	290e      	cmp	r1, #14
 8007934:	d8c2      	bhi.n	80078bc <_scanf_float+0x60>
 8007936:	a001      	add	r0, pc, #4	; (adr r0, 800793c <_scanf_float+0xe0>)
 8007938:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800793c:	080079eb 	.word	0x080079eb
 8007940:	080078bd 	.word	0x080078bd
 8007944:	080079eb 	.word	0x080079eb
 8007948:	08007a7f 	.word	0x08007a7f
 800794c:	080078bd 	.word	0x080078bd
 8007950:	08007999 	.word	0x08007999
 8007954:	080079d5 	.word	0x080079d5
 8007958:	080079d5 	.word	0x080079d5
 800795c:	080079d5 	.word	0x080079d5
 8007960:	080079d5 	.word	0x080079d5
 8007964:	080079d5 	.word	0x080079d5
 8007968:	080079d5 	.word	0x080079d5
 800796c:	080079d5 	.word	0x080079d5
 8007970:	080079d5 	.word	0x080079d5
 8007974:	080079d5 	.word	0x080079d5
 8007978:	2b6e      	cmp	r3, #110	; 0x6e
 800797a:	d809      	bhi.n	8007990 <_scanf_float+0x134>
 800797c:	2b60      	cmp	r3, #96	; 0x60
 800797e:	d8b2      	bhi.n	80078e6 <_scanf_float+0x8a>
 8007980:	2b54      	cmp	r3, #84	; 0x54
 8007982:	d077      	beq.n	8007a74 <_scanf_float+0x218>
 8007984:	2b59      	cmp	r3, #89	; 0x59
 8007986:	d199      	bne.n	80078bc <_scanf_float+0x60>
 8007988:	2d07      	cmp	r5, #7
 800798a:	d197      	bne.n	80078bc <_scanf_float+0x60>
 800798c:	2508      	movs	r5, #8
 800798e:	e029      	b.n	80079e4 <_scanf_float+0x188>
 8007990:	2b74      	cmp	r3, #116	; 0x74
 8007992:	d06f      	beq.n	8007a74 <_scanf_float+0x218>
 8007994:	2b79      	cmp	r3, #121	; 0x79
 8007996:	e7f6      	b.n	8007986 <_scanf_float+0x12a>
 8007998:	6821      	ldr	r1, [r4, #0]
 800799a:	05c8      	lsls	r0, r1, #23
 800799c:	d51a      	bpl.n	80079d4 <_scanf_float+0x178>
 800799e:	9b02      	ldr	r3, [sp, #8]
 80079a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80079a4:	6021      	str	r1, [r4, #0]
 80079a6:	f109 0901 	add.w	r9, r9, #1
 80079aa:	b11b      	cbz	r3, 80079b4 <_scanf_float+0x158>
 80079ac:	3b01      	subs	r3, #1
 80079ae:	3201      	adds	r2, #1
 80079b0:	9302      	str	r3, [sp, #8]
 80079b2:	60a2      	str	r2, [r4, #8]
 80079b4:	68a3      	ldr	r3, [r4, #8]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	60a3      	str	r3, [r4, #8]
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	3301      	adds	r3, #1
 80079be:	6123      	str	r3, [r4, #16]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	607b      	str	r3, [r7, #4]
 80079c8:	f340 8084 	ble.w	8007ad4 <_scanf_float+0x278>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	3301      	adds	r3, #1
 80079d0:	603b      	str	r3, [r7, #0]
 80079d2:	e766      	b.n	80078a2 <_scanf_float+0x46>
 80079d4:	eb1a 0f05 	cmn.w	sl, r5
 80079d8:	f47f af70 	bne.w	80078bc <_scanf_float+0x60>
 80079dc:	6822      	ldr	r2, [r4, #0]
 80079de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80079e2:	6022      	str	r2, [r4, #0]
 80079e4:	f806 3b01 	strb.w	r3, [r6], #1
 80079e8:	e7e4      	b.n	80079b4 <_scanf_float+0x158>
 80079ea:	6822      	ldr	r2, [r4, #0]
 80079ec:	0610      	lsls	r0, r2, #24
 80079ee:	f57f af65 	bpl.w	80078bc <_scanf_float+0x60>
 80079f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079f6:	e7f4      	b.n	80079e2 <_scanf_float+0x186>
 80079f8:	f1ba 0f00 	cmp.w	sl, #0
 80079fc:	d10e      	bne.n	8007a1c <_scanf_float+0x1c0>
 80079fe:	f1b9 0f00 	cmp.w	r9, #0
 8007a02:	d10e      	bne.n	8007a22 <_scanf_float+0x1c6>
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a0e:	d108      	bne.n	8007a22 <_scanf_float+0x1c6>
 8007a10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a14:	6022      	str	r2, [r4, #0]
 8007a16:	f04f 0a01 	mov.w	sl, #1
 8007a1a:	e7e3      	b.n	80079e4 <_scanf_float+0x188>
 8007a1c:	f1ba 0f02 	cmp.w	sl, #2
 8007a20:	d055      	beq.n	8007ace <_scanf_float+0x272>
 8007a22:	2d01      	cmp	r5, #1
 8007a24:	d002      	beq.n	8007a2c <_scanf_float+0x1d0>
 8007a26:	2d04      	cmp	r5, #4
 8007a28:	f47f af48 	bne.w	80078bc <_scanf_float+0x60>
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	b2ed      	uxtb	r5, r5
 8007a30:	e7d8      	b.n	80079e4 <_scanf_float+0x188>
 8007a32:	f1ba 0f01 	cmp.w	sl, #1
 8007a36:	f47f af41 	bne.w	80078bc <_scanf_float+0x60>
 8007a3a:	f04f 0a02 	mov.w	sl, #2
 8007a3e:	e7d1      	b.n	80079e4 <_scanf_float+0x188>
 8007a40:	b97d      	cbnz	r5, 8007a62 <_scanf_float+0x206>
 8007a42:	f1b9 0f00 	cmp.w	r9, #0
 8007a46:	f47f af3c 	bne.w	80078c2 <_scanf_float+0x66>
 8007a4a:	6822      	ldr	r2, [r4, #0]
 8007a4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a54:	f47f af39 	bne.w	80078ca <_scanf_float+0x6e>
 8007a58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a5c:	6022      	str	r2, [r4, #0]
 8007a5e:	2501      	movs	r5, #1
 8007a60:	e7c0      	b.n	80079e4 <_scanf_float+0x188>
 8007a62:	2d03      	cmp	r5, #3
 8007a64:	d0e2      	beq.n	8007a2c <_scanf_float+0x1d0>
 8007a66:	2d05      	cmp	r5, #5
 8007a68:	e7de      	b.n	8007a28 <_scanf_float+0x1cc>
 8007a6a:	2d02      	cmp	r5, #2
 8007a6c:	f47f af26 	bne.w	80078bc <_scanf_float+0x60>
 8007a70:	2503      	movs	r5, #3
 8007a72:	e7b7      	b.n	80079e4 <_scanf_float+0x188>
 8007a74:	2d06      	cmp	r5, #6
 8007a76:	f47f af21 	bne.w	80078bc <_scanf_float+0x60>
 8007a7a:	2507      	movs	r5, #7
 8007a7c:	e7b2      	b.n	80079e4 <_scanf_float+0x188>
 8007a7e:	6822      	ldr	r2, [r4, #0]
 8007a80:	0591      	lsls	r1, r2, #22
 8007a82:	f57f af1b 	bpl.w	80078bc <_scanf_float+0x60>
 8007a86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007a8a:	6022      	str	r2, [r4, #0]
 8007a8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a90:	e7a8      	b.n	80079e4 <_scanf_float+0x188>
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a9c:	d006      	beq.n	8007aac <_scanf_float+0x250>
 8007a9e:	0550      	lsls	r0, r2, #21
 8007aa0:	f57f af0c 	bpl.w	80078bc <_scanf_float+0x60>
 8007aa4:	f1b9 0f00 	cmp.w	r9, #0
 8007aa8:	f43f af0f 	beq.w	80078ca <_scanf_float+0x6e>
 8007aac:	0591      	lsls	r1, r2, #22
 8007aae:	bf58      	it	pl
 8007ab0:	9901      	ldrpl	r1, [sp, #4]
 8007ab2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ab6:	bf58      	it	pl
 8007ab8:	eba9 0101 	subpl.w	r1, r9, r1
 8007abc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007ac0:	bf58      	it	pl
 8007ac2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007ac6:	6022      	str	r2, [r4, #0]
 8007ac8:	f04f 0900 	mov.w	r9, #0
 8007acc:	e78a      	b.n	80079e4 <_scanf_float+0x188>
 8007ace:	f04f 0a03 	mov.w	sl, #3
 8007ad2:	e787      	b.n	80079e4 <_scanf_float+0x188>
 8007ad4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ad8:	4639      	mov	r1, r7
 8007ada:	4640      	mov	r0, r8
 8007adc:	4798      	blx	r3
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f aedf 	beq.w	80078a2 <_scanf_float+0x46>
 8007ae4:	e6ea      	b.n	80078bc <_scanf_float+0x60>
 8007ae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007aea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007aee:	463a      	mov	r2, r7
 8007af0:	4640      	mov	r0, r8
 8007af2:	4798      	blx	r3
 8007af4:	6923      	ldr	r3, [r4, #16]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	6123      	str	r3, [r4, #16]
 8007afa:	e6ec      	b.n	80078d6 <_scanf_float+0x7a>
 8007afc:	1e6b      	subs	r3, r5, #1
 8007afe:	2b06      	cmp	r3, #6
 8007b00:	d825      	bhi.n	8007b4e <_scanf_float+0x2f2>
 8007b02:	2d02      	cmp	r5, #2
 8007b04:	d836      	bhi.n	8007b74 <_scanf_float+0x318>
 8007b06:	455e      	cmp	r6, fp
 8007b08:	f67f aee8 	bls.w	80078dc <_scanf_float+0x80>
 8007b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b14:	463a      	mov	r2, r7
 8007b16:	4640      	mov	r0, r8
 8007b18:	4798      	blx	r3
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	6123      	str	r3, [r4, #16]
 8007b20:	e7f1      	b.n	8007b06 <_scanf_float+0x2aa>
 8007b22:	9802      	ldr	r0, [sp, #8]
 8007b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007b2c:	9002      	str	r0, [sp, #8]
 8007b2e:	463a      	mov	r2, r7
 8007b30:	4640      	mov	r0, r8
 8007b32:	4798      	blx	r3
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	6123      	str	r3, [r4, #16]
 8007b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b3e:	fa5f fa8a 	uxtb.w	sl, sl
 8007b42:	f1ba 0f02 	cmp.w	sl, #2
 8007b46:	d1ec      	bne.n	8007b22 <_scanf_float+0x2c6>
 8007b48:	3d03      	subs	r5, #3
 8007b4a:	b2ed      	uxtb	r5, r5
 8007b4c:	1b76      	subs	r6, r6, r5
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	05da      	lsls	r2, r3, #23
 8007b52:	d52f      	bpl.n	8007bb4 <_scanf_float+0x358>
 8007b54:	055b      	lsls	r3, r3, #21
 8007b56:	d510      	bpl.n	8007b7a <_scanf_float+0x31e>
 8007b58:	455e      	cmp	r6, fp
 8007b5a:	f67f aebf 	bls.w	80078dc <_scanf_float+0x80>
 8007b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b66:	463a      	mov	r2, r7
 8007b68:	4640      	mov	r0, r8
 8007b6a:	4798      	blx	r3
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	6123      	str	r3, [r4, #16]
 8007b72:	e7f1      	b.n	8007b58 <_scanf_float+0x2fc>
 8007b74:	46aa      	mov	sl, r5
 8007b76:	9602      	str	r6, [sp, #8]
 8007b78:	e7df      	b.n	8007b3a <_scanf_float+0x2de>
 8007b7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	2965      	cmp	r1, #101	; 0x65
 8007b82:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b86:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b8a:	6123      	str	r3, [r4, #16]
 8007b8c:	d00c      	beq.n	8007ba8 <_scanf_float+0x34c>
 8007b8e:	2945      	cmp	r1, #69	; 0x45
 8007b90:	d00a      	beq.n	8007ba8 <_scanf_float+0x34c>
 8007b92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b96:	463a      	mov	r2, r7
 8007b98:	4640      	mov	r0, r8
 8007b9a:	4798      	blx	r3
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	1eb5      	subs	r5, r6, #2
 8007ba6:	6123      	str	r3, [r4, #16]
 8007ba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bac:	463a      	mov	r2, r7
 8007bae:	4640      	mov	r0, r8
 8007bb0:	4798      	blx	r3
 8007bb2:	462e      	mov	r6, r5
 8007bb4:	6825      	ldr	r5, [r4, #0]
 8007bb6:	f015 0510 	ands.w	r5, r5, #16
 8007bba:	d158      	bne.n	8007c6e <_scanf_float+0x412>
 8007bbc:	7035      	strb	r5, [r6, #0]
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc8:	d11c      	bne.n	8007c04 <_scanf_float+0x3a8>
 8007bca:	9b01      	ldr	r3, [sp, #4]
 8007bcc:	454b      	cmp	r3, r9
 8007bce:	eba3 0209 	sub.w	r2, r3, r9
 8007bd2:	d124      	bne.n	8007c1e <_scanf_float+0x3c2>
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4659      	mov	r1, fp
 8007bd8:	4640      	mov	r0, r8
 8007bda:	f002 fc31 	bl	800a440 <_strtod_r>
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	6821      	ldr	r1, [r4, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f011 0f02 	tst.w	r1, #2
 8007be8:	ec57 6b10 	vmov	r6, r7, d0
 8007bec:	f103 0204 	add.w	r2, r3, #4
 8007bf0:	d020      	beq.n	8007c34 <_scanf_float+0x3d8>
 8007bf2:	9903      	ldr	r1, [sp, #12]
 8007bf4:	600a      	str	r2, [r1, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	e9c3 6700 	strd	r6, r7, [r3]
 8007bfc:	68e3      	ldr	r3, [r4, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60e3      	str	r3, [r4, #12]
 8007c02:	e66c      	b.n	80078de <_scanf_float+0x82>
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0e4      	beq.n	8007bd4 <_scanf_float+0x378>
 8007c0a:	9905      	ldr	r1, [sp, #20]
 8007c0c:	230a      	movs	r3, #10
 8007c0e:	462a      	mov	r2, r5
 8007c10:	3101      	adds	r1, #1
 8007c12:	4640      	mov	r0, r8
 8007c14:	f002 fc9c 	bl	800a550 <_strtol_r>
 8007c18:	9b04      	ldr	r3, [sp, #16]
 8007c1a:	9e05      	ldr	r6, [sp, #20]
 8007c1c:	1ac2      	subs	r2, r0, r3
 8007c1e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007c22:	429e      	cmp	r6, r3
 8007c24:	bf28      	it	cs
 8007c26:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007c2a:	4912      	ldr	r1, [pc, #72]	; (8007c74 <_scanf_float+0x418>)
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f000 f8e7 	bl	8007e00 <siprintf>
 8007c32:	e7cf      	b.n	8007bd4 <_scanf_float+0x378>
 8007c34:	f011 0f04 	tst.w	r1, #4
 8007c38:	9903      	ldr	r1, [sp, #12]
 8007c3a:	600a      	str	r2, [r1, #0]
 8007c3c:	d1db      	bne.n	8007bf6 <_scanf_float+0x39a>
 8007c3e:	f8d3 8000 	ldr.w	r8, [r3]
 8007c42:	ee10 2a10 	vmov	r2, s0
 8007c46:	ee10 0a10 	vmov	r0, s0
 8007c4a:	463b      	mov	r3, r7
 8007c4c:	4639      	mov	r1, r7
 8007c4e:	f7f8 ff8d 	bl	8000b6c <__aeabi_dcmpun>
 8007c52:	b128      	cbz	r0, 8007c60 <_scanf_float+0x404>
 8007c54:	4808      	ldr	r0, [pc, #32]	; (8007c78 <_scanf_float+0x41c>)
 8007c56:	f000 f9b7 	bl	8007fc8 <nanf>
 8007c5a:	ed88 0a00 	vstr	s0, [r8]
 8007c5e:	e7cd      	b.n	8007bfc <_scanf_float+0x3a0>
 8007c60:	4630      	mov	r0, r6
 8007c62:	4639      	mov	r1, r7
 8007c64:	f7f8 ffe0 	bl	8000c28 <__aeabi_d2f>
 8007c68:	f8c8 0000 	str.w	r0, [r8]
 8007c6c:	e7c6      	b.n	8007bfc <_scanf_float+0x3a0>
 8007c6e:	2500      	movs	r5, #0
 8007c70:	e635      	b.n	80078de <_scanf_float+0x82>
 8007c72:	bf00      	nop
 8007c74:	0800b838 	.word	0x0800b838
 8007c78:	0800bbcd 	.word	0x0800bbcd

08007c7c <std>:
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	4604      	mov	r4, r0
 8007c82:	e9c0 3300 	strd	r3, r3, [r0]
 8007c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c8a:	6083      	str	r3, [r0, #8]
 8007c8c:	8181      	strh	r1, [r0, #12]
 8007c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8007c90:	81c2      	strh	r2, [r0, #14]
 8007c92:	6183      	str	r3, [r0, #24]
 8007c94:	4619      	mov	r1, r3
 8007c96:	2208      	movs	r2, #8
 8007c98:	305c      	adds	r0, #92	; 0x5c
 8007c9a:	f000 f914 	bl	8007ec6 <memset>
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	; (8007cd4 <std+0x58>)
 8007ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <std+0x5c>)
 8007ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	; (8007cdc <std+0x60>)
 8007ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007caa:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <std+0x64>)
 8007cac:	6323      	str	r3, [r4, #48]	; 0x30
 8007cae:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <std+0x68>)
 8007cb0:	6224      	str	r4, [r4, #32]
 8007cb2:	429c      	cmp	r4, r3
 8007cb4:	d006      	beq.n	8007cc4 <std+0x48>
 8007cb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007cba:	4294      	cmp	r4, r2
 8007cbc:	d002      	beq.n	8007cc4 <std+0x48>
 8007cbe:	33d0      	adds	r3, #208	; 0xd0
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	d105      	bne.n	8007cd0 <std+0x54>
 8007cc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ccc:	f000 b978 	b.w	8007fc0 <__retarget_lock_init_recursive>
 8007cd0:	bd10      	pop	{r4, pc}
 8007cd2:	bf00      	nop
 8007cd4:	08007e41 	.word	0x08007e41
 8007cd8:	08007e63 	.word	0x08007e63
 8007cdc:	08007e9b 	.word	0x08007e9b
 8007ce0:	08007ebf 	.word	0x08007ebf
 8007ce4:	20000b0c 	.word	0x20000b0c

08007ce8 <stdio_exit_handler>:
 8007ce8:	4a02      	ldr	r2, [pc, #8]	; (8007cf4 <stdio_exit_handler+0xc>)
 8007cea:	4903      	ldr	r1, [pc, #12]	; (8007cf8 <stdio_exit_handler+0x10>)
 8007cec:	4803      	ldr	r0, [pc, #12]	; (8007cfc <stdio_exit_handler+0x14>)
 8007cee:	f000 b869 	b.w	8007dc4 <_fwalk_sglue>
 8007cf2:	bf00      	nop
 8007cf4:	20000014 	.word	0x20000014
 8007cf8:	0800a911 	.word	0x0800a911
 8007cfc:	20000020 	.word	0x20000020

08007d00 <cleanup_stdio>:
 8007d00:	6841      	ldr	r1, [r0, #4]
 8007d02:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <cleanup_stdio+0x34>)
 8007d04:	4299      	cmp	r1, r3
 8007d06:	b510      	push	{r4, lr}
 8007d08:	4604      	mov	r4, r0
 8007d0a:	d001      	beq.n	8007d10 <cleanup_stdio+0x10>
 8007d0c:	f002 fe00 	bl	800a910 <_fflush_r>
 8007d10:	68a1      	ldr	r1, [r4, #8]
 8007d12:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <cleanup_stdio+0x38>)
 8007d14:	4299      	cmp	r1, r3
 8007d16:	d002      	beq.n	8007d1e <cleanup_stdio+0x1e>
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f002 fdf9 	bl	800a910 <_fflush_r>
 8007d1e:	68e1      	ldr	r1, [r4, #12]
 8007d20:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <cleanup_stdio+0x3c>)
 8007d22:	4299      	cmp	r1, r3
 8007d24:	d004      	beq.n	8007d30 <cleanup_stdio+0x30>
 8007d26:	4620      	mov	r0, r4
 8007d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d2c:	f002 bdf0 	b.w	800a910 <_fflush_r>
 8007d30:	bd10      	pop	{r4, pc}
 8007d32:	bf00      	nop
 8007d34:	20000b0c 	.word	0x20000b0c
 8007d38:	20000b74 	.word	0x20000b74
 8007d3c:	20000bdc 	.word	0x20000bdc

08007d40 <global_stdio_init.part.0>:
 8007d40:	b510      	push	{r4, lr}
 8007d42:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <global_stdio_init.part.0+0x30>)
 8007d44:	4c0b      	ldr	r4, [pc, #44]	; (8007d74 <global_stdio_init.part.0+0x34>)
 8007d46:	4a0c      	ldr	r2, [pc, #48]	; (8007d78 <global_stdio_init.part.0+0x38>)
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2104      	movs	r1, #4
 8007d50:	f7ff ff94 	bl	8007c7c <std>
 8007d54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d58:	2201      	movs	r2, #1
 8007d5a:	2109      	movs	r1, #9
 8007d5c:	f7ff ff8e 	bl	8007c7c <std>
 8007d60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d64:	2202      	movs	r2, #2
 8007d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d6a:	2112      	movs	r1, #18
 8007d6c:	f7ff bf86 	b.w	8007c7c <std>
 8007d70:	20000c44 	.word	0x20000c44
 8007d74:	20000b0c 	.word	0x20000b0c
 8007d78:	08007ce9 	.word	0x08007ce9

08007d7c <__sfp_lock_acquire>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	; (8007d84 <__sfp_lock_acquire+0x8>)
 8007d7e:	f000 b920 	b.w	8007fc2 <__retarget_lock_acquire_recursive>
 8007d82:	bf00      	nop
 8007d84:	20000c4d 	.word	0x20000c4d

08007d88 <__sfp_lock_release>:
 8007d88:	4801      	ldr	r0, [pc, #4]	; (8007d90 <__sfp_lock_release+0x8>)
 8007d8a:	f000 b91b 	b.w	8007fc4 <__retarget_lock_release_recursive>
 8007d8e:	bf00      	nop
 8007d90:	20000c4d 	.word	0x20000c4d

08007d94 <__sinit>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4604      	mov	r4, r0
 8007d98:	f7ff fff0 	bl	8007d7c <__sfp_lock_acquire>
 8007d9c:	6a23      	ldr	r3, [r4, #32]
 8007d9e:	b11b      	cbz	r3, 8007da8 <__sinit+0x14>
 8007da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da4:	f7ff bff0 	b.w	8007d88 <__sfp_lock_release>
 8007da8:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <__sinit+0x28>)
 8007daa:	6223      	str	r3, [r4, #32]
 8007dac:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <__sinit+0x2c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1f5      	bne.n	8007da0 <__sinit+0xc>
 8007db4:	f7ff ffc4 	bl	8007d40 <global_stdio_init.part.0>
 8007db8:	e7f2      	b.n	8007da0 <__sinit+0xc>
 8007dba:	bf00      	nop
 8007dbc:	08007d01 	.word	0x08007d01
 8007dc0:	20000c44 	.word	0x20000c44

08007dc4 <_fwalk_sglue>:
 8007dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc8:	4607      	mov	r7, r0
 8007dca:	4688      	mov	r8, r1
 8007dcc:	4614      	mov	r4, r2
 8007dce:	2600      	movs	r6, #0
 8007dd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dd4:	f1b9 0901 	subs.w	r9, r9, #1
 8007dd8:	d505      	bpl.n	8007de6 <_fwalk_sglue+0x22>
 8007dda:	6824      	ldr	r4, [r4, #0]
 8007ddc:	2c00      	cmp	r4, #0
 8007dde:	d1f7      	bne.n	8007dd0 <_fwalk_sglue+0xc>
 8007de0:	4630      	mov	r0, r6
 8007de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de6:	89ab      	ldrh	r3, [r5, #12]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d907      	bls.n	8007dfc <_fwalk_sglue+0x38>
 8007dec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007df0:	3301      	adds	r3, #1
 8007df2:	d003      	beq.n	8007dfc <_fwalk_sglue+0x38>
 8007df4:	4629      	mov	r1, r5
 8007df6:	4638      	mov	r0, r7
 8007df8:	47c0      	blx	r8
 8007dfa:	4306      	orrs	r6, r0
 8007dfc:	3568      	adds	r5, #104	; 0x68
 8007dfe:	e7e9      	b.n	8007dd4 <_fwalk_sglue+0x10>

08007e00 <siprintf>:
 8007e00:	b40e      	push	{r1, r2, r3}
 8007e02:	b500      	push	{lr}
 8007e04:	b09c      	sub	sp, #112	; 0x70
 8007e06:	ab1d      	add	r3, sp, #116	; 0x74
 8007e08:	9002      	str	r0, [sp, #8]
 8007e0a:	9006      	str	r0, [sp, #24]
 8007e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e10:	4809      	ldr	r0, [pc, #36]	; (8007e38 <siprintf+0x38>)
 8007e12:	9107      	str	r1, [sp, #28]
 8007e14:	9104      	str	r1, [sp, #16]
 8007e16:	4909      	ldr	r1, [pc, #36]	; (8007e3c <siprintf+0x3c>)
 8007e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e1c:	9105      	str	r1, [sp, #20]
 8007e1e:	6800      	ldr	r0, [r0, #0]
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	a902      	add	r1, sp, #8
 8007e24:	f002 fbf0 	bl	800a608 <_svfiprintf_r>
 8007e28:	9b02      	ldr	r3, [sp, #8]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	701a      	strb	r2, [r3, #0]
 8007e2e:	b01c      	add	sp, #112	; 0x70
 8007e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e34:	b003      	add	sp, #12
 8007e36:	4770      	bx	lr
 8007e38:	2000006c 	.word	0x2000006c
 8007e3c:	ffff0208 	.word	0xffff0208

08007e40 <__sread>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	460c      	mov	r4, r1
 8007e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e48:	f000 f86c 	bl	8007f24 <_read_r>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	bfab      	itete	ge
 8007e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e52:	89a3      	ldrhlt	r3, [r4, #12]
 8007e54:	181b      	addge	r3, r3, r0
 8007e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e5a:	bfac      	ite	ge
 8007e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e5e:	81a3      	strhlt	r3, [r4, #12]
 8007e60:	bd10      	pop	{r4, pc}

08007e62 <__swrite>:
 8007e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e66:	461f      	mov	r7, r3
 8007e68:	898b      	ldrh	r3, [r1, #12]
 8007e6a:	05db      	lsls	r3, r3, #23
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	4616      	mov	r6, r2
 8007e72:	d505      	bpl.n	8007e80 <__swrite+0x1e>
 8007e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e78:	2302      	movs	r3, #2
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f000 f840 	bl	8007f00 <_lseek_r>
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e8a:	81a3      	strh	r3, [r4, #12]
 8007e8c:	4632      	mov	r2, r6
 8007e8e:	463b      	mov	r3, r7
 8007e90:	4628      	mov	r0, r5
 8007e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e96:	f000 b857 	b.w	8007f48 <_write_r>

08007e9a <__sseek>:
 8007e9a:	b510      	push	{r4, lr}
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea2:	f000 f82d 	bl	8007f00 <_lseek_r>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	bf15      	itete	ne
 8007eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eb6:	81a3      	strheq	r3, [r4, #12]
 8007eb8:	bf18      	it	ne
 8007eba:	81a3      	strhne	r3, [r4, #12]
 8007ebc:	bd10      	pop	{r4, pc}

08007ebe <__sclose>:
 8007ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec2:	f000 b80d 	b.w	8007ee0 <_close_r>

08007ec6 <memset>:
 8007ec6:	4402      	add	r2, r0
 8007ec8:	4603      	mov	r3, r0
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d100      	bne.n	8007ed0 <memset+0xa>
 8007ece:	4770      	bx	lr
 8007ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8007ed4:	e7f9      	b.n	8007eca <memset+0x4>
	...

08007ed8 <_localeconv_r>:
 8007ed8:	4800      	ldr	r0, [pc, #0]	; (8007edc <_localeconv_r+0x4>)
 8007eda:	4770      	bx	lr
 8007edc:	20000160 	.word	0x20000160

08007ee0 <_close_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d06      	ldr	r5, [pc, #24]	; (8007efc <_close_r+0x1c>)
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	4608      	mov	r0, r1
 8007eea:	602b      	str	r3, [r5, #0]
 8007eec:	f7fa fa33 	bl	8002356 <_close>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_close_r+0x1a>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_close_r+0x1a>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20000c48 	.word	0x20000c48

08007f00 <_lseek_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d07      	ldr	r5, [pc, #28]	; (8007f20 <_lseek_r+0x20>)
 8007f04:	4604      	mov	r4, r0
 8007f06:	4608      	mov	r0, r1
 8007f08:	4611      	mov	r1, r2
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	602a      	str	r2, [r5, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f7fa fa48 	bl	80023a4 <_lseek>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_lseek_r+0x1e>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_lseek_r+0x1e>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	20000c48 	.word	0x20000c48

08007f24 <_read_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d07      	ldr	r5, [pc, #28]	; (8007f44 <_read_r+0x20>)
 8007f28:	4604      	mov	r4, r0
 8007f2a:	4608      	mov	r0, r1
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	2200      	movs	r2, #0
 8007f30:	602a      	str	r2, [r5, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	f7fa f9f2 	bl	800231c <_read>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d102      	bne.n	8007f42 <_read_r+0x1e>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	b103      	cbz	r3, 8007f42 <_read_r+0x1e>
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
 8007f44:	20000c48 	.word	0x20000c48

08007f48 <_write_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	4d07      	ldr	r5, [pc, #28]	; (8007f68 <_write_r+0x20>)
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	4608      	mov	r0, r1
 8007f50:	4611      	mov	r1, r2
 8007f52:	2200      	movs	r2, #0
 8007f54:	602a      	str	r2, [r5, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f7f9 fc7a 	bl	8001850 <_write>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	d102      	bne.n	8007f66 <_write_r+0x1e>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	b103      	cbz	r3, 8007f66 <_write_r+0x1e>
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	20000c48 	.word	0x20000c48

08007f6c <__errno>:
 8007f6c:	4b01      	ldr	r3, [pc, #4]	; (8007f74 <__errno+0x8>)
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	2000006c 	.word	0x2000006c

08007f78 <__libc_init_array>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	4d0d      	ldr	r5, [pc, #52]	; (8007fb0 <__libc_init_array+0x38>)
 8007f7c:	4c0d      	ldr	r4, [pc, #52]	; (8007fb4 <__libc_init_array+0x3c>)
 8007f7e:	1b64      	subs	r4, r4, r5
 8007f80:	10a4      	asrs	r4, r4, #2
 8007f82:	2600      	movs	r6, #0
 8007f84:	42a6      	cmp	r6, r4
 8007f86:	d109      	bne.n	8007f9c <__libc_init_array+0x24>
 8007f88:	4d0b      	ldr	r5, [pc, #44]	; (8007fb8 <__libc_init_array+0x40>)
 8007f8a:	4c0c      	ldr	r4, [pc, #48]	; (8007fbc <__libc_init_array+0x44>)
 8007f8c:	f003 fbd8 	bl	800b740 <_init>
 8007f90:	1b64      	subs	r4, r4, r5
 8007f92:	10a4      	asrs	r4, r4, #2
 8007f94:	2600      	movs	r6, #0
 8007f96:	42a6      	cmp	r6, r4
 8007f98:	d105      	bne.n	8007fa6 <__libc_init_array+0x2e>
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa0:	4798      	blx	r3
 8007fa2:	3601      	adds	r6, #1
 8007fa4:	e7ee      	b.n	8007f84 <__libc_init_array+0xc>
 8007fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007faa:	4798      	blx	r3
 8007fac:	3601      	adds	r6, #1
 8007fae:	e7f2      	b.n	8007f96 <__libc_init_array+0x1e>
 8007fb0:	0800bc38 	.word	0x0800bc38
 8007fb4:	0800bc38 	.word	0x0800bc38
 8007fb8:	0800bc38 	.word	0x0800bc38
 8007fbc:	0800bc3c 	.word	0x0800bc3c

08007fc0 <__retarget_lock_init_recursive>:
 8007fc0:	4770      	bx	lr

08007fc2 <__retarget_lock_acquire_recursive>:
 8007fc2:	4770      	bx	lr

08007fc4 <__retarget_lock_release_recursive>:
 8007fc4:	4770      	bx	lr
	...

08007fc8 <nanf>:
 8007fc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fd0 <nanf+0x8>
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	7fc00000 	.word	0x7fc00000

08007fd4 <quorem>:
 8007fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	6903      	ldr	r3, [r0, #16]
 8007fda:	690c      	ldr	r4, [r1, #16]
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	4607      	mov	r7, r0
 8007fe0:	db7e      	blt.n	80080e0 <quorem+0x10c>
 8007fe2:	3c01      	subs	r4, #1
 8007fe4:	f101 0814 	add.w	r8, r1, #20
 8007fe8:	f100 0514 	add.w	r5, r0, #20
 8007fec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008002:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008006:	fbb2 f6f3 	udiv	r6, r2, r3
 800800a:	d331      	bcc.n	8008070 <quorem+0x9c>
 800800c:	f04f 0e00 	mov.w	lr, #0
 8008010:	4640      	mov	r0, r8
 8008012:	46ac      	mov	ip, r5
 8008014:	46f2      	mov	sl, lr
 8008016:	f850 2b04 	ldr.w	r2, [r0], #4
 800801a:	b293      	uxth	r3, r2
 800801c:	fb06 e303 	mla	r3, r6, r3, lr
 8008020:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008024:	0c1a      	lsrs	r2, r3, #16
 8008026:	b29b      	uxth	r3, r3
 8008028:	ebaa 0303 	sub.w	r3, sl, r3
 800802c:	f8dc a000 	ldr.w	sl, [ip]
 8008030:	fa13 f38a 	uxtah	r3, r3, sl
 8008034:	fb06 220e 	mla	r2, r6, lr, r2
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	9b00      	ldr	r3, [sp, #0]
 800803c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008040:	b292      	uxth	r2, r2
 8008042:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800804a:	f8bd 3000 	ldrh.w	r3, [sp]
 800804e:	4581      	cmp	r9, r0
 8008050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008054:	f84c 3b04 	str.w	r3, [ip], #4
 8008058:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800805c:	d2db      	bcs.n	8008016 <quorem+0x42>
 800805e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008062:	b92b      	cbnz	r3, 8008070 <quorem+0x9c>
 8008064:	9b01      	ldr	r3, [sp, #4]
 8008066:	3b04      	subs	r3, #4
 8008068:	429d      	cmp	r5, r3
 800806a:	461a      	mov	r2, r3
 800806c:	d32c      	bcc.n	80080c8 <quorem+0xf4>
 800806e:	613c      	str	r4, [r7, #16]
 8008070:	4638      	mov	r0, r7
 8008072:	f001 f9f1 	bl	8009458 <__mcmp>
 8008076:	2800      	cmp	r0, #0
 8008078:	db22      	blt.n	80080c0 <quorem+0xec>
 800807a:	3601      	adds	r6, #1
 800807c:	4629      	mov	r1, r5
 800807e:	2000      	movs	r0, #0
 8008080:	f858 2b04 	ldr.w	r2, [r8], #4
 8008084:	f8d1 c000 	ldr.w	ip, [r1]
 8008088:	b293      	uxth	r3, r2
 800808a:	1ac3      	subs	r3, r0, r3
 800808c:	0c12      	lsrs	r2, r2, #16
 800808e:	fa13 f38c 	uxtah	r3, r3, ip
 8008092:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008096:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800809a:	b29b      	uxth	r3, r3
 800809c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080a0:	45c1      	cmp	r9, r8
 80080a2:	f841 3b04 	str.w	r3, [r1], #4
 80080a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080aa:	d2e9      	bcs.n	8008080 <quorem+0xac>
 80080ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080b4:	b922      	cbnz	r2, 80080c0 <quorem+0xec>
 80080b6:	3b04      	subs	r3, #4
 80080b8:	429d      	cmp	r5, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	d30a      	bcc.n	80080d4 <quorem+0x100>
 80080be:	613c      	str	r4, [r7, #16]
 80080c0:	4630      	mov	r0, r6
 80080c2:	b003      	add	sp, #12
 80080c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c8:	6812      	ldr	r2, [r2, #0]
 80080ca:	3b04      	subs	r3, #4
 80080cc:	2a00      	cmp	r2, #0
 80080ce:	d1ce      	bne.n	800806e <quorem+0x9a>
 80080d0:	3c01      	subs	r4, #1
 80080d2:	e7c9      	b.n	8008068 <quorem+0x94>
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	3b04      	subs	r3, #4
 80080d8:	2a00      	cmp	r2, #0
 80080da:	d1f0      	bne.n	80080be <quorem+0xea>
 80080dc:	3c01      	subs	r4, #1
 80080de:	e7eb      	b.n	80080b8 <quorem+0xe4>
 80080e0:	2000      	movs	r0, #0
 80080e2:	e7ee      	b.n	80080c2 <quorem+0xee>
 80080e4:	0000      	movs	r0, r0
	...

080080e8 <_dtoa_r>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	ed2d 8b04 	vpush	{d8-d9}
 80080f0:	69c5      	ldr	r5, [r0, #28]
 80080f2:	b093      	sub	sp, #76	; 0x4c
 80080f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80080f8:	ec57 6b10 	vmov	r6, r7, d0
 80080fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008100:	9107      	str	r1, [sp, #28]
 8008102:	4604      	mov	r4, r0
 8008104:	920a      	str	r2, [sp, #40]	; 0x28
 8008106:	930d      	str	r3, [sp, #52]	; 0x34
 8008108:	b975      	cbnz	r5, 8008128 <_dtoa_r+0x40>
 800810a:	2010      	movs	r0, #16
 800810c:	f000 fe2a 	bl	8008d64 <malloc>
 8008110:	4602      	mov	r2, r0
 8008112:	61e0      	str	r0, [r4, #28]
 8008114:	b920      	cbnz	r0, 8008120 <_dtoa_r+0x38>
 8008116:	4bae      	ldr	r3, [pc, #696]	; (80083d0 <_dtoa_r+0x2e8>)
 8008118:	21ef      	movs	r1, #239	; 0xef
 800811a:	48ae      	ldr	r0, [pc, #696]	; (80083d4 <_dtoa_r+0x2ec>)
 800811c:	f002 fc74 	bl	800aa08 <__assert_func>
 8008120:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008124:	6005      	str	r5, [r0, #0]
 8008126:	60c5      	str	r5, [r0, #12]
 8008128:	69e3      	ldr	r3, [r4, #28]
 800812a:	6819      	ldr	r1, [r3, #0]
 800812c:	b151      	cbz	r1, 8008144 <_dtoa_r+0x5c>
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	604a      	str	r2, [r1, #4]
 8008132:	2301      	movs	r3, #1
 8008134:	4093      	lsls	r3, r2
 8008136:	608b      	str	r3, [r1, #8]
 8008138:	4620      	mov	r0, r4
 800813a:	f000 ff07 	bl	8008f4c <_Bfree>
 800813e:	69e3      	ldr	r3, [r4, #28]
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	1e3b      	subs	r3, r7, #0
 8008146:	bfbb      	ittet	lt
 8008148:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800814c:	9303      	strlt	r3, [sp, #12]
 800814e:	2300      	movge	r3, #0
 8008150:	2201      	movlt	r2, #1
 8008152:	bfac      	ite	ge
 8008154:	f8c8 3000 	strge.w	r3, [r8]
 8008158:	f8c8 2000 	strlt.w	r2, [r8]
 800815c:	4b9e      	ldr	r3, [pc, #632]	; (80083d8 <_dtoa_r+0x2f0>)
 800815e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008162:	ea33 0308 	bics.w	r3, r3, r8
 8008166:	d11b      	bne.n	80081a0 <_dtoa_r+0xb8>
 8008168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800816a:	f242 730f 	movw	r3, #9999	; 0x270f
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008174:	4333      	orrs	r3, r6
 8008176:	f000 8593 	beq.w	8008ca0 <_dtoa_r+0xbb8>
 800817a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800817c:	b963      	cbnz	r3, 8008198 <_dtoa_r+0xb0>
 800817e:	4b97      	ldr	r3, [pc, #604]	; (80083dc <_dtoa_r+0x2f4>)
 8008180:	e027      	b.n	80081d2 <_dtoa_r+0xea>
 8008182:	4b97      	ldr	r3, [pc, #604]	; (80083e0 <_dtoa_r+0x2f8>)
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	9800      	ldr	r0, [sp, #0]
 800818e:	b013      	add	sp, #76	; 0x4c
 8008190:	ecbd 8b04 	vpop	{d8-d9}
 8008194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008198:	4b90      	ldr	r3, [pc, #576]	; (80083dc <_dtoa_r+0x2f4>)
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	3303      	adds	r3, #3
 800819e:	e7f3      	b.n	8008188 <_dtoa_r+0xa0>
 80081a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081a4:	2200      	movs	r2, #0
 80081a6:	ec51 0b17 	vmov	r0, r1, d7
 80081aa:	eeb0 8a47 	vmov.f32	s16, s14
 80081ae:	eef0 8a67 	vmov.f32	s17, s15
 80081b2:	2300      	movs	r3, #0
 80081b4:	f7f8 fca8 	bl	8000b08 <__aeabi_dcmpeq>
 80081b8:	4681      	mov	r9, r0
 80081ba:	b160      	cbz	r0, 80081d6 <_dtoa_r+0xee>
 80081bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081be:	2301      	movs	r3, #1
 80081c0:	6013      	str	r3, [r2, #0]
 80081c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 8568 	beq.w	8008c9a <_dtoa_r+0xbb2>
 80081ca:	4b86      	ldr	r3, [pc, #536]	; (80083e4 <_dtoa_r+0x2fc>)
 80081cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081ce:	6013      	str	r3, [r2, #0]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	e7da      	b.n	800818c <_dtoa_r+0xa4>
 80081d6:	aa10      	add	r2, sp, #64	; 0x40
 80081d8:	a911      	add	r1, sp, #68	; 0x44
 80081da:	4620      	mov	r0, r4
 80081dc:	eeb0 0a48 	vmov.f32	s0, s16
 80081e0:	eef0 0a68 	vmov.f32	s1, s17
 80081e4:	f001 fa4e 	bl	8009684 <__d2b>
 80081e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80081ec:	4682      	mov	sl, r0
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	d07f      	beq.n	80082f2 <_dtoa_r+0x20a>
 80081f2:	ee18 3a90 	vmov	r3, s17
 80081f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80081fe:	ec51 0b18 	vmov	r0, r1, d8
 8008202:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800820a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800820e:	4619      	mov	r1, r3
 8008210:	2200      	movs	r2, #0
 8008212:	4b75      	ldr	r3, [pc, #468]	; (80083e8 <_dtoa_r+0x300>)
 8008214:	f7f8 f858 	bl	80002c8 <__aeabi_dsub>
 8008218:	a367      	add	r3, pc, #412	; (adr r3, 80083b8 <_dtoa_r+0x2d0>)
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	f7f8 fa0b 	bl	8000638 <__aeabi_dmul>
 8008222:	a367      	add	r3, pc, #412	; (adr r3, 80083c0 <_dtoa_r+0x2d8>)
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	f7f8 f850 	bl	80002cc <__adddf3>
 800822c:	4606      	mov	r6, r0
 800822e:	4628      	mov	r0, r5
 8008230:	460f      	mov	r7, r1
 8008232:	f7f8 f997 	bl	8000564 <__aeabi_i2d>
 8008236:	a364      	add	r3, pc, #400	; (adr r3, 80083c8 <_dtoa_r+0x2e0>)
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	f7f8 f9fc 	bl	8000638 <__aeabi_dmul>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	f7f8 f840 	bl	80002cc <__adddf3>
 800824c:	4606      	mov	r6, r0
 800824e:	460f      	mov	r7, r1
 8008250:	f7f8 fca2 	bl	8000b98 <__aeabi_d2iz>
 8008254:	2200      	movs	r2, #0
 8008256:	4683      	mov	fp, r0
 8008258:	2300      	movs	r3, #0
 800825a:	4630      	mov	r0, r6
 800825c:	4639      	mov	r1, r7
 800825e:	f7f8 fc5d 	bl	8000b1c <__aeabi_dcmplt>
 8008262:	b148      	cbz	r0, 8008278 <_dtoa_r+0x190>
 8008264:	4658      	mov	r0, fp
 8008266:	f7f8 f97d 	bl	8000564 <__aeabi_i2d>
 800826a:	4632      	mov	r2, r6
 800826c:	463b      	mov	r3, r7
 800826e:	f7f8 fc4b 	bl	8000b08 <__aeabi_dcmpeq>
 8008272:	b908      	cbnz	r0, 8008278 <_dtoa_r+0x190>
 8008274:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008278:	f1bb 0f16 	cmp.w	fp, #22
 800827c:	d857      	bhi.n	800832e <_dtoa_r+0x246>
 800827e:	4b5b      	ldr	r3, [pc, #364]	; (80083ec <_dtoa_r+0x304>)
 8008280:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	ec51 0b18 	vmov	r0, r1, d8
 800828c:	f7f8 fc46 	bl	8000b1c <__aeabi_dcmplt>
 8008290:	2800      	cmp	r0, #0
 8008292:	d04e      	beq.n	8008332 <_dtoa_r+0x24a>
 8008294:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008298:	2300      	movs	r3, #0
 800829a:	930c      	str	r3, [sp, #48]	; 0x30
 800829c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800829e:	1b5b      	subs	r3, r3, r5
 80082a0:	1e5a      	subs	r2, r3, #1
 80082a2:	bf45      	ittet	mi
 80082a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80082a8:	9305      	strmi	r3, [sp, #20]
 80082aa:	2300      	movpl	r3, #0
 80082ac:	2300      	movmi	r3, #0
 80082ae:	9206      	str	r2, [sp, #24]
 80082b0:	bf54      	ite	pl
 80082b2:	9305      	strpl	r3, [sp, #20]
 80082b4:	9306      	strmi	r3, [sp, #24]
 80082b6:	f1bb 0f00 	cmp.w	fp, #0
 80082ba:	db3c      	blt.n	8008336 <_dtoa_r+0x24e>
 80082bc:	9b06      	ldr	r3, [sp, #24]
 80082be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80082c2:	445b      	add	r3, fp
 80082c4:	9306      	str	r3, [sp, #24]
 80082c6:	2300      	movs	r3, #0
 80082c8:	9308      	str	r3, [sp, #32]
 80082ca:	9b07      	ldr	r3, [sp, #28]
 80082cc:	2b09      	cmp	r3, #9
 80082ce:	d868      	bhi.n	80083a2 <_dtoa_r+0x2ba>
 80082d0:	2b05      	cmp	r3, #5
 80082d2:	bfc4      	itt	gt
 80082d4:	3b04      	subgt	r3, #4
 80082d6:	9307      	strgt	r3, [sp, #28]
 80082d8:	9b07      	ldr	r3, [sp, #28]
 80082da:	f1a3 0302 	sub.w	r3, r3, #2
 80082de:	bfcc      	ite	gt
 80082e0:	2500      	movgt	r5, #0
 80082e2:	2501      	movle	r5, #1
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	f200 8085 	bhi.w	80083f4 <_dtoa_r+0x30c>
 80082ea:	e8df f003 	tbb	[pc, r3]
 80082ee:	3b2e      	.short	0x3b2e
 80082f0:	5839      	.short	0x5839
 80082f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80082f6:	441d      	add	r5, r3
 80082f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	bfc1      	itttt	gt
 8008300:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008304:	fa08 f803 	lslgt.w	r8, r8, r3
 8008308:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800830c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008310:	bfd6      	itet	le
 8008312:	f1c3 0320 	rsble	r3, r3, #32
 8008316:	ea48 0003 	orrgt.w	r0, r8, r3
 800831a:	fa06 f003 	lslle.w	r0, r6, r3
 800831e:	f7f8 f911 	bl	8000544 <__aeabi_ui2d>
 8008322:	2201      	movs	r2, #1
 8008324:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008328:	3d01      	subs	r5, #1
 800832a:	920e      	str	r2, [sp, #56]	; 0x38
 800832c:	e76f      	b.n	800820e <_dtoa_r+0x126>
 800832e:	2301      	movs	r3, #1
 8008330:	e7b3      	b.n	800829a <_dtoa_r+0x1b2>
 8008332:	900c      	str	r0, [sp, #48]	; 0x30
 8008334:	e7b2      	b.n	800829c <_dtoa_r+0x1b4>
 8008336:	9b05      	ldr	r3, [sp, #20]
 8008338:	eba3 030b 	sub.w	r3, r3, fp
 800833c:	9305      	str	r3, [sp, #20]
 800833e:	f1cb 0300 	rsb	r3, fp, #0
 8008342:	9308      	str	r3, [sp, #32]
 8008344:	2300      	movs	r3, #0
 8008346:	930b      	str	r3, [sp, #44]	; 0x2c
 8008348:	e7bf      	b.n	80082ca <_dtoa_r+0x1e2>
 800834a:	2300      	movs	r3, #0
 800834c:	9309      	str	r3, [sp, #36]	; 0x24
 800834e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008350:	2b00      	cmp	r3, #0
 8008352:	dc52      	bgt.n	80083fa <_dtoa_r+0x312>
 8008354:	2301      	movs	r3, #1
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	461a      	mov	r2, r3
 800835c:	920a      	str	r2, [sp, #40]	; 0x28
 800835e:	e00b      	b.n	8008378 <_dtoa_r+0x290>
 8008360:	2301      	movs	r3, #1
 8008362:	e7f3      	b.n	800834c <_dtoa_r+0x264>
 8008364:	2300      	movs	r3, #0
 8008366:	9309      	str	r3, [sp, #36]	; 0x24
 8008368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800836a:	445b      	add	r3, fp
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	3301      	adds	r3, #1
 8008370:	2b01      	cmp	r3, #1
 8008372:	9304      	str	r3, [sp, #16]
 8008374:	bfb8      	it	lt
 8008376:	2301      	movlt	r3, #1
 8008378:	69e0      	ldr	r0, [r4, #28]
 800837a:	2100      	movs	r1, #0
 800837c:	2204      	movs	r2, #4
 800837e:	f102 0614 	add.w	r6, r2, #20
 8008382:	429e      	cmp	r6, r3
 8008384:	d93d      	bls.n	8008402 <_dtoa_r+0x31a>
 8008386:	6041      	str	r1, [r0, #4]
 8008388:	4620      	mov	r0, r4
 800838a:	f000 fd9f 	bl	8008ecc <_Balloc>
 800838e:	9000      	str	r0, [sp, #0]
 8008390:	2800      	cmp	r0, #0
 8008392:	d139      	bne.n	8008408 <_dtoa_r+0x320>
 8008394:	4b16      	ldr	r3, [pc, #88]	; (80083f0 <_dtoa_r+0x308>)
 8008396:	4602      	mov	r2, r0
 8008398:	f240 11af 	movw	r1, #431	; 0x1af
 800839c:	e6bd      	b.n	800811a <_dtoa_r+0x32>
 800839e:	2301      	movs	r3, #1
 80083a0:	e7e1      	b.n	8008366 <_dtoa_r+0x27e>
 80083a2:	2501      	movs	r5, #1
 80083a4:	2300      	movs	r3, #0
 80083a6:	9307      	str	r3, [sp, #28]
 80083a8:	9509      	str	r5, [sp, #36]	; 0x24
 80083aa:	f04f 33ff 	mov.w	r3, #4294967295
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	2200      	movs	r2, #0
 80083b4:	2312      	movs	r3, #18
 80083b6:	e7d1      	b.n	800835c <_dtoa_r+0x274>
 80083b8:	636f4361 	.word	0x636f4361
 80083bc:	3fd287a7 	.word	0x3fd287a7
 80083c0:	8b60c8b3 	.word	0x8b60c8b3
 80083c4:	3fc68a28 	.word	0x3fc68a28
 80083c8:	509f79fb 	.word	0x509f79fb
 80083cc:	3fd34413 	.word	0x3fd34413
 80083d0:	0800b84a 	.word	0x0800b84a
 80083d4:	0800b861 	.word	0x0800b861
 80083d8:	7ff00000 	.word	0x7ff00000
 80083dc:	0800b846 	.word	0x0800b846
 80083e0:	0800b83d 	.word	0x0800b83d
 80083e4:	0800b815 	.word	0x0800b815
 80083e8:	3ff80000 	.word	0x3ff80000
 80083ec:	0800b950 	.word	0x0800b950
 80083f0:	0800b8b9 	.word	0x0800b8b9
 80083f4:	2301      	movs	r3, #1
 80083f6:	9309      	str	r3, [sp, #36]	; 0x24
 80083f8:	e7d7      	b.n	80083aa <_dtoa_r+0x2c2>
 80083fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	9304      	str	r3, [sp, #16]
 8008400:	e7ba      	b.n	8008378 <_dtoa_r+0x290>
 8008402:	3101      	adds	r1, #1
 8008404:	0052      	lsls	r2, r2, #1
 8008406:	e7ba      	b.n	800837e <_dtoa_r+0x296>
 8008408:	69e3      	ldr	r3, [r4, #28]
 800840a:	9a00      	ldr	r2, [sp, #0]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	9b04      	ldr	r3, [sp, #16]
 8008410:	2b0e      	cmp	r3, #14
 8008412:	f200 80a8 	bhi.w	8008566 <_dtoa_r+0x47e>
 8008416:	2d00      	cmp	r5, #0
 8008418:	f000 80a5 	beq.w	8008566 <_dtoa_r+0x47e>
 800841c:	f1bb 0f00 	cmp.w	fp, #0
 8008420:	dd38      	ble.n	8008494 <_dtoa_r+0x3ac>
 8008422:	4bc0      	ldr	r3, [pc, #768]	; (8008724 <_dtoa_r+0x63c>)
 8008424:	f00b 020f 	and.w	r2, fp, #15
 8008428:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800842c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008430:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008434:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008438:	d019      	beq.n	800846e <_dtoa_r+0x386>
 800843a:	4bbb      	ldr	r3, [pc, #748]	; (8008728 <_dtoa_r+0x640>)
 800843c:	ec51 0b18 	vmov	r0, r1, d8
 8008440:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008444:	f7f8 fa22 	bl	800088c <__aeabi_ddiv>
 8008448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800844c:	f008 080f 	and.w	r8, r8, #15
 8008450:	2503      	movs	r5, #3
 8008452:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008728 <_dtoa_r+0x640>
 8008456:	f1b8 0f00 	cmp.w	r8, #0
 800845a:	d10a      	bne.n	8008472 <_dtoa_r+0x38a>
 800845c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008460:	4632      	mov	r2, r6
 8008462:	463b      	mov	r3, r7
 8008464:	f7f8 fa12 	bl	800088c <__aeabi_ddiv>
 8008468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800846c:	e02b      	b.n	80084c6 <_dtoa_r+0x3de>
 800846e:	2502      	movs	r5, #2
 8008470:	e7ef      	b.n	8008452 <_dtoa_r+0x36a>
 8008472:	f018 0f01 	tst.w	r8, #1
 8008476:	d008      	beq.n	800848a <_dtoa_r+0x3a2>
 8008478:	4630      	mov	r0, r6
 800847a:	4639      	mov	r1, r7
 800847c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008480:	f7f8 f8da 	bl	8000638 <__aeabi_dmul>
 8008484:	3501      	adds	r5, #1
 8008486:	4606      	mov	r6, r0
 8008488:	460f      	mov	r7, r1
 800848a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800848e:	f109 0908 	add.w	r9, r9, #8
 8008492:	e7e0      	b.n	8008456 <_dtoa_r+0x36e>
 8008494:	f000 809f 	beq.w	80085d6 <_dtoa_r+0x4ee>
 8008498:	f1cb 0600 	rsb	r6, fp, #0
 800849c:	4ba1      	ldr	r3, [pc, #644]	; (8008724 <_dtoa_r+0x63c>)
 800849e:	4fa2      	ldr	r7, [pc, #648]	; (8008728 <_dtoa_r+0x640>)
 80084a0:	f006 020f 	and.w	r2, r6, #15
 80084a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	ec51 0b18 	vmov	r0, r1, d8
 80084b0:	f7f8 f8c2 	bl	8000638 <__aeabi_dmul>
 80084b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084b8:	1136      	asrs	r6, r6, #4
 80084ba:	2300      	movs	r3, #0
 80084bc:	2502      	movs	r5, #2
 80084be:	2e00      	cmp	r6, #0
 80084c0:	d17e      	bne.n	80085c0 <_dtoa_r+0x4d8>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1d0      	bne.n	8008468 <_dtoa_r+0x380>
 80084c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8084 	beq.w	80085da <_dtoa_r+0x4f2>
 80084d2:	4b96      	ldr	r3, [pc, #600]	; (800872c <_dtoa_r+0x644>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	4640      	mov	r0, r8
 80084d8:	4649      	mov	r1, r9
 80084da:	f7f8 fb1f 	bl	8000b1c <__aeabi_dcmplt>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d07b      	beq.n	80085da <_dtoa_r+0x4f2>
 80084e2:	9b04      	ldr	r3, [sp, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d078      	beq.n	80085da <_dtoa_r+0x4f2>
 80084e8:	9b01      	ldr	r3, [sp, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd39      	ble.n	8008562 <_dtoa_r+0x47a>
 80084ee:	4b90      	ldr	r3, [pc, #576]	; (8008730 <_dtoa_r+0x648>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	4640      	mov	r0, r8
 80084f4:	4649      	mov	r1, r9
 80084f6:	f7f8 f89f 	bl	8000638 <__aeabi_dmul>
 80084fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084fe:	9e01      	ldr	r6, [sp, #4]
 8008500:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008504:	3501      	adds	r5, #1
 8008506:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800850a:	4628      	mov	r0, r5
 800850c:	f7f8 f82a 	bl	8000564 <__aeabi_i2d>
 8008510:	4642      	mov	r2, r8
 8008512:	464b      	mov	r3, r9
 8008514:	f7f8 f890 	bl	8000638 <__aeabi_dmul>
 8008518:	4b86      	ldr	r3, [pc, #536]	; (8008734 <_dtoa_r+0x64c>)
 800851a:	2200      	movs	r2, #0
 800851c:	f7f7 fed6 	bl	80002cc <__adddf3>
 8008520:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008528:	9303      	str	r3, [sp, #12]
 800852a:	2e00      	cmp	r6, #0
 800852c:	d158      	bne.n	80085e0 <_dtoa_r+0x4f8>
 800852e:	4b82      	ldr	r3, [pc, #520]	; (8008738 <_dtoa_r+0x650>)
 8008530:	2200      	movs	r2, #0
 8008532:	4640      	mov	r0, r8
 8008534:	4649      	mov	r1, r9
 8008536:	f7f7 fec7 	bl	80002c8 <__aeabi_dsub>
 800853a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800853e:	4680      	mov	r8, r0
 8008540:	4689      	mov	r9, r1
 8008542:	f7f8 fb09 	bl	8000b58 <__aeabi_dcmpgt>
 8008546:	2800      	cmp	r0, #0
 8008548:	f040 8296 	bne.w	8008a78 <_dtoa_r+0x990>
 800854c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008550:	4640      	mov	r0, r8
 8008552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008556:	4649      	mov	r1, r9
 8008558:	f7f8 fae0 	bl	8000b1c <__aeabi_dcmplt>
 800855c:	2800      	cmp	r0, #0
 800855e:	f040 8289 	bne.w	8008a74 <_dtoa_r+0x98c>
 8008562:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008566:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008568:	2b00      	cmp	r3, #0
 800856a:	f2c0 814e 	blt.w	800880a <_dtoa_r+0x722>
 800856e:	f1bb 0f0e 	cmp.w	fp, #14
 8008572:	f300 814a 	bgt.w	800880a <_dtoa_r+0x722>
 8008576:	4b6b      	ldr	r3, [pc, #428]	; (8008724 <_dtoa_r+0x63c>)
 8008578:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800857c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008582:	2b00      	cmp	r3, #0
 8008584:	f280 80dc 	bge.w	8008740 <_dtoa_r+0x658>
 8008588:	9b04      	ldr	r3, [sp, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f300 80d8 	bgt.w	8008740 <_dtoa_r+0x658>
 8008590:	f040 826f 	bne.w	8008a72 <_dtoa_r+0x98a>
 8008594:	4b68      	ldr	r3, [pc, #416]	; (8008738 <_dtoa_r+0x650>)
 8008596:	2200      	movs	r2, #0
 8008598:	4640      	mov	r0, r8
 800859a:	4649      	mov	r1, r9
 800859c:	f7f8 f84c 	bl	8000638 <__aeabi_dmul>
 80085a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085a4:	f7f8 face 	bl	8000b44 <__aeabi_dcmpge>
 80085a8:	9e04      	ldr	r6, [sp, #16]
 80085aa:	4637      	mov	r7, r6
 80085ac:	2800      	cmp	r0, #0
 80085ae:	f040 8245 	bne.w	8008a3c <_dtoa_r+0x954>
 80085b2:	9d00      	ldr	r5, [sp, #0]
 80085b4:	2331      	movs	r3, #49	; 0x31
 80085b6:	f805 3b01 	strb.w	r3, [r5], #1
 80085ba:	f10b 0b01 	add.w	fp, fp, #1
 80085be:	e241      	b.n	8008a44 <_dtoa_r+0x95c>
 80085c0:	07f2      	lsls	r2, r6, #31
 80085c2:	d505      	bpl.n	80085d0 <_dtoa_r+0x4e8>
 80085c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c8:	f7f8 f836 	bl	8000638 <__aeabi_dmul>
 80085cc:	3501      	adds	r5, #1
 80085ce:	2301      	movs	r3, #1
 80085d0:	1076      	asrs	r6, r6, #1
 80085d2:	3708      	adds	r7, #8
 80085d4:	e773      	b.n	80084be <_dtoa_r+0x3d6>
 80085d6:	2502      	movs	r5, #2
 80085d8:	e775      	b.n	80084c6 <_dtoa_r+0x3de>
 80085da:	9e04      	ldr	r6, [sp, #16]
 80085dc:	465f      	mov	r7, fp
 80085de:	e792      	b.n	8008506 <_dtoa_r+0x41e>
 80085e0:	9900      	ldr	r1, [sp, #0]
 80085e2:	4b50      	ldr	r3, [pc, #320]	; (8008724 <_dtoa_r+0x63c>)
 80085e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085e8:	4431      	add	r1, r6
 80085ea:	9102      	str	r1, [sp, #8]
 80085ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085ee:	eeb0 9a47 	vmov.f32	s18, s14
 80085f2:	eef0 9a67 	vmov.f32	s19, s15
 80085f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085fe:	2900      	cmp	r1, #0
 8008600:	d044      	beq.n	800868c <_dtoa_r+0x5a4>
 8008602:	494e      	ldr	r1, [pc, #312]	; (800873c <_dtoa_r+0x654>)
 8008604:	2000      	movs	r0, #0
 8008606:	f7f8 f941 	bl	800088c <__aeabi_ddiv>
 800860a:	ec53 2b19 	vmov	r2, r3, d9
 800860e:	f7f7 fe5b 	bl	80002c8 <__aeabi_dsub>
 8008612:	9d00      	ldr	r5, [sp, #0]
 8008614:	ec41 0b19 	vmov	d9, r0, r1
 8008618:	4649      	mov	r1, r9
 800861a:	4640      	mov	r0, r8
 800861c:	f7f8 fabc 	bl	8000b98 <__aeabi_d2iz>
 8008620:	4606      	mov	r6, r0
 8008622:	f7f7 ff9f 	bl	8000564 <__aeabi_i2d>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4640      	mov	r0, r8
 800862c:	4649      	mov	r1, r9
 800862e:	f7f7 fe4b 	bl	80002c8 <__aeabi_dsub>
 8008632:	3630      	adds	r6, #48	; 0x30
 8008634:	f805 6b01 	strb.w	r6, [r5], #1
 8008638:	ec53 2b19 	vmov	r2, r3, d9
 800863c:	4680      	mov	r8, r0
 800863e:	4689      	mov	r9, r1
 8008640:	f7f8 fa6c 	bl	8000b1c <__aeabi_dcmplt>
 8008644:	2800      	cmp	r0, #0
 8008646:	d164      	bne.n	8008712 <_dtoa_r+0x62a>
 8008648:	4642      	mov	r2, r8
 800864a:	464b      	mov	r3, r9
 800864c:	4937      	ldr	r1, [pc, #220]	; (800872c <_dtoa_r+0x644>)
 800864e:	2000      	movs	r0, #0
 8008650:	f7f7 fe3a 	bl	80002c8 <__aeabi_dsub>
 8008654:	ec53 2b19 	vmov	r2, r3, d9
 8008658:	f7f8 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800865c:	2800      	cmp	r0, #0
 800865e:	f040 80b6 	bne.w	80087ce <_dtoa_r+0x6e6>
 8008662:	9b02      	ldr	r3, [sp, #8]
 8008664:	429d      	cmp	r5, r3
 8008666:	f43f af7c 	beq.w	8008562 <_dtoa_r+0x47a>
 800866a:	4b31      	ldr	r3, [pc, #196]	; (8008730 <_dtoa_r+0x648>)
 800866c:	ec51 0b19 	vmov	r0, r1, d9
 8008670:	2200      	movs	r2, #0
 8008672:	f7f7 ffe1 	bl	8000638 <__aeabi_dmul>
 8008676:	4b2e      	ldr	r3, [pc, #184]	; (8008730 <_dtoa_r+0x648>)
 8008678:	ec41 0b19 	vmov	d9, r0, r1
 800867c:	2200      	movs	r2, #0
 800867e:	4640      	mov	r0, r8
 8008680:	4649      	mov	r1, r9
 8008682:	f7f7 ffd9 	bl	8000638 <__aeabi_dmul>
 8008686:	4680      	mov	r8, r0
 8008688:	4689      	mov	r9, r1
 800868a:	e7c5      	b.n	8008618 <_dtoa_r+0x530>
 800868c:	ec51 0b17 	vmov	r0, r1, d7
 8008690:	f7f7 ffd2 	bl	8000638 <__aeabi_dmul>
 8008694:	9b02      	ldr	r3, [sp, #8]
 8008696:	9d00      	ldr	r5, [sp, #0]
 8008698:	930f      	str	r3, [sp, #60]	; 0x3c
 800869a:	ec41 0b19 	vmov	d9, r0, r1
 800869e:	4649      	mov	r1, r9
 80086a0:	4640      	mov	r0, r8
 80086a2:	f7f8 fa79 	bl	8000b98 <__aeabi_d2iz>
 80086a6:	4606      	mov	r6, r0
 80086a8:	f7f7 ff5c 	bl	8000564 <__aeabi_i2d>
 80086ac:	3630      	adds	r6, #48	; 0x30
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 fe07 	bl	80002c8 <__aeabi_dsub>
 80086ba:	f805 6b01 	strb.w	r6, [r5], #1
 80086be:	9b02      	ldr	r3, [sp, #8]
 80086c0:	429d      	cmp	r5, r3
 80086c2:	4680      	mov	r8, r0
 80086c4:	4689      	mov	r9, r1
 80086c6:	f04f 0200 	mov.w	r2, #0
 80086ca:	d124      	bne.n	8008716 <_dtoa_r+0x62e>
 80086cc:	4b1b      	ldr	r3, [pc, #108]	; (800873c <_dtoa_r+0x654>)
 80086ce:	ec51 0b19 	vmov	r0, r1, d9
 80086d2:	f7f7 fdfb 	bl	80002cc <__adddf3>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4640      	mov	r0, r8
 80086dc:	4649      	mov	r1, r9
 80086de:	f7f8 fa3b 	bl	8000b58 <__aeabi_dcmpgt>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d173      	bne.n	80087ce <_dtoa_r+0x6e6>
 80086e6:	ec53 2b19 	vmov	r2, r3, d9
 80086ea:	4914      	ldr	r1, [pc, #80]	; (800873c <_dtoa_r+0x654>)
 80086ec:	2000      	movs	r0, #0
 80086ee:	f7f7 fdeb 	bl	80002c8 <__aeabi_dsub>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	4640      	mov	r0, r8
 80086f8:	4649      	mov	r1, r9
 80086fa:	f7f8 fa0f 	bl	8000b1c <__aeabi_dcmplt>
 80086fe:	2800      	cmp	r0, #0
 8008700:	f43f af2f 	beq.w	8008562 <_dtoa_r+0x47a>
 8008704:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008706:	1e6b      	subs	r3, r5, #1
 8008708:	930f      	str	r3, [sp, #60]	; 0x3c
 800870a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800870e:	2b30      	cmp	r3, #48	; 0x30
 8008710:	d0f8      	beq.n	8008704 <_dtoa_r+0x61c>
 8008712:	46bb      	mov	fp, r7
 8008714:	e04a      	b.n	80087ac <_dtoa_r+0x6c4>
 8008716:	4b06      	ldr	r3, [pc, #24]	; (8008730 <_dtoa_r+0x648>)
 8008718:	f7f7 ff8e 	bl	8000638 <__aeabi_dmul>
 800871c:	4680      	mov	r8, r0
 800871e:	4689      	mov	r9, r1
 8008720:	e7bd      	b.n	800869e <_dtoa_r+0x5b6>
 8008722:	bf00      	nop
 8008724:	0800b950 	.word	0x0800b950
 8008728:	0800b928 	.word	0x0800b928
 800872c:	3ff00000 	.word	0x3ff00000
 8008730:	40240000 	.word	0x40240000
 8008734:	401c0000 	.word	0x401c0000
 8008738:	40140000 	.word	0x40140000
 800873c:	3fe00000 	.word	0x3fe00000
 8008740:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008744:	9d00      	ldr	r5, [sp, #0]
 8008746:	4642      	mov	r2, r8
 8008748:	464b      	mov	r3, r9
 800874a:	4630      	mov	r0, r6
 800874c:	4639      	mov	r1, r7
 800874e:	f7f8 f89d 	bl	800088c <__aeabi_ddiv>
 8008752:	f7f8 fa21 	bl	8000b98 <__aeabi_d2iz>
 8008756:	9001      	str	r0, [sp, #4]
 8008758:	f7f7 ff04 	bl	8000564 <__aeabi_i2d>
 800875c:	4642      	mov	r2, r8
 800875e:	464b      	mov	r3, r9
 8008760:	f7f7 ff6a 	bl	8000638 <__aeabi_dmul>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4630      	mov	r0, r6
 800876a:	4639      	mov	r1, r7
 800876c:	f7f7 fdac 	bl	80002c8 <__aeabi_dsub>
 8008770:	9e01      	ldr	r6, [sp, #4]
 8008772:	9f04      	ldr	r7, [sp, #16]
 8008774:	3630      	adds	r6, #48	; 0x30
 8008776:	f805 6b01 	strb.w	r6, [r5], #1
 800877a:	9e00      	ldr	r6, [sp, #0]
 800877c:	1bae      	subs	r6, r5, r6
 800877e:	42b7      	cmp	r7, r6
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	d134      	bne.n	80087f0 <_dtoa_r+0x708>
 8008786:	f7f7 fda1 	bl	80002cc <__adddf3>
 800878a:	4642      	mov	r2, r8
 800878c:	464b      	mov	r3, r9
 800878e:	4606      	mov	r6, r0
 8008790:	460f      	mov	r7, r1
 8008792:	f7f8 f9e1 	bl	8000b58 <__aeabi_dcmpgt>
 8008796:	b9c8      	cbnz	r0, 80087cc <_dtoa_r+0x6e4>
 8008798:	4642      	mov	r2, r8
 800879a:	464b      	mov	r3, r9
 800879c:	4630      	mov	r0, r6
 800879e:	4639      	mov	r1, r7
 80087a0:	f7f8 f9b2 	bl	8000b08 <__aeabi_dcmpeq>
 80087a4:	b110      	cbz	r0, 80087ac <_dtoa_r+0x6c4>
 80087a6:	9b01      	ldr	r3, [sp, #4]
 80087a8:	07db      	lsls	r3, r3, #31
 80087aa:	d40f      	bmi.n	80087cc <_dtoa_r+0x6e4>
 80087ac:	4651      	mov	r1, sl
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 fbcc 	bl	8008f4c <_Bfree>
 80087b4:	2300      	movs	r3, #0
 80087b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087b8:	702b      	strb	r3, [r5, #0]
 80087ba:	f10b 0301 	add.w	r3, fp, #1
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f43f ace2 	beq.w	800818c <_dtoa_r+0xa4>
 80087c8:	601d      	str	r5, [r3, #0]
 80087ca:	e4df      	b.n	800818c <_dtoa_r+0xa4>
 80087cc:	465f      	mov	r7, fp
 80087ce:	462b      	mov	r3, r5
 80087d0:	461d      	mov	r5, r3
 80087d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087d6:	2a39      	cmp	r2, #57	; 0x39
 80087d8:	d106      	bne.n	80087e8 <_dtoa_r+0x700>
 80087da:	9a00      	ldr	r2, [sp, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d1f7      	bne.n	80087d0 <_dtoa_r+0x6e8>
 80087e0:	9900      	ldr	r1, [sp, #0]
 80087e2:	2230      	movs	r2, #48	; 0x30
 80087e4:	3701      	adds	r7, #1
 80087e6:	700a      	strb	r2, [r1, #0]
 80087e8:	781a      	ldrb	r2, [r3, #0]
 80087ea:	3201      	adds	r2, #1
 80087ec:	701a      	strb	r2, [r3, #0]
 80087ee:	e790      	b.n	8008712 <_dtoa_r+0x62a>
 80087f0:	4ba3      	ldr	r3, [pc, #652]	; (8008a80 <_dtoa_r+0x998>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	f7f7 ff20 	bl	8000638 <__aeabi_dmul>
 80087f8:	2200      	movs	r2, #0
 80087fa:	2300      	movs	r3, #0
 80087fc:	4606      	mov	r6, r0
 80087fe:	460f      	mov	r7, r1
 8008800:	f7f8 f982 	bl	8000b08 <__aeabi_dcmpeq>
 8008804:	2800      	cmp	r0, #0
 8008806:	d09e      	beq.n	8008746 <_dtoa_r+0x65e>
 8008808:	e7d0      	b.n	80087ac <_dtoa_r+0x6c4>
 800880a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800880c:	2a00      	cmp	r2, #0
 800880e:	f000 80ca 	beq.w	80089a6 <_dtoa_r+0x8be>
 8008812:	9a07      	ldr	r2, [sp, #28]
 8008814:	2a01      	cmp	r2, #1
 8008816:	f300 80ad 	bgt.w	8008974 <_dtoa_r+0x88c>
 800881a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800881c:	2a00      	cmp	r2, #0
 800881e:	f000 80a5 	beq.w	800896c <_dtoa_r+0x884>
 8008822:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008826:	9e08      	ldr	r6, [sp, #32]
 8008828:	9d05      	ldr	r5, [sp, #20]
 800882a:	9a05      	ldr	r2, [sp, #20]
 800882c:	441a      	add	r2, r3
 800882e:	9205      	str	r2, [sp, #20]
 8008830:	9a06      	ldr	r2, [sp, #24]
 8008832:	2101      	movs	r1, #1
 8008834:	441a      	add	r2, r3
 8008836:	4620      	mov	r0, r4
 8008838:	9206      	str	r2, [sp, #24]
 800883a:	f000 fc87 	bl	800914c <__i2b>
 800883e:	4607      	mov	r7, r0
 8008840:	b165      	cbz	r5, 800885c <_dtoa_r+0x774>
 8008842:	9b06      	ldr	r3, [sp, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	dd09      	ble.n	800885c <_dtoa_r+0x774>
 8008848:	42ab      	cmp	r3, r5
 800884a:	9a05      	ldr	r2, [sp, #20]
 800884c:	bfa8      	it	ge
 800884e:	462b      	movge	r3, r5
 8008850:	1ad2      	subs	r2, r2, r3
 8008852:	9205      	str	r2, [sp, #20]
 8008854:	9a06      	ldr	r2, [sp, #24]
 8008856:	1aed      	subs	r5, r5, r3
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	9306      	str	r3, [sp, #24]
 800885c:	9b08      	ldr	r3, [sp, #32]
 800885e:	b1f3      	cbz	r3, 800889e <_dtoa_r+0x7b6>
 8008860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 80a3 	beq.w	80089ae <_dtoa_r+0x8c6>
 8008868:	2e00      	cmp	r6, #0
 800886a:	dd10      	ble.n	800888e <_dtoa_r+0x7a6>
 800886c:	4639      	mov	r1, r7
 800886e:	4632      	mov	r2, r6
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fd2b 	bl	80092cc <__pow5mult>
 8008876:	4652      	mov	r2, sl
 8008878:	4601      	mov	r1, r0
 800887a:	4607      	mov	r7, r0
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fc7b 	bl	8009178 <__multiply>
 8008882:	4651      	mov	r1, sl
 8008884:	4680      	mov	r8, r0
 8008886:	4620      	mov	r0, r4
 8008888:	f000 fb60 	bl	8008f4c <_Bfree>
 800888c:	46c2      	mov	sl, r8
 800888e:	9b08      	ldr	r3, [sp, #32]
 8008890:	1b9a      	subs	r2, r3, r6
 8008892:	d004      	beq.n	800889e <_dtoa_r+0x7b6>
 8008894:	4651      	mov	r1, sl
 8008896:	4620      	mov	r0, r4
 8008898:	f000 fd18 	bl	80092cc <__pow5mult>
 800889c:	4682      	mov	sl, r0
 800889e:	2101      	movs	r1, #1
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fc53 	bl	800914c <__i2b>
 80088a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	4606      	mov	r6, r0
 80088ac:	f340 8081 	ble.w	80089b2 <_dtoa_r+0x8ca>
 80088b0:	461a      	mov	r2, r3
 80088b2:	4601      	mov	r1, r0
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 fd09 	bl	80092cc <__pow5mult>
 80088ba:	9b07      	ldr	r3, [sp, #28]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	4606      	mov	r6, r0
 80088c0:	dd7a      	ble.n	80089b8 <_dtoa_r+0x8d0>
 80088c2:	f04f 0800 	mov.w	r8, #0
 80088c6:	6933      	ldr	r3, [r6, #16]
 80088c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088cc:	6918      	ldr	r0, [r3, #16]
 80088ce:	f000 fbef 	bl	80090b0 <__hi0bits>
 80088d2:	f1c0 0020 	rsb	r0, r0, #32
 80088d6:	9b06      	ldr	r3, [sp, #24]
 80088d8:	4418      	add	r0, r3
 80088da:	f010 001f 	ands.w	r0, r0, #31
 80088de:	f000 8094 	beq.w	8008a0a <_dtoa_r+0x922>
 80088e2:	f1c0 0320 	rsb	r3, r0, #32
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	f340 8085 	ble.w	80089f6 <_dtoa_r+0x90e>
 80088ec:	9b05      	ldr	r3, [sp, #20]
 80088ee:	f1c0 001c 	rsb	r0, r0, #28
 80088f2:	4403      	add	r3, r0
 80088f4:	9305      	str	r3, [sp, #20]
 80088f6:	9b06      	ldr	r3, [sp, #24]
 80088f8:	4403      	add	r3, r0
 80088fa:	4405      	add	r5, r0
 80088fc:	9306      	str	r3, [sp, #24]
 80088fe:	9b05      	ldr	r3, [sp, #20]
 8008900:	2b00      	cmp	r3, #0
 8008902:	dd05      	ble.n	8008910 <_dtoa_r+0x828>
 8008904:	4651      	mov	r1, sl
 8008906:	461a      	mov	r2, r3
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fd39 	bl	8009380 <__lshift>
 800890e:	4682      	mov	sl, r0
 8008910:	9b06      	ldr	r3, [sp, #24]
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd05      	ble.n	8008922 <_dtoa_r+0x83a>
 8008916:	4631      	mov	r1, r6
 8008918:	461a      	mov	r2, r3
 800891a:	4620      	mov	r0, r4
 800891c:	f000 fd30 	bl	8009380 <__lshift>
 8008920:	4606      	mov	r6, r0
 8008922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008924:	2b00      	cmp	r3, #0
 8008926:	d072      	beq.n	8008a0e <_dtoa_r+0x926>
 8008928:	4631      	mov	r1, r6
 800892a:	4650      	mov	r0, sl
 800892c:	f000 fd94 	bl	8009458 <__mcmp>
 8008930:	2800      	cmp	r0, #0
 8008932:	da6c      	bge.n	8008a0e <_dtoa_r+0x926>
 8008934:	2300      	movs	r3, #0
 8008936:	4651      	mov	r1, sl
 8008938:	220a      	movs	r2, #10
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fb28 	bl	8008f90 <__multadd>
 8008940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008942:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008946:	4682      	mov	sl, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 81b0 	beq.w	8008cae <_dtoa_r+0xbc6>
 800894e:	2300      	movs	r3, #0
 8008950:	4639      	mov	r1, r7
 8008952:	220a      	movs	r2, #10
 8008954:	4620      	mov	r0, r4
 8008956:	f000 fb1b 	bl	8008f90 <__multadd>
 800895a:	9b01      	ldr	r3, [sp, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	4607      	mov	r7, r0
 8008960:	f300 8096 	bgt.w	8008a90 <_dtoa_r+0x9a8>
 8008964:	9b07      	ldr	r3, [sp, #28]
 8008966:	2b02      	cmp	r3, #2
 8008968:	dc59      	bgt.n	8008a1e <_dtoa_r+0x936>
 800896a:	e091      	b.n	8008a90 <_dtoa_r+0x9a8>
 800896c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800896e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008972:	e758      	b.n	8008826 <_dtoa_r+0x73e>
 8008974:	9b04      	ldr	r3, [sp, #16]
 8008976:	1e5e      	subs	r6, r3, #1
 8008978:	9b08      	ldr	r3, [sp, #32]
 800897a:	42b3      	cmp	r3, r6
 800897c:	bfbf      	itttt	lt
 800897e:	9b08      	ldrlt	r3, [sp, #32]
 8008980:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008982:	9608      	strlt	r6, [sp, #32]
 8008984:	1af3      	sublt	r3, r6, r3
 8008986:	bfb4      	ite	lt
 8008988:	18d2      	addlt	r2, r2, r3
 800898a:	1b9e      	subge	r6, r3, r6
 800898c:	9b04      	ldr	r3, [sp, #16]
 800898e:	bfbc      	itt	lt
 8008990:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008992:	2600      	movlt	r6, #0
 8008994:	2b00      	cmp	r3, #0
 8008996:	bfb7      	itett	lt
 8008998:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800899c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80089a0:	1a9d      	sublt	r5, r3, r2
 80089a2:	2300      	movlt	r3, #0
 80089a4:	e741      	b.n	800882a <_dtoa_r+0x742>
 80089a6:	9e08      	ldr	r6, [sp, #32]
 80089a8:	9d05      	ldr	r5, [sp, #20]
 80089aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80089ac:	e748      	b.n	8008840 <_dtoa_r+0x758>
 80089ae:	9a08      	ldr	r2, [sp, #32]
 80089b0:	e770      	b.n	8008894 <_dtoa_r+0x7ac>
 80089b2:	9b07      	ldr	r3, [sp, #28]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	dc19      	bgt.n	80089ec <_dtoa_r+0x904>
 80089b8:	9b02      	ldr	r3, [sp, #8]
 80089ba:	b9bb      	cbnz	r3, 80089ec <_dtoa_r+0x904>
 80089bc:	9b03      	ldr	r3, [sp, #12]
 80089be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089c2:	b99b      	cbnz	r3, 80089ec <_dtoa_r+0x904>
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089ca:	0d1b      	lsrs	r3, r3, #20
 80089cc:	051b      	lsls	r3, r3, #20
 80089ce:	b183      	cbz	r3, 80089f2 <_dtoa_r+0x90a>
 80089d0:	9b05      	ldr	r3, [sp, #20]
 80089d2:	3301      	adds	r3, #1
 80089d4:	9305      	str	r3, [sp, #20]
 80089d6:	9b06      	ldr	r3, [sp, #24]
 80089d8:	3301      	adds	r3, #1
 80089da:	9306      	str	r3, [sp, #24]
 80089dc:	f04f 0801 	mov.w	r8, #1
 80089e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f47f af6f 	bne.w	80088c6 <_dtoa_r+0x7de>
 80089e8:	2001      	movs	r0, #1
 80089ea:	e774      	b.n	80088d6 <_dtoa_r+0x7ee>
 80089ec:	f04f 0800 	mov.w	r8, #0
 80089f0:	e7f6      	b.n	80089e0 <_dtoa_r+0x8f8>
 80089f2:	4698      	mov	r8, r3
 80089f4:	e7f4      	b.n	80089e0 <_dtoa_r+0x8f8>
 80089f6:	d082      	beq.n	80088fe <_dtoa_r+0x816>
 80089f8:	9a05      	ldr	r2, [sp, #20]
 80089fa:	331c      	adds	r3, #28
 80089fc:	441a      	add	r2, r3
 80089fe:	9205      	str	r2, [sp, #20]
 8008a00:	9a06      	ldr	r2, [sp, #24]
 8008a02:	441a      	add	r2, r3
 8008a04:	441d      	add	r5, r3
 8008a06:	9206      	str	r2, [sp, #24]
 8008a08:	e779      	b.n	80088fe <_dtoa_r+0x816>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	e7f4      	b.n	80089f8 <_dtoa_r+0x910>
 8008a0e:	9b04      	ldr	r3, [sp, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dc37      	bgt.n	8008a84 <_dtoa_r+0x99c>
 8008a14:	9b07      	ldr	r3, [sp, #28]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	dd34      	ble.n	8008a84 <_dtoa_r+0x99c>
 8008a1a:	9b04      	ldr	r3, [sp, #16]
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	9b01      	ldr	r3, [sp, #4]
 8008a20:	b963      	cbnz	r3, 8008a3c <_dtoa_r+0x954>
 8008a22:	4631      	mov	r1, r6
 8008a24:	2205      	movs	r2, #5
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 fab2 	bl	8008f90 <__multadd>
 8008a2c:	4601      	mov	r1, r0
 8008a2e:	4606      	mov	r6, r0
 8008a30:	4650      	mov	r0, sl
 8008a32:	f000 fd11 	bl	8009458 <__mcmp>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f73f adbb 	bgt.w	80085b2 <_dtoa_r+0x4ca>
 8008a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3e:	9d00      	ldr	r5, [sp, #0]
 8008a40:	ea6f 0b03 	mvn.w	fp, r3
 8008a44:	f04f 0800 	mov.w	r8, #0
 8008a48:	4631      	mov	r1, r6
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 fa7e 	bl	8008f4c <_Bfree>
 8008a50:	2f00      	cmp	r7, #0
 8008a52:	f43f aeab 	beq.w	80087ac <_dtoa_r+0x6c4>
 8008a56:	f1b8 0f00 	cmp.w	r8, #0
 8008a5a:	d005      	beq.n	8008a68 <_dtoa_r+0x980>
 8008a5c:	45b8      	cmp	r8, r7
 8008a5e:	d003      	beq.n	8008a68 <_dtoa_r+0x980>
 8008a60:	4641      	mov	r1, r8
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 fa72 	bl	8008f4c <_Bfree>
 8008a68:	4639      	mov	r1, r7
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fa6e 	bl	8008f4c <_Bfree>
 8008a70:	e69c      	b.n	80087ac <_dtoa_r+0x6c4>
 8008a72:	2600      	movs	r6, #0
 8008a74:	4637      	mov	r7, r6
 8008a76:	e7e1      	b.n	8008a3c <_dtoa_r+0x954>
 8008a78:	46bb      	mov	fp, r7
 8008a7a:	4637      	mov	r7, r6
 8008a7c:	e599      	b.n	80085b2 <_dtoa_r+0x4ca>
 8008a7e:	bf00      	nop
 8008a80:	40240000 	.word	0x40240000
 8008a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 80c8 	beq.w	8008c1c <_dtoa_r+0xb34>
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	2d00      	cmp	r5, #0
 8008a92:	dd05      	ble.n	8008aa0 <_dtoa_r+0x9b8>
 8008a94:	4639      	mov	r1, r7
 8008a96:	462a      	mov	r2, r5
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 fc71 	bl	8009380 <__lshift>
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	f1b8 0f00 	cmp.w	r8, #0
 8008aa4:	d05b      	beq.n	8008b5e <_dtoa_r+0xa76>
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 fa0f 	bl	8008ecc <_Balloc>
 8008aae:	4605      	mov	r5, r0
 8008ab0:	b928      	cbnz	r0, 8008abe <_dtoa_r+0x9d6>
 8008ab2:	4b83      	ldr	r3, [pc, #524]	; (8008cc0 <_dtoa_r+0xbd8>)
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008aba:	f7ff bb2e 	b.w	800811a <_dtoa_r+0x32>
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	3202      	adds	r2, #2
 8008ac2:	0092      	lsls	r2, r2, #2
 8008ac4:	f107 010c 	add.w	r1, r7, #12
 8008ac8:	300c      	adds	r0, #12
 8008aca:	f001 ff85 	bl	800a9d8 <memcpy>
 8008ace:	2201      	movs	r2, #1
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 fc54 	bl	8009380 <__lshift>
 8008ad8:	9b00      	ldr	r3, [sp, #0]
 8008ada:	3301      	adds	r3, #1
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	9308      	str	r3, [sp, #32]
 8008ae6:	9b02      	ldr	r3, [sp, #8]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	46b8      	mov	r8, r7
 8008aee:	9306      	str	r3, [sp, #24]
 8008af0:	4607      	mov	r7, r0
 8008af2:	9b04      	ldr	r3, [sp, #16]
 8008af4:	4631      	mov	r1, r6
 8008af6:	3b01      	subs	r3, #1
 8008af8:	4650      	mov	r0, sl
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	f7ff fa6a 	bl	8007fd4 <quorem>
 8008b00:	4641      	mov	r1, r8
 8008b02:	9002      	str	r0, [sp, #8]
 8008b04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008b08:	4650      	mov	r0, sl
 8008b0a:	f000 fca5 	bl	8009458 <__mcmp>
 8008b0e:	463a      	mov	r2, r7
 8008b10:	9005      	str	r0, [sp, #20]
 8008b12:	4631      	mov	r1, r6
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 fcbb 	bl	8009490 <__mdiff>
 8008b1a:	68c2      	ldr	r2, [r0, #12]
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	bb02      	cbnz	r2, 8008b62 <_dtoa_r+0xa7a>
 8008b20:	4601      	mov	r1, r0
 8008b22:	4650      	mov	r0, sl
 8008b24:	f000 fc98 	bl	8009458 <__mcmp>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b30:	f000 fa0c 	bl	8008f4c <_Bfree>
 8008b34:	9b07      	ldr	r3, [sp, #28]
 8008b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b38:	9d04      	ldr	r5, [sp, #16]
 8008b3a:	ea43 0102 	orr.w	r1, r3, r2
 8008b3e:	9b06      	ldr	r3, [sp, #24]
 8008b40:	4319      	orrs	r1, r3
 8008b42:	d110      	bne.n	8008b66 <_dtoa_r+0xa7e>
 8008b44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b48:	d029      	beq.n	8008b9e <_dtoa_r+0xab6>
 8008b4a:	9b05      	ldr	r3, [sp, #20]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dd02      	ble.n	8008b56 <_dtoa_r+0xa6e>
 8008b50:	9b02      	ldr	r3, [sp, #8]
 8008b52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008b56:	9b01      	ldr	r3, [sp, #4]
 8008b58:	f883 9000 	strb.w	r9, [r3]
 8008b5c:	e774      	b.n	8008a48 <_dtoa_r+0x960>
 8008b5e:	4638      	mov	r0, r7
 8008b60:	e7ba      	b.n	8008ad8 <_dtoa_r+0x9f0>
 8008b62:	2201      	movs	r2, #1
 8008b64:	e7e1      	b.n	8008b2a <_dtoa_r+0xa42>
 8008b66:	9b05      	ldr	r3, [sp, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	db04      	blt.n	8008b76 <_dtoa_r+0xa8e>
 8008b6c:	9907      	ldr	r1, [sp, #28]
 8008b6e:	430b      	orrs	r3, r1
 8008b70:	9906      	ldr	r1, [sp, #24]
 8008b72:	430b      	orrs	r3, r1
 8008b74:	d120      	bne.n	8008bb8 <_dtoa_r+0xad0>
 8008b76:	2a00      	cmp	r2, #0
 8008b78:	dded      	ble.n	8008b56 <_dtoa_r+0xa6e>
 8008b7a:	4651      	mov	r1, sl
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f000 fbfe 	bl	8009380 <__lshift>
 8008b84:	4631      	mov	r1, r6
 8008b86:	4682      	mov	sl, r0
 8008b88:	f000 fc66 	bl	8009458 <__mcmp>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	dc03      	bgt.n	8008b98 <_dtoa_r+0xab0>
 8008b90:	d1e1      	bne.n	8008b56 <_dtoa_r+0xa6e>
 8008b92:	f019 0f01 	tst.w	r9, #1
 8008b96:	d0de      	beq.n	8008b56 <_dtoa_r+0xa6e>
 8008b98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b9c:	d1d8      	bne.n	8008b50 <_dtoa_r+0xa68>
 8008b9e:	9a01      	ldr	r2, [sp, #4]
 8008ba0:	2339      	movs	r3, #57	; 0x39
 8008ba2:	7013      	strb	r3, [r2, #0]
 8008ba4:	462b      	mov	r3, r5
 8008ba6:	461d      	mov	r5, r3
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bae:	2a39      	cmp	r2, #57	; 0x39
 8008bb0:	d06c      	beq.n	8008c8c <_dtoa_r+0xba4>
 8008bb2:	3201      	adds	r2, #1
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	e747      	b.n	8008a48 <_dtoa_r+0x960>
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	dd07      	ble.n	8008bcc <_dtoa_r+0xae4>
 8008bbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008bc0:	d0ed      	beq.n	8008b9e <_dtoa_r+0xab6>
 8008bc2:	9a01      	ldr	r2, [sp, #4]
 8008bc4:	f109 0301 	add.w	r3, r9, #1
 8008bc8:	7013      	strb	r3, [r2, #0]
 8008bca:	e73d      	b.n	8008a48 <_dtoa_r+0x960>
 8008bcc:	9b04      	ldr	r3, [sp, #16]
 8008bce:	9a08      	ldr	r2, [sp, #32]
 8008bd0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d043      	beq.n	8008c60 <_dtoa_r+0xb78>
 8008bd8:	4651      	mov	r1, sl
 8008bda:	2300      	movs	r3, #0
 8008bdc:	220a      	movs	r2, #10
 8008bde:	4620      	mov	r0, r4
 8008be0:	f000 f9d6 	bl	8008f90 <__multadd>
 8008be4:	45b8      	cmp	r8, r7
 8008be6:	4682      	mov	sl, r0
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	f04f 020a 	mov.w	r2, #10
 8008bf0:	4641      	mov	r1, r8
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	d107      	bne.n	8008c06 <_dtoa_r+0xb1e>
 8008bf6:	f000 f9cb 	bl	8008f90 <__multadd>
 8008bfa:	4680      	mov	r8, r0
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	9b04      	ldr	r3, [sp, #16]
 8008c00:	3301      	adds	r3, #1
 8008c02:	9304      	str	r3, [sp, #16]
 8008c04:	e775      	b.n	8008af2 <_dtoa_r+0xa0a>
 8008c06:	f000 f9c3 	bl	8008f90 <__multadd>
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	2300      	movs	r3, #0
 8008c10:	220a      	movs	r2, #10
 8008c12:	4620      	mov	r0, r4
 8008c14:	f000 f9bc 	bl	8008f90 <__multadd>
 8008c18:	4607      	mov	r7, r0
 8008c1a:	e7f0      	b.n	8008bfe <_dtoa_r+0xb16>
 8008c1c:	9b04      	ldr	r3, [sp, #16]
 8008c1e:	9301      	str	r3, [sp, #4]
 8008c20:	9d00      	ldr	r5, [sp, #0]
 8008c22:	4631      	mov	r1, r6
 8008c24:	4650      	mov	r0, sl
 8008c26:	f7ff f9d5 	bl	8007fd4 <quorem>
 8008c2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c2e:	9b00      	ldr	r3, [sp, #0]
 8008c30:	f805 9b01 	strb.w	r9, [r5], #1
 8008c34:	1aea      	subs	r2, r5, r3
 8008c36:	9b01      	ldr	r3, [sp, #4]
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	dd07      	ble.n	8008c4c <_dtoa_r+0xb64>
 8008c3c:	4651      	mov	r1, sl
 8008c3e:	2300      	movs	r3, #0
 8008c40:	220a      	movs	r2, #10
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 f9a4 	bl	8008f90 <__multadd>
 8008c48:	4682      	mov	sl, r0
 8008c4a:	e7ea      	b.n	8008c22 <_dtoa_r+0xb3a>
 8008c4c:	9b01      	ldr	r3, [sp, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bfc8      	it	gt
 8008c52:	461d      	movgt	r5, r3
 8008c54:	9b00      	ldr	r3, [sp, #0]
 8008c56:	bfd8      	it	le
 8008c58:	2501      	movle	r5, #1
 8008c5a:	441d      	add	r5, r3
 8008c5c:	f04f 0800 	mov.w	r8, #0
 8008c60:	4651      	mov	r1, sl
 8008c62:	2201      	movs	r2, #1
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 fb8b 	bl	8009380 <__lshift>
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4682      	mov	sl, r0
 8008c6e:	f000 fbf3 	bl	8009458 <__mcmp>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	dc96      	bgt.n	8008ba4 <_dtoa_r+0xabc>
 8008c76:	d102      	bne.n	8008c7e <_dtoa_r+0xb96>
 8008c78:	f019 0f01 	tst.w	r9, #1
 8008c7c:	d192      	bne.n	8008ba4 <_dtoa_r+0xabc>
 8008c7e:	462b      	mov	r3, r5
 8008c80:	461d      	mov	r5, r3
 8008c82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c86:	2a30      	cmp	r2, #48	; 0x30
 8008c88:	d0fa      	beq.n	8008c80 <_dtoa_r+0xb98>
 8008c8a:	e6dd      	b.n	8008a48 <_dtoa_r+0x960>
 8008c8c:	9a00      	ldr	r2, [sp, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d189      	bne.n	8008ba6 <_dtoa_r+0xabe>
 8008c92:	f10b 0b01 	add.w	fp, fp, #1
 8008c96:	2331      	movs	r3, #49	; 0x31
 8008c98:	e796      	b.n	8008bc8 <_dtoa_r+0xae0>
 8008c9a:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <_dtoa_r+0xbdc>)
 8008c9c:	f7ff ba99 	b.w	80081d2 <_dtoa_r+0xea>
 8008ca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f47f aa6d 	bne.w	8008182 <_dtoa_r+0x9a>
 8008ca8:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <_dtoa_r+0xbe0>)
 8008caa:	f7ff ba92 	b.w	80081d2 <_dtoa_r+0xea>
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	dcb5      	bgt.n	8008c20 <_dtoa_r+0xb38>
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	f73f aeb1 	bgt.w	8008a1e <_dtoa_r+0x936>
 8008cbc:	e7b0      	b.n	8008c20 <_dtoa_r+0xb38>
 8008cbe:	bf00      	nop
 8008cc0:	0800b8b9 	.word	0x0800b8b9
 8008cc4:	0800b814 	.word	0x0800b814
 8008cc8:	0800b83d 	.word	0x0800b83d

08008ccc <_free_r>:
 8008ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cce:	2900      	cmp	r1, #0
 8008cd0:	d044      	beq.n	8008d5c <_free_r+0x90>
 8008cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cd6:	9001      	str	r0, [sp, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f1a1 0404 	sub.w	r4, r1, #4
 8008cde:	bfb8      	it	lt
 8008ce0:	18e4      	addlt	r4, r4, r3
 8008ce2:	f000 f8e7 	bl	8008eb4 <__malloc_lock>
 8008ce6:	4a1e      	ldr	r2, [pc, #120]	; (8008d60 <_free_r+0x94>)
 8008ce8:	9801      	ldr	r0, [sp, #4]
 8008cea:	6813      	ldr	r3, [r2, #0]
 8008cec:	b933      	cbnz	r3, 8008cfc <_free_r+0x30>
 8008cee:	6063      	str	r3, [r4, #4]
 8008cf0:	6014      	str	r4, [r2, #0]
 8008cf2:	b003      	add	sp, #12
 8008cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cf8:	f000 b8e2 	b.w	8008ec0 <__malloc_unlock>
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	d908      	bls.n	8008d12 <_free_r+0x46>
 8008d00:	6825      	ldr	r5, [r4, #0]
 8008d02:	1961      	adds	r1, r4, r5
 8008d04:	428b      	cmp	r3, r1
 8008d06:	bf01      	itttt	eq
 8008d08:	6819      	ldreq	r1, [r3, #0]
 8008d0a:	685b      	ldreq	r3, [r3, #4]
 8008d0c:	1949      	addeq	r1, r1, r5
 8008d0e:	6021      	streq	r1, [r4, #0]
 8008d10:	e7ed      	b.n	8008cee <_free_r+0x22>
 8008d12:	461a      	mov	r2, r3
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	b10b      	cbz	r3, 8008d1c <_free_r+0x50>
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	d9fa      	bls.n	8008d12 <_free_r+0x46>
 8008d1c:	6811      	ldr	r1, [r2, #0]
 8008d1e:	1855      	adds	r5, r2, r1
 8008d20:	42a5      	cmp	r5, r4
 8008d22:	d10b      	bne.n	8008d3c <_free_r+0x70>
 8008d24:	6824      	ldr	r4, [r4, #0]
 8008d26:	4421      	add	r1, r4
 8008d28:	1854      	adds	r4, r2, r1
 8008d2a:	42a3      	cmp	r3, r4
 8008d2c:	6011      	str	r1, [r2, #0]
 8008d2e:	d1e0      	bne.n	8008cf2 <_free_r+0x26>
 8008d30:	681c      	ldr	r4, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	6053      	str	r3, [r2, #4]
 8008d36:	440c      	add	r4, r1
 8008d38:	6014      	str	r4, [r2, #0]
 8008d3a:	e7da      	b.n	8008cf2 <_free_r+0x26>
 8008d3c:	d902      	bls.n	8008d44 <_free_r+0x78>
 8008d3e:	230c      	movs	r3, #12
 8008d40:	6003      	str	r3, [r0, #0]
 8008d42:	e7d6      	b.n	8008cf2 <_free_r+0x26>
 8008d44:	6825      	ldr	r5, [r4, #0]
 8008d46:	1961      	adds	r1, r4, r5
 8008d48:	428b      	cmp	r3, r1
 8008d4a:	bf04      	itt	eq
 8008d4c:	6819      	ldreq	r1, [r3, #0]
 8008d4e:	685b      	ldreq	r3, [r3, #4]
 8008d50:	6063      	str	r3, [r4, #4]
 8008d52:	bf04      	itt	eq
 8008d54:	1949      	addeq	r1, r1, r5
 8008d56:	6021      	streq	r1, [r4, #0]
 8008d58:	6054      	str	r4, [r2, #4]
 8008d5a:	e7ca      	b.n	8008cf2 <_free_r+0x26>
 8008d5c:	b003      	add	sp, #12
 8008d5e:	bd30      	pop	{r4, r5, pc}
 8008d60:	20000c50 	.word	0x20000c50

08008d64 <malloc>:
 8008d64:	4b02      	ldr	r3, [pc, #8]	; (8008d70 <malloc+0xc>)
 8008d66:	4601      	mov	r1, r0
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	f000 b823 	b.w	8008db4 <_malloc_r>
 8008d6e:	bf00      	nop
 8008d70:	2000006c 	.word	0x2000006c

08008d74 <sbrk_aligned>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	4e0e      	ldr	r6, [pc, #56]	; (8008db0 <sbrk_aligned+0x3c>)
 8008d78:	460c      	mov	r4, r1
 8008d7a:	6831      	ldr	r1, [r6, #0]
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	b911      	cbnz	r1, 8008d86 <sbrk_aligned+0x12>
 8008d80:	f001 fe1a 	bl	800a9b8 <_sbrk_r>
 8008d84:	6030      	str	r0, [r6, #0]
 8008d86:	4621      	mov	r1, r4
 8008d88:	4628      	mov	r0, r5
 8008d8a:	f001 fe15 	bl	800a9b8 <_sbrk_r>
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	d00a      	beq.n	8008da8 <sbrk_aligned+0x34>
 8008d92:	1cc4      	adds	r4, r0, #3
 8008d94:	f024 0403 	bic.w	r4, r4, #3
 8008d98:	42a0      	cmp	r0, r4
 8008d9a:	d007      	beq.n	8008dac <sbrk_aligned+0x38>
 8008d9c:	1a21      	subs	r1, r4, r0
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f001 fe0a 	bl	800a9b8 <_sbrk_r>
 8008da4:	3001      	adds	r0, #1
 8008da6:	d101      	bne.n	8008dac <sbrk_aligned+0x38>
 8008da8:	f04f 34ff 	mov.w	r4, #4294967295
 8008dac:	4620      	mov	r0, r4
 8008dae:	bd70      	pop	{r4, r5, r6, pc}
 8008db0:	20000c54 	.word	0x20000c54

08008db4 <_malloc_r>:
 8008db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db8:	1ccd      	adds	r5, r1, #3
 8008dba:	f025 0503 	bic.w	r5, r5, #3
 8008dbe:	3508      	adds	r5, #8
 8008dc0:	2d0c      	cmp	r5, #12
 8008dc2:	bf38      	it	cc
 8008dc4:	250c      	movcc	r5, #12
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	4607      	mov	r7, r0
 8008dca:	db01      	blt.n	8008dd0 <_malloc_r+0x1c>
 8008dcc:	42a9      	cmp	r1, r5
 8008dce:	d905      	bls.n	8008ddc <_malloc_r+0x28>
 8008dd0:	230c      	movs	r3, #12
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	2600      	movs	r6, #0
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ddc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008eb0 <_malloc_r+0xfc>
 8008de0:	f000 f868 	bl	8008eb4 <__malloc_lock>
 8008de4:	f8d8 3000 	ldr.w	r3, [r8]
 8008de8:	461c      	mov	r4, r3
 8008dea:	bb5c      	cbnz	r4, 8008e44 <_malloc_r+0x90>
 8008dec:	4629      	mov	r1, r5
 8008dee:	4638      	mov	r0, r7
 8008df0:	f7ff ffc0 	bl	8008d74 <sbrk_aligned>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	4604      	mov	r4, r0
 8008df8:	d155      	bne.n	8008ea6 <_malloc_r+0xf2>
 8008dfa:	f8d8 4000 	ldr.w	r4, [r8]
 8008dfe:	4626      	mov	r6, r4
 8008e00:	2e00      	cmp	r6, #0
 8008e02:	d145      	bne.n	8008e90 <_malloc_r+0xdc>
 8008e04:	2c00      	cmp	r4, #0
 8008e06:	d048      	beq.n	8008e9a <_malloc_r+0xe6>
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	eb04 0903 	add.w	r9, r4, r3
 8008e12:	f001 fdd1 	bl	800a9b8 <_sbrk_r>
 8008e16:	4581      	cmp	r9, r0
 8008e18:	d13f      	bne.n	8008e9a <_malloc_r+0xe6>
 8008e1a:	6821      	ldr	r1, [r4, #0]
 8008e1c:	1a6d      	subs	r5, r5, r1
 8008e1e:	4629      	mov	r1, r5
 8008e20:	4638      	mov	r0, r7
 8008e22:	f7ff ffa7 	bl	8008d74 <sbrk_aligned>
 8008e26:	3001      	adds	r0, #1
 8008e28:	d037      	beq.n	8008e9a <_malloc_r+0xe6>
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	442b      	add	r3, r5
 8008e2e:	6023      	str	r3, [r4, #0]
 8008e30:	f8d8 3000 	ldr.w	r3, [r8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d038      	beq.n	8008eaa <_malloc_r+0xf6>
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	42a2      	cmp	r2, r4
 8008e3c:	d12b      	bne.n	8008e96 <_malloc_r+0xe2>
 8008e3e:	2200      	movs	r2, #0
 8008e40:	605a      	str	r2, [r3, #4]
 8008e42:	e00f      	b.n	8008e64 <_malloc_r+0xb0>
 8008e44:	6822      	ldr	r2, [r4, #0]
 8008e46:	1b52      	subs	r2, r2, r5
 8008e48:	d41f      	bmi.n	8008e8a <_malloc_r+0xd6>
 8008e4a:	2a0b      	cmp	r2, #11
 8008e4c:	d917      	bls.n	8008e7e <_malloc_r+0xca>
 8008e4e:	1961      	adds	r1, r4, r5
 8008e50:	42a3      	cmp	r3, r4
 8008e52:	6025      	str	r5, [r4, #0]
 8008e54:	bf18      	it	ne
 8008e56:	6059      	strne	r1, [r3, #4]
 8008e58:	6863      	ldr	r3, [r4, #4]
 8008e5a:	bf08      	it	eq
 8008e5c:	f8c8 1000 	streq.w	r1, [r8]
 8008e60:	5162      	str	r2, [r4, r5]
 8008e62:	604b      	str	r3, [r1, #4]
 8008e64:	4638      	mov	r0, r7
 8008e66:	f104 060b 	add.w	r6, r4, #11
 8008e6a:	f000 f829 	bl	8008ec0 <__malloc_unlock>
 8008e6e:	f026 0607 	bic.w	r6, r6, #7
 8008e72:	1d23      	adds	r3, r4, #4
 8008e74:	1af2      	subs	r2, r6, r3
 8008e76:	d0ae      	beq.n	8008dd6 <_malloc_r+0x22>
 8008e78:	1b9b      	subs	r3, r3, r6
 8008e7a:	50a3      	str	r3, [r4, r2]
 8008e7c:	e7ab      	b.n	8008dd6 <_malloc_r+0x22>
 8008e7e:	42a3      	cmp	r3, r4
 8008e80:	6862      	ldr	r2, [r4, #4]
 8008e82:	d1dd      	bne.n	8008e40 <_malloc_r+0x8c>
 8008e84:	f8c8 2000 	str.w	r2, [r8]
 8008e88:	e7ec      	b.n	8008e64 <_malloc_r+0xb0>
 8008e8a:	4623      	mov	r3, r4
 8008e8c:	6864      	ldr	r4, [r4, #4]
 8008e8e:	e7ac      	b.n	8008dea <_malloc_r+0x36>
 8008e90:	4634      	mov	r4, r6
 8008e92:	6876      	ldr	r6, [r6, #4]
 8008e94:	e7b4      	b.n	8008e00 <_malloc_r+0x4c>
 8008e96:	4613      	mov	r3, r2
 8008e98:	e7cc      	b.n	8008e34 <_malloc_r+0x80>
 8008e9a:	230c      	movs	r3, #12
 8008e9c:	603b      	str	r3, [r7, #0]
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	f000 f80e 	bl	8008ec0 <__malloc_unlock>
 8008ea4:	e797      	b.n	8008dd6 <_malloc_r+0x22>
 8008ea6:	6025      	str	r5, [r4, #0]
 8008ea8:	e7dc      	b.n	8008e64 <_malloc_r+0xb0>
 8008eaa:	605b      	str	r3, [r3, #4]
 8008eac:	deff      	udf	#255	; 0xff
 8008eae:	bf00      	nop
 8008eb0:	20000c50 	.word	0x20000c50

08008eb4 <__malloc_lock>:
 8008eb4:	4801      	ldr	r0, [pc, #4]	; (8008ebc <__malloc_lock+0x8>)
 8008eb6:	f7ff b884 	b.w	8007fc2 <__retarget_lock_acquire_recursive>
 8008eba:	bf00      	nop
 8008ebc:	20000c4c 	.word	0x20000c4c

08008ec0 <__malloc_unlock>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	; (8008ec8 <__malloc_unlock+0x8>)
 8008ec2:	f7ff b87f 	b.w	8007fc4 <__retarget_lock_release_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	20000c4c 	.word	0x20000c4c

08008ecc <_Balloc>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	69c6      	ldr	r6, [r0, #28]
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	460d      	mov	r5, r1
 8008ed4:	b976      	cbnz	r6, 8008ef4 <_Balloc+0x28>
 8008ed6:	2010      	movs	r0, #16
 8008ed8:	f7ff ff44 	bl	8008d64 <malloc>
 8008edc:	4602      	mov	r2, r0
 8008ede:	61e0      	str	r0, [r4, #28]
 8008ee0:	b920      	cbnz	r0, 8008eec <_Balloc+0x20>
 8008ee2:	4b18      	ldr	r3, [pc, #96]	; (8008f44 <_Balloc+0x78>)
 8008ee4:	4818      	ldr	r0, [pc, #96]	; (8008f48 <_Balloc+0x7c>)
 8008ee6:	216b      	movs	r1, #107	; 0x6b
 8008ee8:	f001 fd8e 	bl	800aa08 <__assert_func>
 8008eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ef0:	6006      	str	r6, [r0, #0]
 8008ef2:	60c6      	str	r6, [r0, #12]
 8008ef4:	69e6      	ldr	r6, [r4, #28]
 8008ef6:	68f3      	ldr	r3, [r6, #12]
 8008ef8:	b183      	cbz	r3, 8008f1c <_Balloc+0x50>
 8008efa:	69e3      	ldr	r3, [r4, #28]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f02:	b9b8      	cbnz	r0, 8008f34 <_Balloc+0x68>
 8008f04:	2101      	movs	r1, #1
 8008f06:	fa01 f605 	lsl.w	r6, r1, r5
 8008f0a:	1d72      	adds	r2, r6, #5
 8008f0c:	0092      	lsls	r2, r2, #2
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f001 fd98 	bl	800aa44 <_calloc_r>
 8008f14:	b160      	cbz	r0, 8008f30 <_Balloc+0x64>
 8008f16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f1a:	e00e      	b.n	8008f3a <_Balloc+0x6e>
 8008f1c:	2221      	movs	r2, #33	; 0x21
 8008f1e:	2104      	movs	r1, #4
 8008f20:	4620      	mov	r0, r4
 8008f22:	f001 fd8f 	bl	800aa44 <_calloc_r>
 8008f26:	69e3      	ldr	r3, [r4, #28]
 8008f28:	60f0      	str	r0, [r6, #12]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e4      	bne.n	8008efa <_Balloc+0x2e>
 8008f30:	2000      	movs	r0, #0
 8008f32:	bd70      	pop	{r4, r5, r6, pc}
 8008f34:	6802      	ldr	r2, [r0, #0]
 8008f36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f40:	e7f7      	b.n	8008f32 <_Balloc+0x66>
 8008f42:	bf00      	nop
 8008f44:	0800b84a 	.word	0x0800b84a
 8008f48:	0800b8ca 	.word	0x0800b8ca

08008f4c <_Bfree>:
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	69c6      	ldr	r6, [r0, #28]
 8008f50:	4605      	mov	r5, r0
 8008f52:	460c      	mov	r4, r1
 8008f54:	b976      	cbnz	r6, 8008f74 <_Bfree+0x28>
 8008f56:	2010      	movs	r0, #16
 8008f58:	f7ff ff04 	bl	8008d64 <malloc>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	61e8      	str	r0, [r5, #28]
 8008f60:	b920      	cbnz	r0, 8008f6c <_Bfree+0x20>
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <_Bfree+0x3c>)
 8008f64:	4809      	ldr	r0, [pc, #36]	; (8008f8c <_Bfree+0x40>)
 8008f66:	218f      	movs	r1, #143	; 0x8f
 8008f68:	f001 fd4e 	bl	800aa08 <__assert_func>
 8008f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f70:	6006      	str	r6, [r0, #0]
 8008f72:	60c6      	str	r6, [r0, #12]
 8008f74:	b13c      	cbz	r4, 8008f86 <_Bfree+0x3a>
 8008f76:	69eb      	ldr	r3, [r5, #28]
 8008f78:	6862      	ldr	r2, [r4, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f80:	6021      	str	r1, [r4, #0]
 8008f82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	0800b84a 	.word	0x0800b84a
 8008f8c:	0800b8ca 	.word	0x0800b8ca

08008f90 <__multadd>:
 8008f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f94:	690d      	ldr	r5, [r1, #16]
 8008f96:	4607      	mov	r7, r0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	461e      	mov	r6, r3
 8008f9c:	f101 0c14 	add.w	ip, r1, #20
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	f8dc 3000 	ldr.w	r3, [ip]
 8008fa6:	b299      	uxth	r1, r3
 8008fa8:	fb02 6101 	mla	r1, r2, r1, r6
 8008fac:	0c1e      	lsrs	r6, r3, #16
 8008fae:	0c0b      	lsrs	r3, r1, #16
 8008fb0:	fb02 3306 	mla	r3, r2, r6, r3
 8008fb4:	b289      	uxth	r1, r1
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fbc:	4285      	cmp	r5, r0
 8008fbe:	f84c 1b04 	str.w	r1, [ip], #4
 8008fc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fc6:	dcec      	bgt.n	8008fa2 <__multadd+0x12>
 8008fc8:	b30e      	cbz	r6, 800900e <__multadd+0x7e>
 8008fca:	68a3      	ldr	r3, [r4, #8]
 8008fcc:	42ab      	cmp	r3, r5
 8008fce:	dc19      	bgt.n	8009004 <__multadd+0x74>
 8008fd0:	6861      	ldr	r1, [r4, #4]
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	3101      	adds	r1, #1
 8008fd6:	f7ff ff79 	bl	8008ecc <_Balloc>
 8008fda:	4680      	mov	r8, r0
 8008fdc:	b928      	cbnz	r0, 8008fea <__multadd+0x5a>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	4b0c      	ldr	r3, [pc, #48]	; (8009014 <__multadd+0x84>)
 8008fe2:	480d      	ldr	r0, [pc, #52]	; (8009018 <__multadd+0x88>)
 8008fe4:	21ba      	movs	r1, #186	; 0xba
 8008fe6:	f001 fd0f 	bl	800aa08 <__assert_func>
 8008fea:	6922      	ldr	r2, [r4, #16]
 8008fec:	3202      	adds	r2, #2
 8008fee:	f104 010c 	add.w	r1, r4, #12
 8008ff2:	0092      	lsls	r2, r2, #2
 8008ff4:	300c      	adds	r0, #12
 8008ff6:	f001 fcef 	bl	800a9d8 <memcpy>
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	f7ff ffa5 	bl	8008f4c <_Bfree>
 8009002:	4644      	mov	r4, r8
 8009004:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009008:	3501      	adds	r5, #1
 800900a:	615e      	str	r6, [r3, #20]
 800900c:	6125      	str	r5, [r4, #16]
 800900e:	4620      	mov	r0, r4
 8009010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009014:	0800b8b9 	.word	0x0800b8b9
 8009018:	0800b8ca 	.word	0x0800b8ca

0800901c <__s2b>:
 800901c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009020:	460c      	mov	r4, r1
 8009022:	4615      	mov	r5, r2
 8009024:	461f      	mov	r7, r3
 8009026:	2209      	movs	r2, #9
 8009028:	3308      	adds	r3, #8
 800902a:	4606      	mov	r6, r0
 800902c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009030:	2100      	movs	r1, #0
 8009032:	2201      	movs	r2, #1
 8009034:	429a      	cmp	r2, r3
 8009036:	db09      	blt.n	800904c <__s2b+0x30>
 8009038:	4630      	mov	r0, r6
 800903a:	f7ff ff47 	bl	8008ecc <_Balloc>
 800903e:	b940      	cbnz	r0, 8009052 <__s2b+0x36>
 8009040:	4602      	mov	r2, r0
 8009042:	4b19      	ldr	r3, [pc, #100]	; (80090a8 <__s2b+0x8c>)
 8009044:	4819      	ldr	r0, [pc, #100]	; (80090ac <__s2b+0x90>)
 8009046:	21d3      	movs	r1, #211	; 0xd3
 8009048:	f001 fcde 	bl	800aa08 <__assert_func>
 800904c:	0052      	lsls	r2, r2, #1
 800904e:	3101      	adds	r1, #1
 8009050:	e7f0      	b.n	8009034 <__s2b+0x18>
 8009052:	9b08      	ldr	r3, [sp, #32]
 8009054:	6143      	str	r3, [r0, #20]
 8009056:	2d09      	cmp	r5, #9
 8009058:	f04f 0301 	mov.w	r3, #1
 800905c:	6103      	str	r3, [r0, #16]
 800905e:	dd16      	ble.n	800908e <__s2b+0x72>
 8009060:	f104 0909 	add.w	r9, r4, #9
 8009064:	46c8      	mov	r8, r9
 8009066:	442c      	add	r4, r5
 8009068:	f818 3b01 	ldrb.w	r3, [r8], #1
 800906c:	4601      	mov	r1, r0
 800906e:	3b30      	subs	r3, #48	; 0x30
 8009070:	220a      	movs	r2, #10
 8009072:	4630      	mov	r0, r6
 8009074:	f7ff ff8c 	bl	8008f90 <__multadd>
 8009078:	45a0      	cmp	r8, r4
 800907a:	d1f5      	bne.n	8009068 <__s2b+0x4c>
 800907c:	f1a5 0408 	sub.w	r4, r5, #8
 8009080:	444c      	add	r4, r9
 8009082:	1b2d      	subs	r5, r5, r4
 8009084:	1963      	adds	r3, r4, r5
 8009086:	42bb      	cmp	r3, r7
 8009088:	db04      	blt.n	8009094 <__s2b+0x78>
 800908a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800908e:	340a      	adds	r4, #10
 8009090:	2509      	movs	r5, #9
 8009092:	e7f6      	b.n	8009082 <__s2b+0x66>
 8009094:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009098:	4601      	mov	r1, r0
 800909a:	3b30      	subs	r3, #48	; 0x30
 800909c:	220a      	movs	r2, #10
 800909e:	4630      	mov	r0, r6
 80090a0:	f7ff ff76 	bl	8008f90 <__multadd>
 80090a4:	e7ee      	b.n	8009084 <__s2b+0x68>
 80090a6:	bf00      	nop
 80090a8:	0800b8b9 	.word	0x0800b8b9
 80090ac:	0800b8ca 	.word	0x0800b8ca

080090b0 <__hi0bits>:
 80090b0:	0c03      	lsrs	r3, r0, #16
 80090b2:	041b      	lsls	r3, r3, #16
 80090b4:	b9d3      	cbnz	r3, 80090ec <__hi0bits+0x3c>
 80090b6:	0400      	lsls	r0, r0, #16
 80090b8:	2310      	movs	r3, #16
 80090ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090be:	bf04      	itt	eq
 80090c0:	0200      	lsleq	r0, r0, #8
 80090c2:	3308      	addeq	r3, #8
 80090c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090c8:	bf04      	itt	eq
 80090ca:	0100      	lsleq	r0, r0, #4
 80090cc:	3304      	addeq	r3, #4
 80090ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090d2:	bf04      	itt	eq
 80090d4:	0080      	lsleq	r0, r0, #2
 80090d6:	3302      	addeq	r3, #2
 80090d8:	2800      	cmp	r0, #0
 80090da:	db05      	blt.n	80090e8 <__hi0bits+0x38>
 80090dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090e0:	f103 0301 	add.w	r3, r3, #1
 80090e4:	bf08      	it	eq
 80090e6:	2320      	moveq	r3, #32
 80090e8:	4618      	mov	r0, r3
 80090ea:	4770      	bx	lr
 80090ec:	2300      	movs	r3, #0
 80090ee:	e7e4      	b.n	80090ba <__hi0bits+0xa>

080090f0 <__lo0bits>:
 80090f0:	6803      	ldr	r3, [r0, #0]
 80090f2:	f013 0207 	ands.w	r2, r3, #7
 80090f6:	d00c      	beq.n	8009112 <__lo0bits+0x22>
 80090f8:	07d9      	lsls	r1, r3, #31
 80090fa:	d422      	bmi.n	8009142 <__lo0bits+0x52>
 80090fc:	079a      	lsls	r2, r3, #30
 80090fe:	bf49      	itett	mi
 8009100:	085b      	lsrmi	r3, r3, #1
 8009102:	089b      	lsrpl	r3, r3, #2
 8009104:	6003      	strmi	r3, [r0, #0]
 8009106:	2201      	movmi	r2, #1
 8009108:	bf5c      	itt	pl
 800910a:	6003      	strpl	r3, [r0, #0]
 800910c:	2202      	movpl	r2, #2
 800910e:	4610      	mov	r0, r2
 8009110:	4770      	bx	lr
 8009112:	b299      	uxth	r1, r3
 8009114:	b909      	cbnz	r1, 800911a <__lo0bits+0x2a>
 8009116:	0c1b      	lsrs	r3, r3, #16
 8009118:	2210      	movs	r2, #16
 800911a:	b2d9      	uxtb	r1, r3
 800911c:	b909      	cbnz	r1, 8009122 <__lo0bits+0x32>
 800911e:	3208      	adds	r2, #8
 8009120:	0a1b      	lsrs	r3, r3, #8
 8009122:	0719      	lsls	r1, r3, #28
 8009124:	bf04      	itt	eq
 8009126:	091b      	lsreq	r3, r3, #4
 8009128:	3204      	addeq	r2, #4
 800912a:	0799      	lsls	r1, r3, #30
 800912c:	bf04      	itt	eq
 800912e:	089b      	lsreq	r3, r3, #2
 8009130:	3202      	addeq	r2, #2
 8009132:	07d9      	lsls	r1, r3, #31
 8009134:	d403      	bmi.n	800913e <__lo0bits+0x4e>
 8009136:	085b      	lsrs	r3, r3, #1
 8009138:	f102 0201 	add.w	r2, r2, #1
 800913c:	d003      	beq.n	8009146 <__lo0bits+0x56>
 800913e:	6003      	str	r3, [r0, #0]
 8009140:	e7e5      	b.n	800910e <__lo0bits+0x1e>
 8009142:	2200      	movs	r2, #0
 8009144:	e7e3      	b.n	800910e <__lo0bits+0x1e>
 8009146:	2220      	movs	r2, #32
 8009148:	e7e1      	b.n	800910e <__lo0bits+0x1e>
	...

0800914c <__i2b>:
 800914c:	b510      	push	{r4, lr}
 800914e:	460c      	mov	r4, r1
 8009150:	2101      	movs	r1, #1
 8009152:	f7ff febb 	bl	8008ecc <_Balloc>
 8009156:	4602      	mov	r2, r0
 8009158:	b928      	cbnz	r0, 8009166 <__i2b+0x1a>
 800915a:	4b05      	ldr	r3, [pc, #20]	; (8009170 <__i2b+0x24>)
 800915c:	4805      	ldr	r0, [pc, #20]	; (8009174 <__i2b+0x28>)
 800915e:	f240 1145 	movw	r1, #325	; 0x145
 8009162:	f001 fc51 	bl	800aa08 <__assert_func>
 8009166:	2301      	movs	r3, #1
 8009168:	6144      	str	r4, [r0, #20]
 800916a:	6103      	str	r3, [r0, #16]
 800916c:	bd10      	pop	{r4, pc}
 800916e:	bf00      	nop
 8009170:	0800b8b9 	.word	0x0800b8b9
 8009174:	0800b8ca 	.word	0x0800b8ca

08009178 <__multiply>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	4691      	mov	r9, r2
 800917e:	690a      	ldr	r2, [r1, #16]
 8009180:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009184:	429a      	cmp	r2, r3
 8009186:	bfb8      	it	lt
 8009188:	460b      	movlt	r3, r1
 800918a:	460c      	mov	r4, r1
 800918c:	bfbc      	itt	lt
 800918e:	464c      	movlt	r4, r9
 8009190:	4699      	movlt	r9, r3
 8009192:	6927      	ldr	r7, [r4, #16]
 8009194:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009198:	68a3      	ldr	r3, [r4, #8]
 800919a:	6861      	ldr	r1, [r4, #4]
 800919c:	eb07 060a 	add.w	r6, r7, sl
 80091a0:	42b3      	cmp	r3, r6
 80091a2:	b085      	sub	sp, #20
 80091a4:	bfb8      	it	lt
 80091a6:	3101      	addlt	r1, #1
 80091a8:	f7ff fe90 	bl	8008ecc <_Balloc>
 80091ac:	b930      	cbnz	r0, 80091bc <__multiply+0x44>
 80091ae:	4602      	mov	r2, r0
 80091b0:	4b44      	ldr	r3, [pc, #272]	; (80092c4 <__multiply+0x14c>)
 80091b2:	4845      	ldr	r0, [pc, #276]	; (80092c8 <__multiply+0x150>)
 80091b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80091b8:	f001 fc26 	bl	800aa08 <__assert_func>
 80091bc:	f100 0514 	add.w	r5, r0, #20
 80091c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091c4:	462b      	mov	r3, r5
 80091c6:	2200      	movs	r2, #0
 80091c8:	4543      	cmp	r3, r8
 80091ca:	d321      	bcc.n	8009210 <__multiply+0x98>
 80091cc:	f104 0314 	add.w	r3, r4, #20
 80091d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091d4:	f109 0314 	add.w	r3, r9, #20
 80091d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091dc:	9202      	str	r2, [sp, #8]
 80091de:	1b3a      	subs	r2, r7, r4
 80091e0:	3a15      	subs	r2, #21
 80091e2:	f022 0203 	bic.w	r2, r2, #3
 80091e6:	3204      	adds	r2, #4
 80091e8:	f104 0115 	add.w	r1, r4, #21
 80091ec:	428f      	cmp	r7, r1
 80091ee:	bf38      	it	cc
 80091f0:	2204      	movcc	r2, #4
 80091f2:	9201      	str	r2, [sp, #4]
 80091f4:	9a02      	ldr	r2, [sp, #8]
 80091f6:	9303      	str	r3, [sp, #12]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d80c      	bhi.n	8009216 <__multiply+0x9e>
 80091fc:	2e00      	cmp	r6, #0
 80091fe:	dd03      	ble.n	8009208 <__multiply+0x90>
 8009200:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009204:	2b00      	cmp	r3, #0
 8009206:	d05b      	beq.n	80092c0 <__multiply+0x148>
 8009208:	6106      	str	r6, [r0, #16]
 800920a:	b005      	add	sp, #20
 800920c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009210:	f843 2b04 	str.w	r2, [r3], #4
 8009214:	e7d8      	b.n	80091c8 <__multiply+0x50>
 8009216:	f8b3 a000 	ldrh.w	sl, [r3]
 800921a:	f1ba 0f00 	cmp.w	sl, #0
 800921e:	d024      	beq.n	800926a <__multiply+0xf2>
 8009220:	f104 0e14 	add.w	lr, r4, #20
 8009224:	46a9      	mov	r9, r5
 8009226:	f04f 0c00 	mov.w	ip, #0
 800922a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800922e:	f8d9 1000 	ldr.w	r1, [r9]
 8009232:	fa1f fb82 	uxth.w	fp, r2
 8009236:	b289      	uxth	r1, r1
 8009238:	fb0a 110b 	mla	r1, sl, fp, r1
 800923c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009240:	f8d9 2000 	ldr.w	r2, [r9]
 8009244:	4461      	add	r1, ip
 8009246:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800924a:	fb0a c20b 	mla	r2, sl, fp, ip
 800924e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009252:	b289      	uxth	r1, r1
 8009254:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009258:	4577      	cmp	r7, lr
 800925a:	f849 1b04 	str.w	r1, [r9], #4
 800925e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009262:	d8e2      	bhi.n	800922a <__multiply+0xb2>
 8009264:	9a01      	ldr	r2, [sp, #4]
 8009266:	f845 c002 	str.w	ip, [r5, r2]
 800926a:	9a03      	ldr	r2, [sp, #12]
 800926c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009270:	3304      	adds	r3, #4
 8009272:	f1b9 0f00 	cmp.w	r9, #0
 8009276:	d021      	beq.n	80092bc <__multiply+0x144>
 8009278:	6829      	ldr	r1, [r5, #0]
 800927a:	f104 0c14 	add.w	ip, r4, #20
 800927e:	46ae      	mov	lr, r5
 8009280:	f04f 0a00 	mov.w	sl, #0
 8009284:	f8bc b000 	ldrh.w	fp, [ip]
 8009288:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800928c:	fb09 220b 	mla	r2, r9, fp, r2
 8009290:	4452      	add	r2, sl
 8009292:	b289      	uxth	r1, r1
 8009294:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009298:	f84e 1b04 	str.w	r1, [lr], #4
 800929c:	f85c 1b04 	ldr.w	r1, [ip], #4
 80092a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092a4:	f8be 1000 	ldrh.w	r1, [lr]
 80092a8:	fb09 110a 	mla	r1, r9, sl, r1
 80092ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80092b0:	4567      	cmp	r7, ip
 80092b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092b6:	d8e5      	bhi.n	8009284 <__multiply+0x10c>
 80092b8:	9a01      	ldr	r2, [sp, #4]
 80092ba:	50a9      	str	r1, [r5, r2]
 80092bc:	3504      	adds	r5, #4
 80092be:	e799      	b.n	80091f4 <__multiply+0x7c>
 80092c0:	3e01      	subs	r6, #1
 80092c2:	e79b      	b.n	80091fc <__multiply+0x84>
 80092c4:	0800b8b9 	.word	0x0800b8b9
 80092c8:	0800b8ca 	.word	0x0800b8ca

080092cc <__pow5mult>:
 80092cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d0:	4615      	mov	r5, r2
 80092d2:	f012 0203 	ands.w	r2, r2, #3
 80092d6:	4606      	mov	r6, r0
 80092d8:	460f      	mov	r7, r1
 80092da:	d007      	beq.n	80092ec <__pow5mult+0x20>
 80092dc:	4c25      	ldr	r4, [pc, #148]	; (8009374 <__pow5mult+0xa8>)
 80092de:	3a01      	subs	r2, #1
 80092e0:	2300      	movs	r3, #0
 80092e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092e6:	f7ff fe53 	bl	8008f90 <__multadd>
 80092ea:	4607      	mov	r7, r0
 80092ec:	10ad      	asrs	r5, r5, #2
 80092ee:	d03d      	beq.n	800936c <__pow5mult+0xa0>
 80092f0:	69f4      	ldr	r4, [r6, #28]
 80092f2:	b97c      	cbnz	r4, 8009314 <__pow5mult+0x48>
 80092f4:	2010      	movs	r0, #16
 80092f6:	f7ff fd35 	bl	8008d64 <malloc>
 80092fa:	4602      	mov	r2, r0
 80092fc:	61f0      	str	r0, [r6, #28]
 80092fe:	b928      	cbnz	r0, 800930c <__pow5mult+0x40>
 8009300:	4b1d      	ldr	r3, [pc, #116]	; (8009378 <__pow5mult+0xac>)
 8009302:	481e      	ldr	r0, [pc, #120]	; (800937c <__pow5mult+0xb0>)
 8009304:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009308:	f001 fb7e 	bl	800aa08 <__assert_func>
 800930c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009310:	6004      	str	r4, [r0, #0]
 8009312:	60c4      	str	r4, [r0, #12]
 8009314:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009318:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800931c:	b94c      	cbnz	r4, 8009332 <__pow5mult+0x66>
 800931e:	f240 2171 	movw	r1, #625	; 0x271
 8009322:	4630      	mov	r0, r6
 8009324:	f7ff ff12 	bl	800914c <__i2b>
 8009328:	2300      	movs	r3, #0
 800932a:	f8c8 0008 	str.w	r0, [r8, #8]
 800932e:	4604      	mov	r4, r0
 8009330:	6003      	str	r3, [r0, #0]
 8009332:	f04f 0900 	mov.w	r9, #0
 8009336:	07eb      	lsls	r3, r5, #31
 8009338:	d50a      	bpl.n	8009350 <__pow5mult+0x84>
 800933a:	4639      	mov	r1, r7
 800933c:	4622      	mov	r2, r4
 800933e:	4630      	mov	r0, r6
 8009340:	f7ff ff1a 	bl	8009178 <__multiply>
 8009344:	4639      	mov	r1, r7
 8009346:	4680      	mov	r8, r0
 8009348:	4630      	mov	r0, r6
 800934a:	f7ff fdff 	bl	8008f4c <_Bfree>
 800934e:	4647      	mov	r7, r8
 8009350:	106d      	asrs	r5, r5, #1
 8009352:	d00b      	beq.n	800936c <__pow5mult+0xa0>
 8009354:	6820      	ldr	r0, [r4, #0]
 8009356:	b938      	cbnz	r0, 8009368 <__pow5mult+0x9c>
 8009358:	4622      	mov	r2, r4
 800935a:	4621      	mov	r1, r4
 800935c:	4630      	mov	r0, r6
 800935e:	f7ff ff0b 	bl	8009178 <__multiply>
 8009362:	6020      	str	r0, [r4, #0]
 8009364:	f8c0 9000 	str.w	r9, [r0]
 8009368:	4604      	mov	r4, r0
 800936a:	e7e4      	b.n	8009336 <__pow5mult+0x6a>
 800936c:	4638      	mov	r0, r7
 800936e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009372:	bf00      	nop
 8009374:	0800ba18 	.word	0x0800ba18
 8009378:	0800b84a 	.word	0x0800b84a
 800937c:	0800b8ca 	.word	0x0800b8ca

08009380 <__lshift>:
 8009380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009384:	460c      	mov	r4, r1
 8009386:	6849      	ldr	r1, [r1, #4]
 8009388:	6923      	ldr	r3, [r4, #16]
 800938a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800938e:	68a3      	ldr	r3, [r4, #8]
 8009390:	4607      	mov	r7, r0
 8009392:	4691      	mov	r9, r2
 8009394:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009398:	f108 0601 	add.w	r6, r8, #1
 800939c:	42b3      	cmp	r3, r6
 800939e:	db0b      	blt.n	80093b8 <__lshift+0x38>
 80093a0:	4638      	mov	r0, r7
 80093a2:	f7ff fd93 	bl	8008ecc <_Balloc>
 80093a6:	4605      	mov	r5, r0
 80093a8:	b948      	cbnz	r0, 80093be <__lshift+0x3e>
 80093aa:	4602      	mov	r2, r0
 80093ac:	4b28      	ldr	r3, [pc, #160]	; (8009450 <__lshift+0xd0>)
 80093ae:	4829      	ldr	r0, [pc, #164]	; (8009454 <__lshift+0xd4>)
 80093b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80093b4:	f001 fb28 	bl	800aa08 <__assert_func>
 80093b8:	3101      	adds	r1, #1
 80093ba:	005b      	lsls	r3, r3, #1
 80093bc:	e7ee      	b.n	800939c <__lshift+0x1c>
 80093be:	2300      	movs	r3, #0
 80093c0:	f100 0114 	add.w	r1, r0, #20
 80093c4:	f100 0210 	add.w	r2, r0, #16
 80093c8:	4618      	mov	r0, r3
 80093ca:	4553      	cmp	r3, sl
 80093cc:	db33      	blt.n	8009436 <__lshift+0xb6>
 80093ce:	6920      	ldr	r0, [r4, #16]
 80093d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093d4:	f104 0314 	add.w	r3, r4, #20
 80093d8:	f019 091f 	ands.w	r9, r9, #31
 80093dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093e4:	d02b      	beq.n	800943e <__lshift+0xbe>
 80093e6:	f1c9 0e20 	rsb	lr, r9, #32
 80093ea:	468a      	mov	sl, r1
 80093ec:	2200      	movs	r2, #0
 80093ee:	6818      	ldr	r0, [r3, #0]
 80093f0:	fa00 f009 	lsl.w	r0, r0, r9
 80093f4:	4310      	orrs	r0, r2
 80093f6:	f84a 0b04 	str.w	r0, [sl], #4
 80093fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80093fe:	459c      	cmp	ip, r3
 8009400:	fa22 f20e 	lsr.w	r2, r2, lr
 8009404:	d8f3      	bhi.n	80093ee <__lshift+0x6e>
 8009406:	ebac 0304 	sub.w	r3, ip, r4
 800940a:	3b15      	subs	r3, #21
 800940c:	f023 0303 	bic.w	r3, r3, #3
 8009410:	3304      	adds	r3, #4
 8009412:	f104 0015 	add.w	r0, r4, #21
 8009416:	4584      	cmp	ip, r0
 8009418:	bf38      	it	cc
 800941a:	2304      	movcc	r3, #4
 800941c:	50ca      	str	r2, [r1, r3]
 800941e:	b10a      	cbz	r2, 8009424 <__lshift+0xa4>
 8009420:	f108 0602 	add.w	r6, r8, #2
 8009424:	3e01      	subs	r6, #1
 8009426:	4638      	mov	r0, r7
 8009428:	612e      	str	r6, [r5, #16]
 800942a:	4621      	mov	r1, r4
 800942c:	f7ff fd8e 	bl	8008f4c <_Bfree>
 8009430:	4628      	mov	r0, r5
 8009432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009436:	f842 0f04 	str.w	r0, [r2, #4]!
 800943a:	3301      	adds	r3, #1
 800943c:	e7c5      	b.n	80093ca <__lshift+0x4a>
 800943e:	3904      	subs	r1, #4
 8009440:	f853 2b04 	ldr.w	r2, [r3], #4
 8009444:	f841 2f04 	str.w	r2, [r1, #4]!
 8009448:	459c      	cmp	ip, r3
 800944a:	d8f9      	bhi.n	8009440 <__lshift+0xc0>
 800944c:	e7ea      	b.n	8009424 <__lshift+0xa4>
 800944e:	bf00      	nop
 8009450:	0800b8b9 	.word	0x0800b8b9
 8009454:	0800b8ca 	.word	0x0800b8ca

08009458 <__mcmp>:
 8009458:	b530      	push	{r4, r5, lr}
 800945a:	6902      	ldr	r2, [r0, #16]
 800945c:	690c      	ldr	r4, [r1, #16]
 800945e:	1b12      	subs	r2, r2, r4
 8009460:	d10e      	bne.n	8009480 <__mcmp+0x28>
 8009462:	f100 0314 	add.w	r3, r0, #20
 8009466:	3114      	adds	r1, #20
 8009468:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800946c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009470:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009474:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009478:	42a5      	cmp	r5, r4
 800947a:	d003      	beq.n	8009484 <__mcmp+0x2c>
 800947c:	d305      	bcc.n	800948a <__mcmp+0x32>
 800947e:	2201      	movs	r2, #1
 8009480:	4610      	mov	r0, r2
 8009482:	bd30      	pop	{r4, r5, pc}
 8009484:	4283      	cmp	r3, r0
 8009486:	d3f3      	bcc.n	8009470 <__mcmp+0x18>
 8009488:	e7fa      	b.n	8009480 <__mcmp+0x28>
 800948a:	f04f 32ff 	mov.w	r2, #4294967295
 800948e:	e7f7      	b.n	8009480 <__mcmp+0x28>

08009490 <__mdiff>:
 8009490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	460c      	mov	r4, r1
 8009496:	4606      	mov	r6, r0
 8009498:	4611      	mov	r1, r2
 800949a:	4620      	mov	r0, r4
 800949c:	4690      	mov	r8, r2
 800949e:	f7ff ffdb 	bl	8009458 <__mcmp>
 80094a2:	1e05      	subs	r5, r0, #0
 80094a4:	d110      	bne.n	80094c8 <__mdiff+0x38>
 80094a6:	4629      	mov	r1, r5
 80094a8:	4630      	mov	r0, r6
 80094aa:	f7ff fd0f 	bl	8008ecc <_Balloc>
 80094ae:	b930      	cbnz	r0, 80094be <__mdiff+0x2e>
 80094b0:	4b3a      	ldr	r3, [pc, #232]	; (800959c <__mdiff+0x10c>)
 80094b2:	4602      	mov	r2, r0
 80094b4:	f240 2137 	movw	r1, #567	; 0x237
 80094b8:	4839      	ldr	r0, [pc, #228]	; (80095a0 <__mdiff+0x110>)
 80094ba:	f001 faa5 	bl	800aa08 <__assert_func>
 80094be:	2301      	movs	r3, #1
 80094c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c8:	bfa4      	itt	ge
 80094ca:	4643      	movge	r3, r8
 80094cc:	46a0      	movge	r8, r4
 80094ce:	4630      	mov	r0, r6
 80094d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094d4:	bfa6      	itte	ge
 80094d6:	461c      	movge	r4, r3
 80094d8:	2500      	movge	r5, #0
 80094da:	2501      	movlt	r5, #1
 80094dc:	f7ff fcf6 	bl	8008ecc <_Balloc>
 80094e0:	b920      	cbnz	r0, 80094ec <__mdiff+0x5c>
 80094e2:	4b2e      	ldr	r3, [pc, #184]	; (800959c <__mdiff+0x10c>)
 80094e4:	4602      	mov	r2, r0
 80094e6:	f240 2145 	movw	r1, #581	; 0x245
 80094ea:	e7e5      	b.n	80094b8 <__mdiff+0x28>
 80094ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094f0:	6926      	ldr	r6, [r4, #16]
 80094f2:	60c5      	str	r5, [r0, #12]
 80094f4:	f104 0914 	add.w	r9, r4, #20
 80094f8:	f108 0514 	add.w	r5, r8, #20
 80094fc:	f100 0e14 	add.w	lr, r0, #20
 8009500:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009504:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009508:	f108 0210 	add.w	r2, r8, #16
 800950c:	46f2      	mov	sl, lr
 800950e:	2100      	movs	r1, #0
 8009510:	f859 3b04 	ldr.w	r3, [r9], #4
 8009514:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009518:	fa11 f88b 	uxtah	r8, r1, fp
 800951c:	b299      	uxth	r1, r3
 800951e:	0c1b      	lsrs	r3, r3, #16
 8009520:	eba8 0801 	sub.w	r8, r8, r1
 8009524:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009528:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800952c:	fa1f f888 	uxth.w	r8, r8
 8009530:	1419      	asrs	r1, r3, #16
 8009532:	454e      	cmp	r6, r9
 8009534:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009538:	f84a 3b04 	str.w	r3, [sl], #4
 800953c:	d8e8      	bhi.n	8009510 <__mdiff+0x80>
 800953e:	1b33      	subs	r3, r6, r4
 8009540:	3b15      	subs	r3, #21
 8009542:	f023 0303 	bic.w	r3, r3, #3
 8009546:	3304      	adds	r3, #4
 8009548:	3415      	adds	r4, #21
 800954a:	42a6      	cmp	r6, r4
 800954c:	bf38      	it	cc
 800954e:	2304      	movcc	r3, #4
 8009550:	441d      	add	r5, r3
 8009552:	4473      	add	r3, lr
 8009554:	469e      	mov	lr, r3
 8009556:	462e      	mov	r6, r5
 8009558:	4566      	cmp	r6, ip
 800955a:	d30e      	bcc.n	800957a <__mdiff+0xea>
 800955c:	f10c 0203 	add.w	r2, ip, #3
 8009560:	1b52      	subs	r2, r2, r5
 8009562:	f022 0203 	bic.w	r2, r2, #3
 8009566:	3d03      	subs	r5, #3
 8009568:	45ac      	cmp	ip, r5
 800956a:	bf38      	it	cc
 800956c:	2200      	movcc	r2, #0
 800956e:	4413      	add	r3, r2
 8009570:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009574:	b17a      	cbz	r2, 8009596 <__mdiff+0x106>
 8009576:	6107      	str	r7, [r0, #16]
 8009578:	e7a4      	b.n	80094c4 <__mdiff+0x34>
 800957a:	f856 8b04 	ldr.w	r8, [r6], #4
 800957e:	fa11 f288 	uxtah	r2, r1, r8
 8009582:	1414      	asrs	r4, r2, #16
 8009584:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009588:	b292      	uxth	r2, r2
 800958a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800958e:	f84e 2b04 	str.w	r2, [lr], #4
 8009592:	1421      	asrs	r1, r4, #16
 8009594:	e7e0      	b.n	8009558 <__mdiff+0xc8>
 8009596:	3f01      	subs	r7, #1
 8009598:	e7ea      	b.n	8009570 <__mdiff+0xe0>
 800959a:	bf00      	nop
 800959c:	0800b8b9 	.word	0x0800b8b9
 80095a0:	0800b8ca 	.word	0x0800b8ca

080095a4 <__ulp>:
 80095a4:	b082      	sub	sp, #8
 80095a6:	ed8d 0b00 	vstr	d0, [sp]
 80095aa:	9a01      	ldr	r2, [sp, #4]
 80095ac:	4b0f      	ldr	r3, [pc, #60]	; (80095ec <__ulp+0x48>)
 80095ae:	4013      	ands	r3, r2
 80095b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dc08      	bgt.n	80095ca <__ulp+0x26>
 80095b8:	425b      	negs	r3, r3
 80095ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80095be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80095c2:	da04      	bge.n	80095ce <__ulp+0x2a>
 80095c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80095c8:	4113      	asrs	r3, r2
 80095ca:	2200      	movs	r2, #0
 80095cc:	e008      	b.n	80095e0 <__ulp+0x3c>
 80095ce:	f1a2 0314 	sub.w	r3, r2, #20
 80095d2:	2b1e      	cmp	r3, #30
 80095d4:	bfda      	itte	le
 80095d6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80095da:	40da      	lsrle	r2, r3
 80095dc:	2201      	movgt	r2, #1
 80095de:	2300      	movs	r3, #0
 80095e0:	4619      	mov	r1, r3
 80095e2:	4610      	mov	r0, r2
 80095e4:	ec41 0b10 	vmov	d0, r0, r1
 80095e8:	b002      	add	sp, #8
 80095ea:	4770      	bx	lr
 80095ec:	7ff00000 	.word	0x7ff00000

080095f0 <__b2d>:
 80095f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f4:	6906      	ldr	r6, [r0, #16]
 80095f6:	f100 0814 	add.w	r8, r0, #20
 80095fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80095fe:	1f37      	subs	r7, r6, #4
 8009600:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009604:	4610      	mov	r0, r2
 8009606:	f7ff fd53 	bl	80090b0 <__hi0bits>
 800960a:	f1c0 0320 	rsb	r3, r0, #32
 800960e:	280a      	cmp	r0, #10
 8009610:	600b      	str	r3, [r1, #0]
 8009612:	491b      	ldr	r1, [pc, #108]	; (8009680 <__b2d+0x90>)
 8009614:	dc15      	bgt.n	8009642 <__b2d+0x52>
 8009616:	f1c0 0c0b 	rsb	ip, r0, #11
 800961a:	fa22 f30c 	lsr.w	r3, r2, ip
 800961e:	45b8      	cmp	r8, r7
 8009620:	ea43 0501 	orr.w	r5, r3, r1
 8009624:	bf34      	ite	cc
 8009626:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800962a:	2300      	movcs	r3, #0
 800962c:	3015      	adds	r0, #21
 800962e:	fa02 f000 	lsl.w	r0, r2, r0
 8009632:	fa23 f30c 	lsr.w	r3, r3, ip
 8009636:	4303      	orrs	r3, r0
 8009638:	461c      	mov	r4, r3
 800963a:	ec45 4b10 	vmov	d0, r4, r5
 800963e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009642:	45b8      	cmp	r8, r7
 8009644:	bf3a      	itte	cc
 8009646:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800964a:	f1a6 0708 	subcc.w	r7, r6, #8
 800964e:	2300      	movcs	r3, #0
 8009650:	380b      	subs	r0, #11
 8009652:	d012      	beq.n	800967a <__b2d+0x8a>
 8009654:	f1c0 0120 	rsb	r1, r0, #32
 8009658:	fa23 f401 	lsr.w	r4, r3, r1
 800965c:	4082      	lsls	r2, r0
 800965e:	4322      	orrs	r2, r4
 8009660:	4547      	cmp	r7, r8
 8009662:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009666:	bf8c      	ite	hi
 8009668:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800966c:	2200      	movls	r2, #0
 800966e:	4083      	lsls	r3, r0
 8009670:	40ca      	lsrs	r2, r1
 8009672:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009676:	4313      	orrs	r3, r2
 8009678:	e7de      	b.n	8009638 <__b2d+0x48>
 800967a:	ea42 0501 	orr.w	r5, r2, r1
 800967e:	e7db      	b.n	8009638 <__b2d+0x48>
 8009680:	3ff00000 	.word	0x3ff00000

08009684 <__d2b>:
 8009684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009688:	460f      	mov	r7, r1
 800968a:	2101      	movs	r1, #1
 800968c:	ec59 8b10 	vmov	r8, r9, d0
 8009690:	4616      	mov	r6, r2
 8009692:	f7ff fc1b 	bl	8008ecc <_Balloc>
 8009696:	4604      	mov	r4, r0
 8009698:	b930      	cbnz	r0, 80096a8 <__d2b+0x24>
 800969a:	4602      	mov	r2, r0
 800969c:	4b24      	ldr	r3, [pc, #144]	; (8009730 <__d2b+0xac>)
 800969e:	4825      	ldr	r0, [pc, #148]	; (8009734 <__d2b+0xb0>)
 80096a0:	f240 310f 	movw	r1, #783	; 0x30f
 80096a4:	f001 f9b0 	bl	800aa08 <__assert_func>
 80096a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096b0:	bb2d      	cbnz	r5, 80096fe <__d2b+0x7a>
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	f1b8 0300 	subs.w	r3, r8, #0
 80096b8:	d026      	beq.n	8009708 <__d2b+0x84>
 80096ba:	4668      	mov	r0, sp
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	f7ff fd17 	bl	80090f0 <__lo0bits>
 80096c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096c6:	b1e8      	cbz	r0, 8009704 <__d2b+0x80>
 80096c8:	f1c0 0320 	rsb	r3, r0, #32
 80096cc:	fa02 f303 	lsl.w	r3, r2, r3
 80096d0:	430b      	orrs	r3, r1
 80096d2:	40c2      	lsrs	r2, r0
 80096d4:	6163      	str	r3, [r4, #20]
 80096d6:	9201      	str	r2, [sp, #4]
 80096d8:	9b01      	ldr	r3, [sp, #4]
 80096da:	61a3      	str	r3, [r4, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bf14      	ite	ne
 80096e0:	2202      	movne	r2, #2
 80096e2:	2201      	moveq	r2, #1
 80096e4:	6122      	str	r2, [r4, #16]
 80096e6:	b1bd      	cbz	r5, 8009718 <__d2b+0x94>
 80096e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096ec:	4405      	add	r5, r0
 80096ee:	603d      	str	r5, [r7, #0]
 80096f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096f4:	6030      	str	r0, [r6, #0]
 80096f6:	4620      	mov	r0, r4
 80096f8:	b003      	add	sp, #12
 80096fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009702:	e7d6      	b.n	80096b2 <__d2b+0x2e>
 8009704:	6161      	str	r1, [r4, #20]
 8009706:	e7e7      	b.n	80096d8 <__d2b+0x54>
 8009708:	a801      	add	r0, sp, #4
 800970a:	f7ff fcf1 	bl	80090f0 <__lo0bits>
 800970e:	9b01      	ldr	r3, [sp, #4]
 8009710:	6163      	str	r3, [r4, #20]
 8009712:	3020      	adds	r0, #32
 8009714:	2201      	movs	r2, #1
 8009716:	e7e5      	b.n	80096e4 <__d2b+0x60>
 8009718:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800971c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009720:	6038      	str	r0, [r7, #0]
 8009722:	6918      	ldr	r0, [r3, #16]
 8009724:	f7ff fcc4 	bl	80090b0 <__hi0bits>
 8009728:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800972c:	e7e2      	b.n	80096f4 <__d2b+0x70>
 800972e:	bf00      	nop
 8009730:	0800b8b9 	.word	0x0800b8b9
 8009734:	0800b8ca 	.word	0x0800b8ca

08009738 <__ratio>:
 8009738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	4688      	mov	r8, r1
 800973e:	4669      	mov	r1, sp
 8009740:	4681      	mov	r9, r0
 8009742:	f7ff ff55 	bl	80095f0 <__b2d>
 8009746:	a901      	add	r1, sp, #4
 8009748:	4640      	mov	r0, r8
 800974a:	ec55 4b10 	vmov	r4, r5, d0
 800974e:	f7ff ff4f 	bl	80095f0 <__b2d>
 8009752:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009756:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800975a:	eba3 0c02 	sub.w	ip, r3, r2
 800975e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009762:	1a9b      	subs	r3, r3, r2
 8009764:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009768:	ec51 0b10 	vmov	r0, r1, d0
 800976c:	2b00      	cmp	r3, #0
 800976e:	bfd6      	itet	le
 8009770:	460a      	movle	r2, r1
 8009772:	462a      	movgt	r2, r5
 8009774:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009778:	468b      	mov	fp, r1
 800977a:	462f      	mov	r7, r5
 800977c:	bfd4      	ite	le
 800977e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009782:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009786:	4620      	mov	r0, r4
 8009788:	ee10 2a10 	vmov	r2, s0
 800978c:	465b      	mov	r3, fp
 800978e:	4639      	mov	r1, r7
 8009790:	f7f7 f87c 	bl	800088c <__aeabi_ddiv>
 8009794:	ec41 0b10 	vmov	d0, r0, r1
 8009798:	b003      	add	sp, #12
 800979a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800979e <__copybits>:
 800979e:	3901      	subs	r1, #1
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	1149      	asrs	r1, r1, #5
 80097a4:	6914      	ldr	r4, [r2, #16]
 80097a6:	3101      	adds	r1, #1
 80097a8:	f102 0314 	add.w	r3, r2, #20
 80097ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80097b4:	1f05      	subs	r5, r0, #4
 80097b6:	42a3      	cmp	r3, r4
 80097b8:	d30c      	bcc.n	80097d4 <__copybits+0x36>
 80097ba:	1aa3      	subs	r3, r4, r2
 80097bc:	3b11      	subs	r3, #17
 80097be:	f023 0303 	bic.w	r3, r3, #3
 80097c2:	3211      	adds	r2, #17
 80097c4:	42a2      	cmp	r2, r4
 80097c6:	bf88      	it	hi
 80097c8:	2300      	movhi	r3, #0
 80097ca:	4418      	add	r0, r3
 80097cc:	2300      	movs	r3, #0
 80097ce:	4288      	cmp	r0, r1
 80097d0:	d305      	bcc.n	80097de <__copybits+0x40>
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	f853 6b04 	ldr.w	r6, [r3], #4
 80097d8:	f845 6f04 	str.w	r6, [r5, #4]!
 80097dc:	e7eb      	b.n	80097b6 <__copybits+0x18>
 80097de:	f840 3b04 	str.w	r3, [r0], #4
 80097e2:	e7f4      	b.n	80097ce <__copybits+0x30>

080097e4 <__any_on>:
 80097e4:	f100 0214 	add.w	r2, r0, #20
 80097e8:	6900      	ldr	r0, [r0, #16]
 80097ea:	114b      	asrs	r3, r1, #5
 80097ec:	4298      	cmp	r0, r3
 80097ee:	b510      	push	{r4, lr}
 80097f0:	db11      	blt.n	8009816 <__any_on+0x32>
 80097f2:	dd0a      	ble.n	800980a <__any_on+0x26>
 80097f4:	f011 011f 	ands.w	r1, r1, #31
 80097f8:	d007      	beq.n	800980a <__any_on+0x26>
 80097fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097fe:	fa24 f001 	lsr.w	r0, r4, r1
 8009802:	fa00 f101 	lsl.w	r1, r0, r1
 8009806:	428c      	cmp	r4, r1
 8009808:	d10b      	bne.n	8009822 <__any_on+0x3e>
 800980a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800980e:	4293      	cmp	r3, r2
 8009810:	d803      	bhi.n	800981a <__any_on+0x36>
 8009812:	2000      	movs	r0, #0
 8009814:	bd10      	pop	{r4, pc}
 8009816:	4603      	mov	r3, r0
 8009818:	e7f7      	b.n	800980a <__any_on+0x26>
 800981a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800981e:	2900      	cmp	r1, #0
 8009820:	d0f5      	beq.n	800980e <__any_on+0x2a>
 8009822:	2001      	movs	r0, #1
 8009824:	e7f6      	b.n	8009814 <__any_on+0x30>

08009826 <sulp>:
 8009826:	b570      	push	{r4, r5, r6, lr}
 8009828:	4604      	mov	r4, r0
 800982a:	460d      	mov	r5, r1
 800982c:	ec45 4b10 	vmov	d0, r4, r5
 8009830:	4616      	mov	r6, r2
 8009832:	f7ff feb7 	bl	80095a4 <__ulp>
 8009836:	ec51 0b10 	vmov	r0, r1, d0
 800983a:	b17e      	cbz	r6, 800985c <sulp+0x36>
 800983c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009840:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009844:	2b00      	cmp	r3, #0
 8009846:	dd09      	ble.n	800985c <sulp+0x36>
 8009848:	051b      	lsls	r3, r3, #20
 800984a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800984e:	2400      	movs	r4, #0
 8009850:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009854:	4622      	mov	r2, r4
 8009856:	462b      	mov	r3, r5
 8009858:	f7f6 feee 	bl	8000638 <__aeabi_dmul>
 800985c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009860 <_strtod_l>:
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	ed2d 8b02 	vpush	{d8}
 8009868:	b09b      	sub	sp, #108	; 0x6c
 800986a:	4604      	mov	r4, r0
 800986c:	9213      	str	r2, [sp, #76]	; 0x4c
 800986e:	2200      	movs	r2, #0
 8009870:	9216      	str	r2, [sp, #88]	; 0x58
 8009872:	460d      	mov	r5, r1
 8009874:	f04f 0800 	mov.w	r8, #0
 8009878:	f04f 0900 	mov.w	r9, #0
 800987c:	460a      	mov	r2, r1
 800987e:	9215      	str	r2, [sp, #84]	; 0x54
 8009880:	7811      	ldrb	r1, [r2, #0]
 8009882:	292b      	cmp	r1, #43	; 0x2b
 8009884:	d04c      	beq.n	8009920 <_strtod_l+0xc0>
 8009886:	d83a      	bhi.n	80098fe <_strtod_l+0x9e>
 8009888:	290d      	cmp	r1, #13
 800988a:	d834      	bhi.n	80098f6 <_strtod_l+0x96>
 800988c:	2908      	cmp	r1, #8
 800988e:	d834      	bhi.n	80098fa <_strtod_l+0x9a>
 8009890:	2900      	cmp	r1, #0
 8009892:	d03d      	beq.n	8009910 <_strtod_l+0xb0>
 8009894:	2200      	movs	r2, #0
 8009896:	920a      	str	r2, [sp, #40]	; 0x28
 8009898:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800989a:	7832      	ldrb	r2, [r6, #0]
 800989c:	2a30      	cmp	r2, #48	; 0x30
 800989e:	f040 80b4 	bne.w	8009a0a <_strtod_l+0x1aa>
 80098a2:	7872      	ldrb	r2, [r6, #1]
 80098a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80098a8:	2a58      	cmp	r2, #88	; 0x58
 80098aa:	d170      	bne.n	800998e <_strtod_l+0x12e>
 80098ac:	9302      	str	r3, [sp, #8]
 80098ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	ab16      	add	r3, sp, #88	; 0x58
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	4a8e      	ldr	r2, [pc, #568]	; (8009af0 <_strtod_l+0x290>)
 80098b8:	ab17      	add	r3, sp, #92	; 0x5c
 80098ba:	a915      	add	r1, sp, #84	; 0x54
 80098bc:	4620      	mov	r0, r4
 80098be:	f001 f93f 	bl	800ab40 <__gethex>
 80098c2:	f010 070f 	ands.w	r7, r0, #15
 80098c6:	4605      	mov	r5, r0
 80098c8:	d005      	beq.n	80098d6 <_strtod_l+0x76>
 80098ca:	2f06      	cmp	r7, #6
 80098cc:	d12a      	bne.n	8009924 <_strtod_l+0xc4>
 80098ce:	3601      	adds	r6, #1
 80098d0:	2300      	movs	r3, #0
 80098d2:	9615      	str	r6, [sp, #84]	; 0x54
 80098d4:	930a      	str	r3, [sp, #40]	; 0x28
 80098d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f040 857f 	bne.w	800a3dc <_strtod_l+0xb7c>
 80098de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e0:	b1db      	cbz	r3, 800991a <_strtod_l+0xba>
 80098e2:	4642      	mov	r2, r8
 80098e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80098e8:	ec43 2b10 	vmov	d0, r2, r3
 80098ec:	b01b      	add	sp, #108	; 0x6c
 80098ee:	ecbd 8b02 	vpop	{d8}
 80098f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f6:	2920      	cmp	r1, #32
 80098f8:	d1cc      	bne.n	8009894 <_strtod_l+0x34>
 80098fa:	3201      	adds	r2, #1
 80098fc:	e7bf      	b.n	800987e <_strtod_l+0x1e>
 80098fe:	292d      	cmp	r1, #45	; 0x2d
 8009900:	d1c8      	bne.n	8009894 <_strtod_l+0x34>
 8009902:	2101      	movs	r1, #1
 8009904:	910a      	str	r1, [sp, #40]	; 0x28
 8009906:	1c51      	adds	r1, r2, #1
 8009908:	9115      	str	r1, [sp, #84]	; 0x54
 800990a:	7852      	ldrb	r2, [r2, #1]
 800990c:	2a00      	cmp	r2, #0
 800990e:	d1c3      	bne.n	8009898 <_strtod_l+0x38>
 8009910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009912:	9515      	str	r5, [sp, #84]	; 0x54
 8009914:	2b00      	cmp	r3, #0
 8009916:	f040 855f 	bne.w	800a3d8 <_strtod_l+0xb78>
 800991a:	4642      	mov	r2, r8
 800991c:	464b      	mov	r3, r9
 800991e:	e7e3      	b.n	80098e8 <_strtod_l+0x88>
 8009920:	2100      	movs	r1, #0
 8009922:	e7ef      	b.n	8009904 <_strtod_l+0xa4>
 8009924:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009926:	b13a      	cbz	r2, 8009938 <_strtod_l+0xd8>
 8009928:	2135      	movs	r1, #53	; 0x35
 800992a:	a818      	add	r0, sp, #96	; 0x60
 800992c:	f7ff ff37 	bl	800979e <__copybits>
 8009930:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009932:	4620      	mov	r0, r4
 8009934:	f7ff fb0a 	bl	8008f4c <_Bfree>
 8009938:	3f01      	subs	r7, #1
 800993a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800993c:	2f04      	cmp	r7, #4
 800993e:	d806      	bhi.n	800994e <_strtod_l+0xee>
 8009940:	e8df f007 	tbb	[pc, r7]
 8009944:	201d0314 	.word	0x201d0314
 8009948:	14          	.byte	0x14
 8009949:	00          	.byte	0x00
 800994a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800994e:	05e9      	lsls	r1, r5, #23
 8009950:	bf48      	it	mi
 8009952:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009956:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800995a:	0d1b      	lsrs	r3, r3, #20
 800995c:	051b      	lsls	r3, r3, #20
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1b9      	bne.n	80098d6 <_strtod_l+0x76>
 8009962:	f7fe fb03 	bl	8007f6c <__errno>
 8009966:	2322      	movs	r3, #34	; 0x22
 8009968:	6003      	str	r3, [r0, #0]
 800996a:	e7b4      	b.n	80098d6 <_strtod_l+0x76>
 800996c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009970:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009974:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009978:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800997c:	e7e7      	b.n	800994e <_strtod_l+0xee>
 800997e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009af8 <_strtod_l+0x298>
 8009982:	e7e4      	b.n	800994e <_strtod_l+0xee>
 8009984:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009988:	f04f 38ff 	mov.w	r8, #4294967295
 800998c:	e7df      	b.n	800994e <_strtod_l+0xee>
 800998e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	9215      	str	r2, [sp, #84]	; 0x54
 8009994:	785b      	ldrb	r3, [r3, #1]
 8009996:	2b30      	cmp	r3, #48	; 0x30
 8009998:	d0f9      	beq.n	800998e <_strtod_l+0x12e>
 800999a:	2b00      	cmp	r3, #0
 800999c:	d09b      	beq.n	80098d6 <_strtod_l+0x76>
 800999e:	2301      	movs	r3, #1
 80099a0:	f04f 0a00 	mov.w	sl, #0
 80099a4:	9304      	str	r3, [sp, #16]
 80099a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80099aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80099ae:	46d3      	mov	fp, sl
 80099b0:	220a      	movs	r2, #10
 80099b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80099b4:	7806      	ldrb	r6, [r0, #0]
 80099b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80099ba:	b2d9      	uxtb	r1, r3
 80099bc:	2909      	cmp	r1, #9
 80099be:	d926      	bls.n	8009a0e <_strtod_l+0x1ae>
 80099c0:	494c      	ldr	r1, [pc, #304]	; (8009af4 <_strtod_l+0x294>)
 80099c2:	2201      	movs	r2, #1
 80099c4:	f000 ffe6 	bl	800a994 <strncmp>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d030      	beq.n	8009a2e <_strtod_l+0x1ce>
 80099cc:	2000      	movs	r0, #0
 80099ce:	4632      	mov	r2, r6
 80099d0:	9005      	str	r0, [sp, #20]
 80099d2:	465e      	mov	r6, fp
 80099d4:	4603      	mov	r3, r0
 80099d6:	2a65      	cmp	r2, #101	; 0x65
 80099d8:	d001      	beq.n	80099de <_strtod_l+0x17e>
 80099da:	2a45      	cmp	r2, #69	; 0x45
 80099dc:	d113      	bne.n	8009a06 <_strtod_l+0x1a6>
 80099de:	b91e      	cbnz	r6, 80099e8 <_strtod_l+0x188>
 80099e0:	9a04      	ldr	r2, [sp, #16]
 80099e2:	4302      	orrs	r2, r0
 80099e4:	d094      	beq.n	8009910 <_strtod_l+0xb0>
 80099e6:	2600      	movs	r6, #0
 80099e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80099ea:	1c6a      	adds	r2, r5, #1
 80099ec:	9215      	str	r2, [sp, #84]	; 0x54
 80099ee:	786a      	ldrb	r2, [r5, #1]
 80099f0:	2a2b      	cmp	r2, #43	; 0x2b
 80099f2:	d074      	beq.n	8009ade <_strtod_l+0x27e>
 80099f4:	2a2d      	cmp	r2, #45	; 0x2d
 80099f6:	d078      	beq.n	8009aea <_strtod_l+0x28a>
 80099f8:	f04f 0c00 	mov.w	ip, #0
 80099fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009a00:	2909      	cmp	r1, #9
 8009a02:	d97f      	bls.n	8009b04 <_strtod_l+0x2a4>
 8009a04:	9515      	str	r5, [sp, #84]	; 0x54
 8009a06:	2700      	movs	r7, #0
 8009a08:	e09e      	b.n	8009b48 <_strtod_l+0x2e8>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	e7c8      	b.n	80099a0 <_strtod_l+0x140>
 8009a0e:	f1bb 0f08 	cmp.w	fp, #8
 8009a12:	bfd8      	it	le
 8009a14:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009a16:	f100 0001 	add.w	r0, r0, #1
 8009a1a:	bfda      	itte	le
 8009a1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009a20:	9309      	strle	r3, [sp, #36]	; 0x24
 8009a22:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009a26:	f10b 0b01 	add.w	fp, fp, #1
 8009a2a:	9015      	str	r0, [sp, #84]	; 0x54
 8009a2c:	e7c1      	b.n	80099b2 <_strtod_l+0x152>
 8009a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	9215      	str	r2, [sp, #84]	; 0x54
 8009a34:	785a      	ldrb	r2, [r3, #1]
 8009a36:	f1bb 0f00 	cmp.w	fp, #0
 8009a3a:	d037      	beq.n	8009aac <_strtod_l+0x24c>
 8009a3c:	9005      	str	r0, [sp, #20]
 8009a3e:	465e      	mov	r6, fp
 8009a40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009a44:	2b09      	cmp	r3, #9
 8009a46:	d912      	bls.n	8009a6e <_strtod_l+0x20e>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e7c4      	b.n	80099d6 <_strtod_l+0x176>
 8009a4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	9215      	str	r2, [sp, #84]	; 0x54
 8009a52:	785a      	ldrb	r2, [r3, #1]
 8009a54:	3001      	adds	r0, #1
 8009a56:	2a30      	cmp	r2, #48	; 0x30
 8009a58:	d0f8      	beq.n	8009a4c <_strtod_l+0x1ec>
 8009a5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009a5e:	2b08      	cmp	r3, #8
 8009a60:	f200 84c1 	bhi.w	800a3e6 <_strtod_l+0xb86>
 8009a64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a66:	9005      	str	r0, [sp, #20]
 8009a68:	2000      	movs	r0, #0
 8009a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	3a30      	subs	r2, #48	; 0x30
 8009a70:	f100 0301 	add.w	r3, r0, #1
 8009a74:	d014      	beq.n	8009aa0 <_strtod_l+0x240>
 8009a76:	9905      	ldr	r1, [sp, #20]
 8009a78:	4419      	add	r1, r3
 8009a7a:	9105      	str	r1, [sp, #20]
 8009a7c:	4633      	mov	r3, r6
 8009a7e:	eb00 0c06 	add.w	ip, r0, r6
 8009a82:	210a      	movs	r1, #10
 8009a84:	4563      	cmp	r3, ip
 8009a86:	d113      	bne.n	8009ab0 <_strtod_l+0x250>
 8009a88:	1833      	adds	r3, r6, r0
 8009a8a:	2b08      	cmp	r3, #8
 8009a8c:	f106 0601 	add.w	r6, r6, #1
 8009a90:	4406      	add	r6, r0
 8009a92:	dc1a      	bgt.n	8009aca <_strtod_l+0x26a>
 8009a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a96:	230a      	movs	r3, #10
 8009a98:	fb03 2301 	mla	r3, r3, r1, r2
 8009a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009aa2:	1c51      	adds	r1, r2, #1
 8009aa4:	9115      	str	r1, [sp, #84]	; 0x54
 8009aa6:	7852      	ldrb	r2, [r2, #1]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	e7c9      	b.n	8009a40 <_strtod_l+0x1e0>
 8009aac:	4658      	mov	r0, fp
 8009aae:	e7d2      	b.n	8009a56 <_strtod_l+0x1f6>
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	f103 0301 	add.w	r3, r3, #1
 8009ab6:	dc03      	bgt.n	8009ac0 <_strtod_l+0x260>
 8009ab8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009aba:	434f      	muls	r7, r1
 8009abc:	9709      	str	r7, [sp, #36]	; 0x24
 8009abe:	e7e1      	b.n	8009a84 <_strtod_l+0x224>
 8009ac0:	2b10      	cmp	r3, #16
 8009ac2:	bfd8      	it	le
 8009ac4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009ac8:	e7dc      	b.n	8009a84 <_strtod_l+0x224>
 8009aca:	2e10      	cmp	r6, #16
 8009acc:	bfdc      	itt	le
 8009ace:	230a      	movle	r3, #10
 8009ad0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009ad4:	e7e3      	b.n	8009a9e <_strtod_l+0x23e>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	2301      	movs	r3, #1
 8009adc:	e780      	b.n	80099e0 <_strtod_l+0x180>
 8009ade:	f04f 0c00 	mov.w	ip, #0
 8009ae2:	1caa      	adds	r2, r5, #2
 8009ae4:	9215      	str	r2, [sp, #84]	; 0x54
 8009ae6:	78aa      	ldrb	r2, [r5, #2]
 8009ae8:	e788      	b.n	80099fc <_strtod_l+0x19c>
 8009aea:	f04f 0c01 	mov.w	ip, #1
 8009aee:	e7f8      	b.n	8009ae2 <_strtod_l+0x282>
 8009af0:	0800ba28 	.word	0x0800ba28
 8009af4:	0800ba24 	.word	0x0800ba24
 8009af8:	7ff00000 	.word	0x7ff00000
 8009afc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009afe:	1c51      	adds	r1, r2, #1
 8009b00:	9115      	str	r1, [sp, #84]	; 0x54
 8009b02:	7852      	ldrb	r2, [r2, #1]
 8009b04:	2a30      	cmp	r2, #48	; 0x30
 8009b06:	d0f9      	beq.n	8009afc <_strtod_l+0x29c>
 8009b08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009b0c:	2908      	cmp	r1, #8
 8009b0e:	f63f af7a 	bhi.w	8009a06 <_strtod_l+0x1a6>
 8009b12:	3a30      	subs	r2, #48	; 0x30
 8009b14:	9208      	str	r2, [sp, #32]
 8009b16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b18:	920c      	str	r2, [sp, #48]	; 0x30
 8009b1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b1c:	1c57      	adds	r7, r2, #1
 8009b1e:	9715      	str	r7, [sp, #84]	; 0x54
 8009b20:	7852      	ldrb	r2, [r2, #1]
 8009b22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009b26:	f1be 0f09 	cmp.w	lr, #9
 8009b2a:	d938      	bls.n	8009b9e <_strtod_l+0x33e>
 8009b2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b2e:	1a7f      	subs	r7, r7, r1
 8009b30:	2f08      	cmp	r7, #8
 8009b32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009b36:	dc03      	bgt.n	8009b40 <_strtod_l+0x2e0>
 8009b38:	9908      	ldr	r1, [sp, #32]
 8009b3a:	428f      	cmp	r7, r1
 8009b3c:	bfa8      	it	ge
 8009b3e:	460f      	movge	r7, r1
 8009b40:	f1bc 0f00 	cmp.w	ip, #0
 8009b44:	d000      	beq.n	8009b48 <_strtod_l+0x2e8>
 8009b46:	427f      	negs	r7, r7
 8009b48:	2e00      	cmp	r6, #0
 8009b4a:	d14f      	bne.n	8009bec <_strtod_l+0x38c>
 8009b4c:	9904      	ldr	r1, [sp, #16]
 8009b4e:	4301      	orrs	r1, r0
 8009b50:	f47f aec1 	bne.w	80098d6 <_strtod_l+0x76>
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f47f aedb 	bne.w	8009910 <_strtod_l+0xb0>
 8009b5a:	2a69      	cmp	r2, #105	; 0x69
 8009b5c:	d029      	beq.n	8009bb2 <_strtod_l+0x352>
 8009b5e:	dc26      	bgt.n	8009bae <_strtod_l+0x34e>
 8009b60:	2a49      	cmp	r2, #73	; 0x49
 8009b62:	d026      	beq.n	8009bb2 <_strtod_l+0x352>
 8009b64:	2a4e      	cmp	r2, #78	; 0x4e
 8009b66:	f47f aed3 	bne.w	8009910 <_strtod_l+0xb0>
 8009b6a:	499b      	ldr	r1, [pc, #620]	; (8009dd8 <_strtod_l+0x578>)
 8009b6c:	a815      	add	r0, sp, #84	; 0x54
 8009b6e:	f001 fa27 	bl	800afc0 <__match>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	f43f aecc 	beq.w	8009910 <_strtod_l+0xb0>
 8009b78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	2b28      	cmp	r3, #40	; 0x28
 8009b7e:	d12f      	bne.n	8009be0 <_strtod_l+0x380>
 8009b80:	4996      	ldr	r1, [pc, #600]	; (8009ddc <_strtod_l+0x57c>)
 8009b82:	aa18      	add	r2, sp, #96	; 0x60
 8009b84:	a815      	add	r0, sp, #84	; 0x54
 8009b86:	f001 fa2f 	bl	800afe8 <__hexnan>
 8009b8a:	2805      	cmp	r0, #5
 8009b8c:	d128      	bne.n	8009be0 <_strtod_l+0x380>
 8009b8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009b98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009b9c:	e69b      	b.n	80098d6 <_strtod_l+0x76>
 8009b9e:	9f08      	ldr	r7, [sp, #32]
 8009ba0:	210a      	movs	r1, #10
 8009ba2:	fb01 2107 	mla	r1, r1, r7, r2
 8009ba6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009baa:	9208      	str	r2, [sp, #32]
 8009bac:	e7b5      	b.n	8009b1a <_strtod_l+0x2ba>
 8009bae:	2a6e      	cmp	r2, #110	; 0x6e
 8009bb0:	e7d9      	b.n	8009b66 <_strtod_l+0x306>
 8009bb2:	498b      	ldr	r1, [pc, #556]	; (8009de0 <_strtod_l+0x580>)
 8009bb4:	a815      	add	r0, sp, #84	; 0x54
 8009bb6:	f001 fa03 	bl	800afc0 <__match>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	f43f aea8 	beq.w	8009910 <_strtod_l+0xb0>
 8009bc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bc2:	4988      	ldr	r1, [pc, #544]	; (8009de4 <_strtod_l+0x584>)
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	a815      	add	r0, sp, #84	; 0x54
 8009bc8:	9315      	str	r3, [sp, #84]	; 0x54
 8009bca:	f001 f9f9 	bl	800afc0 <__match>
 8009bce:	b910      	cbnz	r0, 8009bd6 <_strtod_l+0x376>
 8009bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	9315      	str	r3, [sp, #84]	; 0x54
 8009bd6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009df4 <_strtod_l+0x594>
 8009bda:	f04f 0800 	mov.w	r8, #0
 8009bde:	e67a      	b.n	80098d6 <_strtod_l+0x76>
 8009be0:	4881      	ldr	r0, [pc, #516]	; (8009de8 <_strtod_l+0x588>)
 8009be2:	f000 ff09 	bl	800a9f8 <nan>
 8009be6:	ec59 8b10 	vmov	r8, r9, d0
 8009bea:	e674      	b.n	80098d6 <_strtod_l+0x76>
 8009bec:	9b05      	ldr	r3, [sp, #20]
 8009bee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bf0:	1afb      	subs	r3, r7, r3
 8009bf2:	f1bb 0f00 	cmp.w	fp, #0
 8009bf6:	bf08      	it	eq
 8009bf8:	46b3      	moveq	fp, r6
 8009bfa:	2e10      	cmp	r6, #16
 8009bfc:	9308      	str	r3, [sp, #32]
 8009bfe:	4635      	mov	r5, r6
 8009c00:	bfa8      	it	ge
 8009c02:	2510      	movge	r5, #16
 8009c04:	f7f6 fc9e 	bl	8000544 <__aeabi_ui2d>
 8009c08:	2e09      	cmp	r6, #9
 8009c0a:	4680      	mov	r8, r0
 8009c0c:	4689      	mov	r9, r1
 8009c0e:	dd13      	ble.n	8009c38 <_strtod_l+0x3d8>
 8009c10:	4b76      	ldr	r3, [pc, #472]	; (8009dec <_strtod_l+0x58c>)
 8009c12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009c16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009c1a:	f7f6 fd0d 	bl	8000638 <__aeabi_dmul>
 8009c1e:	4680      	mov	r8, r0
 8009c20:	4650      	mov	r0, sl
 8009c22:	4689      	mov	r9, r1
 8009c24:	f7f6 fc8e 	bl	8000544 <__aeabi_ui2d>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	4649      	mov	r1, r9
 8009c30:	f7f6 fb4c 	bl	80002cc <__adddf3>
 8009c34:	4680      	mov	r8, r0
 8009c36:	4689      	mov	r9, r1
 8009c38:	2e0f      	cmp	r6, #15
 8009c3a:	dc38      	bgt.n	8009cae <_strtod_l+0x44e>
 8009c3c:	9b08      	ldr	r3, [sp, #32]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f43f ae49 	beq.w	80098d6 <_strtod_l+0x76>
 8009c44:	dd24      	ble.n	8009c90 <_strtod_l+0x430>
 8009c46:	2b16      	cmp	r3, #22
 8009c48:	dc0b      	bgt.n	8009c62 <_strtod_l+0x402>
 8009c4a:	4968      	ldr	r1, [pc, #416]	; (8009dec <_strtod_l+0x58c>)
 8009c4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c54:	4642      	mov	r2, r8
 8009c56:	464b      	mov	r3, r9
 8009c58:	f7f6 fcee 	bl	8000638 <__aeabi_dmul>
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	4689      	mov	r9, r1
 8009c60:	e639      	b.n	80098d6 <_strtod_l+0x76>
 8009c62:	9a08      	ldr	r2, [sp, #32]
 8009c64:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	db20      	blt.n	8009cae <_strtod_l+0x44e>
 8009c6c:	4c5f      	ldr	r4, [pc, #380]	; (8009dec <_strtod_l+0x58c>)
 8009c6e:	f1c6 060f 	rsb	r6, r6, #15
 8009c72:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009c76:	4642      	mov	r2, r8
 8009c78:	464b      	mov	r3, r9
 8009c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c7e:	f7f6 fcdb 	bl	8000638 <__aeabi_dmul>
 8009c82:	9b08      	ldr	r3, [sp, #32]
 8009c84:	1b9e      	subs	r6, r3, r6
 8009c86:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009c8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c8e:	e7e3      	b.n	8009c58 <_strtod_l+0x3f8>
 8009c90:	9b08      	ldr	r3, [sp, #32]
 8009c92:	3316      	adds	r3, #22
 8009c94:	db0b      	blt.n	8009cae <_strtod_l+0x44e>
 8009c96:	9b05      	ldr	r3, [sp, #20]
 8009c98:	1bdf      	subs	r7, r3, r7
 8009c9a:	4b54      	ldr	r3, [pc, #336]	; (8009dec <_strtod_l+0x58c>)
 8009c9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	4649      	mov	r1, r9
 8009ca8:	f7f6 fdf0 	bl	800088c <__aeabi_ddiv>
 8009cac:	e7d6      	b.n	8009c5c <_strtod_l+0x3fc>
 8009cae:	9b08      	ldr	r3, [sp, #32]
 8009cb0:	1b75      	subs	r5, r6, r5
 8009cb2:	441d      	add	r5, r3
 8009cb4:	2d00      	cmp	r5, #0
 8009cb6:	dd70      	ble.n	8009d9a <_strtod_l+0x53a>
 8009cb8:	f015 030f 	ands.w	r3, r5, #15
 8009cbc:	d00a      	beq.n	8009cd4 <_strtod_l+0x474>
 8009cbe:	494b      	ldr	r1, [pc, #300]	; (8009dec <_strtod_l+0x58c>)
 8009cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009cc4:	4642      	mov	r2, r8
 8009cc6:	464b      	mov	r3, r9
 8009cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ccc:	f7f6 fcb4 	bl	8000638 <__aeabi_dmul>
 8009cd0:	4680      	mov	r8, r0
 8009cd2:	4689      	mov	r9, r1
 8009cd4:	f035 050f 	bics.w	r5, r5, #15
 8009cd8:	d04d      	beq.n	8009d76 <_strtod_l+0x516>
 8009cda:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009cde:	dd22      	ble.n	8009d26 <_strtod_l+0x4c6>
 8009ce0:	2500      	movs	r5, #0
 8009ce2:	46ab      	mov	fp, r5
 8009ce4:	9509      	str	r5, [sp, #36]	; 0x24
 8009ce6:	9505      	str	r5, [sp, #20]
 8009ce8:	2322      	movs	r3, #34	; 0x22
 8009cea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009df4 <_strtod_l+0x594>
 8009cee:	6023      	str	r3, [r4, #0]
 8009cf0:	f04f 0800 	mov.w	r8, #0
 8009cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f43f aded 	beq.w	80098d6 <_strtod_l+0x76>
 8009cfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f7ff f924 	bl	8008f4c <_Bfree>
 8009d04:	9905      	ldr	r1, [sp, #20]
 8009d06:	4620      	mov	r0, r4
 8009d08:	f7ff f920 	bl	8008f4c <_Bfree>
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f7ff f91c 	bl	8008f4c <_Bfree>
 8009d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d16:	4620      	mov	r0, r4
 8009d18:	f7ff f918 	bl	8008f4c <_Bfree>
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7ff f914 	bl	8008f4c <_Bfree>
 8009d24:	e5d7      	b.n	80098d6 <_strtod_l+0x76>
 8009d26:	4b32      	ldr	r3, [pc, #200]	; (8009df0 <_strtod_l+0x590>)
 8009d28:	9304      	str	r3, [sp, #16]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	112d      	asrs	r5, r5, #4
 8009d2e:	4640      	mov	r0, r8
 8009d30:	4649      	mov	r1, r9
 8009d32:	469a      	mov	sl, r3
 8009d34:	2d01      	cmp	r5, #1
 8009d36:	dc21      	bgt.n	8009d7c <_strtod_l+0x51c>
 8009d38:	b10b      	cbz	r3, 8009d3e <_strtod_l+0x4de>
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	4689      	mov	r9, r1
 8009d3e:	492c      	ldr	r1, [pc, #176]	; (8009df0 <_strtod_l+0x590>)
 8009d40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009d44:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009d48:	4642      	mov	r2, r8
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d50:	f7f6 fc72 	bl	8000638 <__aeabi_dmul>
 8009d54:	4b27      	ldr	r3, [pc, #156]	; (8009df4 <_strtod_l+0x594>)
 8009d56:	460a      	mov	r2, r1
 8009d58:	400b      	ands	r3, r1
 8009d5a:	4927      	ldr	r1, [pc, #156]	; (8009df8 <_strtod_l+0x598>)
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	4680      	mov	r8, r0
 8009d60:	d8be      	bhi.n	8009ce0 <_strtod_l+0x480>
 8009d62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009d66:	428b      	cmp	r3, r1
 8009d68:	bf86      	itte	hi
 8009d6a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009dfc <_strtod_l+0x59c>
 8009d6e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009d72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009d76:	2300      	movs	r3, #0
 8009d78:	9304      	str	r3, [sp, #16]
 8009d7a:	e07b      	b.n	8009e74 <_strtod_l+0x614>
 8009d7c:	07ea      	lsls	r2, r5, #31
 8009d7e:	d505      	bpl.n	8009d8c <_strtod_l+0x52c>
 8009d80:	9b04      	ldr	r3, [sp, #16]
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	f7f6 fc57 	bl	8000638 <__aeabi_dmul>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	9a04      	ldr	r2, [sp, #16]
 8009d8e:	3208      	adds	r2, #8
 8009d90:	f10a 0a01 	add.w	sl, sl, #1
 8009d94:	106d      	asrs	r5, r5, #1
 8009d96:	9204      	str	r2, [sp, #16]
 8009d98:	e7cc      	b.n	8009d34 <_strtod_l+0x4d4>
 8009d9a:	d0ec      	beq.n	8009d76 <_strtod_l+0x516>
 8009d9c:	426d      	negs	r5, r5
 8009d9e:	f015 020f 	ands.w	r2, r5, #15
 8009da2:	d00a      	beq.n	8009dba <_strtod_l+0x55a>
 8009da4:	4b11      	ldr	r3, [pc, #68]	; (8009dec <_strtod_l+0x58c>)
 8009da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009daa:	4640      	mov	r0, r8
 8009dac:	4649      	mov	r1, r9
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	f7f6 fd6b 	bl	800088c <__aeabi_ddiv>
 8009db6:	4680      	mov	r8, r0
 8009db8:	4689      	mov	r9, r1
 8009dba:	112d      	asrs	r5, r5, #4
 8009dbc:	d0db      	beq.n	8009d76 <_strtod_l+0x516>
 8009dbe:	2d1f      	cmp	r5, #31
 8009dc0:	dd1e      	ble.n	8009e00 <_strtod_l+0x5a0>
 8009dc2:	2500      	movs	r5, #0
 8009dc4:	46ab      	mov	fp, r5
 8009dc6:	9509      	str	r5, [sp, #36]	; 0x24
 8009dc8:	9505      	str	r5, [sp, #20]
 8009dca:	2322      	movs	r3, #34	; 0x22
 8009dcc:	f04f 0800 	mov.w	r8, #0
 8009dd0:	f04f 0900 	mov.w	r9, #0
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	e78d      	b.n	8009cf4 <_strtod_l+0x494>
 8009dd8:	0800b811 	.word	0x0800b811
 8009ddc:	0800ba3c 	.word	0x0800ba3c
 8009de0:	0800b809 	.word	0x0800b809
 8009de4:	0800b840 	.word	0x0800b840
 8009de8:	0800bbcd 	.word	0x0800bbcd
 8009dec:	0800b950 	.word	0x0800b950
 8009df0:	0800b928 	.word	0x0800b928
 8009df4:	7ff00000 	.word	0x7ff00000
 8009df8:	7ca00000 	.word	0x7ca00000
 8009dfc:	7fefffff 	.word	0x7fefffff
 8009e00:	f015 0310 	ands.w	r3, r5, #16
 8009e04:	bf18      	it	ne
 8009e06:	236a      	movne	r3, #106	; 0x6a
 8009e08:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a1ac <_strtod_l+0x94c>
 8009e0c:	9304      	str	r3, [sp, #16]
 8009e0e:	4640      	mov	r0, r8
 8009e10:	4649      	mov	r1, r9
 8009e12:	2300      	movs	r3, #0
 8009e14:	07ea      	lsls	r2, r5, #31
 8009e16:	d504      	bpl.n	8009e22 <_strtod_l+0x5c2>
 8009e18:	e9da 2300 	ldrd	r2, r3, [sl]
 8009e1c:	f7f6 fc0c 	bl	8000638 <__aeabi_dmul>
 8009e20:	2301      	movs	r3, #1
 8009e22:	106d      	asrs	r5, r5, #1
 8009e24:	f10a 0a08 	add.w	sl, sl, #8
 8009e28:	d1f4      	bne.n	8009e14 <_strtod_l+0x5b4>
 8009e2a:	b10b      	cbz	r3, 8009e30 <_strtod_l+0x5d0>
 8009e2c:	4680      	mov	r8, r0
 8009e2e:	4689      	mov	r9, r1
 8009e30:	9b04      	ldr	r3, [sp, #16]
 8009e32:	b1bb      	cbz	r3, 8009e64 <_strtod_l+0x604>
 8009e34:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009e38:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	4649      	mov	r1, r9
 8009e40:	dd10      	ble.n	8009e64 <_strtod_l+0x604>
 8009e42:	2b1f      	cmp	r3, #31
 8009e44:	f340 811e 	ble.w	800a084 <_strtod_l+0x824>
 8009e48:	2b34      	cmp	r3, #52	; 0x34
 8009e4a:	bfde      	ittt	le
 8009e4c:	f04f 33ff 	movle.w	r3, #4294967295
 8009e50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009e54:	4093      	lslle	r3, r2
 8009e56:	f04f 0800 	mov.w	r8, #0
 8009e5a:	bfcc      	ite	gt
 8009e5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009e60:	ea03 0901 	andle.w	r9, r3, r1
 8009e64:	2200      	movs	r2, #0
 8009e66:	2300      	movs	r3, #0
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fe4c 	bl	8000b08 <__aeabi_dcmpeq>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d1a6      	bne.n	8009dc2 <_strtod_l+0x562>
 8009e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e7a:	4633      	mov	r3, r6
 8009e7c:	465a      	mov	r2, fp
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f7ff f8cc 	bl	800901c <__s2b>
 8009e84:	9009      	str	r0, [sp, #36]	; 0x24
 8009e86:	2800      	cmp	r0, #0
 8009e88:	f43f af2a 	beq.w	8009ce0 <_strtod_l+0x480>
 8009e8c:	9a08      	ldr	r2, [sp, #32]
 8009e8e:	9b05      	ldr	r3, [sp, #20]
 8009e90:	2a00      	cmp	r2, #0
 8009e92:	eba3 0307 	sub.w	r3, r3, r7
 8009e96:	bfa8      	it	ge
 8009e98:	2300      	movge	r3, #0
 8009e9a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e9c:	2500      	movs	r5, #0
 8009e9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009ea2:	9312      	str	r3, [sp, #72]	; 0x48
 8009ea4:	46ab      	mov	fp, r5
 8009ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	6859      	ldr	r1, [r3, #4]
 8009eac:	f7ff f80e 	bl	8008ecc <_Balloc>
 8009eb0:	9005      	str	r0, [sp, #20]
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f43f af18 	beq.w	8009ce8 <_strtod_l+0x488>
 8009eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eba:	691a      	ldr	r2, [r3, #16]
 8009ebc:	3202      	adds	r2, #2
 8009ebe:	f103 010c 	add.w	r1, r3, #12
 8009ec2:	0092      	lsls	r2, r2, #2
 8009ec4:	300c      	adds	r0, #12
 8009ec6:	f000 fd87 	bl	800a9d8 <memcpy>
 8009eca:	ec49 8b10 	vmov	d0, r8, r9
 8009ece:	aa18      	add	r2, sp, #96	; 0x60
 8009ed0:	a917      	add	r1, sp, #92	; 0x5c
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f7ff fbd6 	bl	8009684 <__d2b>
 8009ed8:	ec49 8b18 	vmov	d8, r8, r9
 8009edc:	9016      	str	r0, [sp, #88]	; 0x58
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	f43f af02 	beq.w	8009ce8 <_strtod_l+0x488>
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f7ff f930 	bl	800914c <__i2b>
 8009eec:	4683      	mov	fp, r0
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	f43f aefa 	beq.w	8009ce8 <_strtod_l+0x488>
 8009ef4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009ef6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ef8:	2e00      	cmp	r6, #0
 8009efa:	bfab      	itete	ge
 8009efc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009efe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009f00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009f02:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009f06:	bfac      	ite	ge
 8009f08:	eb06 0a03 	addge.w	sl, r6, r3
 8009f0c:	1b9f      	sublt	r7, r3, r6
 8009f0e:	9b04      	ldr	r3, [sp, #16]
 8009f10:	1af6      	subs	r6, r6, r3
 8009f12:	4416      	add	r6, r2
 8009f14:	4ba0      	ldr	r3, [pc, #640]	; (800a198 <_strtod_l+0x938>)
 8009f16:	3e01      	subs	r6, #1
 8009f18:	429e      	cmp	r6, r3
 8009f1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009f1e:	f280 80c4 	bge.w	800a0aa <_strtod_l+0x84a>
 8009f22:	1b9b      	subs	r3, r3, r6
 8009f24:	2b1f      	cmp	r3, #31
 8009f26:	eba2 0203 	sub.w	r2, r2, r3
 8009f2a:	f04f 0101 	mov.w	r1, #1
 8009f2e:	f300 80b0 	bgt.w	800a092 <_strtod_l+0x832>
 8009f32:	fa01 f303 	lsl.w	r3, r1, r3
 8009f36:	930e      	str	r3, [sp, #56]	; 0x38
 8009f38:	2300      	movs	r3, #0
 8009f3a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f3c:	eb0a 0602 	add.w	r6, sl, r2
 8009f40:	9b04      	ldr	r3, [sp, #16]
 8009f42:	45b2      	cmp	sl, r6
 8009f44:	4417      	add	r7, r2
 8009f46:	441f      	add	r7, r3
 8009f48:	4653      	mov	r3, sl
 8009f4a:	bfa8      	it	ge
 8009f4c:	4633      	movge	r3, r6
 8009f4e:	42bb      	cmp	r3, r7
 8009f50:	bfa8      	it	ge
 8009f52:	463b      	movge	r3, r7
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	bfc2      	ittt	gt
 8009f58:	1af6      	subgt	r6, r6, r3
 8009f5a:	1aff      	subgt	r7, r7, r3
 8009f5c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	dd17      	ble.n	8009f96 <_strtod_l+0x736>
 8009f66:	4659      	mov	r1, fp
 8009f68:	461a      	mov	r2, r3
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f7ff f9ae 	bl	80092cc <__pow5mult>
 8009f70:	4683      	mov	fp, r0
 8009f72:	2800      	cmp	r0, #0
 8009f74:	f43f aeb8 	beq.w	8009ce8 <_strtod_l+0x488>
 8009f78:	4601      	mov	r1, r0
 8009f7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f7ff f8fb 	bl	8009178 <__multiply>
 8009f82:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f84:	2800      	cmp	r0, #0
 8009f86:	f43f aeaf 	beq.w	8009ce8 <_strtod_l+0x488>
 8009f8a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f7fe ffdd 	bl	8008f4c <_Bfree>
 8009f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f94:	9316      	str	r3, [sp, #88]	; 0x58
 8009f96:	2e00      	cmp	r6, #0
 8009f98:	f300 808c 	bgt.w	800a0b4 <_strtod_l+0x854>
 8009f9c:	9b08      	ldr	r3, [sp, #32]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	dd08      	ble.n	8009fb4 <_strtod_l+0x754>
 8009fa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009fa4:	9905      	ldr	r1, [sp, #20]
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f7ff f990 	bl	80092cc <__pow5mult>
 8009fac:	9005      	str	r0, [sp, #20]
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	f43f ae9a 	beq.w	8009ce8 <_strtod_l+0x488>
 8009fb4:	2f00      	cmp	r7, #0
 8009fb6:	dd08      	ble.n	8009fca <_strtod_l+0x76a>
 8009fb8:	9905      	ldr	r1, [sp, #20]
 8009fba:	463a      	mov	r2, r7
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f7ff f9df 	bl	8009380 <__lshift>
 8009fc2:	9005      	str	r0, [sp, #20]
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	f43f ae8f 	beq.w	8009ce8 <_strtod_l+0x488>
 8009fca:	f1ba 0f00 	cmp.w	sl, #0
 8009fce:	dd08      	ble.n	8009fe2 <_strtod_l+0x782>
 8009fd0:	4659      	mov	r1, fp
 8009fd2:	4652      	mov	r2, sl
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f7ff f9d3 	bl	8009380 <__lshift>
 8009fda:	4683      	mov	fp, r0
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	f43f ae83 	beq.w	8009ce8 <_strtod_l+0x488>
 8009fe2:	9a05      	ldr	r2, [sp, #20]
 8009fe4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f7ff fa52 	bl	8009490 <__mdiff>
 8009fec:	4605      	mov	r5, r0
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	f43f ae7a 	beq.w	8009ce8 <_strtod_l+0x488>
 8009ff4:	68c3      	ldr	r3, [r0, #12]
 8009ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60c3      	str	r3, [r0, #12]
 8009ffc:	4659      	mov	r1, fp
 8009ffe:	f7ff fa2b 	bl	8009458 <__mcmp>
 800a002:	2800      	cmp	r0, #0
 800a004:	da60      	bge.n	800a0c8 <_strtod_l+0x868>
 800a006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a008:	ea53 0308 	orrs.w	r3, r3, r8
 800a00c:	f040 8084 	bne.w	800a118 <_strtod_l+0x8b8>
 800a010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a014:	2b00      	cmp	r3, #0
 800a016:	d17f      	bne.n	800a118 <_strtod_l+0x8b8>
 800a018:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a01c:	0d1b      	lsrs	r3, r3, #20
 800a01e:	051b      	lsls	r3, r3, #20
 800a020:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a024:	d978      	bls.n	800a118 <_strtod_l+0x8b8>
 800a026:	696b      	ldr	r3, [r5, #20]
 800a028:	b913      	cbnz	r3, 800a030 <_strtod_l+0x7d0>
 800a02a:	692b      	ldr	r3, [r5, #16]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	dd73      	ble.n	800a118 <_strtod_l+0x8b8>
 800a030:	4629      	mov	r1, r5
 800a032:	2201      	movs	r2, #1
 800a034:	4620      	mov	r0, r4
 800a036:	f7ff f9a3 	bl	8009380 <__lshift>
 800a03a:	4659      	mov	r1, fp
 800a03c:	4605      	mov	r5, r0
 800a03e:	f7ff fa0b 	bl	8009458 <__mcmp>
 800a042:	2800      	cmp	r0, #0
 800a044:	dd68      	ble.n	800a118 <_strtod_l+0x8b8>
 800a046:	9904      	ldr	r1, [sp, #16]
 800a048:	4a54      	ldr	r2, [pc, #336]	; (800a19c <_strtod_l+0x93c>)
 800a04a:	464b      	mov	r3, r9
 800a04c:	2900      	cmp	r1, #0
 800a04e:	f000 8084 	beq.w	800a15a <_strtod_l+0x8fa>
 800a052:	ea02 0109 	and.w	r1, r2, r9
 800a056:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a05a:	dc7e      	bgt.n	800a15a <_strtod_l+0x8fa>
 800a05c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a060:	f77f aeb3 	ble.w	8009dca <_strtod_l+0x56a>
 800a064:	4b4e      	ldr	r3, [pc, #312]	; (800a1a0 <_strtod_l+0x940>)
 800a066:	4640      	mov	r0, r8
 800a068:	4649      	mov	r1, r9
 800a06a:	2200      	movs	r2, #0
 800a06c:	f7f6 fae4 	bl	8000638 <__aeabi_dmul>
 800a070:	4b4a      	ldr	r3, [pc, #296]	; (800a19c <_strtod_l+0x93c>)
 800a072:	400b      	ands	r3, r1
 800a074:	4680      	mov	r8, r0
 800a076:	4689      	mov	r9, r1
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f47f ae3f 	bne.w	8009cfc <_strtod_l+0x49c>
 800a07e:	2322      	movs	r3, #34	; 0x22
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	e63b      	b.n	8009cfc <_strtod_l+0x49c>
 800a084:	f04f 32ff 	mov.w	r2, #4294967295
 800a088:	fa02 f303 	lsl.w	r3, r2, r3
 800a08c:	ea03 0808 	and.w	r8, r3, r8
 800a090:	e6e8      	b.n	8009e64 <_strtod_l+0x604>
 800a092:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a096:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a09a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a09e:	36e2      	adds	r6, #226	; 0xe2
 800a0a0:	fa01 f306 	lsl.w	r3, r1, r6
 800a0a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a0a8:	e748      	b.n	8009f3c <_strtod_l+0x6dc>
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a0b2:	e743      	b.n	8009f3c <_strtod_l+0x6dc>
 800a0b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a0b6:	4632      	mov	r2, r6
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f7ff f961 	bl	8009380 <__lshift>
 800a0be:	9016      	str	r0, [sp, #88]	; 0x58
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	f47f af6b 	bne.w	8009f9c <_strtod_l+0x73c>
 800a0c6:	e60f      	b.n	8009ce8 <_strtod_l+0x488>
 800a0c8:	46ca      	mov	sl, r9
 800a0ca:	d171      	bne.n	800a1b0 <_strtod_l+0x950>
 800a0cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0d2:	b352      	cbz	r2, 800a12a <_strtod_l+0x8ca>
 800a0d4:	4a33      	ldr	r2, [pc, #204]	; (800a1a4 <_strtod_l+0x944>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d12a      	bne.n	800a130 <_strtod_l+0x8d0>
 800a0da:	9b04      	ldr	r3, [sp, #16]
 800a0dc:	4641      	mov	r1, r8
 800a0de:	b1fb      	cbz	r3, 800a120 <_strtod_l+0x8c0>
 800a0e0:	4b2e      	ldr	r3, [pc, #184]	; (800a19c <_strtod_l+0x93c>)
 800a0e2:	ea09 0303 	and.w	r3, r9, r3
 800a0e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ee:	d81a      	bhi.n	800a126 <_strtod_l+0x8c6>
 800a0f0:	0d1b      	lsrs	r3, r3, #20
 800a0f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0fa:	4299      	cmp	r1, r3
 800a0fc:	d118      	bne.n	800a130 <_strtod_l+0x8d0>
 800a0fe:	4b2a      	ldr	r3, [pc, #168]	; (800a1a8 <_strtod_l+0x948>)
 800a100:	459a      	cmp	sl, r3
 800a102:	d102      	bne.n	800a10a <_strtod_l+0x8aa>
 800a104:	3101      	adds	r1, #1
 800a106:	f43f adef 	beq.w	8009ce8 <_strtod_l+0x488>
 800a10a:	4b24      	ldr	r3, [pc, #144]	; (800a19c <_strtod_l+0x93c>)
 800a10c:	ea0a 0303 	and.w	r3, sl, r3
 800a110:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a114:	f04f 0800 	mov.w	r8, #0
 800a118:	9b04      	ldr	r3, [sp, #16]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1a2      	bne.n	800a064 <_strtod_l+0x804>
 800a11e:	e5ed      	b.n	8009cfc <_strtod_l+0x49c>
 800a120:	f04f 33ff 	mov.w	r3, #4294967295
 800a124:	e7e9      	b.n	800a0fa <_strtod_l+0x89a>
 800a126:	4613      	mov	r3, r2
 800a128:	e7e7      	b.n	800a0fa <_strtod_l+0x89a>
 800a12a:	ea53 0308 	orrs.w	r3, r3, r8
 800a12e:	d08a      	beq.n	800a046 <_strtod_l+0x7e6>
 800a130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a132:	b1e3      	cbz	r3, 800a16e <_strtod_l+0x90e>
 800a134:	ea13 0f0a 	tst.w	r3, sl
 800a138:	d0ee      	beq.n	800a118 <_strtod_l+0x8b8>
 800a13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a13c:	9a04      	ldr	r2, [sp, #16]
 800a13e:	4640      	mov	r0, r8
 800a140:	4649      	mov	r1, r9
 800a142:	b1c3      	cbz	r3, 800a176 <_strtod_l+0x916>
 800a144:	f7ff fb6f 	bl	8009826 <sulp>
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	ec51 0b18 	vmov	r0, r1, d8
 800a150:	f7f6 f8bc 	bl	80002cc <__adddf3>
 800a154:	4680      	mov	r8, r0
 800a156:	4689      	mov	r9, r1
 800a158:	e7de      	b.n	800a118 <_strtod_l+0x8b8>
 800a15a:	4013      	ands	r3, r2
 800a15c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a160:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a164:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a168:	f04f 38ff 	mov.w	r8, #4294967295
 800a16c:	e7d4      	b.n	800a118 <_strtod_l+0x8b8>
 800a16e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a170:	ea13 0f08 	tst.w	r3, r8
 800a174:	e7e0      	b.n	800a138 <_strtod_l+0x8d8>
 800a176:	f7ff fb56 	bl	8009826 <sulp>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	ec51 0b18 	vmov	r0, r1, d8
 800a182:	f7f6 f8a1 	bl	80002c8 <__aeabi_dsub>
 800a186:	2200      	movs	r2, #0
 800a188:	2300      	movs	r3, #0
 800a18a:	4680      	mov	r8, r0
 800a18c:	4689      	mov	r9, r1
 800a18e:	f7f6 fcbb 	bl	8000b08 <__aeabi_dcmpeq>
 800a192:	2800      	cmp	r0, #0
 800a194:	d0c0      	beq.n	800a118 <_strtod_l+0x8b8>
 800a196:	e618      	b.n	8009dca <_strtod_l+0x56a>
 800a198:	fffffc02 	.word	0xfffffc02
 800a19c:	7ff00000 	.word	0x7ff00000
 800a1a0:	39500000 	.word	0x39500000
 800a1a4:	000fffff 	.word	0x000fffff
 800a1a8:	7fefffff 	.word	0x7fefffff
 800a1ac:	0800ba50 	.word	0x0800ba50
 800a1b0:	4659      	mov	r1, fp
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f7ff fac0 	bl	8009738 <__ratio>
 800a1b8:	ec57 6b10 	vmov	r6, r7, d0
 800a1bc:	ee10 0a10 	vmov	r0, s0
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	f7f6 fcb2 	bl	8000b30 <__aeabi_dcmple>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d071      	beq.n	800a2b4 <_strtod_l+0xa54>
 800a1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d17c      	bne.n	800a2d0 <_strtod_l+0xa70>
 800a1d6:	f1b8 0f00 	cmp.w	r8, #0
 800a1da:	d15a      	bne.n	800a292 <_strtod_l+0xa32>
 800a1dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d15d      	bne.n	800a2a0 <_strtod_l+0xa40>
 800a1e4:	4b90      	ldr	r3, [pc, #576]	; (800a428 <_strtod_l+0xbc8>)
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	f7f6 fc96 	bl	8000b1c <__aeabi_dcmplt>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d15c      	bne.n	800a2ae <_strtod_l+0xa4e>
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	4639      	mov	r1, r7
 800a1f8:	4b8c      	ldr	r3, [pc, #560]	; (800a42c <_strtod_l+0xbcc>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f7f6 fa1c 	bl	8000638 <__aeabi_dmul>
 800a200:	4606      	mov	r6, r0
 800a202:	460f      	mov	r7, r1
 800a204:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a208:	9606      	str	r6, [sp, #24]
 800a20a:	9307      	str	r3, [sp, #28]
 800a20c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a210:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a214:	4b86      	ldr	r3, [pc, #536]	; (800a430 <_strtod_l+0xbd0>)
 800a216:	ea0a 0303 	and.w	r3, sl, r3
 800a21a:	930d      	str	r3, [sp, #52]	; 0x34
 800a21c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a21e:	4b85      	ldr	r3, [pc, #532]	; (800a434 <_strtod_l+0xbd4>)
 800a220:	429a      	cmp	r2, r3
 800a222:	f040 8090 	bne.w	800a346 <_strtod_l+0xae6>
 800a226:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a22a:	ec49 8b10 	vmov	d0, r8, r9
 800a22e:	f7ff f9b9 	bl	80095a4 <__ulp>
 800a232:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a236:	ec51 0b10 	vmov	r0, r1, d0
 800a23a:	f7f6 f9fd 	bl	8000638 <__aeabi_dmul>
 800a23e:	4642      	mov	r2, r8
 800a240:	464b      	mov	r3, r9
 800a242:	f7f6 f843 	bl	80002cc <__adddf3>
 800a246:	460b      	mov	r3, r1
 800a248:	4979      	ldr	r1, [pc, #484]	; (800a430 <_strtod_l+0xbd0>)
 800a24a:	4a7b      	ldr	r2, [pc, #492]	; (800a438 <_strtod_l+0xbd8>)
 800a24c:	4019      	ands	r1, r3
 800a24e:	4291      	cmp	r1, r2
 800a250:	4680      	mov	r8, r0
 800a252:	d944      	bls.n	800a2de <_strtod_l+0xa7e>
 800a254:	ee18 2a90 	vmov	r2, s17
 800a258:	4b78      	ldr	r3, [pc, #480]	; (800a43c <_strtod_l+0xbdc>)
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d104      	bne.n	800a268 <_strtod_l+0xa08>
 800a25e:	ee18 3a10 	vmov	r3, s16
 800a262:	3301      	adds	r3, #1
 800a264:	f43f ad40 	beq.w	8009ce8 <_strtod_l+0x488>
 800a268:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a43c <_strtod_l+0xbdc>
 800a26c:	f04f 38ff 	mov.w	r8, #4294967295
 800a270:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a272:	4620      	mov	r0, r4
 800a274:	f7fe fe6a 	bl	8008f4c <_Bfree>
 800a278:	9905      	ldr	r1, [sp, #20]
 800a27a:	4620      	mov	r0, r4
 800a27c:	f7fe fe66 	bl	8008f4c <_Bfree>
 800a280:	4659      	mov	r1, fp
 800a282:	4620      	mov	r0, r4
 800a284:	f7fe fe62 	bl	8008f4c <_Bfree>
 800a288:	4629      	mov	r1, r5
 800a28a:	4620      	mov	r0, r4
 800a28c:	f7fe fe5e 	bl	8008f4c <_Bfree>
 800a290:	e609      	b.n	8009ea6 <_strtod_l+0x646>
 800a292:	f1b8 0f01 	cmp.w	r8, #1
 800a296:	d103      	bne.n	800a2a0 <_strtod_l+0xa40>
 800a298:	f1b9 0f00 	cmp.w	r9, #0
 800a29c:	f43f ad95 	beq.w	8009dca <_strtod_l+0x56a>
 800a2a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a3f8 <_strtod_l+0xb98>
 800a2a4:	4f60      	ldr	r7, [pc, #384]	; (800a428 <_strtod_l+0xbc8>)
 800a2a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a2aa:	2600      	movs	r6, #0
 800a2ac:	e7ae      	b.n	800a20c <_strtod_l+0x9ac>
 800a2ae:	4f5f      	ldr	r7, [pc, #380]	; (800a42c <_strtod_l+0xbcc>)
 800a2b0:	2600      	movs	r6, #0
 800a2b2:	e7a7      	b.n	800a204 <_strtod_l+0x9a4>
 800a2b4:	4b5d      	ldr	r3, [pc, #372]	; (800a42c <_strtod_l+0xbcc>)
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f7f6 f9bc 	bl	8000638 <__aeabi_dmul>
 800a2c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460f      	mov	r7, r1
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d09c      	beq.n	800a204 <_strtod_l+0x9a4>
 800a2ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a2ce:	e79d      	b.n	800a20c <_strtod_l+0x9ac>
 800a2d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a400 <_strtod_l+0xba0>
 800a2d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a2d8:	ec57 6b17 	vmov	r6, r7, d7
 800a2dc:	e796      	b.n	800a20c <_strtod_l+0x9ac>
 800a2de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a2e2:	9b04      	ldr	r3, [sp, #16]
 800a2e4:	46ca      	mov	sl, r9
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1c2      	bne.n	800a270 <_strtod_l+0xa10>
 800a2ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2f0:	0d1b      	lsrs	r3, r3, #20
 800a2f2:	051b      	lsls	r3, r3, #20
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d1bb      	bne.n	800a270 <_strtod_l+0xa10>
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	4639      	mov	r1, r7
 800a2fc:	f7f6 fcfc 	bl	8000cf8 <__aeabi_d2lz>
 800a300:	f7f6 f96c 	bl	80005dc <__aeabi_l2d>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	4630      	mov	r0, r6
 800a30a:	4639      	mov	r1, r7
 800a30c:	f7f5 ffdc 	bl	80002c8 <__aeabi_dsub>
 800a310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a312:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a316:	ea43 0308 	orr.w	r3, r3, r8
 800a31a:	4313      	orrs	r3, r2
 800a31c:	4606      	mov	r6, r0
 800a31e:	460f      	mov	r7, r1
 800a320:	d054      	beq.n	800a3cc <_strtod_l+0xb6c>
 800a322:	a339      	add	r3, pc, #228	; (adr r3, 800a408 <_strtod_l+0xba8>)
 800a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a328:	f7f6 fbf8 	bl	8000b1c <__aeabi_dcmplt>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	f47f ace5 	bne.w	8009cfc <_strtod_l+0x49c>
 800a332:	a337      	add	r3, pc, #220	; (adr r3, 800a410 <_strtod_l+0xbb0>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7f6 fc0c 	bl	8000b58 <__aeabi_dcmpgt>
 800a340:	2800      	cmp	r0, #0
 800a342:	d095      	beq.n	800a270 <_strtod_l+0xa10>
 800a344:	e4da      	b.n	8009cfc <_strtod_l+0x49c>
 800a346:	9b04      	ldr	r3, [sp, #16]
 800a348:	b333      	cbz	r3, 800a398 <_strtod_l+0xb38>
 800a34a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a34c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a350:	d822      	bhi.n	800a398 <_strtod_l+0xb38>
 800a352:	a331      	add	r3, pc, #196	; (adr r3, 800a418 <_strtod_l+0xbb8>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	4630      	mov	r0, r6
 800a35a:	4639      	mov	r1, r7
 800a35c:	f7f6 fbe8 	bl	8000b30 <__aeabi_dcmple>
 800a360:	b1a0      	cbz	r0, 800a38c <_strtod_l+0xb2c>
 800a362:	4639      	mov	r1, r7
 800a364:	4630      	mov	r0, r6
 800a366:	f7f6 fc3f 	bl	8000be8 <__aeabi_d2uiz>
 800a36a:	2801      	cmp	r0, #1
 800a36c:	bf38      	it	cc
 800a36e:	2001      	movcc	r0, #1
 800a370:	f7f6 f8e8 	bl	8000544 <__aeabi_ui2d>
 800a374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	bb23      	cbnz	r3, 800a3c6 <_strtod_l+0xb66>
 800a37c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a380:	9010      	str	r0, [sp, #64]	; 0x40
 800a382:	9311      	str	r3, [sp, #68]	; 0x44
 800a384:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a388:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a38c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a38e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a390:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a394:	1a9b      	subs	r3, r3, r2
 800a396:	930f      	str	r3, [sp, #60]	; 0x3c
 800a398:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a39c:	eeb0 0a48 	vmov.f32	s0, s16
 800a3a0:	eef0 0a68 	vmov.f32	s1, s17
 800a3a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a3a8:	f7ff f8fc 	bl	80095a4 <__ulp>
 800a3ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a3b0:	ec53 2b10 	vmov	r2, r3, d0
 800a3b4:	f7f6 f940 	bl	8000638 <__aeabi_dmul>
 800a3b8:	ec53 2b18 	vmov	r2, r3, d8
 800a3bc:	f7f5 ff86 	bl	80002cc <__adddf3>
 800a3c0:	4680      	mov	r8, r0
 800a3c2:	4689      	mov	r9, r1
 800a3c4:	e78d      	b.n	800a2e2 <_strtod_l+0xa82>
 800a3c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a3ca:	e7db      	b.n	800a384 <_strtod_l+0xb24>
 800a3cc:	a314      	add	r3, pc, #80	; (adr r3, 800a420 <_strtod_l+0xbc0>)
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f7f6 fba3 	bl	8000b1c <__aeabi_dcmplt>
 800a3d6:	e7b3      	b.n	800a340 <_strtod_l+0xae0>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	930a      	str	r3, [sp, #40]	; 0x28
 800a3dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3e0:	6013      	str	r3, [r2, #0]
 800a3e2:	f7ff ba7c 	b.w	80098de <_strtod_l+0x7e>
 800a3e6:	2a65      	cmp	r2, #101	; 0x65
 800a3e8:	f43f ab75 	beq.w	8009ad6 <_strtod_l+0x276>
 800a3ec:	2a45      	cmp	r2, #69	; 0x45
 800a3ee:	f43f ab72 	beq.w	8009ad6 <_strtod_l+0x276>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	f7ff bbaa 	b.w	8009b4c <_strtod_l+0x2ec>
 800a3f8:	00000000 	.word	0x00000000
 800a3fc:	bff00000 	.word	0xbff00000
 800a400:	00000000 	.word	0x00000000
 800a404:	3ff00000 	.word	0x3ff00000
 800a408:	94a03595 	.word	0x94a03595
 800a40c:	3fdfffff 	.word	0x3fdfffff
 800a410:	35afe535 	.word	0x35afe535
 800a414:	3fe00000 	.word	0x3fe00000
 800a418:	ffc00000 	.word	0xffc00000
 800a41c:	41dfffff 	.word	0x41dfffff
 800a420:	94a03595 	.word	0x94a03595
 800a424:	3fcfffff 	.word	0x3fcfffff
 800a428:	3ff00000 	.word	0x3ff00000
 800a42c:	3fe00000 	.word	0x3fe00000
 800a430:	7ff00000 	.word	0x7ff00000
 800a434:	7fe00000 	.word	0x7fe00000
 800a438:	7c9fffff 	.word	0x7c9fffff
 800a43c:	7fefffff 	.word	0x7fefffff

0800a440 <_strtod_r>:
 800a440:	4b01      	ldr	r3, [pc, #4]	; (800a448 <_strtod_r+0x8>)
 800a442:	f7ff ba0d 	b.w	8009860 <_strtod_l>
 800a446:	bf00      	nop
 800a448:	20000070 	.word	0x20000070

0800a44c <_strtol_l.constprop.0>:
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a452:	d001      	beq.n	800a458 <_strtol_l.constprop.0+0xc>
 800a454:	2b24      	cmp	r3, #36	; 0x24
 800a456:	d906      	bls.n	800a466 <_strtol_l.constprop.0+0x1a>
 800a458:	f7fd fd88 	bl	8007f6c <__errno>
 800a45c:	2316      	movs	r3, #22
 800a45e:	6003      	str	r3, [r0, #0]
 800a460:	2000      	movs	r0, #0
 800a462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a466:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a54c <_strtol_l.constprop.0+0x100>
 800a46a:	460d      	mov	r5, r1
 800a46c:	462e      	mov	r6, r5
 800a46e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a472:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a476:	f017 0708 	ands.w	r7, r7, #8
 800a47a:	d1f7      	bne.n	800a46c <_strtol_l.constprop.0+0x20>
 800a47c:	2c2d      	cmp	r4, #45	; 0x2d
 800a47e:	d132      	bne.n	800a4e6 <_strtol_l.constprop.0+0x9a>
 800a480:	782c      	ldrb	r4, [r5, #0]
 800a482:	2701      	movs	r7, #1
 800a484:	1cb5      	adds	r5, r6, #2
 800a486:	2b00      	cmp	r3, #0
 800a488:	d05b      	beq.n	800a542 <_strtol_l.constprop.0+0xf6>
 800a48a:	2b10      	cmp	r3, #16
 800a48c:	d109      	bne.n	800a4a2 <_strtol_l.constprop.0+0x56>
 800a48e:	2c30      	cmp	r4, #48	; 0x30
 800a490:	d107      	bne.n	800a4a2 <_strtol_l.constprop.0+0x56>
 800a492:	782c      	ldrb	r4, [r5, #0]
 800a494:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a498:	2c58      	cmp	r4, #88	; 0x58
 800a49a:	d14d      	bne.n	800a538 <_strtol_l.constprop.0+0xec>
 800a49c:	786c      	ldrb	r4, [r5, #1]
 800a49e:	2310      	movs	r3, #16
 800a4a0:	3502      	adds	r5, #2
 800a4a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a4a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4aa:	f04f 0e00 	mov.w	lr, #0
 800a4ae:	fbb8 f9f3 	udiv	r9, r8, r3
 800a4b2:	4676      	mov	r6, lr
 800a4b4:	fb03 8a19 	mls	sl, r3, r9, r8
 800a4b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a4bc:	f1bc 0f09 	cmp.w	ip, #9
 800a4c0:	d816      	bhi.n	800a4f0 <_strtol_l.constprop.0+0xa4>
 800a4c2:	4664      	mov	r4, ip
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	dd24      	ble.n	800a512 <_strtol_l.constprop.0+0xc6>
 800a4c8:	f1be 3fff 	cmp.w	lr, #4294967295
 800a4cc:	d008      	beq.n	800a4e0 <_strtol_l.constprop.0+0x94>
 800a4ce:	45b1      	cmp	r9, r6
 800a4d0:	d31c      	bcc.n	800a50c <_strtol_l.constprop.0+0xc0>
 800a4d2:	d101      	bne.n	800a4d8 <_strtol_l.constprop.0+0x8c>
 800a4d4:	45a2      	cmp	sl, r4
 800a4d6:	db19      	blt.n	800a50c <_strtol_l.constprop.0+0xc0>
 800a4d8:	fb06 4603 	mla	r6, r6, r3, r4
 800a4dc:	f04f 0e01 	mov.w	lr, #1
 800a4e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4e4:	e7e8      	b.n	800a4b8 <_strtol_l.constprop.0+0x6c>
 800a4e6:	2c2b      	cmp	r4, #43	; 0x2b
 800a4e8:	bf04      	itt	eq
 800a4ea:	782c      	ldrbeq	r4, [r5, #0]
 800a4ec:	1cb5      	addeq	r5, r6, #2
 800a4ee:	e7ca      	b.n	800a486 <_strtol_l.constprop.0+0x3a>
 800a4f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a4f4:	f1bc 0f19 	cmp.w	ip, #25
 800a4f8:	d801      	bhi.n	800a4fe <_strtol_l.constprop.0+0xb2>
 800a4fa:	3c37      	subs	r4, #55	; 0x37
 800a4fc:	e7e2      	b.n	800a4c4 <_strtol_l.constprop.0+0x78>
 800a4fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a502:	f1bc 0f19 	cmp.w	ip, #25
 800a506:	d804      	bhi.n	800a512 <_strtol_l.constprop.0+0xc6>
 800a508:	3c57      	subs	r4, #87	; 0x57
 800a50a:	e7db      	b.n	800a4c4 <_strtol_l.constprop.0+0x78>
 800a50c:	f04f 3eff 	mov.w	lr, #4294967295
 800a510:	e7e6      	b.n	800a4e0 <_strtol_l.constprop.0+0x94>
 800a512:	f1be 3fff 	cmp.w	lr, #4294967295
 800a516:	d105      	bne.n	800a524 <_strtol_l.constprop.0+0xd8>
 800a518:	2322      	movs	r3, #34	; 0x22
 800a51a:	6003      	str	r3, [r0, #0]
 800a51c:	4646      	mov	r6, r8
 800a51e:	b942      	cbnz	r2, 800a532 <_strtol_l.constprop.0+0xe6>
 800a520:	4630      	mov	r0, r6
 800a522:	e79e      	b.n	800a462 <_strtol_l.constprop.0+0x16>
 800a524:	b107      	cbz	r7, 800a528 <_strtol_l.constprop.0+0xdc>
 800a526:	4276      	negs	r6, r6
 800a528:	2a00      	cmp	r2, #0
 800a52a:	d0f9      	beq.n	800a520 <_strtol_l.constprop.0+0xd4>
 800a52c:	f1be 0f00 	cmp.w	lr, #0
 800a530:	d000      	beq.n	800a534 <_strtol_l.constprop.0+0xe8>
 800a532:	1e69      	subs	r1, r5, #1
 800a534:	6011      	str	r1, [r2, #0]
 800a536:	e7f3      	b.n	800a520 <_strtol_l.constprop.0+0xd4>
 800a538:	2430      	movs	r4, #48	; 0x30
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1b1      	bne.n	800a4a2 <_strtol_l.constprop.0+0x56>
 800a53e:	2308      	movs	r3, #8
 800a540:	e7af      	b.n	800a4a2 <_strtol_l.constprop.0+0x56>
 800a542:	2c30      	cmp	r4, #48	; 0x30
 800a544:	d0a5      	beq.n	800a492 <_strtol_l.constprop.0+0x46>
 800a546:	230a      	movs	r3, #10
 800a548:	e7ab      	b.n	800a4a2 <_strtol_l.constprop.0+0x56>
 800a54a:	bf00      	nop
 800a54c:	0800ba79 	.word	0x0800ba79

0800a550 <_strtol_r>:
 800a550:	f7ff bf7c 	b.w	800a44c <_strtol_l.constprop.0>

0800a554 <__ssputs_r>:
 800a554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a558:	688e      	ldr	r6, [r1, #8]
 800a55a:	461f      	mov	r7, r3
 800a55c:	42be      	cmp	r6, r7
 800a55e:	680b      	ldr	r3, [r1, #0]
 800a560:	4682      	mov	sl, r0
 800a562:	460c      	mov	r4, r1
 800a564:	4690      	mov	r8, r2
 800a566:	d82c      	bhi.n	800a5c2 <__ssputs_r+0x6e>
 800a568:	898a      	ldrh	r2, [r1, #12]
 800a56a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a56e:	d026      	beq.n	800a5be <__ssputs_r+0x6a>
 800a570:	6965      	ldr	r5, [r4, #20]
 800a572:	6909      	ldr	r1, [r1, #16]
 800a574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a578:	eba3 0901 	sub.w	r9, r3, r1
 800a57c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a580:	1c7b      	adds	r3, r7, #1
 800a582:	444b      	add	r3, r9
 800a584:	106d      	asrs	r5, r5, #1
 800a586:	429d      	cmp	r5, r3
 800a588:	bf38      	it	cc
 800a58a:	461d      	movcc	r5, r3
 800a58c:	0553      	lsls	r3, r2, #21
 800a58e:	d527      	bpl.n	800a5e0 <__ssputs_r+0x8c>
 800a590:	4629      	mov	r1, r5
 800a592:	f7fe fc0f 	bl	8008db4 <_malloc_r>
 800a596:	4606      	mov	r6, r0
 800a598:	b360      	cbz	r0, 800a5f4 <__ssputs_r+0xa0>
 800a59a:	6921      	ldr	r1, [r4, #16]
 800a59c:	464a      	mov	r2, r9
 800a59e:	f000 fa1b 	bl	800a9d8 <memcpy>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	6126      	str	r6, [r4, #16]
 800a5b0:	6165      	str	r5, [r4, #20]
 800a5b2:	444e      	add	r6, r9
 800a5b4:	eba5 0509 	sub.w	r5, r5, r9
 800a5b8:	6026      	str	r6, [r4, #0]
 800a5ba:	60a5      	str	r5, [r4, #8]
 800a5bc:	463e      	mov	r6, r7
 800a5be:	42be      	cmp	r6, r7
 800a5c0:	d900      	bls.n	800a5c4 <__ssputs_r+0x70>
 800a5c2:	463e      	mov	r6, r7
 800a5c4:	6820      	ldr	r0, [r4, #0]
 800a5c6:	4632      	mov	r2, r6
 800a5c8:	4641      	mov	r1, r8
 800a5ca:	f000 f9c9 	bl	800a960 <memmove>
 800a5ce:	68a3      	ldr	r3, [r4, #8]
 800a5d0:	1b9b      	subs	r3, r3, r6
 800a5d2:	60a3      	str	r3, [r4, #8]
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	4433      	add	r3, r6
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	2000      	movs	r0, #0
 800a5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e0:	462a      	mov	r2, r5
 800a5e2:	f000 fdae 	bl	800b142 <_realloc_r>
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d1e0      	bne.n	800a5ae <__ssputs_r+0x5a>
 800a5ec:	6921      	ldr	r1, [r4, #16]
 800a5ee:	4650      	mov	r0, sl
 800a5f0:	f7fe fb6c 	bl	8008ccc <_free_r>
 800a5f4:	230c      	movs	r3, #12
 800a5f6:	f8ca 3000 	str.w	r3, [sl]
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a600:	81a3      	strh	r3, [r4, #12]
 800a602:	f04f 30ff 	mov.w	r0, #4294967295
 800a606:	e7e9      	b.n	800a5dc <__ssputs_r+0x88>

0800a608 <_svfiprintf_r>:
 800a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	4698      	mov	r8, r3
 800a60e:	898b      	ldrh	r3, [r1, #12]
 800a610:	061b      	lsls	r3, r3, #24
 800a612:	b09d      	sub	sp, #116	; 0x74
 800a614:	4607      	mov	r7, r0
 800a616:	460d      	mov	r5, r1
 800a618:	4614      	mov	r4, r2
 800a61a:	d50e      	bpl.n	800a63a <_svfiprintf_r+0x32>
 800a61c:	690b      	ldr	r3, [r1, #16]
 800a61e:	b963      	cbnz	r3, 800a63a <_svfiprintf_r+0x32>
 800a620:	2140      	movs	r1, #64	; 0x40
 800a622:	f7fe fbc7 	bl	8008db4 <_malloc_r>
 800a626:	6028      	str	r0, [r5, #0]
 800a628:	6128      	str	r0, [r5, #16]
 800a62a:	b920      	cbnz	r0, 800a636 <_svfiprintf_r+0x2e>
 800a62c:	230c      	movs	r3, #12
 800a62e:	603b      	str	r3, [r7, #0]
 800a630:	f04f 30ff 	mov.w	r0, #4294967295
 800a634:	e0d0      	b.n	800a7d8 <_svfiprintf_r+0x1d0>
 800a636:	2340      	movs	r3, #64	; 0x40
 800a638:	616b      	str	r3, [r5, #20]
 800a63a:	2300      	movs	r3, #0
 800a63c:	9309      	str	r3, [sp, #36]	; 0x24
 800a63e:	2320      	movs	r3, #32
 800a640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a644:	f8cd 800c 	str.w	r8, [sp, #12]
 800a648:	2330      	movs	r3, #48	; 0x30
 800a64a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a7f0 <_svfiprintf_r+0x1e8>
 800a64e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a652:	f04f 0901 	mov.w	r9, #1
 800a656:	4623      	mov	r3, r4
 800a658:	469a      	mov	sl, r3
 800a65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a65e:	b10a      	cbz	r2, 800a664 <_svfiprintf_r+0x5c>
 800a660:	2a25      	cmp	r2, #37	; 0x25
 800a662:	d1f9      	bne.n	800a658 <_svfiprintf_r+0x50>
 800a664:	ebba 0b04 	subs.w	fp, sl, r4
 800a668:	d00b      	beq.n	800a682 <_svfiprintf_r+0x7a>
 800a66a:	465b      	mov	r3, fp
 800a66c:	4622      	mov	r2, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	4638      	mov	r0, r7
 800a672:	f7ff ff6f 	bl	800a554 <__ssputs_r>
 800a676:	3001      	adds	r0, #1
 800a678:	f000 80a9 	beq.w	800a7ce <_svfiprintf_r+0x1c6>
 800a67c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a67e:	445a      	add	r2, fp
 800a680:	9209      	str	r2, [sp, #36]	; 0x24
 800a682:	f89a 3000 	ldrb.w	r3, [sl]
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 80a1 	beq.w	800a7ce <_svfiprintf_r+0x1c6>
 800a68c:	2300      	movs	r3, #0
 800a68e:	f04f 32ff 	mov.w	r2, #4294967295
 800a692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a696:	f10a 0a01 	add.w	sl, sl, #1
 800a69a:	9304      	str	r3, [sp, #16]
 800a69c:	9307      	str	r3, [sp, #28]
 800a69e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6a2:	931a      	str	r3, [sp, #104]	; 0x68
 800a6a4:	4654      	mov	r4, sl
 800a6a6:	2205      	movs	r2, #5
 800a6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ac:	4850      	ldr	r0, [pc, #320]	; (800a7f0 <_svfiprintf_r+0x1e8>)
 800a6ae:	f7f5 fdaf 	bl	8000210 <memchr>
 800a6b2:	9a04      	ldr	r2, [sp, #16]
 800a6b4:	b9d8      	cbnz	r0, 800a6ee <_svfiprintf_r+0xe6>
 800a6b6:	06d0      	lsls	r0, r2, #27
 800a6b8:	bf44      	itt	mi
 800a6ba:	2320      	movmi	r3, #32
 800a6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6c0:	0711      	lsls	r1, r2, #28
 800a6c2:	bf44      	itt	mi
 800a6c4:	232b      	movmi	r3, #43	; 0x2b
 800a6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d0:	d015      	beq.n	800a6fe <_svfiprintf_r+0xf6>
 800a6d2:	9a07      	ldr	r2, [sp, #28]
 800a6d4:	4654      	mov	r4, sl
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	f04f 0c0a 	mov.w	ip, #10
 800a6dc:	4621      	mov	r1, r4
 800a6de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e2:	3b30      	subs	r3, #48	; 0x30
 800a6e4:	2b09      	cmp	r3, #9
 800a6e6:	d94d      	bls.n	800a784 <_svfiprintf_r+0x17c>
 800a6e8:	b1b0      	cbz	r0, 800a718 <_svfiprintf_r+0x110>
 800a6ea:	9207      	str	r2, [sp, #28]
 800a6ec:	e014      	b.n	800a718 <_svfiprintf_r+0x110>
 800a6ee:	eba0 0308 	sub.w	r3, r0, r8
 800a6f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	46a2      	mov	sl, r4
 800a6fc:	e7d2      	b.n	800a6a4 <_svfiprintf_r+0x9c>
 800a6fe:	9b03      	ldr	r3, [sp, #12]
 800a700:	1d19      	adds	r1, r3, #4
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	9103      	str	r1, [sp, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	bfbb      	ittet	lt
 800a70a:	425b      	neglt	r3, r3
 800a70c:	f042 0202 	orrlt.w	r2, r2, #2
 800a710:	9307      	strge	r3, [sp, #28]
 800a712:	9307      	strlt	r3, [sp, #28]
 800a714:	bfb8      	it	lt
 800a716:	9204      	strlt	r2, [sp, #16]
 800a718:	7823      	ldrb	r3, [r4, #0]
 800a71a:	2b2e      	cmp	r3, #46	; 0x2e
 800a71c:	d10c      	bne.n	800a738 <_svfiprintf_r+0x130>
 800a71e:	7863      	ldrb	r3, [r4, #1]
 800a720:	2b2a      	cmp	r3, #42	; 0x2a
 800a722:	d134      	bne.n	800a78e <_svfiprintf_r+0x186>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	1d1a      	adds	r2, r3, #4
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	9203      	str	r2, [sp, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfb8      	it	lt
 800a730:	f04f 33ff 	movlt.w	r3, #4294967295
 800a734:	3402      	adds	r4, #2
 800a736:	9305      	str	r3, [sp, #20]
 800a738:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a800 <_svfiprintf_r+0x1f8>
 800a73c:	7821      	ldrb	r1, [r4, #0]
 800a73e:	2203      	movs	r2, #3
 800a740:	4650      	mov	r0, sl
 800a742:	f7f5 fd65 	bl	8000210 <memchr>
 800a746:	b138      	cbz	r0, 800a758 <_svfiprintf_r+0x150>
 800a748:	9b04      	ldr	r3, [sp, #16]
 800a74a:	eba0 000a 	sub.w	r0, r0, sl
 800a74e:	2240      	movs	r2, #64	; 0x40
 800a750:	4082      	lsls	r2, r0
 800a752:	4313      	orrs	r3, r2
 800a754:	3401      	adds	r4, #1
 800a756:	9304      	str	r3, [sp, #16]
 800a758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75c:	4825      	ldr	r0, [pc, #148]	; (800a7f4 <_svfiprintf_r+0x1ec>)
 800a75e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a762:	2206      	movs	r2, #6
 800a764:	f7f5 fd54 	bl	8000210 <memchr>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d038      	beq.n	800a7de <_svfiprintf_r+0x1d6>
 800a76c:	4b22      	ldr	r3, [pc, #136]	; (800a7f8 <_svfiprintf_r+0x1f0>)
 800a76e:	bb1b      	cbnz	r3, 800a7b8 <_svfiprintf_r+0x1b0>
 800a770:	9b03      	ldr	r3, [sp, #12]
 800a772:	3307      	adds	r3, #7
 800a774:	f023 0307 	bic.w	r3, r3, #7
 800a778:	3308      	adds	r3, #8
 800a77a:	9303      	str	r3, [sp, #12]
 800a77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a77e:	4433      	add	r3, r6
 800a780:	9309      	str	r3, [sp, #36]	; 0x24
 800a782:	e768      	b.n	800a656 <_svfiprintf_r+0x4e>
 800a784:	fb0c 3202 	mla	r2, ip, r2, r3
 800a788:	460c      	mov	r4, r1
 800a78a:	2001      	movs	r0, #1
 800a78c:	e7a6      	b.n	800a6dc <_svfiprintf_r+0xd4>
 800a78e:	2300      	movs	r3, #0
 800a790:	3401      	adds	r4, #1
 800a792:	9305      	str	r3, [sp, #20]
 800a794:	4619      	mov	r1, r3
 800a796:	f04f 0c0a 	mov.w	ip, #10
 800a79a:	4620      	mov	r0, r4
 800a79c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7a0:	3a30      	subs	r2, #48	; 0x30
 800a7a2:	2a09      	cmp	r2, #9
 800a7a4:	d903      	bls.n	800a7ae <_svfiprintf_r+0x1a6>
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0c6      	beq.n	800a738 <_svfiprintf_r+0x130>
 800a7aa:	9105      	str	r1, [sp, #20]
 800a7ac:	e7c4      	b.n	800a738 <_svfiprintf_r+0x130>
 800a7ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e7f0      	b.n	800a79a <_svfiprintf_r+0x192>
 800a7b8:	ab03      	add	r3, sp, #12
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	462a      	mov	r2, r5
 800a7be:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <_svfiprintf_r+0x1f4>)
 800a7c0:	a904      	add	r1, sp, #16
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	f7fc fc84 	bl	80070d0 <_printf_float>
 800a7c8:	1c42      	adds	r2, r0, #1
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	d1d6      	bne.n	800a77c <_svfiprintf_r+0x174>
 800a7ce:	89ab      	ldrh	r3, [r5, #12]
 800a7d0:	065b      	lsls	r3, r3, #25
 800a7d2:	f53f af2d 	bmi.w	800a630 <_svfiprintf_r+0x28>
 800a7d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7d8:	b01d      	add	sp, #116	; 0x74
 800a7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7de:	ab03      	add	r3, sp, #12
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	462a      	mov	r2, r5
 800a7e4:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <_svfiprintf_r+0x1f4>)
 800a7e6:	a904      	add	r1, sp, #16
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f7fc ff15 	bl	8007618 <_printf_i>
 800a7ee:	e7eb      	b.n	800a7c8 <_svfiprintf_r+0x1c0>
 800a7f0:	0800bb79 	.word	0x0800bb79
 800a7f4:	0800bb83 	.word	0x0800bb83
 800a7f8:	080070d1 	.word	0x080070d1
 800a7fc:	0800a555 	.word	0x0800a555
 800a800:	0800bb7f 	.word	0x0800bb7f

0800a804 <__sflush_r>:
 800a804:	898a      	ldrh	r2, [r1, #12]
 800a806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80a:	4605      	mov	r5, r0
 800a80c:	0710      	lsls	r0, r2, #28
 800a80e:	460c      	mov	r4, r1
 800a810:	d458      	bmi.n	800a8c4 <__sflush_r+0xc0>
 800a812:	684b      	ldr	r3, [r1, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	dc05      	bgt.n	800a824 <__sflush_r+0x20>
 800a818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	dc02      	bgt.n	800a824 <__sflush_r+0x20>
 800a81e:	2000      	movs	r0, #0
 800a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a826:	2e00      	cmp	r6, #0
 800a828:	d0f9      	beq.n	800a81e <__sflush_r+0x1a>
 800a82a:	2300      	movs	r3, #0
 800a82c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a830:	682f      	ldr	r7, [r5, #0]
 800a832:	6a21      	ldr	r1, [r4, #32]
 800a834:	602b      	str	r3, [r5, #0]
 800a836:	d032      	beq.n	800a89e <__sflush_r+0x9a>
 800a838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	075a      	lsls	r2, r3, #29
 800a83e:	d505      	bpl.n	800a84c <__sflush_r+0x48>
 800a840:	6863      	ldr	r3, [r4, #4]
 800a842:	1ac0      	subs	r0, r0, r3
 800a844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a846:	b10b      	cbz	r3, 800a84c <__sflush_r+0x48>
 800a848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a84a:	1ac0      	subs	r0, r0, r3
 800a84c:	2300      	movs	r3, #0
 800a84e:	4602      	mov	r2, r0
 800a850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a852:	6a21      	ldr	r1, [r4, #32]
 800a854:	4628      	mov	r0, r5
 800a856:	47b0      	blx	r6
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	d106      	bne.n	800a86c <__sflush_r+0x68>
 800a85e:	6829      	ldr	r1, [r5, #0]
 800a860:	291d      	cmp	r1, #29
 800a862:	d82b      	bhi.n	800a8bc <__sflush_r+0xb8>
 800a864:	4a29      	ldr	r2, [pc, #164]	; (800a90c <__sflush_r+0x108>)
 800a866:	410a      	asrs	r2, r1
 800a868:	07d6      	lsls	r6, r2, #31
 800a86a:	d427      	bmi.n	800a8bc <__sflush_r+0xb8>
 800a86c:	2200      	movs	r2, #0
 800a86e:	6062      	str	r2, [r4, #4]
 800a870:	04d9      	lsls	r1, r3, #19
 800a872:	6922      	ldr	r2, [r4, #16]
 800a874:	6022      	str	r2, [r4, #0]
 800a876:	d504      	bpl.n	800a882 <__sflush_r+0x7e>
 800a878:	1c42      	adds	r2, r0, #1
 800a87a:	d101      	bne.n	800a880 <__sflush_r+0x7c>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b903      	cbnz	r3, 800a882 <__sflush_r+0x7e>
 800a880:	6560      	str	r0, [r4, #84]	; 0x54
 800a882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a884:	602f      	str	r7, [r5, #0]
 800a886:	2900      	cmp	r1, #0
 800a888:	d0c9      	beq.n	800a81e <__sflush_r+0x1a>
 800a88a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a88e:	4299      	cmp	r1, r3
 800a890:	d002      	beq.n	800a898 <__sflush_r+0x94>
 800a892:	4628      	mov	r0, r5
 800a894:	f7fe fa1a 	bl	8008ccc <_free_r>
 800a898:	2000      	movs	r0, #0
 800a89a:	6360      	str	r0, [r4, #52]	; 0x34
 800a89c:	e7c0      	b.n	800a820 <__sflush_r+0x1c>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	47b0      	blx	r6
 800a8a4:	1c41      	adds	r1, r0, #1
 800a8a6:	d1c8      	bne.n	800a83a <__sflush_r+0x36>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0c5      	beq.n	800a83a <__sflush_r+0x36>
 800a8ae:	2b1d      	cmp	r3, #29
 800a8b0:	d001      	beq.n	800a8b6 <__sflush_r+0xb2>
 800a8b2:	2b16      	cmp	r3, #22
 800a8b4:	d101      	bne.n	800a8ba <__sflush_r+0xb6>
 800a8b6:	602f      	str	r7, [r5, #0]
 800a8b8:	e7b1      	b.n	800a81e <__sflush_r+0x1a>
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c0:	81a3      	strh	r3, [r4, #12]
 800a8c2:	e7ad      	b.n	800a820 <__sflush_r+0x1c>
 800a8c4:	690f      	ldr	r7, [r1, #16]
 800a8c6:	2f00      	cmp	r7, #0
 800a8c8:	d0a9      	beq.n	800a81e <__sflush_r+0x1a>
 800a8ca:	0793      	lsls	r3, r2, #30
 800a8cc:	680e      	ldr	r6, [r1, #0]
 800a8ce:	bf08      	it	eq
 800a8d0:	694b      	ldreq	r3, [r1, #20]
 800a8d2:	600f      	str	r7, [r1, #0]
 800a8d4:	bf18      	it	ne
 800a8d6:	2300      	movne	r3, #0
 800a8d8:	eba6 0807 	sub.w	r8, r6, r7
 800a8dc:	608b      	str	r3, [r1, #8]
 800a8de:	f1b8 0f00 	cmp.w	r8, #0
 800a8e2:	dd9c      	ble.n	800a81e <__sflush_r+0x1a>
 800a8e4:	6a21      	ldr	r1, [r4, #32]
 800a8e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8e8:	4643      	mov	r3, r8
 800a8ea:	463a      	mov	r2, r7
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	47b0      	blx	r6
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	dc06      	bgt.n	800a902 <__sflush_r+0xfe>
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8fa:	81a3      	strh	r3, [r4, #12]
 800a8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a900:	e78e      	b.n	800a820 <__sflush_r+0x1c>
 800a902:	4407      	add	r7, r0
 800a904:	eba8 0800 	sub.w	r8, r8, r0
 800a908:	e7e9      	b.n	800a8de <__sflush_r+0xda>
 800a90a:	bf00      	nop
 800a90c:	dfbffffe 	.word	0xdfbffffe

0800a910 <_fflush_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	690b      	ldr	r3, [r1, #16]
 800a914:	4605      	mov	r5, r0
 800a916:	460c      	mov	r4, r1
 800a918:	b913      	cbnz	r3, 800a920 <_fflush_r+0x10>
 800a91a:	2500      	movs	r5, #0
 800a91c:	4628      	mov	r0, r5
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	b118      	cbz	r0, 800a92a <_fflush_r+0x1a>
 800a922:	6a03      	ldr	r3, [r0, #32]
 800a924:	b90b      	cbnz	r3, 800a92a <_fflush_r+0x1a>
 800a926:	f7fd fa35 	bl	8007d94 <__sinit>
 800a92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d0f3      	beq.n	800a91a <_fflush_r+0xa>
 800a932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a934:	07d0      	lsls	r0, r2, #31
 800a936:	d404      	bmi.n	800a942 <_fflush_r+0x32>
 800a938:	0599      	lsls	r1, r3, #22
 800a93a:	d402      	bmi.n	800a942 <_fflush_r+0x32>
 800a93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a93e:	f7fd fb40 	bl	8007fc2 <__retarget_lock_acquire_recursive>
 800a942:	4628      	mov	r0, r5
 800a944:	4621      	mov	r1, r4
 800a946:	f7ff ff5d 	bl	800a804 <__sflush_r>
 800a94a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a94c:	07da      	lsls	r2, r3, #31
 800a94e:	4605      	mov	r5, r0
 800a950:	d4e4      	bmi.n	800a91c <_fflush_r+0xc>
 800a952:	89a3      	ldrh	r3, [r4, #12]
 800a954:	059b      	lsls	r3, r3, #22
 800a956:	d4e1      	bmi.n	800a91c <_fflush_r+0xc>
 800a958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a95a:	f7fd fb33 	bl	8007fc4 <__retarget_lock_release_recursive>
 800a95e:	e7dd      	b.n	800a91c <_fflush_r+0xc>

0800a960 <memmove>:
 800a960:	4288      	cmp	r0, r1
 800a962:	b510      	push	{r4, lr}
 800a964:	eb01 0402 	add.w	r4, r1, r2
 800a968:	d902      	bls.n	800a970 <memmove+0x10>
 800a96a:	4284      	cmp	r4, r0
 800a96c:	4623      	mov	r3, r4
 800a96e:	d807      	bhi.n	800a980 <memmove+0x20>
 800a970:	1e43      	subs	r3, r0, #1
 800a972:	42a1      	cmp	r1, r4
 800a974:	d008      	beq.n	800a988 <memmove+0x28>
 800a976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a97a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a97e:	e7f8      	b.n	800a972 <memmove+0x12>
 800a980:	4402      	add	r2, r0
 800a982:	4601      	mov	r1, r0
 800a984:	428a      	cmp	r2, r1
 800a986:	d100      	bne.n	800a98a <memmove+0x2a>
 800a988:	bd10      	pop	{r4, pc}
 800a98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a992:	e7f7      	b.n	800a984 <memmove+0x24>

0800a994 <strncmp>:
 800a994:	b510      	push	{r4, lr}
 800a996:	b16a      	cbz	r2, 800a9b4 <strncmp+0x20>
 800a998:	3901      	subs	r1, #1
 800a99a:	1884      	adds	r4, r0, r2
 800a99c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d103      	bne.n	800a9b0 <strncmp+0x1c>
 800a9a8:	42a0      	cmp	r0, r4
 800a9aa:	d001      	beq.n	800a9b0 <strncmp+0x1c>
 800a9ac:	2a00      	cmp	r2, #0
 800a9ae:	d1f5      	bne.n	800a99c <strncmp+0x8>
 800a9b0:	1ad0      	subs	r0, r2, r3
 800a9b2:	bd10      	pop	{r4, pc}
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	e7fc      	b.n	800a9b2 <strncmp+0x1e>

0800a9b8 <_sbrk_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	4d06      	ldr	r5, [pc, #24]	; (800a9d4 <_sbrk_r+0x1c>)
 800a9bc:	2300      	movs	r3, #0
 800a9be:	4604      	mov	r4, r0
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	602b      	str	r3, [r5, #0]
 800a9c4:	f7f7 fcfc 	bl	80023c0 <_sbrk>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d102      	bne.n	800a9d2 <_sbrk_r+0x1a>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	b103      	cbz	r3, 800a9d2 <_sbrk_r+0x1a>
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	20000c48 	.word	0x20000c48

0800a9d8 <memcpy>:
 800a9d8:	440a      	add	r2, r1
 800a9da:	4291      	cmp	r1, r2
 800a9dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9e0:	d100      	bne.n	800a9e4 <memcpy+0xc>
 800a9e2:	4770      	bx	lr
 800a9e4:	b510      	push	{r4, lr}
 800a9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ee:	4291      	cmp	r1, r2
 800a9f0:	d1f9      	bne.n	800a9e6 <memcpy+0xe>
 800a9f2:	bd10      	pop	{r4, pc}
 800a9f4:	0000      	movs	r0, r0
	...

0800a9f8 <nan>:
 800a9f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa00 <nan+0x8>
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	00000000 	.word	0x00000000
 800aa04:	7ff80000 	.word	0x7ff80000

0800aa08 <__assert_func>:
 800aa08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa0a:	4614      	mov	r4, r2
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <__assert_func+0x2c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4605      	mov	r5, r0
 800aa14:	68d8      	ldr	r0, [r3, #12]
 800aa16:	b14c      	cbz	r4, 800aa2c <__assert_func+0x24>
 800aa18:	4b07      	ldr	r3, [pc, #28]	; (800aa38 <__assert_func+0x30>)
 800aa1a:	9100      	str	r1, [sp, #0]
 800aa1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa20:	4906      	ldr	r1, [pc, #24]	; (800aa3c <__assert_func+0x34>)
 800aa22:	462b      	mov	r3, r5
 800aa24:	f000 fbca 	bl	800b1bc <fiprintf>
 800aa28:	f000 fbda 	bl	800b1e0 <abort>
 800aa2c:	4b04      	ldr	r3, [pc, #16]	; (800aa40 <__assert_func+0x38>)
 800aa2e:	461c      	mov	r4, r3
 800aa30:	e7f3      	b.n	800aa1a <__assert_func+0x12>
 800aa32:	bf00      	nop
 800aa34:	2000006c 	.word	0x2000006c
 800aa38:	0800bb92 	.word	0x0800bb92
 800aa3c:	0800bb9f 	.word	0x0800bb9f
 800aa40:	0800bbcd 	.word	0x0800bbcd

0800aa44 <_calloc_r>:
 800aa44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa46:	fba1 2402 	umull	r2, r4, r1, r2
 800aa4a:	b94c      	cbnz	r4, 800aa60 <_calloc_r+0x1c>
 800aa4c:	4611      	mov	r1, r2
 800aa4e:	9201      	str	r2, [sp, #4]
 800aa50:	f7fe f9b0 	bl	8008db4 <_malloc_r>
 800aa54:	9a01      	ldr	r2, [sp, #4]
 800aa56:	4605      	mov	r5, r0
 800aa58:	b930      	cbnz	r0, 800aa68 <_calloc_r+0x24>
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	b003      	add	sp, #12
 800aa5e:	bd30      	pop	{r4, r5, pc}
 800aa60:	220c      	movs	r2, #12
 800aa62:	6002      	str	r2, [r0, #0]
 800aa64:	2500      	movs	r5, #0
 800aa66:	e7f8      	b.n	800aa5a <_calloc_r+0x16>
 800aa68:	4621      	mov	r1, r4
 800aa6a:	f7fd fa2c 	bl	8007ec6 <memset>
 800aa6e:	e7f4      	b.n	800aa5a <_calloc_r+0x16>

0800aa70 <rshift>:
 800aa70:	6903      	ldr	r3, [r0, #16]
 800aa72:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa7a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa7e:	f100 0414 	add.w	r4, r0, #20
 800aa82:	dd45      	ble.n	800ab10 <rshift+0xa0>
 800aa84:	f011 011f 	ands.w	r1, r1, #31
 800aa88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa90:	d10c      	bne.n	800aaac <rshift+0x3c>
 800aa92:	f100 0710 	add.w	r7, r0, #16
 800aa96:	4629      	mov	r1, r5
 800aa98:	42b1      	cmp	r1, r6
 800aa9a:	d334      	bcc.n	800ab06 <rshift+0x96>
 800aa9c:	1a9b      	subs	r3, r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	1eea      	subs	r2, r5, #3
 800aaa2:	4296      	cmp	r6, r2
 800aaa4:	bf38      	it	cc
 800aaa6:	2300      	movcc	r3, #0
 800aaa8:	4423      	add	r3, r4
 800aaaa:	e015      	b.n	800aad8 <rshift+0x68>
 800aaac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aab0:	f1c1 0820 	rsb	r8, r1, #32
 800aab4:	40cf      	lsrs	r7, r1
 800aab6:	f105 0e04 	add.w	lr, r5, #4
 800aaba:	46a1      	mov	r9, r4
 800aabc:	4576      	cmp	r6, lr
 800aabe:	46f4      	mov	ip, lr
 800aac0:	d815      	bhi.n	800aaee <rshift+0x7e>
 800aac2:	1a9a      	subs	r2, r3, r2
 800aac4:	0092      	lsls	r2, r2, #2
 800aac6:	3a04      	subs	r2, #4
 800aac8:	3501      	adds	r5, #1
 800aaca:	42ae      	cmp	r6, r5
 800aacc:	bf38      	it	cc
 800aace:	2200      	movcc	r2, #0
 800aad0:	18a3      	adds	r3, r4, r2
 800aad2:	50a7      	str	r7, [r4, r2]
 800aad4:	b107      	cbz	r7, 800aad8 <rshift+0x68>
 800aad6:	3304      	adds	r3, #4
 800aad8:	1b1a      	subs	r2, r3, r4
 800aada:	42a3      	cmp	r3, r4
 800aadc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aae0:	bf08      	it	eq
 800aae2:	2300      	moveq	r3, #0
 800aae4:	6102      	str	r2, [r0, #16]
 800aae6:	bf08      	it	eq
 800aae8:	6143      	streq	r3, [r0, #20]
 800aaea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaee:	f8dc c000 	ldr.w	ip, [ip]
 800aaf2:	fa0c fc08 	lsl.w	ip, ip, r8
 800aaf6:	ea4c 0707 	orr.w	r7, ip, r7
 800aafa:	f849 7b04 	str.w	r7, [r9], #4
 800aafe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab02:	40cf      	lsrs	r7, r1
 800ab04:	e7da      	b.n	800aabc <rshift+0x4c>
 800ab06:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab0a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab0e:	e7c3      	b.n	800aa98 <rshift+0x28>
 800ab10:	4623      	mov	r3, r4
 800ab12:	e7e1      	b.n	800aad8 <rshift+0x68>

0800ab14 <__hexdig_fun>:
 800ab14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab18:	2b09      	cmp	r3, #9
 800ab1a:	d802      	bhi.n	800ab22 <__hexdig_fun+0xe>
 800ab1c:	3820      	subs	r0, #32
 800ab1e:	b2c0      	uxtb	r0, r0
 800ab20:	4770      	bx	lr
 800ab22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab26:	2b05      	cmp	r3, #5
 800ab28:	d801      	bhi.n	800ab2e <__hexdig_fun+0x1a>
 800ab2a:	3847      	subs	r0, #71	; 0x47
 800ab2c:	e7f7      	b.n	800ab1e <__hexdig_fun+0xa>
 800ab2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ab32:	2b05      	cmp	r3, #5
 800ab34:	d801      	bhi.n	800ab3a <__hexdig_fun+0x26>
 800ab36:	3827      	subs	r0, #39	; 0x27
 800ab38:	e7f1      	b.n	800ab1e <__hexdig_fun+0xa>
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	4770      	bx	lr
	...

0800ab40 <__gethex>:
 800ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	4617      	mov	r7, r2
 800ab46:	680a      	ldr	r2, [r1, #0]
 800ab48:	b085      	sub	sp, #20
 800ab4a:	f102 0b02 	add.w	fp, r2, #2
 800ab4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ab52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ab56:	4681      	mov	r9, r0
 800ab58:	468a      	mov	sl, r1
 800ab5a:	9302      	str	r3, [sp, #8]
 800ab5c:	32fe      	adds	r2, #254	; 0xfe
 800ab5e:	eb02 030b 	add.w	r3, r2, fp
 800ab62:	46d8      	mov	r8, fp
 800ab64:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	2830      	cmp	r0, #48	; 0x30
 800ab6c:	d0f7      	beq.n	800ab5e <__gethex+0x1e>
 800ab6e:	f7ff ffd1 	bl	800ab14 <__hexdig_fun>
 800ab72:	4604      	mov	r4, r0
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d138      	bne.n	800abea <__gethex+0xaa>
 800ab78:	49a7      	ldr	r1, [pc, #668]	; (800ae18 <__gethex+0x2d8>)
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	4640      	mov	r0, r8
 800ab7e:	f7ff ff09 	bl	800a994 <strncmp>
 800ab82:	4606      	mov	r6, r0
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d169      	bne.n	800ac5c <__gethex+0x11c>
 800ab88:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ab8c:	465d      	mov	r5, fp
 800ab8e:	f7ff ffc1 	bl	800ab14 <__hexdig_fun>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	d064      	beq.n	800ac60 <__gethex+0x120>
 800ab96:	465a      	mov	r2, fp
 800ab98:	7810      	ldrb	r0, [r2, #0]
 800ab9a:	2830      	cmp	r0, #48	; 0x30
 800ab9c:	4690      	mov	r8, r2
 800ab9e:	f102 0201 	add.w	r2, r2, #1
 800aba2:	d0f9      	beq.n	800ab98 <__gethex+0x58>
 800aba4:	f7ff ffb6 	bl	800ab14 <__hexdig_fun>
 800aba8:	2301      	movs	r3, #1
 800abaa:	fab0 f480 	clz	r4, r0
 800abae:	0964      	lsrs	r4, r4, #5
 800abb0:	465e      	mov	r6, fp
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	4642      	mov	r2, r8
 800abb6:	4615      	mov	r5, r2
 800abb8:	3201      	adds	r2, #1
 800abba:	7828      	ldrb	r0, [r5, #0]
 800abbc:	f7ff ffaa 	bl	800ab14 <__hexdig_fun>
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d1f8      	bne.n	800abb6 <__gethex+0x76>
 800abc4:	4994      	ldr	r1, [pc, #592]	; (800ae18 <__gethex+0x2d8>)
 800abc6:	2201      	movs	r2, #1
 800abc8:	4628      	mov	r0, r5
 800abca:	f7ff fee3 	bl	800a994 <strncmp>
 800abce:	b978      	cbnz	r0, 800abf0 <__gethex+0xb0>
 800abd0:	b946      	cbnz	r6, 800abe4 <__gethex+0xa4>
 800abd2:	1c6e      	adds	r6, r5, #1
 800abd4:	4632      	mov	r2, r6
 800abd6:	4615      	mov	r5, r2
 800abd8:	3201      	adds	r2, #1
 800abda:	7828      	ldrb	r0, [r5, #0]
 800abdc:	f7ff ff9a 	bl	800ab14 <__hexdig_fun>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d1f8      	bne.n	800abd6 <__gethex+0x96>
 800abe4:	1b73      	subs	r3, r6, r5
 800abe6:	009e      	lsls	r6, r3, #2
 800abe8:	e004      	b.n	800abf4 <__gethex+0xb4>
 800abea:	2400      	movs	r4, #0
 800abec:	4626      	mov	r6, r4
 800abee:	e7e1      	b.n	800abb4 <__gethex+0x74>
 800abf0:	2e00      	cmp	r6, #0
 800abf2:	d1f7      	bne.n	800abe4 <__gethex+0xa4>
 800abf4:	782b      	ldrb	r3, [r5, #0]
 800abf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800abfa:	2b50      	cmp	r3, #80	; 0x50
 800abfc:	d13d      	bne.n	800ac7a <__gethex+0x13a>
 800abfe:	786b      	ldrb	r3, [r5, #1]
 800ac00:	2b2b      	cmp	r3, #43	; 0x2b
 800ac02:	d02f      	beq.n	800ac64 <__gethex+0x124>
 800ac04:	2b2d      	cmp	r3, #45	; 0x2d
 800ac06:	d031      	beq.n	800ac6c <__gethex+0x12c>
 800ac08:	1c69      	adds	r1, r5, #1
 800ac0a:	f04f 0b00 	mov.w	fp, #0
 800ac0e:	7808      	ldrb	r0, [r1, #0]
 800ac10:	f7ff ff80 	bl	800ab14 <__hexdig_fun>
 800ac14:	1e42      	subs	r2, r0, #1
 800ac16:	b2d2      	uxtb	r2, r2
 800ac18:	2a18      	cmp	r2, #24
 800ac1a:	d82e      	bhi.n	800ac7a <__gethex+0x13a>
 800ac1c:	f1a0 0210 	sub.w	r2, r0, #16
 800ac20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac24:	f7ff ff76 	bl	800ab14 <__hexdig_fun>
 800ac28:	f100 3cff 	add.w	ip, r0, #4294967295
 800ac2c:	fa5f fc8c 	uxtb.w	ip, ip
 800ac30:	f1bc 0f18 	cmp.w	ip, #24
 800ac34:	d91d      	bls.n	800ac72 <__gethex+0x132>
 800ac36:	f1bb 0f00 	cmp.w	fp, #0
 800ac3a:	d000      	beq.n	800ac3e <__gethex+0xfe>
 800ac3c:	4252      	negs	r2, r2
 800ac3e:	4416      	add	r6, r2
 800ac40:	f8ca 1000 	str.w	r1, [sl]
 800ac44:	b1dc      	cbz	r4, 800ac7e <__gethex+0x13e>
 800ac46:	9b01      	ldr	r3, [sp, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	bf14      	ite	ne
 800ac4c:	f04f 0800 	movne.w	r8, #0
 800ac50:	f04f 0806 	moveq.w	r8, #6
 800ac54:	4640      	mov	r0, r8
 800ac56:	b005      	add	sp, #20
 800ac58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5c:	4645      	mov	r5, r8
 800ac5e:	4626      	mov	r6, r4
 800ac60:	2401      	movs	r4, #1
 800ac62:	e7c7      	b.n	800abf4 <__gethex+0xb4>
 800ac64:	f04f 0b00 	mov.w	fp, #0
 800ac68:	1ca9      	adds	r1, r5, #2
 800ac6a:	e7d0      	b.n	800ac0e <__gethex+0xce>
 800ac6c:	f04f 0b01 	mov.w	fp, #1
 800ac70:	e7fa      	b.n	800ac68 <__gethex+0x128>
 800ac72:	230a      	movs	r3, #10
 800ac74:	fb03 0002 	mla	r0, r3, r2, r0
 800ac78:	e7d0      	b.n	800ac1c <__gethex+0xdc>
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	e7e0      	b.n	800ac40 <__gethex+0x100>
 800ac7e:	eba5 0308 	sub.w	r3, r5, r8
 800ac82:	3b01      	subs	r3, #1
 800ac84:	4621      	mov	r1, r4
 800ac86:	2b07      	cmp	r3, #7
 800ac88:	dc0a      	bgt.n	800aca0 <__gethex+0x160>
 800ac8a:	4648      	mov	r0, r9
 800ac8c:	f7fe f91e 	bl	8008ecc <_Balloc>
 800ac90:	4604      	mov	r4, r0
 800ac92:	b940      	cbnz	r0, 800aca6 <__gethex+0x166>
 800ac94:	4b61      	ldr	r3, [pc, #388]	; (800ae1c <__gethex+0x2dc>)
 800ac96:	4602      	mov	r2, r0
 800ac98:	21e4      	movs	r1, #228	; 0xe4
 800ac9a:	4861      	ldr	r0, [pc, #388]	; (800ae20 <__gethex+0x2e0>)
 800ac9c:	f7ff feb4 	bl	800aa08 <__assert_func>
 800aca0:	3101      	adds	r1, #1
 800aca2:	105b      	asrs	r3, r3, #1
 800aca4:	e7ef      	b.n	800ac86 <__gethex+0x146>
 800aca6:	f100 0a14 	add.w	sl, r0, #20
 800acaa:	2300      	movs	r3, #0
 800acac:	495a      	ldr	r1, [pc, #360]	; (800ae18 <__gethex+0x2d8>)
 800acae:	f8cd a004 	str.w	sl, [sp, #4]
 800acb2:	469b      	mov	fp, r3
 800acb4:	45a8      	cmp	r8, r5
 800acb6:	d342      	bcc.n	800ad3e <__gethex+0x1fe>
 800acb8:	9801      	ldr	r0, [sp, #4]
 800acba:	f840 bb04 	str.w	fp, [r0], #4
 800acbe:	eba0 000a 	sub.w	r0, r0, sl
 800acc2:	1080      	asrs	r0, r0, #2
 800acc4:	6120      	str	r0, [r4, #16]
 800acc6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800acca:	4658      	mov	r0, fp
 800accc:	f7fe f9f0 	bl	80090b0 <__hi0bits>
 800acd0:	683d      	ldr	r5, [r7, #0]
 800acd2:	eba8 0000 	sub.w	r0, r8, r0
 800acd6:	42a8      	cmp	r0, r5
 800acd8:	dd59      	ble.n	800ad8e <__gethex+0x24e>
 800acda:	eba0 0805 	sub.w	r8, r0, r5
 800acde:	4641      	mov	r1, r8
 800ace0:	4620      	mov	r0, r4
 800ace2:	f7fe fd7f 	bl	80097e4 <__any_on>
 800ace6:	4683      	mov	fp, r0
 800ace8:	b1b8      	cbz	r0, 800ad1a <__gethex+0x1da>
 800acea:	f108 33ff 	add.w	r3, r8, #4294967295
 800acee:	1159      	asrs	r1, r3, #5
 800acf0:	f003 021f 	and.w	r2, r3, #31
 800acf4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800acf8:	f04f 0b01 	mov.w	fp, #1
 800acfc:	fa0b f202 	lsl.w	r2, fp, r2
 800ad00:	420a      	tst	r2, r1
 800ad02:	d00a      	beq.n	800ad1a <__gethex+0x1da>
 800ad04:	455b      	cmp	r3, fp
 800ad06:	dd06      	ble.n	800ad16 <__gethex+0x1d6>
 800ad08:	f1a8 0102 	sub.w	r1, r8, #2
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f7fe fd69 	bl	80097e4 <__any_on>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d138      	bne.n	800ad88 <__gethex+0x248>
 800ad16:	f04f 0b02 	mov.w	fp, #2
 800ad1a:	4641      	mov	r1, r8
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f7ff fea7 	bl	800aa70 <rshift>
 800ad22:	4446      	add	r6, r8
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	42b3      	cmp	r3, r6
 800ad28:	da41      	bge.n	800adae <__gethex+0x26e>
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	4648      	mov	r0, r9
 800ad2e:	f7fe f90d 	bl	8008f4c <_Bfree>
 800ad32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad34:	2300      	movs	r3, #0
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ad3c:	e78a      	b.n	800ac54 <__gethex+0x114>
 800ad3e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ad42:	2a2e      	cmp	r2, #46	; 0x2e
 800ad44:	d014      	beq.n	800ad70 <__gethex+0x230>
 800ad46:	2b20      	cmp	r3, #32
 800ad48:	d106      	bne.n	800ad58 <__gethex+0x218>
 800ad4a:	9b01      	ldr	r3, [sp, #4]
 800ad4c:	f843 bb04 	str.w	fp, [r3], #4
 800ad50:	f04f 0b00 	mov.w	fp, #0
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	465b      	mov	r3, fp
 800ad58:	7828      	ldrb	r0, [r5, #0]
 800ad5a:	9303      	str	r3, [sp, #12]
 800ad5c:	f7ff feda 	bl	800ab14 <__hexdig_fun>
 800ad60:	9b03      	ldr	r3, [sp, #12]
 800ad62:	f000 000f 	and.w	r0, r0, #15
 800ad66:	4098      	lsls	r0, r3
 800ad68:	ea4b 0b00 	orr.w	fp, fp, r0
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	e7a1      	b.n	800acb4 <__gethex+0x174>
 800ad70:	45a8      	cmp	r8, r5
 800ad72:	d8e8      	bhi.n	800ad46 <__gethex+0x206>
 800ad74:	2201      	movs	r2, #1
 800ad76:	4628      	mov	r0, r5
 800ad78:	9303      	str	r3, [sp, #12]
 800ad7a:	f7ff fe0b 	bl	800a994 <strncmp>
 800ad7e:	4926      	ldr	r1, [pc, #152]	; (800ae18 <__gethex+0x2d8>)
 800ad80:	9b03      	ldr	r3, [sp, #12]
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d1df      	bne.n	800ad46 <__gethex+0x206>
 800ad86:	e795      	b.n	800acb4 <__gethex+0x174>
 800ad88:	f04f 0b03 	mov.w	fp, #3
 800ad8c:	e7c5      	b.n	800ad1a <__gethex+0x1da>
 800ad8e:	da0b      	bge.n	800ada8 <__gethex+0x268>
 800ad90:	eba5 0800 	sub.w	r8, r5, r0
 800ad94:	4621      	mov	r1, r4
 800ad96:	4642      	mov	r2, r8
 800ad98:	4648      	mov	r0, r9
 800ad9a:	f7fe faf1 	bl	8009380 <__lshift>
 800ad9e:	eba6 0608 	sub.w	r6, r6, r8
 800ada2:	4604      	mov	r4, r0
 800ada4:	f100 0a14 	add.w	sl, r0, #20
 800ada8:	f04f 0b00 	mov.w	fp, #0
 800adac:	e7ba      	b.n	800ad24 <__gethex+0x1e4>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	42b3      	cmp	r3, r6
 800adb2:	dd73      	ble.n	800ae9c <__gethex+0x35c>
 800adb4:	1b9e      	subs	r6, r3, r6
 800adb6:	42b5      	cmp	r5, r6
 800adb8:	dc34      	bgt.n	800ae24 <__gethex+0x2e4>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d023      	beq.n	800ae08 <__gethex+0x2c8>
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d025      	beq.n	800ae10 <__gethex+0x2d0>
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d115      	bne.n	800adf4 <__gethex+0x2b4>
 800adc8:	42b5      	cmp	r5, r6
 800adca:	d113      	bne.n	800adf4 <__gethex+0x2b4>
 800adcc:	2d01      	cmp	r5, #1
 800adce:	d10b      	bne.n	800ade8 <__gethex+0x2a8>
 800add0:	9a02      	ldr	r2, [sp, #8]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	2301      	movs	r3, #1
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	f8ca 3000 	str.w	r3, [sl]
 800adde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ade0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ade4:	601c      	str	r4, [r3, #0]
 800ade6:	e735      	b.n	800ac54 <__gethex+0x114>
 800ade8:	1e69      	subs	r1, r5, #1
 800adea:	4620      	mov	r0, r4
 800adec:	f7fe fcfa 	bl	80097e4 <__any_on>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d1ed      	bne.n	800add0 <__gethex+0x290>
 800adf4:	4621      	mov	r1, r4
 800adf6:	4648      	mov	r0, r9
 800adf8:	f7fe f8a8 	bl	8008f4c <_Bfree>
 800adfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adfe:	2300      	movs	r3, #0
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ae06:	e725      	b.n	800ac54 <__gethex+0x114>
 800ae08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1f2      	bne.n	800adf4 <__gethex+0x2b4>
 800ae0e:	e7df      	b.n	800add0 <__gethex+0x290>
 800ae10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1dc      	bne.n	800add0 <__gethex+0x290>
 800ae16:	e7ed      	b.n	800adf4 <__gethex+0x2b4>
 800ae18:	0800ba24 	.word	0x0800ba24
 800ae1c:	0800b8b9 	.word	0x0800b8b9
 800ae20:	0800bbce 	.word	0x0800bbce
 800ae24:	f106 38ff 	add.w	r8, r6, #4294967295
 800ae28:	f1bb 0f00 	cmp.w	fp, #0
 800ae2c:	d133      	bne.n	800ae96 <__gethex+0x356>
 800ae2e:	f1b8 0f00 	cmp.w	r8, #0
 800ae32:	d004      	beq.n	800ae3e <__gethex+0x2fe>
 800ae34:	4641      	mov	r1, r8
 800ae36:	4620      	mov	r0, r4
 800ae38:	f7fe fcd4 	bl	80097e4 <__any_on>
 800ae3c:	4683      	mov	fp, r0
 800ae3e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ae42:	2301      	movs	r3, #1
 800ae44:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ae48:	f008 081f 	and.w	r8, r8, #31
 800ae4c:	fa03 f308 	lsl.w	r3, r3, r8
 800ae50:	4213      	tst	r3, r2
 800ae52:	4631      	mov	r1, r6
 800ae54:	4620      	mov	r0, r4
 800ae56:	bf18      	it	ne
 800ae58:	f04b 0b02 	orrne.w	fp, fp, #2
 800ae5c:	1bad      	subs	r5, r5, r6
 800ae5e:	f7ff fe07 	bl	800aa70 <rshift>
 800ae62:	687e      	ldr	r6, [r7, #4]
 800ae64:	f04f 0802 	mov.w	r8, #2
 800ae68:	f1bb 0f00 	cmp.w	fp, #0
 800ae6c:	d04a      	beq.n	800af04 <__gethex+0x3c4>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d016      	beq.n	800aea2 <__gethex+0x362>
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	d018      	beq.n	800aeaa <__gethex+0x36a>
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d109      	bne.n	800ae90 <__gethex+0x350>
 800ae7c:	f01b 0f02 	tst.w	fp, #2
 800ae80:	d006      	beq.n	800ae90 <__gethex+0x350>
 800ae82:	f8da 3000 	ldr.w	r3, [sl]
 800ae86:	ea4b 0b03 	orr.w	fp, fp, r3
 800ae8a:	f01b 0f01 	tst.w	fp, #1
 800ae8e:	d10f      	bne.n	800aeb0 <__gethex+0x370>
 800ae90:	f048 0810 	orr.w	r8, r8, #16
 800ae94:	e036      	b.n	800af04 <__gethex+0x3c4>
 800ae96:	f04f 0b01 	mov.w	fp, #1
 800ae9a:	e7d0      	b.n	800ae3e <__gethex+0x2fe>
 800ae9c:	f04f 0801 	mov.w	r8, #1
 800aea0:	e7e2      	b.n	800ae68 <__gethex+0x328>
 800aea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aea4:	f1c3 0301 	rsb	r3, r3, #1
 800aea8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d0ef      	beq.n	800ae90 <__gethex+0x350>
 800aeb0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aeb4:	f104 0214 	add.w	r2, r4, #20
 800aeb8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800aec2:	2300      	movs	r3, #0
 800aec4:	4694      	mov	ip, r2
 800aec6:	f852 1b04 	ldr.w	r1, [r2], #4
 800aeca:	f1b1 3fff 	cmp.w	r1, #4294967295
 800aece:	d01e      	beq.n	800af0e <__gethex+0x3ce>
 800aed0:	3101      	adds	r1, #1
 800aed2:	f8cc 1000 	str.w	r1, [ip]
 800aed6:	f1b8 0f02 	cmp.w	r8, #2
 800aeda:	f104 0214 	add.w	r2, r4, #20
 800aede:	d13d      	bne.n	800af5c <__gethex+0x41c>
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	42ab      	cmp	r3, r5
 800aee6:	d10b      	bne.n	800af00 <__gethex+0x3c0>
 800aee8:	1169      	asrs	r1, r5, #5
 800aeea:	2301      	movs	r3, #1
 800aeec:	f005 051f 	and.w	r5, r5, #31
 800aef0:	fa03 f505 	lsl.w	r5, r3, r5
 800aef4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aef8:	421d      	tst	r5, r3
 800aefa:	bf18      	it	ne
 800aefc:	f04f 0801 	movne.w	r8, #1
 800af00:	f048 0820 	orr.w	r8, r8, #32
 800af04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af06:	601c      	str	r4, [r3, #0]
 800af08:	9b02      	ldr	r3, [sp, #8]
 800af0a:	601e      	str	r6, [r3, #0]
 800af0c:	e6a2      	b.n	800ac54 <__gethex+0x114>
 800af0e:	4290      	cmp	r0, r2
 800af10:	f842 3c04 	str.w	r3, [r2, #-4]
 800af14:	d8d6      	bhi.n	800aec4 <__gethex+0x384>
 800af16:	68a2      	ldr	r2, [r4, #8]
 800af18:	4593      	cmp	fp, r2
 800af1a:	db17      	blt.n	800af4c <__gethex+0x40c>
 800af1c:	6861      	ldr	r1, [r4, #4]
 800af1e:	4648      	mov	r0, r9
 800af20:	3101      	adds	r1, #1
 800af22:	f7fd ffd3 	bl	8008ecc <_Balloc>
 800af26:	4682      	mov	sl, r0
 800af28:	b918      	cbnz	r0, 800af32 <__gethex+0x3f2>
 800af2a:	4b1b      	ldr	r3, [pc, #108]	; (800af98 <__gethex+0x458>)
 800af2c:	4602      	mov	r2, r0
 800af2e:	2184      	movs	r1, #132	; 0x84
 800af30:	e6b3      	b.n	800ac9a <__gethex+0x15a>
 800af32:	6922      	ldr	r2, [r4, #16]
 800af34:	3202      	adds	r2, #2
 800af36:	f104 010c 	add.w	r1, r4, #12
 800af3a:	0092      	lsls	r2, r2, #2
 800af3c:	300c      	adds	r0, #12
 800af3e:	f7ff fd4b 	bl	800a9d8 <memcpy>
 800af42:	4621      	mov	r1, r4
 800af44:	4648      	mov	r0, r9
 800af46:	f7fe f801 	bl	8008f4c <_Bfree>
 800af4a:	4654      	mov	r4, sl
 800af4c:	6922      	ldr	r2, [r4, #16]
 800af4e:	1c51      	adds	r1, r2, #1
 800af50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800af54:	6121      	str	r1, [r4, #16]
 800af56:	2101      	movs	r1, #1
 800af58:	6151      	str	r1, [r2, #20]
 800af5a:	e7bc      	b.n	800aed6 <__gethex+0x396>
 800af5c:	6921      	ldr	r1, [r4, #16]
 800af5e:	4559      	cmp	r1, fp
 800af60:	dd0b      	ble.n	800af7a <__gethex+0x43a>
 800af62:	2101      	movs	r1, #1
 800af64:	4620      	mov	r0, r4
 800af66:	f7ff fd83 	bl	800aa70 <rshift>
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	3601      	adds	r6, #1
 800af6e:	42b3      	cmp	r3, r6
 800af70:	f6ff aedb 	blt.w	800ad2a <__gethex+0x1ea>
 800af74:	f04f 0801 	mov.w	r8, #1
 800af78:	e7c2      	b.n	800af00 <__gethex+0x3c0>
 800af7a:	f015 051f 	ands.w	r5, r5, #31
 800af7e:	d0f9      	beq.n	800af74 <__gethex+0x434>
 800af80:	9b01      	ldr	r3, [sp, #4]
 800af82:	441a      	add	r2, r3
 800af84:	f1c5 0520 	rsb	r5, r5, #32
 800af88:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800af8c:	f7fe f890 	bl	80090b0 <__hi0bits>
 800af90:	42a8      	cmp	r0, r5
 800af92:	dbe6      	blt.n	800af62 <__gethex+0x422>
 800af94:	e7ee      	b.n	800af74 <__gethex+0x434>
 800af96:	bf00      	nop
 800af98:	0800b8b9 	.word	0x0800b8b9

0800af9c <L_shift>:
 800af9c:	f1c2 0208 	rsb	r2, r2, #8
 800afa0:	0092      	lsls	r2, r2, #2
 800afa2:	b570      	push	{r4, r5, r6, lr}
 800afa4:	f1c2 0620 	rsb	r6, r2, #32
 800afa8:	6843      	ldr	r3, [r0, #4]
 800afaa:	6804      	ldr	r4, [r0, #0]
 800afac:	fa03 f506 	lsl.w	r5, r3, r6
 800afb0:	432c      	orrs	r4, r5
 800afb2:	40d3      	lsrs	r3, r2
 800afb4:	6004      	str	r4, [r0, #0]
 800afb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800afba:	4288      	cmp	r0, r1
 800afbc:	d3f4      	bcc.n	800afa8 <L_shift+0xc>
 800afbe:	bd70      	pop	{r4, r5, r6, pc}

0800afc0 <__match>:
 800afc0:	b530      	push	{r4, r5, lr}
 800afc2:	6803      	ldr	r3, [r0, #0]
 800afc4:	3301      	adds	r3, #1
 800afc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afca:	b914      	cbnz	r4, 800afd2 <__match+0x12>
 800afcc:	6003      	str	r3, [r0, #0]
 800afce:	2001      	movs	r0, #1
 800afd0:	bd30      	pop	{r4, r5, pc}
 800afd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800afda:	2d19      	cmp	r5, #25
 800afdc:	bf98      	it	ls
 800afde:	3220      	addls	r2, #32
 800afe0:	42a2      	cmp	r2, r4
 800afe2:	d0f0      	beq.n	800afc6 <__match+0x6>
 800afe4:	2000      	movs	r0, #0
 800afe6:	e7f3      	b.n	800afd0 <__match+0x10>

0800afe8 <__hexnan>:
 800afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afec:	680b      	ldr	r3, [r1, #0]
 800afee:	6801      	ldr	r1, [r0, #0]
 800aff0:	115e      	asrs	r6, r3, #5
 800aff2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aff6:	f013 031f 	ands.w	r3, r3, #31
 800affa:	b087      	sub	sp, #28
 800affc:	bf18      	it	ne
 800affe:	3604      	addne	r6, #4
 800b000:	2500      	movs	r5, #0
 800b002:	1f37      	subs	r7, r6, #4
 800b004:	4682      	mov	sl, r0
 800b006:	4690      	mov	r8, r2
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b00e:	46b9      	mov	r9, r7
 800b010:	463c      	mov	r4, r7
 800b012:	9502      	str	r5, [sp, #8]
 800b014:	46ab      	mov	fp, r5
 800b016:	784a      	ldrb	r2, [r1, #1]
 800b018:	1c4b      	adds	r3, r1, #1
 800b01a:	9303      	str	r3, [sp, #12]
 800b01c:	b342      	cbz	r2, 800b070 <__hexnan+0x88>
 800b01e:	4610      	mov	r0, r2
 800b020:	9105      	str	r1, [sp, #20]
 800b022:	9204      	str	r2, [sp, #16]
 800b024:	f7ff fd76 	bl	800ab14 <__hexdig_fun>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d14f      	bne.n	800b0cc <__hexnan+0xe4>
 800b02c:	9a04      	ldr	r2, [sp, #16]
 800b02e:	9905      	ldr	r1, [sp, #20]
 800b030:	2a20      	cmp	r2, #32
 800b032:	d818      	bhi.n	800b066 <__hexnan+0x7e>
 800b034:	9b02      	ldr	r3, [sp, #8]
 800b036:	459b      	cmp	fp, r3
 800b038:	dd13      	ble.n	800b062 <__hexnan+0x7a>
 800b03a:	454c      	cmp	r4, r9
 800b03c:	d206      	bcs.n	800b04c <__hexnan+0x64>
 800b03e:	2d07      	cmp	r5, #7
 800b040:	dc04      	bgt.n	800b04c <__hexnan+0x64>
 800b042:	462a      	mov	r2, r5
 800b044:	4649      	mov	r1, r9
 800b046:	4620      	mov	r0, r4
 800b048:	f7ff ffa8 	bl	800af9c <L_shift>
 800b04c:	4544      	cmp	r4, r8
 800b04e:	d950      	bls.n	800b0f2 <__hexnan+0x10a>
 800b050:	2300      	movs	r3, #0
 800b052:	f1a4 0904 	sub.w	r9, r4, #4
 800b056:	f844 3c04 	str.w	r3, [r4, #-4]
 800b05a:	f8cd b008 	str.w	fp, [sp, #8]
 800b05e:	464c      	mov	r4, r9
 800b060:	461d      	mov	r5, r3
 800b062:	9903      	ldr	r1, [sp, #12]
 800b064:	e7d7      	b.n	800b016 <__hexnan+0x2e>
 800b066:	2a29      	cmp	r2, #41	; 0x29
 800b068:	d155      	bne.n	800b116 <__hexnan+0x12e>
 800b06a:	3102      	adds	r1, #2
 800b06c:	f8ca 1000 	str.w	r1, [sl]
 800b070:	f1bb 0f00 	cmp.w	fp, #0
 800b074:	d04f      	beq.n	800b116 <__hexnan+0x12e>
 800b076:	454c      	cmp	r4, r9
 800b078:	d206      	bcs.n	800b088 <__hexnan+0xa0>
 800b07a:	2d07      	cmp	r5, #7
 800b07c:	dc04      	bgt.n	800b088 <__hexnan+0xa0>
 800b07e:	462a      	mov	r2, r5
 800b080:	4649      	mov	r1, r9
 800b082:	4620      	mov	r0, r4
 800b084:	f7ff ff8a 	bl	800af9c <L_shift>
 800b088:	4544      	cmp	r4, r8
 800b08a:	d934      	bls.n	800b0f6 <__hexnan+0x10e>
 800b08c:	f1a8 0204 	sub.w	r2, r8, #4
 800b090:	4623      	mov	r3, r4
 800b092:	f853 1b04 	ldr.w	r1, [r3], #4
 800b096:	f842 1f04 	str.w	r1, [r2, #4]!
 800b09a:	429f      	cmp	r7, r3
 800b09c:	d2f9      	bcs.n	800b092 <__hexnan+0xaa>
 800b09e:	1b3b      	subs	r3, r7, r4
 800b0a0:	f023 0303 	bic.w	r3, r3, #3
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	3e03      	subs	r6, #3
 800b0a8:	3401      	adds	r4, #1
 800b0aa:	42a6      	cmp	r6, r4
 800b0ac:	bf38      	it	cc
 800b0ae:	2304      	movcc	r3, #4
 800b0b0:	4443      	add	r3, r8
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f843 2b04 	str.w	r2, [r3], #4
 800b0b8:	429f      	cmp	r7, r3
 800b0ba:	d2fb      	bcs.n	800b0b4 <__hexnan+0xcc>
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	b91b      	cbnz	r3, 800b0c8 <__hexnan+0xe0>
 800b0c0:	4547      	cmp	r7, r8
 800b0c2:	d126      	bne.n	800b112 <__hexnan+0x12a>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	603b      	str	r3, [r7, #0]
 800b0c8:	2005      	movs	r0, #5
 800b0ca:	e025      	b.n	800b118 <__hexnan+0x130>
 800b0cc:	3501      	adds	r5, #1
 800b0ce:	2d08      	cmp	r5, #8
 800b0d0:	f10b 0b01 	add.w	fp, fp, #1
 800b0d4:	dd06      	ble.n	800b0e4 <__hexnan+0xfc>
 800b0d6:	4544      	cmp	r4, r8
 800b0d8:	d9c3      	bls.n	800b062 <__hexnan+0x7a>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0e0:	2501      	movs	r5, #1
 800b0e2:	3c04      	subs	r4, #4
 800b0e4:	6822      	ldr	r2, [r4, #0]
 800b0e6:	f000 000f 	and.w	r0, r0, #15
 800b0ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b0ee:	6020      	str	r0, [r4, #0]
 800b0f0:	e7b7      	b.n	800b062 <__hexnan+0x7a>
 800b0f2:	2508      	movs	r5, #8
 800b0f4:	e7b5      	b.n	800b062 <__hexnan+0x7a>
 800b0f6:	9b01      	ldr	r3, [sp, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d0df      	beq.n	800b0bc <__hexnan+0xd4>
 800b0fc:	f1c3 0320 	rsb	r3, r3, #32
 800b100:	f04f 32ff 	mov.w	r2, #4294967295
 800b104:	40da      	lsrs	r2, r3
 800b106:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b10a:	4013      	ands	r3, r2
 800b10c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b110:	e7d4      	b.n	800b0bc <__hexnan+0xd4>
 800b112:	3f04      	subs	r7, #4
 800b114:	e7d2      	b.n	800b0bc <__hexnan+0xd4>
 800b116:	2004      	movs	r0, #4
 800b118:	b007      	add	sp, #28
 800b11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b11e <__ascii_mbtowc>:
 800b11e:	b082      	sub	sp, #8
 800b120:	b901      	cbnz	r1, 800b124 <__ascii_mbtowc+0x6>
 800b122:	a901      	add	r1, sp, #4
 800b124:	b142      	cbz	r2, 800b138 <__ascii_mbtowc+0x1a>
 800b126:	b14b      	cbz	r3, 800b13c <__ascii_mbtowc+0x1e>
 800b128:	7813      	ldrb	r3, [r2, #0]
 800b12a:	600b      	str	r3, [r1, #0]
 800b12c:	7812      	ldrb	r2, [r2, #0]
 800b12e:	1e10      	subs	r0, r2, #0
 800b130:	bf18      	it	ne
 800b132:	2001      	movne	r0, #1
 800b134:	b002      	add	sp, #8
 800b136:	4770      	bx	lr
 800b138:	4610      	mov	r0, r2
 800b13a:	e7fb      	b.n	800b134 <__ascii_mbtowc+0x16>
 800b13c:	f06f 0001 	mvn.w	r0, #1
 800b140:	e7f8      	b.n	800b134 <__ascii_mbtowc+0x16>

0800b142 <_realloc_r>:
 800b142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b146:	4680      	mov	r8, r0
 800b148:	4614      	mov	r4, r2
 800b14a:	460e      	mov	r6, r1
 800b14c:	b921      	cbnz	r1, 800b158 <_realloc_r+0x16>
 800b14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b152:	4611      	mov	r1, r2
 800b154:	f7fd be2e 	b.w	8008db4 <_malloc_r>
 800b158:	b92a      	cbnz	r2, 800b166 <_realloc_r+0x24>
 800b15a:	f7fd fdb7 	bl	8008ccc <_free_r>
 800b15e:	4625      	mov	r5, r4
 800b160:	4628      	mov	r0, r5
 800b162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b166:	f000 f842 	bl	800b1ee <_malloc_usable_size_r>
 800b16a:	4284      	cmp	r4, r0
 800b16c:	4607      	mov	r7, r0
 800b16e:	d802      	bhi.n	800b176 <_realloc_r+0x34>
 800b170:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b174:	d812      	bhi.n	800b19c <_realloc_r+0x5a>
 800b176:	4621      	mov	r1, r4
 800b178:	4640      	mov	r0, r8
 800b17a:	f7fd fe1b 	bl	8008db4 <_malloc_r>
 800b17e:	4605      	mov	r5, r0
 800b180:	2800      	cmp	r0, #0
 800b182:	d0ed      	beq.n	800b160 <_realloc_r+0x1e>
 800b184:	42bc      	cmp	r4, r7
 800b186:	4622      	mov	r2, r4
 800b188:	4631      	mov	r1, r6
 800b18a:	bf28      	it	cs
 800b18c:	463a      	movcs	r2, r7
 800b18e:	f7ff fc23 	bl	800a9d8 <memcpy>
 800b192:	4631      	mov	r1, r6
 800b194:	4640      	mov	r0, r8
 800b196:	f7fd fd99 	bl	8008ccc <_free_r>
 800b19a:	e7e1      	b.n	800b160 <_realloc_r+0x1e>
 800b19c:	4635      	mov	r5, r6
 800b19e:	e7df      	b.n	800b160 <_realloc_r+0x1e>

0800b1a0 <__ascii_wctomb>:
 800b1a0:	b149      	cbz	r1, 800b1b6 <__ascii_wctomb+0x16>
 800b1a2:	2aff      	cmp	r2, #255	; 0xff
 800b1a4:	bf85      	ittet	hi
 800b1a6:	238a      	movhi	r3, #138	; 0x8a
 800b1a8:	6003      	strhi	r3, [r0, #0]
 800b1aa:	700a      	strbls	r2, [r1, #0]
 800b1ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1b0:	bf98      	it	ls
 800b1b2:	2001      	movls	r0, #1
 800b1b4:	4770      	bx	lr
 800b1b6:	4608      	mov	r0, r1
 800b1b8:	4770      	bx	lr
	...

0800b1bc <fiprintf>:
 800b1bc:	b40e      	push	{r1, r2, r3}
 800b1be:	b503      	push	{r0, r1, lr}
 800b1c0:	4601      	mov	r1, r0
 800b1c2:	ab03      	add	r3, sp, #12
 800b1c4:	4805      	ldr	r0, [pc, #20]	; (800b1dc <fiprintf+0x20>)
 800b1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ca:	6800      	ldr	r0, [r0, #0]
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	f000 f83f 	bl	800b250 <_vfiprintf_r>
 800b1d2:	b002      	add	sp, #8
 800b1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1d8:	b003      	add	sp, #12
 800b1da:	4770      	bx	lr
 800b1dc:	2000006c 	.word	0x2000006c

0800b1e0 <abort>:
 800b1e0:	b508      	push	{r3, lr}
 800b1e2:	2006      	movs	r0, #6
 800b1e4:	f000 fa0c 	bl	800b600 <raise>
 800b1e8:	2001      	movs	r0, #1
 800b1ea:	f7f7 f88d 	bl	8002308 <_exit>

0800b1ee <_malloc_usable_size_r>:
 800b1ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1f2:	1f18      	subs	r0, r3, #4
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	bfbc      	itt	lt
 800b1f8:	580b      	ldrlt	r3, [r1, r0]
 800b1fa:	18c0      	addlt	r0, r0, r3
 800b1fc:	4770      	bx	lr

0800b1fe <__sfputc_r>:
 800b1fe:	6893      	ldr	r3, [r2, #8]
 800b200:	3b01      	subs	r3, #1
 800b202:	2b00      	cmp	r3, #0
 800b204:	b410      	push	{r4}
 800b206:	6093      	str	r3, [r2, #8]
 800b208:	da08      	bge.n	800b21c <__sfputc_r+0x1e>
 800b20a:	6994      	ldr	r4, [r2, #24]
 800b20c:	42a3      	cmp	r3, r4
 800b20e:	db01      	blt.n	800b214 <__sfputc_r+0x16>
 800b210:	290a      	cmp	r1, #10
 800b212:	d103      	bne.n	800b21c <__sfputc_r+0x1e>
 800b214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b218:	f000 b934 	b.w	800b484 <__swbuf_r>
 800b21c:	6813      	ldr	r3, [r2, #0]
 800b21e:	1c58      	adds	r0, r3, #1
 800b220:	6010      	str	r0, [r2, #0]
 800b222:	7019      	strb	r1, [r3, #0]
 800b224:	4608      	mov	r0, r1
 800b226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <__sfputs_r>:
 800b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22e:	4606      	mov	r6, r0
 800b230:	460f      	mov	r7, r1
 800b232:	4614      	mov	r4, r2
 800b234:	18d5      	adds	r5, r2, r3
 800b236:	42ac      	cmp	r4, r5
 800b238:	d101      	bne.n	800b23e <__sfputs_r+0x12>
 800b23a:	2000      	movs	r0, #0
 800b23c:	e007      	b.n	800b24e <__sfputs_r+0x22>
 800b23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b242:	463a      	mov	r2, r7
 800b244:	4630      	mov	r0, r6
 800b246:	f7ff ffda 	bl	800b1fe <__sfputc_r>
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	d1f3      	bne.n	800b236 <__sfputs_r+0xa>
 800b24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b250 <_vfiprintf_r>:
 800b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b254:	460d      	mov	r5, r1
 800b256:	b09d      	sub	sp, #116	; 0x74
 800b258:	4614      	mov	r4, r2
 800b25a:	4698      	mov	r8, r3
 800b25c:	4606      	mov	r6, r0
 800b25e:	b118      	cbz	r0, 800b268 <_vfiprintf_r+0x18>
 800b260:	6a03      	ldr	r3, [r0, #32]
 800b262:	b90b      	cbnz	r3, 800b268 <_vfiprintf_r+0x18>
 800b264:	f7fc fd96 	bl	8007d94 <__sinit>
 800b268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b26a:	07d9      	lsls	r1, r3, #31
 800b26c:	d405      	bmi.n	800b27a <_vfiprintf_r+0x2a>
 800b26e:	89ab      	ldrh	r3, [r5, #12]
 800b270:	059a      	lsls	r2, r3, #22
 800b272:	d402      	bmi.n	800b27a <_vfiprintf_r+0x2a>
 800b274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b276:	f7fc fea4 	bl	8007fc2 <__retarget_lock_acquire_recursive>
 800b27a:	89ab      	ldrh	r3, [r5, #12]
 800b27c:	071b      	lsls	r3, r3, #28
 800b27e:	d501      	bpl.n	800b284 <_vfiprintf_r+0x34>
 800b280:	692b      	ldr	r3, [r5, #16]
 800b282:	b99b      	cbnz	r3, 800b2ac <_vfiprintf_r+0x5c>
 800b284:	4629      	mov	r1, r5
 800b286:	4630      	mov	r0, r6
 800b288:	f000 f93a 	bl	800b500 <__swsetup_r>
 800b28c:	b170      	cbz	r0, 800b2ac <_vfiprintf_r+0x5c>
 800b28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b290:	07dc      	lsls	r4, r3, #31
 800b292:	d504      	bpl.n	800b29e <_vfiprintf_r+0x4e>
 800b294:	f04f 30ff 	mov.w	r0, #4294967295
 800b298:	b01d      	add	sp, #116	; 0x74
 800b29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29e:	89ab      	ldrh	r3, [r5, #12]
 800b2a0:	0598      	lsls	r0, r3, #22
 800b2a2:	d4f7      	bmi.n	800b294 <_vfiprintf_r+0x44>
 800b2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2a6:	f7fc fe8d 	bl	8007fc4 <__retarget_lock_release_recursive>
 800b2aa:	e7f3      	b.n	800b294 <_vfiprintf_r+0x44>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b0:	2320      	movs	r3, #32
 800b2b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2ba:	2330      	movs	r3, #48	; 0x30
 800b2bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b470 <_vfiprintf_r+0x220>
 800b2c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2c4:	f04f 0901 	mov.w	r9, #1
 800b2c8:	4623      	mov	r3, r4
 800b2ca:	469a      	mov	sl, r3
 800b2cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2d0:	b10a      	cbz	r2, 800b2d6 <_vfiprintf_r+0x86>
 800b2d2:	2a25      	cmp	r2, #37	; 0x25
 800b2d4:	d1f9      	bne.n	800b2ca <_vfiprintf_r+0x7a>
 800b2d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b2da:	d00b      	beq.n	800b2f4 <_vfiprintf_r+0xa4>
 800b2dc:	465b      	mov	r3, fp
 800b2de:	4622      	mov	r2, r4
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7ff ffa2 	bl	800b22c <__sfputs_r>
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	f000 80a9 	beq.w	800b440 <_vfiprintf_r+0x1f0>
 800b2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f0:	445a      	add	r2, fp
 800b2f2:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 80a1 	beq.w	800b440 <_vfiprintf_r+0x1f0>
 800b2fe:	2300      	movs	r3, #0
 800b300:	f04f 32ff 	mov.w	r2, #4294967295
 800b304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b308:	f10a 0a01 	add.w	sl, sl, #1
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	9307      	str	r3, [sp, #28]
 800b310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b314:	931a      	str	r3, [sp, #104]	; 0x68
 800b316:	4654      	mov	r4, sl
 800b318:	2205      	movs	r2, #5
 800b31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b31e:	4854      	ldr	r0, [pc, #336]	; (800b470 <_vfiprintf_r+0x220>)
 800b320:	f7f4 ff76 	bl	8000210 <memchr>
 800b324:	9a04      	ldr	r2, [sp, #16]
 800b326:	b9d8      	cbnz	r0, 800b360 <_vfiprintf_r+0x110>
 800b328:	06d1      	lsls	r1, r2, #27
 800b32a:	bf44      	itt	mi
 800b32c:	2320      	movmi	r3, #32
 800b32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b332:	0713      	lsls	r3, r2, #28
 800b334:	bf44      	itt	mi
 800b336:	232b      	movmi	r3, #43	; 0x2b
 800b338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b33c:	f89a 3000 	ldrb.w	r3, [sl]
 800b340:	2b2a      	cmp	r3, #42	; 0x2a
 800b342:	d015      	beq.n	800b370 <_vfiprintf_r+0x120>
 800b344:	9a07      	ldr	r2, [sp, #28]
 800b346:	4654      	mov	r4, sl
 800b348:	2000      	movs	r0, #0
 800b34a:	f04f 0c0a 	mov.w	ip, #10
 800b34e:	4621      	mov	r1, r4
 800b350:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b354:	3b30      	subs	r3, #48	; 0x30
 800b356:	2b09      	cmp	r3, #9
 800b358:	d94d      	bls.n	800b3f6 <_vfiprintf_r+0x1a6>
 800b35a:	b1b0      	cbz	r0, 800b38a <_vfiprintf_r+0x13a>
 800b35c:	9207      	str	r2, [sp, #28]
 800b35e:	e014      	b.n	800b38a <_vfiprintf_r+0x13a>
 800b360:	eba0 0308 	sub.w	r3, r0, r8
 800b364:	fa09 f303 	lsl.w	r3, r9, r3
 800b368:	4313      	orrs	r3, r2
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	46a2      	mov	sl, r4
 800b36e:	e7d2      	b.n	800b316 <_vfiprintf_r+0xc6>
 800b370:	9b03      	ldr	r3, [sp, #12]
 800b372:	1d19      	adds	r1, r3, #4
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	9103      	str	r1, [sp, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	bfbb      	ittet	lt
 800b37c:	425b      	neglt	r3, r3
 800b37e:	f042 0202 	orrlt.w	r2, r2, #2
 800b382:	9307      	strge	r3, [sp, #28]
 800b384:	9307      	strlt	r3, [sp, #28]
 800b386:	bfb8      	it	lt
 800b388:	9204      	strlt	r2, [sp, #16]
 800b38a:	7823      	ldrb	r3, [r4, #0]
 800b38c:	2b2e      	cmp	r3, #46	; 0x2e
 800b38e:	d10c      	bne.n	800b3aa <_vfiprintf_r+0x15a>
 800b390:	7863      	ldrb	r3, [r4, #1]
 800b392:	2b2a      	cmp	r3, #42	; 0x2a
 800b394:	d134      	bne.n	800b400 <_vfiprintf_r+0x1b0>
 800b396:	9b03      	ldr	r3, [sp, #12]
 800b398:	1d1a      	adds	r2, r3, #4
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	9203      	str	r2, [sp, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	bfb8      	it	lt
 800b3a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3a6:	3402      	adds	r4, #2
 800b3a8:	9305      	str	r3, [sp, #20]
 800b3aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b480 <_vfiprintf_r+0x230>
 800b3ae:	7821      	ldrb	r1, [r4, #0]
 800b3b0:	2203      	movs	r2, #3
 800b3b2:	4650      	mov	r0, sl
 800b3b4:	f7f4 ff2c 	bl	8000210 <memchr>
 800b3b8:	b138      	cbz	r0, 800b3ca <_vfiprintf_r+0x17a>
 800b3ba:	9b04      	ldr	r3, [sp, #16]
 800b3bc:	eba0 000a 	sub.w	r0, r0, sl
 800b3c0:	2240      	movs	r2, #64	; 0x40
 800b3c2:	4082      	lsls	r2, r0
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	3401      	adds	r4, #1
 800b3c8:	9304      	str	r3, [sp, #16]
 800b3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ce:	4829      	ldr	r0, [pc, #164]	; (800b474 <_vfiprintf_r+0x224>)
 800b3d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3d4:	2206      	movs	r2, #6
 800b3d6:	f7f4 ff1b 	bl	8000210 <memchr>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d03f      	beq.n	800b45e <_vfiprintf_r+0x20e>
 800b3de:	4b26      	ldr	r3, [pc, #152]	; (800b478 <_vfiprintf_r+0x228>)
 800b3e0:	bb1b      	cbnz	r3, 800b42a <_vfiprintf_r+0x1da>
 800b3e2:	9b03      	ldr	r3, [sp, #12]
 800b3e4:	3307      	adds	r3, #7
 800b3e6:	f023 0307 	bic.w	r3, r3, #7
 800b3ea:	3308      	adds	r3, #8
 800b3ec:	9303      	str	r3, [sp, #12]
 800b3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f0:	443b      	add	r3, r7
 800b3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f4:	e768      	b.n	800b2c8 <_vfiprintf_r+0x78>
 800b3f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	2001      	movs	r0, #1
 800b3fe:	e7a6      	b.n	800b34e <_vfiprintf_r+0xfe>
 800b400:	2300      	movs	r3, #0
 800b402:	3401      	adds	r4, #1
 800b404:	9305      	str	r3, [sp, #20]
 800b406:	4619      	mov	r1, r3
 800b408:	f04f 0c0a 	mov.w	ip, #10
 800b40c:	4620      	mov	r0, r4
 800b40e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b412:	3a30      	subs	r2, #48	; 0x30
 800b414:	2a09      	cmp	r2, #9
 800b416:	d903      	bls.n	800b420 <_vfiprintf_r+0x1d0>
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d0c6      	beq.n	800b3aa <_vfiprintf_r+0x15a>
 800b41c:	9105      	str	r1, [sp, #20]
 800b41e:	e7c4      	b.n	800b3aa <_vfiprintf_r+0x15a>
 800b420:	fb0c 2101 	mla	r1, ip, r1, r2
 800b424:	4604      	mov	r4, r0
 800b426:	2301      	movs	r3, #1
 800b428:	e7f0      	b.n	800b40c <_vfiprintf_r+0x1bc>
 800b42a:	ab03      	add	r3, sp, #12
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	462a      	mov	r2, r5
 800b430:	4b12      	ldr	r3, [pc, #72]	; (800b47c <_vfiprintf_r+0x22c>)
 800b432:	a904      	add	r1, sp, #16
 800b434:	4630      	mov	r0, r6
 800b436:	f7fb fe4b 	bl	80070d0 <_printf_float>
 800b43a:	4607      	mov	r7, r0
 800b43c:	1c78      	adds	r0, r7, #1
 800b43e:	d1d6      	bne.n	800b3ee <_vfiprintf_r+0x19e>
 800b440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b442:	07d9      	lsls	r1, r3, #31
 800b444:	d405      	bmi.n	800b452 <_vfiprintf_r+0x202>
 800b446:	89ab      	ldrh	r3, [r5, #12]
 800b448:	059a      	lsls	r2, r3, #22
 800b44a:	d402      	bmi.n	800b452 <_vfiprintf_r+0x202>
 800b44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b44e:	f7fc fdb9 	bl	8007fc4 <__retarget_lock_release_recursive>
 800b452:	89ab      	ldrh	r3, [r5, #12]
 800b454:	065b      	lsls	r3, r3, #25
 800b456:	f53f af1d 	bmi.w	800b294 <_vfiprintf_r+0x44>
 800b45a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b45c:	e71c      	b.n	800b298 <_vfiprintf_r+0x48>
 800b45e:	ab03      	add	r3, sp, #12
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	462a      	mov	r2, r5
 800b464:	4b05      	ldr	r3, [pc, #20]	; (800b47c <_vfiprintf_r+0x22c>)
 800b466:	a904      	add	r1, sp, #16
 800b468:	4630      	mov	r0, r6
 800b46a:	f7fc f8d5 	bl	8007618 <_printf_i>
 800b46e:	e7e4      	b.n	800b43a <_vfiprintf_r+0x1ea>
 800b470:	0800bb79 	.word	0x0800bb79
 800b474:	0800bb83 	.word	0x0800bb83
 800b478:	080070d1 	.word	0x080070d1
 800b47c:	0800b22d 	.word	0x0800b22d
 800b480:	0800bb7f 	.word	0x0800bb7f

0800b484 <__swbuf_r>:
 800b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b486:	460e      	mov	r6, r1
 800b488:	4614      	mov	r4, r2
 800b48a:	4605      	mov	r5, r0
 800b48c:	b118      	cbz	r0, 800b496 <__swbuf_r+0x12>
 800b48e:	6a03      	ldr	r3, [r0, #32]
 800b490:	b90b      	cbnz	r3, 800b496 <__swbuf_r+0x12>
 800b492:	f7fc fc7f 	bl	8007d94 <__sinit>
 800b496:	69a3      	ldr	r3, [r4, #24]
 800b498:	60a3      	str	r3, [r4, #8]
 800b49a:	89a3      	ldrh	r3, [r4, #12]
 800b49c:	071a      	lsls	r2, r3, #28
 800b49e:	d525      	bpl.n	800b4ec <__swbuf_r+0x68>
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	b31b      	cbz	r3, 800b4ec <__swbuf_r+0x68>
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	6922      	ldr	r2, [r4, #16]
 800b4a8:	1a98      	subs	r0, r3, r2
 800b4aa:	6963      	ldr	r3, [r4, #20]
 800b4ac:	b2f6      	uxtb	r6, r6
 800b4ae:	4283      	cmp	r3, r0
 800b4b0:	4637      	mov	r7, r6
 800b4b2:	dc04      	bgt.n	800b4be <__swbuf_r+0x3a>
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f7ff fa2a 	bl	800a910 <_fflush_r>
 800b4bc:	b9e0      	cbnz	r0, 800b4f8 <__swbuf_r+0x74>
 800b4be:	68a3      	ldr	r3, [r4, #8]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	60a3      	str	r3, [r4, #8]
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	1c5a      	adds	r2, r3, #1
 800b4c8:	6022      	str	r2, [r4, #0]
 800b4ca:	701e      	strb	r6, [r3, #0]
 800b4cc:	6962      	ldr	r2, [r4, #20]
 800b4ce:	1c43      	adds	r3, r0, #1
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d004      	beq.n	800b4de <__swbuf_r+0x5a>
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	07db      	lsls	r3, r3, #31
 800b4d8:	d506      	bpl.n	800b4e8 <__swbuf_r+0x64>
 800b4da:	2e0a      	cmp	r6, #10
 800b4dc:	d104      	bne.n	800b4e8 <__swbuf_r+0x64>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f7ff fa15 	bl	800a910 <_fflush_r>
 800b4e6:	b938      	cbnz	r0, 800b4f8 <__swbuf_r+0x74>
 800b4e8:	4638      	mov	r0, r7
 800b4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	f000 f806 	bl	800b500 <__swsetup_r>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d0d5      	beq.n	800b4a4 <__swbuf_r+0x20>
 800b4f8:	f04f 37ff 	mov.w	r7, #4294967295
 800b4fc:	e7f4      	b.n	800b4e8 <__swbuf_r+0x64>
	...

0800b500 <__swsetup_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	4b2a      	ldr	r3, [pc, #168]	; (800b5ac <__swsetup_r+0xac>)
 800b504:	4605      	mov	r5, r0
 800b506:	6818      	ldr	r0, [r3, #0]
 800b508:	460c      	mov	r4, r1
 800b50a:	b118      	cbz	r0, 800b514 <__swsetup_r+0x14>
 800b50c:	6a03      	ldr	r3, [r0, #32]
 800b50e:	b90b      	cbnz	r3, 800b514 <__swsetup_r+0x14>
 800b510:	f7fc fc40 	bl	8007d94 <__sinit>
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b51a:	0718      	lsls	r0, r3, #28
 800b51c:	d422      	bmi.n	800b564 <__swsetup_r+0x64>
 800b51e:	06d9      	lsls	r1, r3, #27
 800b520:	d407      	bmi.n	800b532 <__swsetup_r+0x32>
 800b522:	2309      	movs	r3, #9
 800b524:	602b      	str	r3, [r5, #0]
 800b526:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b52a:	81a3      	strh	r3, [r4, #12]
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295
 800b530:	e034      	b.n	800b59c <__swsetup_r+0x9c>
 800b532:	0758      	lsls	r0, r3, #29
 800b534:	d512      	bpl.n	800b55c <__swsetup_r+0x5c>
 800b536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b538:	b141      	cbz	r1, 800b54c <__swsetup_r+0x4c>
 800b53a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b53e:	4299      	cmp	r1, r3
 800b540:	d002      	beq.n	800b548 <__swsetup_r+0x48>
 800b542:	4628      	mov	r0, r5
 800b544:	f7fd fbc2 	bl	8008ccc <_free_r>
 800b548:	2300      	movs	r3, #0
 800b54a:	6363      	str	r3, [r4, #52]	; 0x34
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b552:	81a3      	strh	r3, [r4, #12]
 800b554:	2300      	movs	r3, #0
 800b556:	6063      	str	r3, [r4, #4]
 800b558:	6923      	ldr	r3, [r4, #16]
 800b55a:	6023      	str	r3, [r4, #0]
 800b55c:	89a3      	ldrh	r3, [r4, #12]
 800b55e:	f043 0308 	orr.w	r3, r3, #8
 800b562:	81a3      	strh	r3, [r4, #12]
 800b564:	6923      	ldr	r3, [r4, #16]
 800b566:	b94b      	cbnz	r3, 800b57c <__swsetup_r+0x7c>
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b56e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b572:	d003      	beq.n	800b57c <__swsetup_r+0x7c>
 800b574:	4621      	mov	r1, r4
 800b576:	4628      	mov	r0, r5
 800b578:	f000 f884 	bl	800b684 <__smakebuf_r>
 800b57c:	89a0      	ldrh	r0, [r4, #12]
 800b57e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b582:	f010 0301 	ands.w	r3, r0, #1
 800b586:	d00a      	beq.n	800b59e <__swsetup_r+0x9e>
 800b588:	2300      	movs	r3, #0
 800b58a:	60a3      	str	r3, [r4, #8]
 800b58c:	6963      	ldr	r3, [r4, #20]
 800b58e:	425b      	negs	r3, r3
 800b590:	61a3      	str	r3, [r4, #24]
 800b592:	6923      	ldr	r3, [r4, #16]
 800b594:	b943      	cbnz	r3, 800b5a8 <__swsetup_r+0xa8>
 800b596:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b59a:	d1c4      	bne.n	800b526 <__swsetup_r+0x26>
 800b59c:	bd38      	pop	{r3, r4, r5, pc}
 800b59e:	0781      	lsls	r1, r0, #30
 800b5a0:	bf58      	it	pl
 800b5a2:	6963      	ldrpl	r3, [r4, #20]
 800b5a4:	60a3      	str	r3, [r4, #8]
 800b5a6:	e7f4      	b.n	800b592 <__swsetup_r+0x92>
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e7f7      	b.n	800b59c <__swsetup_r+0x9c>
 800b5ac:	2000006c 	.word	0x2000006c

0800b5b0 <_raise_r>:
 800b5b0:	291f      	cmp	r1, #31
 800b5b2:	b538      	push	{r3, r4, r5, lr}
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	460d      	mov	r5, r1
 800b5b8:	d904      	bls.n	800b5c4 <_raise_r+0x14>
 800b5ba:	2316      	movs	r3, #22
 800b5bc:	6003      	str	r3, [r0, #0]
 800b5be:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b5c6:	b112      	cbz	r2, 800b5ce <_raise_r+0x1e>
 800b5c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5cc:	b94b      	cbnz	r3, 800b5e2 <_raise_r+0x32>
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 f830 	bl	800b634 <_getpid_r>
 800b5d4:	462a      	mov	r2, r5
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	4620      	mov	r0, r4
 800b5da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5de:	f000 b817 	b.w	800b610 <_kill_r>
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d00a      	beq.n	800b5fc <_raise_r+0x4c>
 800b5e6:	1c59      	adds	r1, r3, #1
 800b5e8:	d103      	bne.n	800b5f2 <_raise_r+0x42>
 800b5ea:	2316      	movs	r3, #22
 800b5ec:	6003      	str	r3, [r0, #0]
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	e7e7      	b.n	800b5c2 <_raise_r+0x12>
 800b5f2:	2400      	movs	r4, #0
 800b5f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	4798      	blx	r3
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	e7e0      	b.n	800b5c2 <_raise_r+0x12>

0800b600 <raise>:
 800b600:	4b02      	ldr	r3, [pc, #8]	; (800b60c <raise+0xc>)
 800b602:	4601      	mov	r1, r0
 800b604:	6818      	ldr	r0, [r3, #0]
 800b606:	f7ff bfd3 	b.w	800b5b0 <_raise_r>
 800b60a:	bf00      	nop
 800b60c:	2000006c 	.word	0x2000006c

0800b610 <_kill_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4d07      	ldr	r5, [pc, #28]	; (800b630 <_kill_r+0x20>)
 800b614:	2300      	movs	r3, #0
 800b616:	4604      	mov	r4, r0
 800b618:	4608      	mov	r0, r1
 800b61a:	4611      	mov	r1, r2
 800b61c:	602b      	str	r3, [r5, #0]
 800b61e:	f7f6 fe63 	bl	80022e8 <_kill>
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	d102      	bne.n	800b62c <_kill_r+0x1c>
 800b626:	682b      	ldr	r3, [r5, #0]
 800b628:	b103      	cbz	r3, 800b62c <_kill_r+0x1c>
 800b62a:	6023      	str	r3, [r4, #0]
 800b62c:	bd38      	pop	{r3, r4, r5, pc}
 800b62e:	bf00      	nop
 800b630:	20000c48 	.word	0x20000c48

0800b634 <_getpid_r>:
 800b634:	f7f6 be50 	b.w	80022d8 <_getpid>

0800b638 <__swhatbuf_r>:
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	460c      	mov	r4, r1
 800b63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b640:	2900      	cmp	r1, #0
 800b642:	b096      	sub	sp, #88	; 0x58
 800b644:	4615      	mov	r5, r2
 800b646:	461e      	mov	r6, r3
 800b648:	da0d      	bge.n	800b666 <__swhatbuf_r+0x2e>
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b650:	f04f 0100 	mov.w	r1, #0
 800b654:	bf0c      	ite	eq
 800b656:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b65a:	2340      	movne	r3, #64	; 0x40
 800b65c:	2000      	movs	r0, #0
 800b65e:	6031      	str	r1, [r6, #0]
 800b660:	602b      	str	r3, [r5, #0]
 800b662:	b016      	add	sp, #88	; 0x58
 800b664:	bd70      	pop	{r4, r5, r6, pc}
 800b666:	466a      	mov	r2, sp
 800b668:	f000 f848 	bl	800b6fc <_fstat_r>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	dbec      	blt.n	800b64a <__swhatbuf_r+0x12>
 800b670:	9901      	ldr	r1, [sp, #4]
 800b672:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b676:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b67a:	4259      	negs	r1, r3
 800b67c:	4159      	adcs	r1, r3
 800b67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b682:	e7eb      	b.n	800b65c <__swhatbuf_r+0x24>

0800b684 <__smakebuf_r>:
 800b684:	898b      	ldrh	r3, [r1, #12]
 800b686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b688:	079d      	lsls	r5, r3, #30
 800b68a:	4606      	mov	r6, r0
 800b68c:	460c      	mov	r4, r1
 800b68e:	d507      	bpl.n	800b6a0 <__smakebuf_r+0x1c>
 800b690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	6123      	str	r3, [r4, #16]
 800b698:	2301      	movs	r3, #1
 800b69a:	6163      	str	r3, [r4, #20]
 800b69c:	b002      	add	sp, #8
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	ab01      	add	r3, sp, #4
 800b6a2:	466a      	mov	r2, sp
 800b6a4:	f7ff ffc8 	bl	800b638 <__swhatbuf_r>
 800b6a8:	9900      	ldr	r1, [sp, #0]
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7fd fb81 	bl	8008db4 <_malloc_r>
 800b6b2:	b948      	cbnz	r0, 800b6c8 <__smakebuf_r+0x44>
 800b6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b8:	059a      	lsls	r2, r3, #22
 800b6ba:	d4ef      	bmi.n	800b69c <__smakebuf_r+0x18>
 800b6bc:	f023 0303 	bic.w	r3, r3, #3
 800b6c0:	f043 0302 	orr.w	r3, r3, #2
 800b6c4:	81a3      	strh	r3, [r4, #12]
 800b6c6:	e7e3      	b.n	800b690 <__smakebuf_r+0xc>
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	6020      	str	r0, [r4, #0]
 800b6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d0:	81a3      	strh	r3, [r4, #12]
 800b6d2:	9b00      	ldr	r3, [sp, #0]
 800b6d4:	6163      	str	r3, [r4, #20]
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	6120      	str	r0, [r4, #16]
 800b6da:	b15b      	cbz	r3, 800b6f4 <__smakebuf_r+0x70>
 800b6dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f000 f81d 	bl	800b720 <_isatty_r>
 800b6e6:	b128      	cbz	r0, 800b6f4 <__smakebuf_r+0x70>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	f023 0303 	bic.w	r3, r3, #3
 800b6ee:	f043 0301 	orr.w	r3, r3, #1
 800b6f2:	81a3      	strh	r3, [r4, #12]
 800b6f4:	89a3      	ldrh	r3, [r4, #12]
 800b6f6:	431d      	orrs	r5, r3
 800b6f8:	81a5      	strh	r5, [r4, #12]
 800b6fa:	e7cf      	b.n	800b69c <__smakebuf_r+0x18>

0800b6fc <_fstat_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4d07      	ldr	r5, [pc, #28]	; (800b71c <_fstat_r+0x20>)
 800b700:	2300      	movs	r3, #0
 800b702:	4604      	mov	r4, r0
 800b704:	4608      	mov	r0, r1
 800b706:	4611      	mov	r1, r2
 800b708:	602b      	str	r3, [r5, #0]
 800b70a:	f7f6 fe30 	bl	800236e <_fstat>
 800b70e:	1c43      	adds	r3, r0, #1
 800b710:	d102      	bne.n	800b718 <_fstat_r+0x1c>
 800b712:	682b      	ldr	r3, [r5, #0]
 800b714:	b103      	cbz	r3, 800b718 <_fstat_r+0x1c>
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	bd38      	pop	{r3, r4, r5, pc}
 800b71a:	bf00      	nop
 800b71c:	20000c48 	.word	0x20000c48

0800b720 <_isatty_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d06      	ldr	r5, [pc, #24]	; (800b73c <_isatty_r+0x1c>)
 800b724:	2300      	movs	r3, #0
 800b726:	4604      	mov	r4, r0
 800b728:	4608      	mov	r0, r1
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	f7f6 fe2f 	bl	800238e <_isatty>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_isatty_r+0x1a>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_isatty_r+0x1a>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	20000c48 	.word	0x20000c48

0800b740 <_init>:
 800b740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b742:	bf00      	nop
 800b744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b746:	bc08      	pop	{r3}
 800b748:	469e      	mov	lr, r3
 800b74a:	4770      	bx	lr

0800b74c <_fini>:
 800b74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74e:	bf00      	nop
 800b750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b752:	bc08      	pop	{r3}
 800b754:	469e      	mov	lr, r3
 800b756:	4770      	bx	lr
