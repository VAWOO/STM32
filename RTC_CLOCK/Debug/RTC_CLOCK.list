
RTC_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b38  08005b38  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b40  08005b40  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b44  08005b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000a04  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a68  20000a68  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   000140e8  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000030b4  00000000  00000000  000341bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001078  00000000  00000000  00037278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cbc  00000000  00000000  000382f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000268b6  00000000  00000000  00038fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000172d7  00000000  00000000  0005f862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2de8  00000000  00000000  00076b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004914  00000000  00000000  00159924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0015e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005a54 	.word	0x08005a54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08005a54 	.word	0x08005a54

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <MX_ETH_Init+0x84>)
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <MX_ETH_Init+0x88>)
 80005a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005a6:	4b20      	ldr	r3, [pc, #128]	; (8000628 <MX_ETH_Init+0x8c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <MX_ETH_Init+0x8c>)
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <MX_ETH_Init+0x8c>)
 80005b4:	22e1      	movs	r2, #225	; 0xe1
 80005b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_ETH_Init+0x8c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_ETH_Init+0x8c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_ETH_Init+0x8c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_ETH_Init+0x84>)
 80005cc:	4a16      	ldr	r2, [pc, #88]	; (8000628 <MX_ETH_Init+0x8c>)
 80005ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <MX_ETH_Init+0x84>)
 80005d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80005d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_ETH_Init+0x84>)
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <MX_ETH_Init+0x90>)
 80005dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_ETH_Init+0x84>)
 80005e0:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_ETH_Init+0x94>)
 80005e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_ETH_Init+0x84>)
 80005e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80005ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <MX_ETH_Init+0x84>)
 80005ee:	f001 f95b 	bl	80018a8 <HAL_ETH_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80005f8:	f000 fd48 	bl	800108c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80005fc:	2238      	movs	r2, #56	; 0x38
 80005fe:	2100      	movs	r1, #0
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <MX_ETH_Init+0x98>)
 8000602:	f004 fda3 	bl	800514c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_ETH_Init+0x98>)
 8000608:	2221      	movs	r2, #33	; 0x21
 800060a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_ETH_Init+0x98>)
 800060e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000612:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_ETH_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200001f8 	.word	0x200001f8
 8000624:	40028000 	.word	0x40028000
 8000628:	200002a8 	.word	0x200002a8
 800062c:	20000120 	.word	0x20000120
 8000630:	20000080 	.word	0x20000080
 8000634:	200001c0 	.word	0x200001c0

08000638 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08e      	sub	sp, #56	; 0x38
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a55      	ldr	r2, [pc, #340]	; (80007ac <HAL_ETH_MspInit+0x174>)
 8000656:	4293      	cmp	r3, r2
 8000658:	f040 80a4 	bne.w	80007a4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	623b      	str	r3, [r7, #32]
 8000660:	4b53      	ldr	r3, [pc, #332]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	4a52      	ldr	r2, [pc, #328]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 8000666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
 800066c:	4b50      	ldr	r3, [pc, #320]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000674:	623b      	str	r3, [r7, #32]
 8000676:	6a3b      	ldr	r3, [r7, #32]
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
 800067c:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	4a4b      	ldr	r2, [pc, #300]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 8000682:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000686:	6313      	str	r3, [r2, #48]	; 0x30
 8000688:	4b49      	ldr	r3, [pc, #292]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
 8000698:	4b45      	ldr	r3, [pc, #276]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	4a44      	ldr	r2, [pc, #272]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 800069e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006a2:	6313      	str	r3, [r2, #48]	; 0x30
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	4b3e      	ldr	r3, [pc, #248]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	4a3d      	ldr	r2, [pc, #244]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6313      	str	r3, [r2, #48]	; 0x30
 80006c0:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	4a36      	ldr	r2, [pc, #216]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6313      	str	r3, [r2, #48]	; 0x30
 80006dc:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	6313      	str	r3, [r2, #48]	; 0x30
 80006f8:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 800070e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000712:	6313      	str	r3, [r2, #48]	; 0x30
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <HAL_ETH_MspInit+0x178>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000720:	2332      	movs	r3, #50	; 0x32
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000730:	230b      	movs	r3, #11
 8000732:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000738:	4619      	mov	r1, r3
 800073a:	481e      	ldr	r0, [pc, #120]	; (80007b4 <HAL_ETH_MspInit+0x17c>)
 800073c:	f001 fbdc 	bl	8001ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000740:	2386      	movs	r3, #134	; 0x86
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000750:	230b      	movs	r3, #11
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000758:	4619      	mov	r1, r3
 800075a:	4817      	ldr	r0, [pc, #92]	; (80007b8 <HAL_ETH_MspInit+0x180>)
 800075c:	f001 fbcc 	bl	8001ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000772:	230b      	movs	r3, #11
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	4619      	mov	r1, r3
 800077c:	480f      	ldr	r0, [pc, #60]	; (80007bc <HAL_ETH_MspInit+0x184>)
 800077e:	f001 fbbb 	bl	8001ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000782:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000794:	230b      	movs	r3, #11
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079c:	4619      	mov	r1, r3
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <HAL_ETH_MspInit+0x188>)
 80007a0:	f001 fbaa 	bl	8001ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007a4:	bf00      	nop
 80007a6:	3738      	adds	r7, #56	; 0x38
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40028000 	.word	0x40028000
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020800 	.word	0x40020800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40020400 	.word	0x40020400
 80007c0:	40021800 	.word	0x40021800

080007c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b59      	ldr	r3, [pc, #356]	; (8000944 <MX_GPIO_Init+0x180>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a58      	ldr	r2, [pc, #352]	; (8000944 <MX_GPIO_Init+0x180>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b56      	ldr	r3, [pc, #344]	; (8000944 <MX_GPIO_Init+0x180>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b52      	ldr	r3, [pc, #328]	; (8000944 <MX_GPIO_Init+0x180>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a51      	ldr	r2, [pc, #324]	; (8000944 <MX_GPIO_Init+0x180>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b4f      	ldr	r3, [pc, #316]	; (8000944 <MX_GPIO_Init+0x180>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <MX_GPIO_Init+0x180>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a4a      	ldr	r2, [pc, #296]	; (8000944 <MX_GPIO_Init+0x180>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b48      	ldr	r3, [pc, #288]	; (8000944 <MX_GPIO_Init+0x180>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b44      	ldr	r3, [pc, #272]	; (8000944 <MX_GPIO_Init+0x180>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a43      	ldr	r2, [pc, #268]	; (8000944 <MX_GPIO_Init+0x180>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b41      	ldr	r3, [pc, #260]	; (8000944 <MX_GPIO_Init+0x180>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <MX_GPIO_Init+0x180>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a3c      	ldr	r2, [pc, #240]	; (8000944 <MX_GPIO_Init+0x180>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b3a      	ldr	r3, [pc, #232]	; (8000944 <MX_GPIO_Init+0x180>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b36      	ldr	r3, [pc, #216]	; (8000944 <MX_GPIO_Init+0x180>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a35      	ldr	r2, [pc, #212]	; (8000944 <MX_GPIO_Init+0x180>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <MX_GPIO_Init+0x180>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f244 0181 	movw	r1, #16513	; 0x4081
 8000888:	482f      	ldr	r0, [pc, #188]	; (8000948 <MX_GPIO_Init+0x184>)
 800088a:	f001 fce1 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	482e      	ldr	r0, [pc, #184]	; (800094c <MX_GPIO_Init+0x188>)
 8000894:	f001 fcdc 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4828      	ldr	r0, [pc, #160]	; (8000950 <MX_GPIO_Init+0x18c>)
 80008b0:	f001 fb22 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	481e      	ldr	r0, [pc, #120]	; (8000948 <MX_GPIO_Init+0x184>)
 80008ce:	f001 fb13 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008dc:	2301      	movs	r3, #1
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4819      	ldr	r0, [pc, #100]	; (800094c <MX_GPIO_Init+0x188>)
 80008e8:	f001 fb06 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4812      	ldr	r0, [pc, #72]	; (800094c <MX_GPIO_Init+0x188>)
 8000904:	f001 faf8 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_GPIO_Init+0x188>)
 800091c:	f001 faec 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BTN_down_Pin|BTN_up_Pin|BTN_select_Pin;
 8000920:	23e0      	movs	r3, #224	; 0xe0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000924:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092a:	2301      	movs	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <MX_GPIO_Init+0x190>)
 8000936:	f001 fadf 	bl	8001ef8 <HAL_GPIO_Init>

}
 800093a:	bf00      	nop
 800093c:	3730      	adds	r7, #48	; 0x30
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400
 800094c:	40021800 	.word	0x40021800
 8000950:	40020800 	.word	0x40020800
 8000954:	40020c00 	.word	0x40020c00

08000958 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_I2C1_Init+0x74>)
 800095e:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <MX_I2C1_Init+0x78>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_I2C1_Init+0x74>)
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <MX_I2C1_Init+0x7c>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_I2C1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_I2C1_Init+0x74>)
 8000976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_I2C1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_I2C1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_I2C1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_I2C1_Init+0x74>)
 8000996:	f001 fc8d 	bl	80022b4 <HAL_I2C_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a0:	f000 fb74 	bl	800108c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <MX_I2C1_Init+0x74>)
 80009a8:	f002 f9fd 	bl	8002da6 <HAL_I2CEx_ConfigAnalogFilter>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009b2:	f000 fb6b 	bl	800108c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_I2C1_Init+0x74>)
 80009ba:	f002 fa30 	bl	8002e1e <HAL_I2CEx_ConfigDigitalFilter>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80009c4:	f000 fb62 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200002b0 	.word	0x200002b0
 80009d0:	40005400 	.word	0x40005400
 80009d4:	000186a0 	.word	0x000186a0

080009d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <HAL_I2C_MspInit+0x84>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12c      	bne.n	8000a54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1c:	2312      	movs	r3, #18
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <HAL_I2C_MspInit+0x8c>)
 8000a34:	f001 fa60 	bl	8001ef8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a46:	6413      	str	r3, [r2, #64]	; 0x40
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400

08000a68 <LCD_SendInternal>:
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	460b      	mov	r3, r1
 8000a74:	71bb      	strb	r3, [r7, #6]
 8000a76:	4613      	mov	r3, r2
 8000a78:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	b299      	uxth	r1, r3
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	2201      	movs	r2, #1
 8000a84:	4822      	ldr	r0, [pc, #136]	; (8000b10 <LCD_SendInternal+0xa8>)
 8000a86:	f001 fe57 	bl	8002738 <HAL_I2C_IsDeviceReady>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d000      	beq.n	8000a96 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000a94:	e7f1      	b.n	8000a7a <LCD_SendInternal+0x12>
            break;
 8000a96:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	f023 030f 	bic.w	r3, r3, #15
 8000a9e:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000aa6:	7bba      	ldrb	r2, [r7, #14]
 8000aa8:	797b      	ldrb	r3, [r7, #5]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	f043 030c 	orr.w	r3, r3, #12
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000ab6:	7bba      	ldrb	r2, [r7, #14]
 8000ab8:	797b      	ldrb	r3, [r7, #5]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f043 0308 	orr.w	r3, r3, #8
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000ac6:	7b7a      	ldrb	r2, [r7, #13]
 8000ac8:	797b      	ldrb	r3, [r7, #5]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	f043 030c 	orr.w	r3, r3, #12
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8000ad6:	7b7a      	ldrb	r2, [r7, #13]
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	b299      	uxth	r1, r3
 8000aea:	f107 0208 	add.w	r2, r7, #8
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2304      	movs	r3, #4
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <LCD_SendInternal+0xa8>)
 8000af8:	f001 fd20 	bl	800253c <HAL_I2C_Master_Transmit>
 8000afc:	4603      	mov	r3, r0
 8000afe:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000b00:	2005      	movs	r0, #5
 8000b02:	f000 fd9b 	bl	800163c <HAL_Delay>
    return res;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200002b0 	.word	0x200002b0

08000b14 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	4613      	mov	r3, r2
 8000b22:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000b24:	79b9      	ldrb	r1, [r7, #6]
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ff9c 	bl	8000a68 <LCD_SendInternal>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000b48:	79b9      	ldrb	r1, [r7, #6]
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff8a 	bl	8000a68 <LCD_SendInternal>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2130      	movs	r1, #48	; 0x30
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ffd2 	bl	8000b14 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2102      	movs	r1, #2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ffcd 	bl	8000b14 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	210c      	movs	r1, #12
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ffc8 	bl	8000b14 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2101      	movs	r1, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ffc3 	bl	8000b14 <LCD_SendCommand>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	6039      	str	r1, [r7, #0]
 8000ba0:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 8000ba2:	e009      	b.n	8000bb8 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ffc3 	bl	8000b38 <LCD_SendData>
        str++;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f1      	bne.n	8000ba4 <LCD_SendString+0xe>
    }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <get_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	4959      	ldr	r1, [pc, #356]	; (8000d3c <get_time+0x170>)
 8000bd6:	485a      	ldr	r0, [pc, #360]	; (8000d40 <get_time+0x174>)
 8000bd8:	f003 f9e6 	bl	8003fa8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4959      	ldr	r1, [pc, #356]	; (8000d44 <get_time+0x178>)
 8000be0:	4857      	ldr	r0, [pc, #348]	; (8000d40 <get_time+0x174>)
 8000be2:	f003 fac3 	bl	800416c <HAL_RTC_GetDate>

	if (sTime.TimeFormat == RTC_HOURFORMAT12_PM && sTime.Hours == 0)
 8000be6:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <get_time+0x170>)
 8000be8:	78db      	ldrb	r3, [r3, #3]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d10a      	bne.n	8000c04 <get_time+0x38>
 8000bee:	4b53      	ldr	r3, [pc, #332]	; (8000d3c <get_time+0x170>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d106      	bne.n	8000c04 <get_time+0x38>
	{
		// 기존 시간이 PM이고 12시일 때, AM:00:00으로 변경
		sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000bf6:	4b51      	ldr	r3, [pc, #324]	; (8000d3c <get_time+0x170>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	70da      	strb	r2, [r3, #3]
		sTime.Hours = 0;
 8000bfc:	4b4f      	ldr	r3, [pc, #316]	; (8000d3c <get_time+0x170>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	e02a      	b.n	8000c5a <get_time+0x8e>
	}
	else if (sTime.TimeFormat == RTC_HOURFORMAT12_AM && sTime.Hours == 12)
 8000c04:	4b4d      	ldr	r3, [pc, #308]	; (8000d3c <get_time+0x170>)
 8000c06:	78db      	ldrb	r3, [r3, #3]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10a      	bne.n	8000c22 <get_time+0x56>
 8000c0c:	4b4b      	ldr	r3, [pc, #300]	; (8000d3c <get_time+0x170>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b0c      	cmp	r3, #12
 8000c12:	d106      	bne.n	8000c22 <get_time+0x56>
	{
		// 기존 시간이 AM이고 12시일 때, PM:12:00으로 변경
		sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8000c14:	4b49      	ldr	r3, [pc, #292]	; (8000d3c <get_time+0x170>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	70da      	strb	r2, [r3, #3]
		sTime.Hours = 12;
 8000c1a:	4b48      	ldr	r3, [pc, #288]	; (8000d3c <get_time+0x170>)
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e01b      	b.n	8000c5a <get_time+0x8e>
	}
	else if (sTime.TimeFormat == RTC_HOURFORMAT12_PM)
 8000c22:	4b46      	ldr	r3, [pc, #280]	; (8000d3c <get_time+0x170>)
 8000c24:	78db      	ldrb	r3, [r3, #3]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d106      	bne.n	8000c38 <get_time+0x6c>
	{
		// PM일 때 시간 증가
		sTime.Hours++;
 8000c2a:	4b44      	ldr	r3, [pc, #272]	; (8000d3c <get_time+0x170>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b42      	ldr	r3, [pc, #264]	; (8000d3c <get_time+0x170>)
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e010      	b.n	8000c5a <get_time+0x8e>
	}
	else if (sTime.TimeFormat == RTC_HOURFORMAT12_AM)
 8000c38:	4b40      	ldr	r3, [pc, #256]	; (8000d3c <get_time+0x170>)
 8000c3a:	78db      	ldrb	r3, [r3, #3]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10c      	bne.n	8000c5a <get_time+0x8e>
	{
		// AM일 때 시간 증가
		sTime.Hours++;
 8000c40:	4b3e      	ldr	r3, [pc, #248]	; (8000d3c <get_time+0x170>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b3c      	ldr	r3, [pc, #240]	; (8000d3c <get_time+0x170>)
 8000c4a:	701a      	strb	r2, [r3, #0]
		if (sTime.Hours > 12)
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	; (8000d3c <get_time+0x170>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b0c      	cmp	r3, #12
 8000c52:	d902      	bls.n	8000c5a <get_time+0x8e>
		{
			sTime.Hours = 1;
 8000c54:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <get_time+0x170>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
//	else if (DownButton_flag == 1)
//	{
//
//	}

	if (selection == 0)
 8000c5a:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <get_time+0x17c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10f      	bne.n	8000c82 <get_time+0xb6>
		sprintf((char*)showDate, "%04d-%02d-%02d      ", 2000+sDate.Year, sDate.Month, sDate.Date);
 8000c62:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <get_time+0x178>)
 8000c64:	78db      	ldrb	r3, [r3, #3]
 8000c66:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000c6a:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <get_time+0x178>)
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <get_time+0x178>)
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	460b      	mov	r3, r1
 8000c78:	4934      	ldr	r1, [pc, #208]	; (8000d4c <get_time+0x180>)
 8000c7a:	4835      	ldr	r0, [pc, #212]	; (8000d50 <get_time+0x184>)
 8000c7c:	f004 fa46 	bl	800510c <siprintf>
 8000c80:	e03a      	b.n	8000cf8 <get_time+0x12c>
	else if (selection == 1)
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <get_time+0x17c>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d10f      	bne.n	8000caa <get_time+0xde>
		sprintf((char*)showDate, "%04d-%02d-%02d[HOUR]", 2000+sDate.Year, sDate.Month, sDate.Date);
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <get_time+0x178>)
 8000c8c:	78db      	ldrb	r3, [r3, #3]
 8000c8e:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <get_time+0x178>)
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <get_time+0x178>)
 8000c9a:	789b      	ldrb	r3, [r3, #2]
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	492c      	ldr	r1, [pc, #176]	; (8000d54 <get_time+0x188>)
 8000ca2:	482b      	ldr	r0, [pc, #172]	; (8000d50 <get_time+0x184>)
 8000ca4:	f004 fa32 	bl	800510c <siprintf>
 8000ca8:	e026      	b.n	8000cf8 <get_time+0x12c>
	else if (selection == 2)
 8000caa:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <get_time+0x17c>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d10f      	bne.n	8000cd2 <get_time+0x106>
	    sprintf((char*)showDate, "%04d-%02d-%02d[MIN] ", 2000+sDate.Year, sDate.Month, sDate.Date);
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <get_time+0x178>)
 8000cb4:	78db      	ldrb	r3, [r3, #3]
 8000cb6:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <get_time+0x178>)
 8000cbc:	785b      	ldrb	r3, [r3, #1]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <get_time+0x178>)
 8000cc2:	789b      	ldrb	r3, [r3, #2]
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4923      	ldr	r1, [pc, #140]	; (8000d58 <get_time+0x18c>)
 8000cca:	4821      	ldr	r0, [pc, #132]	; (8000d50 <get_time+0x184>)
 8000ccc:	f004 fa1e 	bl	800510c <siprintf>
 8000cd0:	e012      	b.n	8000cf8 <get_time+0x12c>
	else if (selection == 3)
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <get_time+0x17c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d10e      	bne.n	8000cf8 <get_time+0x12c>
	    sprintf((char*)showDate, "%04d-%02d-%02d[SEC] ", 2000+sDate.Year, sDate.Month, sDate.Date);
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <get_time+0x178>)
 8000cdc:	78db      	ldrb	r3, [r3, #3]
 8000cde:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <get_time+0x178>)
 8000ce4:	785b      	ldrb	r3, [r3, #1]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <get_time+0x178>)
 8000cea:	789b      	ldrb	r3, [r3, #2]
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	491a      	ldr	r1, [pc, #104]	; (8000d5c <get_time+0x190>)
 8000cf2:	4817      	ldr	r0, [pc, #92]	; (8000d50 <get_time+0x184>)
 8000cf4:	f004 fa0a 	bl	800510c <siprintf>

	sprintf((char *)showTime, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat >> 6], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <get_time+0x170>)
 8000cfa:	78db      	ldrb	r3, [r3, #3]
 8000cfc:	099b      	lsrs	r3, r3, #6
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	4a15      	ldr	r2, [pc, #84]	; (8000d60 <get_time+0x194>)
 8000d0a:	441a      	add	r2, r3
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <get_time+0x170>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <get_time+0x170>)
 8000d14:	785b      	ldrb	r3, [r3, #1]
 8000d16:	4619      	mov	r1, r3
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <get_time+0x170>)
 8000d1a:	789b      	ldrb	r3, [r3, #2]
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	9100      	str	r1, [sp, #0]
 8000d20:	4603      	mov	r3, r0
 8000d22:	4910      	ldr	r1, [pc, #64]	; (8000d64 <get_time+0x198>)
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <get_time+0x19c>)
 8000d26:	f004 f9f1 	bl	800510c <siprintf>

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4903      	ldr	r1, [pc, #12]	; (8000d3c <get_time+0x170>)
 8000d2e:	4804      	ldr	r0, [pc, #16]	; (8000d40 <get_time+0x174>)
 8000d30:	f003 f8a0 	bl	8003e74 <HAL_RTC_SetTime>
//	    sprintf((char *)showTime, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat >> 6], sTime.Hours, sTime.Minutes, sTime.Seconds);
//
//	    // 시간 변경 적용
//	    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
//	}
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000308 	.word	0x20000308
 8000d40:	200003a8 	.word	0x200003a8
 8000d44:	20000304 	.word	0x20000304
 8000d48:	200003a2 	.word	0x200003a2
 8000d4c:	08005a6c 	.word	0x08005a6c
 8000d50:	20000384 	.word	0x20000384
 8000d54:	08005a84 	.word	0x08005a84
 8000d58:	08005a9c 	.word	0x08005a9c
 8000d5c:	08005ab4 	.word	0x08005ab4
 8000d60:	20000000 	.word	0x20000000
 8000d64:	08005acc 	.word	0x08005acc
 8000d68:	20000364 	.word	0x20000364

08000d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d70:	f000 fbf2 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d74:	f000 f844 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d78:	f7ff fd24 	bl	80007c4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d7c:	f7ff fc0e 	bl	800059c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d80:	f000 fac6 	bl	8001310 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d84:	f000 fb36 	bl	80013f4 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8000d88:	f000 f986 	bl	8001098 <MX_RTC_Init>
  MX_I2C1_Init();
 8000d8c:	f7ff fde4 	bl	8000958 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d90:	f000 f8a2 	bl	8000ed8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(LCD_ADDR);
 8000d94:	204e      	movs	r0, #78	; 0x4e
 8000d96:	f7ff fee1 	bl	8000b5c <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 8000d9a:	f7ff ff17 	bl	8000bcc <get_time>

	  memset(uart_buf, 0, sizeof(uart_buf));
 8000d9e:	2246      	movs	r2, #70	; 0x46
 8000da0:	2100      	movs	r1, #0
 8000da2:	4812      	ldr	r0, [pc, #72]	; (8000dec <main+0x80>)
 8000da4:	f004 f9d2 	bl	800514c <memset>
	  sprintf(uart_buf, "%s\t\r\n%s\t\r\n", showDate, showTime);
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <main+0x84>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <main+0x88>)
 8000dac:	4912      	ldr	r1, [pc, #72]	; (8000df8 <main+0x8c>)
 8000dae:	480f      	ldr	r0, [pc, #60]	; (8000dec <main+0x80>)
 8000db0:	f004 f9ac 	bl	800510c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, strlen(uart_buf), 10000);
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <main+0x80>)
 8000db6:	f7ff fa1b 	bl	80001f0 <strlen>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	f242 7310 	movw	r3, #10000	; 0x2710
 8000dc2:	490a      	ldr	r1, [pc, #40]	; (8000dec <main+0x80>)
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <main+0x90>)
 8000dc6:	f003 fb2a 	bl	800441e <HAL_UART_Transmit>

	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	204e      	movs	r0, #78	; 0x4e
 8000dce:	f7ff fea1 	bl	8000b14 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showDate);
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <main+0x88>)
 8000dd4:	204e      	movs	r0, #78	; 0x4e
 8000dd6:	f7ff fede 	bl	8000b96 <LCD_SendString>

	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000dda:	21c0      	movs	r1, #192	; 0xc0
 8000ddc:	204e      	movs	r0, #78	; 0x4e
 8000dde:	f7ff fe99 	bl	8000b14 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 8000de2:	4903      	ldr	r1, [pc, #12]	; (8000df0 <main+0x84>)
 8000de4:	204e      	movs	r0, #78	; 0x4e
 8000de6:	f7ff fed6 	bl	8000b96 <LCD_SendString>
	  get_time();
 8000dea:	e7d6      	b.n	8000d9a <main+0x2e>
 8000dec:	2000031c 	.word	0x2000031c
 8000df0:	20000364 	.word	0x20000364
 8000df4:	20000384 	.word	0x20000384
 8000df8:	08005ae0 	.word	0x08005ae0
 8000dfc:	200003cc 	.word	0x200003cc

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	; 0x50
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0320 	add.w	r3, r7, #32
 8000e0a:	2230      	movs	r2, #48	; 0x30
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f004 f99c 	bl	800514c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <SystemClock_Config+0xd0>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a28      	ldr	r2, [pc, #160]	; (8000ed0 <SystemClock_Config+0xd0>)
 8000e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <SystemClock_Config+0xd0>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <SystemClock_Config+0xd4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a22      	ldr	r2, [pc, #136]	; (8000ed4 <SystemClock_Config+0xd4>)
 8000e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <SystemClock_Config+0xd4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e78:	23a8      	movs	r3, #168	; 0xa8
 8000e7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e80:	2307      	movs	r3, #7
 8000e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f107 0320 	add.w	r3, r7, #32
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 f925 	bl	80030d8 <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e94:	f000 f8fa 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e98:	230f      	movs	r3, #15
 8000e9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ea4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ea8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fb86 	bl	80035c8 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ec2:	f000 f8e3 	bl	800108c <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3750      	adds	r7, #80	; 0x50
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2007      	movs	r0, #7
 8000ee2:	f000 fcaa 	bl	800183a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ee6:	2007      	movs	r0, #7
 8000ee8:	f000 fcc3 	bl	8001872 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2017      	movs	r0, #23
 8000ef2:	f000 fca2 	bl	800183a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ef6:	2017      	movs	r0, #23
 8000ef8:	f000 fcbb 	bl	8001872 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	2028      	movs	r0, #40	; 0x28
 8000f02:	f000 fc9a 	bl	800183a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f06:	2028      	movs	r0, #40	; 0x28
 8000f08:	f000 fcb3 	bl	8001872 <HAL_NVIC_EnableIRQ>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick = 0;

	if (GPIO_Pin == GPIO_PIN_1)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d11d      	bne.n	8000f5c <HAL_GPIO_EXTI_Callback+0x4c>
	{
		if (HAL_GetTick() - before_tick >= 300)
 8000f20:	f000 fb80 	bl	8001624 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	4b55      	ldr	r3, [pc, #340]	; (800107c <HAL_GPIO_EXTI_Callback+0x16c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f30:	f0c0 809f 	bcc.w	8001072 <HAL_GPIO_EXTI_Callback+0x162>
		{
			before_tick = HAL_GetTick();
 8000f34:	f000 fb76 	bl	8001624 <HAL_GetTick>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a50      	ldr	r2, [pc, #320]	; (800107c <HAL_GPIO_EXTI_Callback+0x16c>)
 8000f3c:	6013      	str	r3, [r2, #0]

			selection++;
 8000f3e:	4b50      	ldr	r3, [pc, #320]	; (8001080 <HAL_GPIO_EXTI_Callback+0x170>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b4e      	ldr	r3, [pc, #312]	; (8001080 <HAL_GPIO_EXTI_Callback+0x170>)
 8000f48:	701a      	strb	r2, [r3, #0]

			if (selection > 3)
 8000f4a:	4b4d      	ldr	r3, [pc, #308]	; (8001080 <HAL_GPIO_EXTI_Callback+0x170>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	f240 808f 	bls.w	8001072 <HAL_GPIO_EXTI_Callback+0x162>
				selection = 0;
 8000f54:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <HAL_GPIO_EXTI_Callback+0x170>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
					sTime.Seconds--;
			}
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		}
	}
}
 8000f5a:	e08a      	b.n	8001072 <HAL_GPIO_EXTI_Callback+0x162>
	else if (GPIO_Pin == GPIO_PIN_6)
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	2b40      	cmp	r3, #64	; 0x40
 8000f60:	d141      	bne.n	8000fe6 <HAL_GPIO_EXTI_Callback+0xd6>
		if (HAL_GetTick() - before_tick >= 300)
 8000f62:	f000 fb5f 	bl	8001624 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	4b44      	ldr	r3, [pc, #272]	; (800107c <HAL_GPIO_EXTI_Callback+0x16c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f72:	d37e      	bcc.n	8001072 <HAL_GPIO_EXTI_Callback+0x162>
			before_tick = HAL_GetTick();
 8000f74:	f000 fb56 	bl	8001624 <HAL_GetTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a40      	ldr	r2, [pc, #256]	; (800107c <HAL_GPIO_EXTI_Callback+0x16c>)
 8000f7c:	6013      	str	r3, [r2, #0]
			if (selection == 1) // hour select
 8000f7e:	4b40      	ldr	r3, [pc, #256]	; (8001080 <HAL_GPIO_EXTI_Callback+0x170>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d106      	bne.n	8000f94 <HAL_GPIO_EXTI_Callback+0x84>
				sTime.Hours++;
 8000f86:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e022      	b.n	8000fda <HAL_GPIO_EXTI_Callback+0xca>
			else if (selection == 2) // minutes select
 8000f94:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <HAL_GPIO_EXTI_Callback+0x170>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d10d      	bne.n	8000fb8 <HAL_GPIO_EXTI_Callback+0xa8>
				sTime.Minutes++;
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8000f9e:	785b      	ldrb	r3, [r3, #1]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b37      	ldr	r3, [pc, #220]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8000fa6:	705a      	strb	r2, [r3, #1]
				if (sTime.Minutes > 59)
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	2b3b      	cmp	r3, #59	; 0x3b
 8000fae:	d914      	bls.n	8000fda <HAL_GPIO_EXTI_Callback+0xca>
					sTime.Minutes = 0;
 8000fb0:	4b34      	ldr	r3, [pc, #208]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	705a      	strb	r2, [r3, #1]
 8000fb6:	e010      	b.n	8000fda <HAL_GPIO_EXTI_Callback+0xca>
			else if (selection == 3) // second select
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <HAL_GPIO_EXTI_Callback+0x170>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d10c      	bne.n	8000fda <HAL_GPIO_EXTI_Callback+0xca>
				sTime.Seconds++;
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8000fc2:	789b      	ldrb	r3, [r3, #2]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8000fca:	709a      	strb	r2, [r3, #2]
				if (sTime.Seconds > 59)
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8000fce:	789b      	ldrb	r3, [r3, #2]
 8000fd0:	2b3b      	cmp	r3, #59	; 0x3b
 8000fd2:	d902      	bls.n	8000fda <HAL_GPIO_EXTI_Callback+0xca>
					sTime.Seconds = 0;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4929      	ldr	r1, [pc, #164]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8000fde:	482a      	ldr	r0, [pc, #168]	; (8001088 <HAL_GPIO_EXTI_Callback+0x178>)
 8000fe0:	f002 ff48 	bl	8003e74 <HAL_RTC_SetTime>
}
 8000fe4:	e045      	b.n	8001072 <HAL_GPIO_EXTI_Callback+0x162>
	else if (GPIO_Pin == GPIO_PIN_5)
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	2b20      	cmp	r3, #32
 8000fea:	d142      	bne.n	8001072 <HAL_GPIO_EXTI_Callback+0x162>
		if (HAL_GetTick() - before_tick >= 300)
 8000fec:	f000 fb1a 	bl	8001624 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_GPIO_EXTI_Callback+0x16c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ffc:	d339      	bcc.n	8001072 <HAL_GPIO_EXTI_Callback+0x162>
			before_tick = HAL_GetTick();
 8000ffe:	f000 fb11 	bl	8001624 <HAL_GetTick>
 8001002:	4603      	mov	r3, r0
 8001004:	4a1d      	ldr	r2, [pc, #116]	; (800107c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001006:	6013      	str	r3, [r2, #0]
			if (selection == 1)
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_GPIO_EXTI_Callback+0x170>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d106      	bne.n	800101e <HAL_GPIO_EXTI_Callback+0x10e>
				sTime.Hours--;
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	3b01      	subs	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	e024      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x158>
			else if (selection == 2)
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_GPIO_EXTI_Callback+0x170>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d10e      	bne.n	8001044 <HAL_GPIO_EXTI_Callback+0x134>
				if (sTime.Minutes == 0)
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <HAL_GPIO_EXTI_Callback+0x126>
					sTime.Minutes = 59;
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8001030:	223b      	movs	r2, #59	; 0x3b
 8001032:	705a      	strb	r2, [r3, #1]
 8001034:	e018      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x158>
					sTime.Minutes--;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	3b01      	subs	r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8001040:	705a      	strb	r2, [r3, #1]
 8001042:	e011      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x158>
			else if (selection == 3)
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_GPIO_EXTI_Callback+0x170>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d10d      	bne.n	8001068 <HAL_GPIO_EXTI_Callback+0x158>
				if (sTime.Seconds == 0)
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 800104e:	789b      	ldrb	r3, [r3, #2]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d103      	bne.n	800105c <HAL_GPIO_EXTI_Callback+0x14c>
					sTime.Seconds = 59;
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8001056:	223b      	movs	r2, #59	; 0x3b
 8001058:	709a      	strb	r2, [r3, #2]
 800105a:	e005      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x158>
					sTime.Seconds--;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 800105e:	789b      	ldrb	r3, [r3, #2]
 8001060:	3b01      	subs	r3, #1
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 8001066:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001068:	2200      	movs	r2, #0
 800106a:	4906      	ldr	r1, [pc, #24]	; (8001084 <HAL_GPIO_EXTI_Callback+0x174>)
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <HAL_GPIO_EXTI_Callback+0x178>)
 800106e:	f002 ff01 	bl	8003e74 <HAL_RTC_SetTime>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200003a4 	.word	0x200003a4
 8001080:	200003a2 	.word	0x200003a2
 8001084:	20000308 	.word	0x20000308
 8001088:	200003a8 	.word	0x200003a8

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>
	...

08001098 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010ac:	2300      	movs	r3, #0
 80010ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MX_RTC_Init+0xb0>)
 80010b2:	4a26      	ldr	r2, [pc, #152]	; (800114c <MX_RTC_Init+0xb4>)
 80010b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MX_RTC_Init+0xb0>)
 80010b8:	2240      	movs	r2, #64	; 0x40
 80010ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <MX_RTC_Init+0xb0>)
 80010be:	227f      	movs	r2, #127	; 0x7f
 80010c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MX_RTC_Init+0xb0>)
 80010c4:	22ff      	movs	r2, #255	; 0xff
 80010c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_RTC_Init+0xb0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_RTC_Init+0xb0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_RTC_Init+0xb0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010da:	481b      	ldr	r0, [pc, #108]	; (8001148 <MX_RTC_Init+0xb0>)
 80010dc:	f002 fe54 	bl	8003d88 <HAL_RTC_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80010e6:	f7ff ffd1 	bl	800108c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80010f6:	2300      	movs	r3, #0
 80010f8:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	480f      	ldr	r0, [pc, #60]	; (8001148 <MX_RTC_Init+0xb0>)
 800110a:	f002 feb3 	bl	8003e74 <HAL_RTC_SetTime>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001114:	f7ff ffba 	bl	800108c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001118:	2303      	movs	r3, #3
 800111a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800111c:	2311      	movs	r3, #17
 800111e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001120:	2301      	movs	r3, #1
 8001122:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001124:	2323      	movs	r3, #35	; 0x23
 8001126:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	2201      	movs	r2, #1
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_RTC_Init+0xb0>)
 8001130:	f002 ff98 	bl	8004064 <HAL_RTC_SetDate>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800113a:	f7ff ffa7 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200003a8 	.word	0x200003a8
 800114c:	40002800 	.word	0x40002800

08001150 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	; 0x38
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	2230      	movs	r2, #48	; 0x30
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f003 fff3 	bl	800514c <memset>
  if(rtcHandle->Instance==RTC)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a0c      	ldr	r2, [pc, #48]	; (800119c <HAL_RTC_MspInit+0x4c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d111      	bne.n	8001194 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001170:	2320      	movs	r3, #32
 8001172:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4618      	mov	r0, r3
 8001180:	f002 fc42 	bl	8003a08 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800118a:	f7ff ff7f 	bl	800108c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <HAL_RTC_MspInit+0x50>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001194:	bf00      	nop
 8001196:	3738      	adds	r7, #56	; 0x38
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40002800 	.word	0x40002800
 80011a0:	42470e3c 	.word	0x42470e3c

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f9dc 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800124c:	2002      	movs	r0, #2
 800124e:	f001 f819 	bl	8002284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}

08001256 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_down_Pin);
 800125a:	2020      	movs	r0, #32
 800125c:	f001 f812 	bl	8002284 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_up_Pin);
 8001260:	2040      	movs	r0, #64	; 0x40
 8001262:	f001 f80f 	bl	8002284 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_select_Pin);
 8001266:	2080      	movs	r0, #128	; 0x80
 8001268:	f001 f80c 	bl	8002284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001274:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001278:	f001 f804 	bl	8002284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <_sbrk+0x5c>)
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <_sbrk+0x60>)
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <_sbrk+0x64>)
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <_sbrk+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d207      	bcs.n	80012c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b0:	f003 ff54 	bl	800515c <__errno>
 80012b4:	4603      	mov	r3, r0
 80012b6:	220c      	movs	r2, #12
 80012b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	e009      	b.n	80012d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <_sbrk+0x64>)
 80012d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d2:	68fb      	ldr	r3, [r7, #12]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20030000 	.word	0x20030000
 80012e0:	00000400 	.word	0x00000400
 80012e4:	200003c8 	.word	0x200003c8
 80012e8:	20000a68 	.word	0x20000a68

080012ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <SystemInit+0x20>)
 80012f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <SystemInit+0x20>)
 80012f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_USART3_UART_Init+0x4c>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_USART3_UART_Init+0x50>)
 8001318:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_USART3_UART_Init+0x4c>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_USART3_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_USART3_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_USART3_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_USART3_UART_Init+0x4c>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_USART3_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_USART3_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_USART3_UART_Init+0x4c>)
 8001348:	f003 f81c 	bl	8004384 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001352:	f7ff fe9b 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200003cc 	.word	0x200003cc
 8001360:	40004800 	.word	0x40004800

08001364 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <HAL_UART_MspInit+0x84>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d12c      	bne.n	80013e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_UART_MspInit+0x88>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a17      	ldr	r2, [pc, #92]	; (80013ec <HAL_UART_MspInit+0x88>)
 8001390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_UART_MspInit+0x88>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_UART_MspInit+0x88>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <HAL_UART_MspInit+0x88>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_UART_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d0:	2307      	movs	r3, #7
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_UART_MspInit+0x8c>)
 80013dc:	f000 fd8c 	bl	8001ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40004800 	.word	0x40004800
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001402:	2204      	movs	r2, #4
 8001404:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001408:	2202      	movs	r2, #2
 800140a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001414:	2202      	movs	r2, #2
 8001416:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800141a:	2201      	movs	r2, #1
 800141c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142c:	2201      	movs	r2, #1
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001438:	f001 fd30 	bl	8002e9c <HAL_PCD_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001442:	f7ff fe23 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000410 	.word	0x20000410

08001450 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001470:	d13f      	bne.n	80014f2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_PCD_MspInit+0xac>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a20      	ldr	r2, [pc, #128]	; (80014fc <HAL_PCD_MspInit+0xac>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_PCD_MspInit+0xac>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800148e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014a0:	230a      	movs	r3, #10
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4815      	ldr	r0, [pc, #84]	; (8001500 <HAL_PCD_MspInit+0xb0>)
 80014ac:	f000 fd24 	bl	8001ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	480e      	ldr	r0, [pc, #56]	; (8001500 <HAL_PCD_MspInit+0xb0>)
 80014c6:	f000 fd17 	bl	8001ef8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_PCD_MspInit+0xac>)
 80014cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_PCD_MspInit+0xac>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	6353      	str	r3, [r2, #52]	; 0x34
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_PCD_MspInit+0xac>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_PCD_MspInit+0xac>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_PCD_MspInit+0xac>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800153c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800150a:	490e      	ldr	r1, [pc, #56]	; (8001544 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800150c:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001520:	4c0b      	ldr	r4, [pc, #44]	; (8001550 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800152e:	f7ff fedd 	bl	80012ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001532:	f003 fe19 	bl	8005168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff fc19 	bl	8000d6c <main>
  bx  lr    
 800153a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800153c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001548:	08005b48 	.word	0x08005b48
  ldr r2, =_sbss
 800154c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001550:	20000a68 	.word	0x20000a68

08001554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <HAL_Init+0x40>)
 8001562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <HAL_Init+0x40>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_Init+0x40>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 f94f 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f808 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff fe0a 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x54>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f967 	bl	800188e <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d80a      	bhi.n	80015e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f000 f92f 	bl	800183a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015dc:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <HAL_InitTick+0x5c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000010 	.word	0x20000010
 80015f8:	2000000c 	.word	0x2000000c

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000010 	.word	0x20000010
 8001620:	2000091c 	.word	0x2000091c

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000091c 	.word	0x2000091c

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffde 	bl	8001624 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000010 	.word	0x20000010

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f0:	d301      	bcc.n	80017f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00f      	b.n	8001816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <SysTick_Config+0x40>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fe:	210f      	movs	r1, #15
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f7ff ff8e 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <SysTick_Config+0x40>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <SysTick_Config+0x40>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010

08001824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff29 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184c:	f7ff ff3e 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	6978      	ldr	r0, [r7, #20]
 8001858:	f7ff ff8e 	bl	8001778 <NVIC_EncodePriority>
 800185c:	4602      	mov	r2, r0
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff5d 	bl	8001724 <__NVIC_SetPriority>
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff31 	bl	80016e8 <__NVIC_EnableIRQ>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffa2 	bl	80017e0 <SysTick_Config>
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06c      	b.n	8001994 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d106      	bne.n	80018d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2223      	movs	r2, #35	; 0x23
 80018c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7fe feb3 	bl	8000638 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_ETH_Init+0xf4>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a30      	ldr	r2, [pc, #192]	; (800199c <HAL_ETH_Init+0xf4>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_ETH_Init+0xf4>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_ETH_Init+0xf8>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a2b      	ldr	r2, [pc, #172]	; (80019a0 <HAL_ETH_Init+0xf8>)
 80018f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <HAL_ETH_Init+0xf8>)
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	4927      	ldr	r1, [pc, #156]	; (80019a0 <HAL_ETH_Init+0xf8>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_ETH_Init+0xf8>)
 800190a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001922:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001924:	f7ff fe7e 	bl	8001624 <HAL_GetTick>
 8001928:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800192a:	e011      	b.n	8001950 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800192c:	f7ff fe7a 	bl	8001624 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800193a:	d909      	bls.n	8001950 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	22e0      	movs	r2, #224	; 0xe0
 8001948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e021      	b.n	8001994 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1e4      	bne.n	800192c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f958 	bl	8001c18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f9ff 	bl	8001d6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fa55 	bl	8001e1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	461a      	mov	r2, r3
 800197a:	2100      	movs	r1, #0
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f9bd 	bl	8001cfc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2210      	movs	r2, #16
 800198e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	40013800 	.word	0x40013800

080019a4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4b51      	ldr	r3, [pc, #324]	; (8001b00 <ETH_SetMACConfig+0x15c>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	7c1b      	ldrb	r3, [r3, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <ETH_SetMACConfig+0x28>
 80019c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019ca:	e000      	b.n	80019ce <ETH_SetMACConfig+0x2a>
 80019cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	7c5b      	ldrb	r3, [r3, #17]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <ETH_SetMACConfig+0x38>
 80019d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019da:	e000      	b.n	80019de <ETH_SetMACConfig+0x3a>
 80019dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80019e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	7fdb      	ldrb	r3, [r3, #31]
 80019ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80019ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	7f92      	ldrb	r2, [r2, #30]
 80019f8:	2a00      	cmp	r2, #0
 80019fa:	d102      	bne.n	8001a02 <ETH_SetMACConfig+0x5e>
 80019fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a00:	e000      	b.n	8001a04 <ETH_SetMACConfig+0x60>
 8001a02:	2200      	movs	r2, #0
                        macconf->Speed |
 8001a04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	7f1b      	ldrb	r3, [r3, #28]
 8001a0a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a0c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	791b      	ldrb	r3, [r3, #4]
 8001a18:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001a1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a22:	2a00      	cmp	r2, #0
 8001a24:	d102      	bne.n	8001a2c <ETH_SetMACConfig+0x88>
 8001a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2a:	e000      	b.n	8001a2e <ETH_SetMACConfig+0x8a>
 8001a2c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	7bdb      	ldrb	r3, [r3, #15]
 8001a34:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a36:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a44:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a46:	4313      	orrs	r3, r2
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fdec 	bl	800163c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a82:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d101      	bne.n	8001a92 <ETH_SetMACConfig+0xee>
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	e000      	b.n	8001a94 <ETH_SetMACConfig+0xf0>
 8001a92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a94:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001aa2:	2a01      	cmp	r2, #1
 8001aa4:	d101      	bne.n	8001aaa <ETH_SetMACConfig+0x106>
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	e000      	b.n	8001aac <ETH_SetMACConfig+0x108>
 8001aaa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001aac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001ab4:	2a01      	cmp	r2, #1
 8001ab6:	d101      	bne.n	8001abc <ETH_SetMACConfig+0x118>
 8001ab8:	2204      	movs	r2, #4
 8001aba:	e000      	b.n	8001abe <ETH_SetMACConfig+0x11a>
 8001abc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001abe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d101      	bne.n	8001ace <ETH_SetMACConfig+0x12a>
 8001aca:	2202      	movs	r2, #2
 8001acc:	e000      	b.n	8001ad0 <ETH_SetMACConfig+0x12c>
 8001ace:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7ff fda7 	bl	800163c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	619a      	str	r2, [r3, #24]
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	ff20810f 	.word	0xff20810f

08001b04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <ETH_SetDMAConfig+0x110>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7b1b      	ldrb	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <ETH_SetDMAConfig+0x2c>
 8001b2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b2e:	e000      	b.n	8001b32 <ETH_SetDMAConfig+0x2e>
 8001b30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	7b5b      	ldrb	r3, [r3, #13]
 8001b36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	7f52      	ldrb	r2, [r2, #29]
 8001b3e:	2a00      	cmp	r2, #0
 8001b40:	d102      	bne.n	8001b48 <ETH_SetDMAConfig+0x44>
 8001b42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b46:	e000      	b.n	8001b4a <ETH_SetDMAConfig+0x46>
 8001b48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	7b9b      	ldrb	r3, [r3, #14]
 8001b50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	7f1b      	ldrb	r3, [r3, #28]
 8001b5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001b60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	7f9b      	ldrb	r3, [r3, #30]
 8001b66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f7ff fd4e 	bl	800163c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bb8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001bbe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001bc4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bcc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001bce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001bd6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bdc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001be6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff fd1f 	bl	800163c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	f8de3f23 	.word	0xf8de3f23

08001c18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0a6      	sub	sp, #152	; 0x98
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c54:	2300      	movs	r3, #0
 8001c56:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fe86 	bl	80019a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ccc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cd2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff08 	bl	8001b04 <ETH_SetDMAConfig>
}
 8001cf4:	bf00      	nop
 8001cf6:	3798      	adds	r7, #152	; 0x98
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3305      	adds	r3, #5
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	3204      	adds	r2, #4
 8001d14:	7812      	ldrb	r2, [r2, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <ETH_MACAddressConfig+0x68>)
 8001d1e:	4413      	add	r3, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3303      	adds	r3, #3
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	061a      	lsls	r2, r3, #24
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3302      	adds	r3, #2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	4313      	orrs	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <ETH_MACAddressConfig+0x6c>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	461a      	mov	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	6013      	str	r3, [r2, #0]
}
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40028040 	.word	0x40028040
 8001d68:	40028044 	.word	0x40028044

08001d6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e03e      	b.n	8001df8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68d9      	ldr	r1, [r3, #12]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	3206      	adds	r2, #6
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d80c      	bhi.n	8001ddc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68d9      	ldr	r1, [r3, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	440b      	add	r3, r1
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	e004      	b.n	8001de6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	461a      	mov	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3301      	adds	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d9bd      	bls.n	8001d7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e10:	611a      	str	r2, [r3, #16]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e046      	b.n	8001eba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6919      	ldr	r1, [r3, #16]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2200      	movs	r2, #0
 8001e48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001e70:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	3212      	adds	r2, #18
 8001e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d80c      	bhi.n	8001eaa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6919      	ldr	r1, [r3, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	e004      	b.n	8001eb4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d9b5      	bls.n	8001e2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eea:	60da      	str	r2, [r3, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	e177      	b.n	8002204 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f14:	2201      	movs	r2, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	f040 8166 	bne.w	80021fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d005      	beq.n	8001f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d130      	bne.n	8001fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 0201 	and.w	r2, r3, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d017      	beq.n	8001fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d123      	bne.n	800203c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	08da      	lsrs	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3208      	adds	r2, #8
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	69b9      	ldr	r1, [r7, #24]
 8002038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0203 	and.w	r2, r3, #3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80c0 	beq.w	80021fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b66      	ldr	r3, [pc, #408]	; (800221c <HAL_GPIO_Init+0x324>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a65      	ldr	r2, [pc, #404]	; (800221c <HAL_GPIO_Init+0x324>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b63      	ldr	r3, [pc, #396]	; (800221c <HAL_GPIO_Init+0x324>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800209a:	4a61      	ldr	r2, [pc, #388]	; (8002220 <HAL_GPIO_Init+0x328>)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3302      	adds	r3, #2
 80020a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a58      	ldr	r2, [pc, #352]	; (8002224 <HAL_GPIO_Init+0x32c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d037      	beq.n	8002136 <HAL_GPIO_Init+0x23e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a57      	ldr	r2, [pc, #348]	; (8002228 <HAL_GPIO_Init+0x330>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d031      	beq.n	8002132 <HAL_GPIO_Init+0x23a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a56      	ldr	r2, [pc, #344]	; (800222c <HAL_GPIO_Init+0x334>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d02b      	beq.n	800212e <HAL_GPIO_Init+0x236>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a55      	ldr	r2, [pc, #340]	; (8002230 <HAL_GPIO_Init+0x338>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d025      	beq.n	800212a <HAL_GPIO_Init+0x232>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a54      	ldr	r2, [pc, #336]	; (8002234 <HAL_GPIO_Init+0x33c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d01f      	beq.n	8002126 <HAL_GPIO_Init+0x22e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a53      	ldr	r2, [pc, #332]	; (8002238 <HAL_GPIO_Init+0x340>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d019      	beq.n	8002122 <HAL_GPIO_Init+0x22a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a52      	ldr	r2, [pc, #328]	; (800223c <HAL_GPIO_Init+0x344>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d013      	beq.n	800211e <HAL_GPIO_Init+0x226>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a51      	ldr	r2, [pc, #324]	; (8002240 <HAL_GPIO_Init+0x348>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00d      	beq.n	800211a <HAL_GPIO_Init+0x222>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a50      	ldr	r2, [pc, #320]	; (8002244 <HAL_GPIO_Init+0x34c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <HAL_GPIO_Init+0x21e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4f      	ldr	r2, [pc, #316]	; (8002248 <HAL_GPIO_Init+0x350>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d101      	bne.n	8002112 <HAL_GPIO_Init+0x21a>
 800210e:	2309      	movs	r3, #9
 8002110:	e012      	b.n	8002138 <HAL_GPIO_Init+0x240>
 8002112:	230a      	movs	r3, #10
 8002114:	e010      	b.n	8002138 <HAL_GPIO_Init+0x240>
 8002116:	2308      	movs	r3, #8
 8002118:	e00e      	b.n	8002138 <HAL_GPIO_Init+0x240>
 800211a:	2307      	movs	r3, #7
 800211c:	e00c      	b.n	8002138 <HAL_GPIO_Init+0x240>
 800211e:	2306      	movs	r3, #6
 8002120:	e00a      	b.n	8002138 <HAL_GPIO_Init+0x240>
 8002122:	2305      	movs	r3, #5
 8002124:	e008      	b.n	8002138 <HAL_GPIO_Init+0x240>
 8002126:	2304      	movs	r3, #4
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x240>
 800212a:	2303      	movs	r3, #3
 800212c:	e004      	b.n	8002138 <HAL_GPIO_Init+0x240>
 800212e:	2302      	movs	r3, #2
 8002130:	e002      	b.n	8002138 <HAL_GPIO_Init+0x240>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x240>
 8002136:	2300      	movs	r3, #0
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	f002 0203 	and.w	r2, r2, #3
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	4093      	lsls	r3, r2
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002148:	4935      	ldr	r1, [pc, #212]	; (8002220 <HAL_GPIO_Init+0x328>)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002156:	4b3d      	ldr	r3, [pc, #244]	; (800224c <HAL_GPIO_Init+0x354>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217a:	4a34      	ldr	r2, [pc, #208]	; (800224c <HAL_GPIO_Init+0x354>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002180:	4b32      	ldr	r3, [pc, #200]	; (800224c <HAL_GPIO_Init+0x354>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a4:	4a29      	ldr	r2, [pc, #164]	; (800224c <HAL_GPIO_Init+0x354>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021aa:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_GPIO_Init+0x354>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ce:	4a1f      	ldr	r2, [pc, #124]	; (800224c <HAL_GPIO_Init+0x354>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_GPIO_Init+0x354>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <HAL_GPIO_Init+0x354>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3301      	adds	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	f67f ae84 	bls.w	8001f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40013800 	.word	0x40013800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020400 	.word	0x40020400
 800222c:	40020800 	.word	0x40020800
 8002230:	40020c00 	.word	0x40020c00
 8002234:	40021000 	.word	0x40021000
 8002238:	40021400 	.word	0x40021400
 800223c:	40021800 	.word	0x40021800
 8002240:	40021c00 	.word	0x40021c00
 8002244:	40022000 	.word	0x40022000
 8002248:	40022400 	.word	0x40022400
 800224c:	40013c00 	.word	0x40013c00

08002250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002260:	787b      	ldrb	r3, [r7, #1]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800226c:	e003      	b.n	8002276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	041a      	lsls	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	619a      	str	r2, [r3, #24]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800229a:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fe34 	bl	8000f10 <HAL_GPIO_EXTI_Callback>
  }
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40013c00 	.word	0x40013c00

080022b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e12b      	b.n	800251e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fb7c 	bl	80009d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2224      	movs	r2, #36	; 0x24
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002318:	f001 fb4e 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 800231c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4a81      	ldr	r2, [pc, #516]	; (8002528 <HAL_I2C_Init+0x274>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d807      	bhi.n	8002338 <HAL_I2C_Init+0x84>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a80      	ldr	r2, [pc, #512]	; (800252c <HAL_I2C_Init+0x278>)
 800232c:	4293      	cmp	r3, r2
 800232e:	bf94      	ite	ls
 8002330:	2301      	movls	r3, #1
 8002332:	2300      	movhi	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e006      	b.n	8002346 <HAL_I2C_Init+0x92>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a7d      	ldr	r2, [pc, #500]	; (8002530 <HAL_I2C_Init+0x27c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	bf94      	ite	ls
 8002340:	2301      	movls	r3, #1
 8002342:	2300      	movhi	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0e7      	b.n	800251e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4a78      	ldr	r2, [pc, #480]	; (8002534 <HAL_I2C_Init+0x280>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0c9b      	lsrs	r3, r3, #18
 8002358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	430a      	orrs	r2, r1
 800236c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4a6a      	ldr	r2, [pc, #424]	; (8002528 <HAL_I2C_Init+0x274>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d802      	bhi.n	8002388 <HAL_I2C_Init+0xd4>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3301      	adds	r3, #1
 8002386:	e009      	b.n	800239c <HAL_I2C_Init+0xe8>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	4a69      	ldr	r2, [pc, #420]	; (8002538 <HAL_I2C_Init+0x284>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	3301      	adds	r3, #1
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	495c      	ldr	r1, [pc, #368]	; (8002528 <HAL_I2C_Init+0x274>)
 80023b8:	428b      	cmp	r3, r1
 80023ba:	d819      	bhi.n	80023f0 <HAL_I2C_Init+0x13c>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1e59      	subs	r1, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ca:	1c59      	adds	r1, r3, #1
 80023cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023d0:	400b      	ands	r3, r1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_I2C_Init+0x138>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1e59      	subs	r1, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ea:	e051      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 80023ec:	2304      	movs	r3, #4
 80023ee:	e04f      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d111      	bne.n	800241c <HAL_I2C_Init+0x168>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1e58      	subs	r0, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	440b      	add	r3, r1
 8002406:	fbb0 f3f3 	udiv	r3, r0, r3
 800240a:	3301      	adds	r3, #1
 800240c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e012      	b.n	8002442 <HAL_I2C_Init+0x18e>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1e58      	subs	r0, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	0099      	lsls	r1, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002432:	3301      	adds	r3, #1
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Init+0x196>
 8002446:	2301      	movs	r3, #1
 8002448:	e022      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10e      	bne.n	8002470 <HAL_I2C_Init+0x1bc>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1e58      	subs	r0, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	440b      	add	r3, r1
 8002460:	fbb0 f3f3 	udiv	r3, r0, r3
 8002464:	3301      	adds	r3, #1
 8002466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246e:	e00f      	b.n	8002490 <HAL_I2C_Init+0x1dc>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e58      	subs	r0, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	0099      	lsls	r1, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	6809      	ldr	r1, [r1, #0]
 8002494:	4313      	orrs	r3, r2
 8002496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6911      	ldr	r1, [r2, #16]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68d2      	ldr	r2, [r2, #12]
 80024ca:	4311      	orrs	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	000186a0 	.word	0x000186a0
 800252c:	001e847f 	.word	0x001e847f
 8002530:	003d08ff 	.word	0x003d08ff
 8002534:	431bde83 	.word	0x431bde83
 8002538:	10624dd3 	.word	0x10624dd3

0800253c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	461a      	mov	r2, r3
 8002548:	460b      	mov	r3, r1
 800254a:	817b      	strh	r3, [r7, #10]
 800254c:	4613      	mov	r3, r2
 800254e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff f868 	bl	8001624 <HAL_GetTick>
 8002554:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b20      	cmp	r3, #32
 8002560:	f040 80e0 	bne.w	8002724 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2319      	movs	r3, #25
 800256a:	2201      	movs	r2, #1
 800256c:	4970      	ldr	r1, [pc, #448]	; (8002730 <HAL_I2C_Master_Transmit+0x1f4>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fa92 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800257a:	2302      	movs	r3, #2
 800257c:	e0d3      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_I2C_Master_Transmit+0x50>
 8002588:	2302      	movs	r3, #2
 800258a:	e0cc      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d007      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2221      	movs	r2, #33	; 0x21
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2210      	movs	r2, #16
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	893a      	ldrh	r2, [r7, #8]
 80025e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4a50      	ldr	r2, [pc, #320]	; (8002734 <HAL_I2C_Master_Transmit+0x1f8>)
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025f4:	8979      	ldrh	r1, [r7, #10]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	6a3a      	ldr	r2, [r7, #32]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f9ca 	bl	8002994 <I2C_MasterRequestWrite>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e08d      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002620:	e066      	b.n	80026f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	6a39      	ldr	r1, [r7, #32]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fb0c 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	2b04      	cmp	r3, #4
 8002638:	d107      	bne.n	800264a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e06b      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b04      	cmp	r3, #4
 800268a:	d11b      	bne.n	80026c4 <HAL_I2C_Master_Transmit+0x188>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	d017      	beq.n	80026c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	6a39      	ldr	r1, [r7, #32]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fafc 	bl	8002cc6 <I2C_WaitOnBTFFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00d      	beq.n	80026f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d107      	bne.n	80026ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e01a      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d194      	bne.n	8002622 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	e000      	b.n	8002726 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002724:	2302      	movs	r3, #2
  }
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	00100002 	.word	0x00100002
 8002734:	ffff0000 	.word	0xffff0000

08002738 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	460b      	mov	r3, r1
 8002746:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7fe ff6c 	bl	8001624 <HAL_GetTick>
 800274c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b20      	cmp	r3, #32
 800275c:	f040 8111 	bne.w	8002982 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2319      	movs	r3, #25
 8002766:	2201      	movs	r2, #1
 8002768:	4988      	ldr	r1, [pc, #544]	; (800298c <HAL_I2C_IsDeviceReady+0x254>)
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f994 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002776:	2302      	movs	r3, #2
 8002778:	e104      	b.n	8002984 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_I2C_IsDeviceReady+0x50>
 8002784:	2302      	movs	r3, #2
 8002786:	e0fd      	b.n	8002984 <HAL_I2C_IsDeviceReady+0x24c>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d007      	beq.n	80027ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2224      	movs	r2, #36	; 0x24
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a70      	ldr	r2, [pc, #448]	; (8002990 <HAL_I2C_IsDeviceReady+0x258>)
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f952 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002808:	d103      	bne.n	8002812 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e0b6      	b.n	8002984 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002816:	897b      	ldrh	r3, [r7, #10]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002824:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002826:	f7fe fefd 	bl	8001624 <HAL_GetTick>
 800282a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002850:	bf0c      	ite	eq
 8002852:	2301      	moveq	r3, #1
 8002854:	2300      	movne	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800285a:	e025      	b.n	80028a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800285c:	f7fe fee2 	bl	8001624 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d302      	bcc.n	8002872 <HAL_I2C_IsDeviceReady+0x13a>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d103      	bne.n	800287a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	22a0      	movs	r2, #160	; 0xa0
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2ba0      	cmp	r3, #160	; 0xa0
 80028b2:	d005      	beq.n	80028c0 <HAL_I2C_IsDeviceReady+0x188>
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <HAL_I2C_IsDeviceReady+0x188>
 80028ba:	7dbb      	ldrb	r3, [r7, #22]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0cd      	beq.n	800285c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d129      	bne.n	800292a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2319      	movs	r3, #25
 8002902:	2201      	movs	r2, #1
 8002904:	4921      	ldr	r1, [pc, #132]	; (800298c <HAL_I2C_IsDeviceReady+0x254>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f8c6 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e036      	b.n	8002984 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e02c      	b.n	8002984 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002938:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002942:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2319      	movs	r3, #25
 800294a:	2201      	movs	r2, #1
 800294c:	490f      	ldr	r1, [pc, #60]	; (800298c <HAL_I2C_IsDeviceReady+0x254>)
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f8a2 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e012      	b.n	8002984 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	3301      	adds	r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	f4ff af32 	bcc.w	80027d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002982:	2302      	movs	r3, #2
  }
}
 8002984:	4618      	mov	r0, r3
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	00100002 	.word	0x00100002
 8002990:	ffff0000 	.word	0xffff0000

08002994 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	460b      	mov	r3, r1
 80029a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d006      	beq.n	80029be <I2C_MasterRequestWrite+0x2a>
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d003      	beq.n	80029be <I2C_MasterRequestWrite+0x2a>
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029bc:	d108      	bne.n	80029d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	e00b      	b.n	80029e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	2b12      	cmp	r3, #18
 80029d6:	d107      	bne.n	80029e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f84f 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00d      	beq.n	8002a1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0e:	d103      	bne.n	8002a18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e035      	b.n	8002a88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a24:	d108      	bne.n	8002a38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a26:	897b      	ldrh	r3, [r7, #10]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a34:	611a      	str	r2, [r3, #16]
 8002a36:	e01b      	b.n	8002a70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a38:	897b      	ldrh	r3, [r7, #10]
 8002a3a:	11db      	asrs	r3, r3, #7
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f003 0306 	and.w	r3, r3, #6
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f063 030f 	orn	r3, r3, #15
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	490e      	ldr	r1, [pc, #56]	; (8002a90 <I2C_MasterRequestWrite+0xfc>)
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f875 	bl	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e010      	b.n	8002a88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a66:	897b      	ldrh	r3, [r7, #10]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4907      	ldr	r1, [pc, #28]	; (8002a94 <I2C_MasterRequestWrite+0x100>)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f865 	bl	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	00010008 	.word	0x00010008
 8002a94:	00010002 	.word	0x00010002

08002a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa8:	e025      	b.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d021      	beq.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7fe fdb7 	bl	8001624 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d116      	bne.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f043 0220 	orr.w	r2, r3, #32
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e023      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d10d      	bne.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf0c      	ite	eq
 8002b12:	2301      	moveq	r3, #1
 8002b14:	2300      	movne	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	e00c      	b.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4013      	ands	r3, r2
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d0b6      	beq.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b54:	e051      	b.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b64:	d123      	bne.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f043 0204 	orr.w	r2, r3, #4
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e046      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d021      	beq.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7fe fd35 	bl	8001624 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d302      	bcc.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e020      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d10c      	bne.n	8002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	e00b      	b.n	8002c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	43da      	mvns	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d18d      	bne.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c50:	e02d      	b.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f878 	bl	8002d48 <I2C_IsAcknowledgeFailed>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e02d      	b.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d021      	beq.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fe fcdb 	bl	8001624 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e007      	b.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b80      	cmp	r3, #128	; 0x80
 8002cba:	d1ca      	bne.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cd2:	e02d      	b.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f837 	bl	8002d48 <I2C_IsAcknowledgeFailed>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e02d      	b.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d021      	beq.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	f7fe fc9a 	bl	8001624 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d302      	bcc.n	8002d02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f043 0220 	orr.w	r2, r3, #32
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e007      	b.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d1ca      	bne.n	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5e:	d11b      	bne.n	8002d98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0204 	orr.w	r2, r3, #4
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d129      	bne.n	8002e10 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	; 0x24
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0210 	bic.w	r2, r2, #16
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d12a      	bne.n	8002e8e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002e58:	89fb      	ldrh	r3, [r7, #14]
 8002e5a:	f023 030f 	bic.w	r3, r3, #15
 8002e5e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	89fb      	ldrh	r3, [r7, #14]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	89fa      	ldrh	r2, [r7, #14]
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
  }
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	b08f      	sub	sp, #60	; 0x3c
 8002ea0:	af0a      	add	r7, sp, #40	; 0x28
 8002ea2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e10f      	b.n	80030ce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d106      	bne.n	8002ece <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7fe fac1 	bl	8001450 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 fe6c 	bl	8004bca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	687e      	ldr	r6, [r7, #4]
 8002efa:	466d      	mov	r5, sp
 8002efc:	f106 0410 	add.w	r4, r6, #16
 8002f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f10:	1d33      	adds	r3, r6, #4
 8002f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f14:	6838      	ldr	r0, [r7, #0]
 8002f16:	f001 fdf7 	bl	8004b08 <USB_CoreInit>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0d0      	b.n	80030ce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 fe5a 	bl	8004bec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]
 8002f3c:	e04a      	b.n	8002fd4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f3e:	7bfa      	ldrb	r2, [r7, #15]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	333d      	adds	r3, #61	; 0x3d
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	333c      	adds	r3, #60	; 0x3c
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	b298      	uxth	r0, r3
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	3344      	adds	r3, #68	; 0x44
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3340      	adds	r3, #64	; 0x40
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3348      	adds	r3, #72	; 0x48
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	334c      	adds	r3, #76	; 0x4c
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3354      	adds	r3, #84	; 0x54
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d3af      	bcc.n	8002f3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	e044      	b.n	800306e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ffa:	7bfa      	ldrb	r2, [r7, #15]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003026:	7bfa      	ldrb	r2, [r7, #15]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	3301      	adds	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	d3b5      	bcc.n	8002fe4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	687e      	ldr	r6, [r7, #4]
 8003080:	466d      	mov	r5, sp
 8003082:	f106 0410 	add.w	r4, r6, #16
 8003086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800308a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800308e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003092:	e885 0003 	stmia.w	r5, {r0, r1}
 8003096:	1d33      	adds	r3, r6, #4
 8003098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800309a:	6838      	ldr	r0, [r7, #0]
 800309c:	f001 fdf2 	bl	8004c84 <USB_DevInit>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d005      	beq.n	80030b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00d      	b.n	80030ce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 ffbd 	bl	8005046 <USB_DevDisconnect>

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e267      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d075      	beq.n	80031e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030f6:	4b88      	ldr	r3, [pc, #544]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d00c      	beq.n	800311c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003102:	4b85      	ldr	r3, [pc, #532]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800310a:	2b08      	cmp	r3, #8
 800310c:	d112      	bne.n	8003134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310e:	4b82      	ldr	r3, [pc, #520]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311a:	d10b      	bne.n	8003134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	4b7e      	ldr	r3, [pc, #504]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d05b      	beq.n	80031e0 <HAL_RCC_OscConfig+0x108>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d157      	bne.n	80031e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e242      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d106      	bne.n	800314c <HAL_RCC_OscConfig+0x74>
 800313e:	4b76      	ldr	r3, [pc, #472]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a75      	ldr	r2, [pc, #468]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e01d      	b.n	8003188 <HAL_RCC_OscConfig+0xb0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x98>
 8003156:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6f      	ldr	r2, [pc, #444]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 800315c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b6d      	ldr	r3, [pc, #436]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a6c      	ldr	r2, [pc, #432]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0xb0>
 8003170:	4b69      	ldr	r3, [pc, #420]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a68      	ldr	r2, [pc, #416]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b66      	ldr	r3, [pc, #408]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a65      	ldr	r2, [pc, #404]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fe fa48 	bl	8001624 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003198:	f7fe fa44 	bl	8001624 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e207      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0xc0>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe fa34 	bl	8001624 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe fa30 	bl	8001624 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e1f3      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	4b51      	ldr	r3, [pc, #324]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0xe8>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d063      	beq.n	80032b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ee:	4b4a      	ldr	r3, [pc, #296]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003202:	2b08      	cmp	r3, #8
 8003204:	d11c      	bne.n	8003240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003206:	4b44      	ldr	r3, [pc, #272]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d116      	bne.n	8003240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_RCC_OscConfig+0x152>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e1c7      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322a:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4937      	ldr	r1, [pc, #220]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	e03a      	b.n	80032b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003248:	4b34      	ldr	r3, [pc, #208]	; (800331c <HAL_RCC_OscConfig+0x244>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7fe f9e9 	bl	8001624 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003256:	f7fe f9e5 	bl	8001624 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e1a8      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4925      	ldr	r1, [pc, #148]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	e015      	b.n	80032b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <HAL_RCC_OscConfig+0x244>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe f9c8 	bl	8001624 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003298:	f7fe f9c4 	bl	8001624 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e187      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d036      	beq.n	8003330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <HAL_RCC_OscConfig+0x248>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe f9a8 	bl	8001624 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d8:	f7fe f9a4 	bl	8001624 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e167      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_OscConfig+0x240>)
 80032ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x200>
 80032f6:	e01b      	b.n	8003330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_OscConfig+0x248>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fe:	f7fe f991 	bl	8001624 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003304:	e00e      	b.n	8003324 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003306:	f7fe f98d 	bl	8001624 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d907      	bls.n	8003324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e150      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
 8003318:	40023800 	.word	0x40023800
 800331c:	42470000 	.word	0x42470000
 8003320:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003324:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ea      	bne.n	8003306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8097 	beq.w	800346c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003342:	4b81      	ldr	r3, [pc, #516]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10f      	bne.n	800336e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	4b7d      	ldr	r3, [pc, #500]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	4a7c      	ldr	r2, [pc, #496]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335c:	6413      	str	r3, [r2, #64]	; 0x40
 800335e:	4b7a      	ldr	r3, [pc, #488]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4b77      	ldr	r3, [pc, #476]	; (800354c <HAL_RCC_OscConfig+0x474>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d118      	bne.n	80033ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337a:	4b74      	ldr	r3, [pc, #464]	; (800354c <HAL_RCC_OscConfig+0x474>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a73      	ldr	r2, [pc, #460]	; (800354c <HAL_RCC_OscConfig+0x474>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003386:	f7fe f94d 	bl	8001624 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338e:	f7fe f949 	bl	8001624 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e10c      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	4b6a      	ldr	r3, [pc, #424]	; (800354c <HAL_RCC_OscConfig+0x474>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x2ea>
 80033b4:	4b64      	ldr	r3, [pc, #400]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	4a63      	ldr	r2, [pc, #396]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6713      	str	r3, [r2, #112]	; 0x70
 80033c0:	e01c      	b.n	80033fc <HAL_RCC_OscConfig+0x324>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x30c>
 80033ca:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	4a5e      	ldr	r2, [pc, #376]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	6713      	str	r3, [r2, #112]	; 0x70
 80033d6:	4b5c      	ldr	r3, [pc, #368]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a5b      	ldr	r2, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0x324>
 80033e4:	4b58      	ldr	r3, [pc, #352]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a57      	ldr	r2, [pc, #348]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
 80033f0:	4b55      	ldr	r3, [pc, #340]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	4a54      	ldr	r2, [pc, #336]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80033f6:	f023 0304 	bic.w	r3, r3, #4
 80033fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe f90e 	bl	8001624 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fe f90a 	bl	8001624 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0cb      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	4b49      	ldr	r3, [pc, #292]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0ee      	beq.n	800340c <HAL_RCC_OscConfig+0x334>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003430:	f7fe f8f8 	bl	8001624 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003438:	f7fe f8f4 	bl	8001624 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0b5      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344e:	4b3e      	ldr	r3, [pc, #248]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ee      	bne.n	8003438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	4b39      	ldr	r3, [pc, #228]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	4a38      	ldr	r2, [pc, #224]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a1 	beq.w	80035b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003476:	4b34      	ldr	r3, [pc, #208]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	d05c      	beq.n	800353c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d141      	bne.n	800350e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b31      	ldr	r3, [pc, #196]	; (8003550 <HAL_RCC_OscConfig+0x478>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fe f8c8 	bl	8001624 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe f8c4 	bl	8001624 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e087      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69da      	ldr	r2, [r3, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	019b      	lsls	r3, r3, #6
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	085b      	lsrs	r3, r3, #1
 80034ce:	3b01      	subs	r3, #1
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	491b      	ldr	r1, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x478>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe f89d 	bl	8001624 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fe f899 	bl	8001624 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e05c      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x416>
 800350c:	e054      	b.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <HAL_RCC_OscConfig+0x478>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fe f886 	bl	8001624 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe f882 	bl	8001624 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e045      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_RCC_OscConfig+0x470>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x444>
 800353a:	e03d      	b.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e038      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	40007000 	.word	0x40007000
 8003550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x4ec>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d028      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d121      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d11a      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003584:	4013      	ands	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800358a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800358c:	4293      	cmp	r3, r2
 800358e:	d111      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	3b01      	subs	r3, #1
 800359e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800

080035c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0cc      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b68      	ldr	r3, [pc, #416]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d90c      	bls.n	8003604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b65      	ldr	r3, [pc, #404]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b63      	ldr	r3, [pc, #396]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0b8      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d020      	beq.n	8003652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800361c:	4b59      	ldr	r3, [pc, #356]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4a58      	ldr	r2, [pc, #352]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003634:	4b53      	ldr	r3, [pc, #332]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a52      	ldr	r2, [pc, #328]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800363e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b50      	ldr	r3, [pc, #320]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	494d      	ldr	r1, [pc, #308]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d044      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d119      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e07f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d003      	beq.n	8003686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003682:	2b03      	cmp	r3, #3
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003686:	4b3f      	ldr	r3, [pc, #252]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e06f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	4b3b      	ldr	r3, [pc, #236]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e067      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b37      	ldr	r3, [pc, #220]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4934      	ldr	r1, [pc, #208]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b8:	f7fd ffb4 	bl	8001624 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fd ffb0 	bl	8001624 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e04f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d20c      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f6:	4b22      	ldr	r3, [pc, #136]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e032      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4916      	ldr	r1, [pc, #88]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	490e      	ldr	r1, [pc, #56]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800374e:	f000 f821 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8003752:	4602      	mov	r2, r0
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	490a      	ldr	r1, [pc, #40]	; (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	5ccb      	ldrb	r3, [r1, r3]
 8003762:	fa22 f303 	lsr.w	r3, r2, r3
 8003766:	4a09      	ldr	r2, [pc, #36]	; (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fd ff14 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023c00 	.word	0x40023c00
 8003784:	40023800 	.word	0x40023800
 8003788:	08005aec 	.word	0x08005aec
 800378c:	20000008 	.word	0x20000008
 8003790:	2000000c 	.word	0x2000000c

08003794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b094      	sub	sp, #80	; 0x50
 800379a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	647b      	str	r3, [r7, #68]	; 0x44
 80037a0:	2300      	movs	r3, #0
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a4:	2300      	movs	r3, #0
 80037a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ac:	4b79      	ldr	r3, [pc, #484]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d00d      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x40>
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	f200 80e1 	bhi.w	8003980 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x34>
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d003      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x3a>
 80037c6:	e0db      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c8:	4b73      	ldr	r3, [pc, #460]	; (8003998 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037cc:	e0db      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ce:	4b73      	ldr	r3, [pc, #460]	; (800399c <HAL_RCC_GetSysClockFreq+0x208>)
 80037d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d2:	e0d8      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d4:	4b6f      	ldr	r3, [pc, #444]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037de:	4b6d      	ldr	r3, [pc, #436]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d063      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ea:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	099b      	lsrs	r3, r3, #6
 80037f0:	2200      	movs	r2, #0
 80037f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30
 80037fe:	2300      	movs	r3, #0
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
 8003802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003806:	4622      	mov	r2, r4
 8003808:	462b      	mov	r3, r5
 800380a:	f04f 0000 	mov.w	r0, #0
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	0159      	lsls	r1, r3, #5
 8003814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003818:	0150      	lsls	r0, r2, #5
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4621      	mov	r1, r4
 8003820:	1a51      	subs	r1, r2, r1
 8003822:	6139      	str	r1, [r7, #16]
 8003824:	4629      	mov	r1, r5
 8003826:	eb63 0301 	sbc.w	r3, r3, r1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003838:	4659      	mov	r1, fp
 800383a:	018b      	lsls	r3, r1, #6
 800383c:	4651      	mov	r1, sl
 800383e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003842:	4651      	mov	r1, sl
 8003844:	018a      	lsls	r2, r1, #6
 8003846:	4651      	mov	r1, sl
 8003848:	ebb2 0801 	subs.w	r8, r2, r1
 800384c:	4659      	mov	r1, fp
 800384e:	eb63 0901 	sbc.w	r9, r3, r1
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800385e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003866:	4690      	mov	r8, r2
 8003868:	4699      	mov	r9, r3
 800386a:	4623      	mov	r3, r4
 800386c:	eb18 0303 	adds.w	r3, r8, r3
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	462b      	mov	r3, r5
 8003874:	eb49 0303 	adc.w	r3, r9, r3
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003886:	4629      	mov	r1, r5
 8003888:	024b      	lsls	r3, r1, #9
 800388a:	4621      	mov	r1, r4
 800388c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003890:	4621      	mov	r1, r4
 8003892:	024a      	lsls	r2, r1, #9
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800389a:	2200      	movs	r2, #0
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
 800389e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038a4:	f7fc fcfc 	bl	80002a0 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4613      	mov	r3, r2
 80038ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b0:	e058      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	2200      	movs	r2, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	4611      	mov	r1, r2
 80038be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	2300      	movs	r3, #0
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
 80038c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038cc:	4642      	mov	r2, r8
 80038ce:	464b      	mov	r3, r9
 80038d0:	f04f 0000 	mov.w	r0, #0
 80038d4:	f04f 0100 	mov.w	r1, #0
 80038d8:	0159      	lsls	r1, r3, #5
 80038da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038de:	0150      	lsls	r0, r2, #5
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4641      	mov	r1, r8
 80038e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ea:	4649      	mov	r1, r9
 80038ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003904:	ebb2 040a 	subs.w	r4, r2, sl
 8003908:	eb63 050b 	sbc.w	r5, r3, fp
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	00eb      	lsls	r3, r5, #3
 8003916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800391a:	00e2      	lsls	r2, r4, #3
 800391c:	4614      	mov	r4, r2
 800391e:	461d      	mov	r5, r3
 8003920:	4643      	mov	r3, r8
 8003922:	18e3      	adds	r3, r4, r3
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	464b      	mov	r3, r9
 8003928:	eb45 0303 	adc.w	r3, r5, r3
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800393a:	4629      	mov	r1, r5
 800393c:	028b      	lsls	r3, r1, #10
 800393e:	4621      	mov	r1, r4
 8003940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003944:	4621      	mov	r1, r4
 8003946:	028a      	lsls	r2, r1, #10
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800394e:	2200      	movs	r2, #0
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	61fa      	str	r2, [r7, #28]
 8003954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003958:	f7fc fca2 	bl	80002a0 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4613      	mov	r3, r2
 8003962:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_RCC_GetSysClockFreq+0x200>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800397e:	e002      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_GetSysClockFreq+0x204>)
 8003982:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003988:	4618      	mov	r0, r3
 800398a:	3750      	adds	r7, #80	; 0x50
 800398c:	46bd      	mov	sp, r7
 800398e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	00f42400 	.word	0x00f42400
 800399c:	007a1200 	.word	0x007a1200

080039a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000008 	.word	0x20000008

080039b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039bc:	f7ff fff0 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0a9b      	lsrs	r3, r3, #10
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	; (80039dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40023800 	.word	0x40023800
 80039dc:	08005afc 	.word	0x08005afc

080039e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039e4:	f7ff ffdc 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0b5b      	lsrs	r3, r3, #13
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4903      	ldr	r1, [pc, #12]	; (8003a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40023800 	.word	0x40023800
 8003a04:	08005afc 	.word	0x08005afc

08003a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d075      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a3c:	4b91      	ldr	r3, [pc, #580]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a42:	f7fd fdef 	bl	8001624 <HAL_GetTick>
 8003a46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a4a:	f7fd fdeb 	bl	8001624 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e189      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a5c:	4b8a      	ldr	r3, [pc, #552]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f0      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d009      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	019a      	lsls	r2, r3, #6
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	071b      	lsls	r3, r3, #28
 8003a80:	4981      	ldr	r1, [pc, #516]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01f      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a94:	4b7c      	ldr	r3, [pc, #496]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9a:	0f1b      	lsrs	r3, r3, #28
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	019a      	lsls	r2, r3, #6
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	071b      	lsls	r3, r3, #28
 8003ab4:	4974      	ldr	r1, [pc, #464]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003abc:	4b72      	ldr	r3, [pc, #456]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac2:	f023 021f 	bic.w	r2, r3, #31
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	496e      	ldr	r1, [pc, #440]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00d      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	019a      	lsls	r2, r3, #6
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	061b      	lsls	r3, r3, #24
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	071b      	lsls	r3, r3, #28
 8003af4:	4964      	ldr	r1, [pc, #400]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003afc:	4b61      	ldr	r3, [pc, #388]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b02:	f7fd fd8f 	bl	8001624 <HAL_GetTick>
 8003b06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b0a:	f7fd fd8b 	bl	8001624 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e129      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b1c:	4b5a      	ldr	r3, [pc, #360]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d105      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d079      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b40:	4b52      	ldr	r3, [pc, #328]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b46:	f7fd fd6d 	bl	8001624 <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b4e:	f7fd fd69 	bl	8001624 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e107      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b60:	4b49      	ldr	r3, [pc, #292]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6c:	d0ef      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d020      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b7a:	4b43      	ldr	r3, [pc, #268]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	0f1b      	lsrs	r3, r3, #28
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	019a      	lsls	r2, r3, #6
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	061b      	lsls	r3, r3, #24
 8003b94:	431a      	orrs	r2, r3
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	071b      	lsls	r3, r3, #28
 8003b9a:	493b      	ldr	r1, [pc, #236]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ba2:	4b39      	ldr	r3, [pc, #228]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	4934      	ldr	r1, [pc, #208]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01e      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bc8:	4b2f      	ldr	r3, [pc, #188]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	0e1b      	lsrs	r3, r3, #24
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	019a      	lsls	r2, r3, #6
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	061b      	lsls	r3, r3, #24
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	071b      	lsls	r3, r3, #28
 8003be8:	4927      	ldr	r1, [pc, #156]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bf0:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	4922      	ldr	r1, [pc, #136]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c0c:	f7fd fd0a 	bl	8001624 <HAL_GetTick>
 8003c10:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c14:	f7fd fd06 	bl	8001624 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e0a4      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c26:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c32:	d1ef      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 808b 	beq.w	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4a0f      	ldr	r2, [pc, #60]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	; 0x40
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a0b      	ldr	r2, [pc, #44]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6a:	f7fd fcdb 	bl	8001624 <HAL_GetTick>
 8003c6e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c70:	e010      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c72:	f7fd fcd7 	bl	8001624 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d909      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e075      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003c84:	42470068 	.word	0x42470068
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	42470070 	.word	0x42470070
 8003c90:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c94:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0e8      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ca0:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02f      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d028      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cbe:	4b2f      	ldr	r3, [pc, #188]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc8:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cce:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003cd4:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cda:	4b28      	ldr	r3, [pc, #160]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d114      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ce6:	f7fd fc9d 	bl	8001624 <HAL_GetTick>
 8003cea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fd fc99 	bl	8001624 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e035      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d04:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ee      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d1c:	d10d      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003d1e:	4b17      	ldr	r3, [pc, #92]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d32:	4912      	ldr	r1, [pc, #72]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]
 8003d38:	e005      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4a0f      	ldr	r2, [pc, #60]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d44:	6093      	str	r3, [r2, #8]
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d52:	490a      	ldr	r1, [pc, #40]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d004      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003d6c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40007000 	.word	0x40007000
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	42470e40 	.word	0x42470e40
 8003d84:	424711e0 	.word	0x424711e0

08003d88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e066      	b.n	8003e6c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7f5b      	ldrb	r3, [r3, #29]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd f9ce 	bl	8001150 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	22ca      	movs	r2, #202	; 0xca
 8003dc0:	625a      	str	r2, [r3, #36]	; 0x24
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2253      	movs	r2, #83	; 0x53
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa45 	bl	800425a <RTC_EnterInitMode>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d12c      	bne.n	8003e34 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6899      	ldr	r1, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68d2      	ldr	r2, [r2, #12]
 8003e14:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6919      	ldr	r1, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	041a      	lsls	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fa4c 	bl	80042c8 <RTC_ExitInitMode>
 8003e30:	4603      	mov	r3, r0
 8003e32:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d113      	bne.n	8003e62 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	22ff      	movs	r2, #255	; 0xff
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	7f1b      	ldrb	r3, [r3, #28]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_RTC_SetTime+0x1c>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e087      	b.n	8003fa0 <HAL_RTC_SetTime+0x12c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d126      	bne.n	8003ef0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fa29 	bl	8004312 <RTC_ByteToBcd2>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fa22 	bl	8004312 <RTC_ByteToBcd2>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ed2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	789b      	ldrb	r3, [r3, #2]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fa1a 	bl	8004312 <RTC_ByteToBcd2>
 8003ede:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ee0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	78db      	ldrb	r3, [r3, #3]
 8003ee8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e018      	b.n	8003f22 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2200      	movs	r2, #0
 8003f02:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	785b      	ldrb	r3, [r3, #1]
 8003f0e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f10:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003f16:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	78db      	ldrb	r3, [r3, #3]
 8003f1c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	22ca      	movs	r2, #202	; 0xca
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2253      	movs	r2, #83	; 0x53
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f991 	bl	800425a <RTC_EnterInitMode>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d120      	bne.n	8003f84 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003f4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003f50:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6899      	ldr	r1, [r3, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f9a4 	bl	80042c8 <RTC_ExitInitMode>
 8003f80:	4603      	mov	r3, r0
 8003f82:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003f84:	7cfb      	ldrb	r3, [r7, #19]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	22ff      	movs	r2, #255	; 0xff
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	771a      	strb	r2, [r3, #28]

  return status;
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd90      	pop	{r4, r7, pc}

08003fa8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003fda:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003fde:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	0c1b      	lsrs	r3, r3, #16
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	0d9b      	lsrs	r3, r3, #22
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d11a      	bne.n	800405a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f98f 	bl	800434c <RTC_Bcd2ToByte>
 800402e:	4603      	mov	r3, r0
 8004030:	461a      	mov	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	785b      	ldrb	r3, [r3, #1]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f986 	bl	800434c <RTC_Bcd2ToByte>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	789b      	ldrb	r3, [r3, #2]
 800404c:	4618      	mov	r0, r3
 800404e:	f000 f97d 	bl	800434c <RTC_Bcd2ToByte>
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	7f1b      	ldrb	r3, [r3, #28]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_RTC_SetDate+0x1c>
 800407c:	2302      	movs	r3, #2
 800407e:	e071      	b.n	8004164 <HAL_RTC_SetDate+0x100>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2202      	movs	r2, #2
 800408a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10e      	bne.n	80040b0 <HAL_RTC_SetDate+0x4c>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	785b      	ldrb	r3, [r3, #1]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	785b      	ldrb	r3, [r3, #1]
 80040a2:	f023 0310 	bic.w	r3, r3, #16
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	330a      	adds	r3, #10
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d11c      	bne.n	80040f0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	78db      	ldrb	r3, [r3, #3]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f929 	bl	8004312 <RTC_ByteToBcd2>
 80040c0:	4603      	mov	r3, r0
 80040c2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	785b      	ldrb	r3, [r3, #1]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f922 	bl	8004312 <RTC_ByteToBcd2>
 80040ce:	4603      	mov	r3, r0
 80040d0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040d2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	789b      	ldrb	r3, [r3, #2]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 f91a 	bl	8004312 <RTC_ByteToBcd2>
 80040de:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80040e0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e00e      	b.n	800410e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	78db      	ldrb	r3, [r3, #3]
 80040f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80040fc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004102:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	22ca      	movs	r2, #202	; 0xca
 8004114:	625a      	str	r2, [r3, #36]	; 0x24
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2253      	movs	r2, #83	; 0x53
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f89b 	bl	800425a <RTC_EnterInitMode>
 8004124:	4603      	mov	r3, r0
 8004126:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10c      	bne.n	8004148 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004138:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800413c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f8c2 	bl	80042c8 <RTC_ExitInitMode>
 8004144:	4603      	mov	r3, r0
 8004146:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	22ff      	movs	r2, #255	; 0xff
 800415a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	771a      	strb	r2, [r3, #28]

  return status;
 8004162:	7cfb      	ldrb	r3, [r7, #19]
}
 8004164:	4618      	mov	r0, r3
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd90      	pop	{r4, r7, pc}

0800416c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004186:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800418a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	b2da      	uxtb	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	0b5b      	lsrs	r3, r3, #13
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d11a      	bne.n	8004200 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	78db      	ldrb	r3, [r3, #3]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f8bc 	bl	800434c <RTC_Bcd2ToByte>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 f8b3 	bl	800434c <RTC_Bcd2ToByte>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	789b      	ldrb	r3, [r3, #2]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f8aa 	bl	800434c <RTC_Bcd2ToByte>
 80041f8:	4603      	mov	r3, r0
 80041fa:	461a      	mov	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004224:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004226:	f7fd f9fd 	bl	8001624 <HAL_GetTick>
 800422a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800422c:	e009      	b.n	8004242 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800422e:	f7fd f9f9 	bl	8001624 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800423c:	d901      	bls.n	8004242 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e007      	b.n	8004252 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ee      	beq.n	800422e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d122      	bne.n	80042be <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004286:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004288:	f7fd f9cc 	bl	8001624 <HAL_GetTick>
 800428c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800428e:	e00c      	b.n	80042aa <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004290:	f7fd f9c8 	bl	8001624 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800429e:	d904      	bls.n	80042aa <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2204      	movs	r2, #4
 80042a4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <RTC_EnterInitMode+0x64>
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d1e8      	bne.n	8004290 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042e2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff ff89 	bl	800420a <HAL_RTC_WaitForSynchro>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2204      	movs	r2, #4
 8004302:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	4603      	mov	r3, r0
 800431a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004320:	e005      	b.n	800432e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	3301      	adds	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	3b0a      	subs	r3, #10
 800432c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	2b09      	cmp	r3, #9
 8004332:	d8f6      	bhi.n	8004322 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	b2da      	uxtb	r2, r3
 800433a:	79fb      	ldrb	r3, [r7, #7]
 800433c:	4313      	orrs	r3, r2
 800433e:	b2db      	uxtb	r3, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	0092      	lsls	r2, r2, #2
 8004364:	4413      	add	r3, r2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	b2da      	uxtb	r2, r3
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	4413      	add	r3, r2
 8004376:	b2db      	uxtb	r3, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e03f      	b.n	8004416 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fc ffda 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2224      	movs	r2, #36	; 0x24
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f929 	bl	8004620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b08a      	sub	sp, #40	; 0x28
 8004422:	af02      	add	r7, sp, #8
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b20      	cmp	r3, #32
 800443c:	d17c      	bne.n	8004538 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_UART_Transmit+0x2c>
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e075      	b.n	800453a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_UART_Transmit+0x3e>
 8004458:	2302      	movs	r3, #2
 800445a:	e06e      	b.n	800453a <HAL_UART_Transmit+0x11c>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2221      	movs	r2, #33	; 0x21
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004472:	f7fd f8d7 	bl	8001624 <HAL_GetTick>
 8004476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	88fa      	ldrh	r2, [r7, #6]
 800447c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	88fa      	ldrh	r2, [r7, #6]
 8004482:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448c:	d108      	bne.n	80044a0 <HAL_UART_Transmit+0x82>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d104      	bne.n	80044a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	e003      	b.n	80044a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044b0:	e02a      	b.n	8004508 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2180      	movs	r1, #128	; 0x80
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f840 	bl	8004542 <UART_WaitOnFlagUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e036      	b.n	800453a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	3302      	adds	r3, #2
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	e007      	b.n	80044fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	781a      	ldrb	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	3301      	adds	r3, #1
 80044f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1cf      	bne.n	80044b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2200      	movs	r2, #0
 800451a:	2140      	movs	r1, #64	; 0x40
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f810 	bl	8004542 <UART_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e006      	b.n	800453a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	e000      	b.n	800453a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004538:	2302      	movs	r3, #2
  }
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b090      	sub	sp, #64	; 0x40
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	603b      	str	r3, [r7, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004552:	e050      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d04c      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800455c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <UART_WaitOnFlagUntilTimeout+0x30>
 8004562:	f7fd f85f 	bl	8001624 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800456e:	429a      	cmp	r2, r3
 8004570:	d241      	bcs.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	330c      	adds	r3, #12
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004592:	637a      	str	r2, [r7, #52]	; 0x34
 8004594:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e5      	bne.n	8004572 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3314      	adds	r3, #20
 80045ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	613b      	str	r3, [r7, #16]
   return(result);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3314      	adds	r3, #20
 80045c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045c6:	623a      	str	r2, [r7, #32]
 80045c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	69f9      	ldr	r1, [r7, #28]
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e5      	bne.n	80045a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e00f      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4013      	ands	r3, r2
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	bf0c      	ite	eq
 8004606:	2301      	moveq	r3, #1
 8004608:	2300      	movne	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	429a      	cmp	r2, r3
 8004612:	d09f      	beq.n	8004554 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3740      	adds	r7, #64	; 0x40
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004624:	b0c0      	sub	sp, #256	; 0x100
 8004626:	af00      	add	r7, sp, #0
 8004628:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	68d9      	ldr	r1, [r3, #12]
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	ea40 0301 	orr.w	r3, r0, r1
 8004648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	431a      	orrs	r2, r3
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	431a      	orrs	r2, r3
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004678:	f021 010c 	bic.w	r1, r1, #12
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004686:	430b      	orrs	r3, r1
 8004688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469a:	6999      	ldr	r1, [r3, #24]
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	ea40 0301 	orr.w	r3, r0, r1
 80046a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4b8f      	ldr	r3, [pc, #572]	; (80048ec <UART_SetConfig+0x2cc>)
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d005      	beq.n	80046c0 <UART_SetConfig+0xa0>
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b8d      	ldr	r3, [pc, #564]	; (80048f0 <UART_SetConfig+0x2d0>)
 80046bc:	429a      	cmp	r2, r3
 80046be:	d104      	bne.n	80046ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046c0:	f7ff f98e 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 80046c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046c8:	e003      	b.n	80046d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ca:	f7ff f975 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 80046ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046dc:	f040 810c 	bne.w	80048f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046f2:	4622      	mov	r2, r4
 80046f4:	462b      	mov	r3, r5
 80046f6:	1891      	adds	r1, r2, r2
 80046f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80046fa:	415b      	adcs	r3, r3
 80046fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004702:	4621      	mov	r1, r4
 8004704:	eb12 0801 	adds.w	r8, r2, r1
 8004708:	4629      	mov	r1, r5
 800470a:	eb43 0901 	adc.w	r9, r3, r1
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800471a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800471e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004722:	4690      	mov	r8, r2
 8004724:	4699      	mov	r9, r3
 8004726:	4623      	mov	r3, r4
 8004728:	eb18 0303 	adds.w	r3, r8, r3
 800472c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004730:	462b      	mov	r3, r5
 8004732:	eb49 0303 	adc.w	r3, r9, r3
 8004736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004746:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800474a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800474e:	460b      	mov	r3, r1
 8004750:	18db      	adds	r3, r3, r3
 8004752:	653b      	str	r3, [r7, #80]	; 0x50
 8004754:	4613      	mov	r3, r2
 8004756:	eb42 0303 	adc.w	r3, r2, r3
 800475a:	657b      	str	r3, [r7, #84]	; 0x54
 800475c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004764:	f7fb fd9c 	bl	80002a0 <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4b61      	ldr	r3, [pc, #388]	; (80048f4 <UART_SetConfig+0x2d4>)
 800476e:	fba3 2302 	umull	r2, r3, r3, r2
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	011c      	lsls	r4, r3, #4
 8004776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004780:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004788:	4642      	mov	r2, r8
 800478a:	464b      	mov	r3, r9
 800478c:	1891      	adds	r1, r2, r2
 800478e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004790:	415b      	adcs	r3, r3
 8004792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004798:	4641      	mov	r1, r8
 800479a:	eb12 0a01 	adds.w	sl, r2, r1
 800479e:	4649      	mov	r1, r9
 80047a0:	eb43 0b01 	adc.w	fp, r3, r1
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047b8:	4692      	mov	sl, r2
 80047ba:	469b      	mov	fp, r3
 80047bc:	4643      	mov	r3, r8
 80047be:	eb1a 0303 	adds.w	r3, sl, r3
 80047c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047c6:	464b      	mov	r3, r9
 80047c8:	eb4b 0303 	adc.w	r3, fp, r3
 80047cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047e4:	460b      	mov	r3, r1
 80047e6:	18db      	adds	r3, r3, r3
 80047e8:	643b      	str	r3, [r7, #64]	; 0x40
 80047ea:	4613      	mov	r3, r2
 80047ec:	eb42 0303 	adc.w	r3, r2, r3
 80047f0:	647b      	str	r3, [r7, #68]	; 0x44
 80047f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047fa:	f7fb fd51 	bl	80002a0 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4611      	mov	r1, r2
 8004804:	4b3b      	ldr	r3, [pc, #236]	; (80048f4 <UART_SetConfig+0x2d4>)
 8004806:	fba3 2301 	umull	r2, r3, r3, r1
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2264      	movs	r2, #100	; 0x64
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	1acb      	subs	r3, r1, r3
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800481a:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <UART_SetConfig+0x2d4>)
 800481c:	fba3 2302 	umull	r2, r3, r3, r2
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004828:	441c      	add	r4, r3
 800482a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482e:	2200      	movs	r2, #0
 8004830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004834:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	1891      	adds	r1, r2, r2
 8004842:	63b9      	str	r1, [r7, #56]	; 0x38
 8004844:	415b      	adcs	r3, r3
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800484c:	4641      	mov	r1, r8
 800484e:	1851      	adds	r1, r2, r1
 8004850:	6339      	str	r1, [r7, #48]	; 0x30
 8004852:	4649      	mov	r1, r9
 8004854:	414b      	adcs	r3, r1
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004864:	4659      	mov	r1, fp
 8004866:	00cb      	lsls	r3, r1, #3
 8004868:	4651      	mov	r1, sl
 800486a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800486e:	4651      	mov	r1, sl
 8004870:	00ca      	lsls	r2, r1, #3
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	4603      	mov	r3, r0
 8004878:	4642      	mov	r2, r8
 800487a:	189b      	adds	r3, r3, r2
 800487c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004880:	464b      	mov	r3, r9
 8004882:	460a      	mov	r2, r1
 8004884:	eb42 0303 	adc.w	r3, r2, r3
 8004888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004898:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800489c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048a0:	460b      	mov	r3, r1
 80048a2:	18db      	adds	r3, r3, r3
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a6:	4613      	mov	r3, r2
 80048a8:	eb42 0303 	adc.w	r3, r2, r3
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048b6:	f7fb fcf3 	bl	80002a0 <__aeabi_uldivmod>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <UART_SetConfig+0x2d4>)
 80048c0:	fba3 1302 	umull	r1, r3, r3, r2
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	2164      	movs	r1, #100	; 0x64
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	3332      	adds	r3, #50	; 0x32
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <UART_SetConfig+0x2d4>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	f003 0207 	and.w	r2, r3, #7
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4422      	add	r2, r4
 80048e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048e8:	e106      	b.n	8004af8 <UART_SetConfig+0x4d8>
 80048ea:	bf00      	nop
 80048ec:	40011000 	.word	0x40011000
 80048f0:	40011400 	.word	0x40011400
 80048f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004902:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800490a:	4642      	mov	r2, r8
 800490c:	464b      	mov	r3, r9
 800490e:	1891      	adds	r1, r2, r2
 8004910:	6239      	str	r1, [r7, #32]
 8004912:	415b      	adcs	r3, r3
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
 8004916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800491a:	4641      	mov	r1, r8
 800491c:	1854      	adds	r4, r2, r1
 800491e:	4649      	mov	r1, r9
 8004920:	eb43 0501 	adc.w	r5, r3, r1
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	00eb      	lsls	r3, r5, #3
 800492e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004932:	00e2      	lsls	r2, r4, #3
 8004934:	4614      	mov	r4, r2
 8004936:	461d      	mov	r5, r3
 8004938:	4643      	mov	r3, r8
 800493a:	18e3      	adds	r3, r4, r3
 800493c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004940:	464b      	mov	r3, r9
 8004942:	eb45 0303 	adc.w	r3, r5, r3
 8004946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004966:	4629      	mov	r1, r5
 8004968:	008b      	lsls	r3, r1, #2
 800496a:	4621      	mov	r1, r4
 800496c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004970:	4621      	mov	r1, r4
 8004972:	008a      	lsls	r2, r1, #2
 8004974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004978:	f7fb fc92 	bl	80002a0 <__aeabi_uldivmod>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4b60      	ldr	r3, [pc, #384]	; (8004b04 <UART_SetConfig+0x4e4>)
 8004982:	fba3 2302 	umull	r2, r3, r3, r2
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	011c      	lsls	r4, r3, #4
 800498a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800498e:	2200      	movs	r2, #0
 8004990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004994:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800499c:	4642      	mov	r2, r8
 800499e:	464b      	mov	r3, r9
 80049a0:	1891      	adds	r1, r2, r2
 80049a2:	61b9      	str	r1, [r7, #24]
 80049a4:	415b      	adcs	r3, r3
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ac:	4641      	mov	r1, r8
 80049ae:	1851      	adds	r1, r2, r1
 80049b0:	6139      	str	r1, [r7, #16]
 80049b2:	4649      	mov	r1, r9
 80049b4:	414b      	adcs	r3, r1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c4:	4659      	mov	r1, fp
 80049c6:	00cb      	lsls	r3, r1, #3
 80049c8:	4651      	mov	r1, sl
 80049ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ce:	4651      	mov	r1, sl
 80049d0:	00ca      	lsls	r2, r1, #3
 80049d2:	4610      	mov	r0, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	4603      	mov	r3, r0
 80049d8:	4642      	mov	r2, r8
 80049da:	189b      	adds	r3, r3, r2
 80049dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049e0:	464b      	mov	r3, r9
 80049e2:	460a      	mov	r2, r1
 80049e4:	eb42 0303 	adc.w	r3, r2, r3
 80049e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80049f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a04:	4649      	mov	r1, r9
 8004a06:	008b      	lsls	r3, r1, #2
 8004a08:	4641      	mov	r1, r8
 8004a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a0e:	4641      	mov	r1, r8
 8004a10:	008a      	lsls	r2, r1, #2
 8004a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a16:	f7fb fc43 	bl	80002a0 <__aeabi_uldivmod>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4b38      	ldr	r3, [pc, #224]	; (8004b04 <UART_SetConfig+0x4e4>)
 8004a22:	fba3 2301 	umull	r2, r3, r3, r1
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2264      	movs	r2, #100	; 0x64
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	1acb      	subs	r3, r1, r3
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	3332      	adds	r3, #50	; 0x32
 8004a34:	4a33      	ldr	r2, [pc, #204]	; (8004b04 <UART_SetConfig+0x4e4>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a40:	441c      	add	r4, r3
 8004a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a46:	2200      	movs	r2, #0
 8004a48:	673b      	str	r3, [r7, #112]	; 0x70
 8004a4a:	677a      	str	r2, [r7, #116]	; 0x74
 8004a4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a50:	4642      	mov	r2, r8
 8004a52:	464b      	mov	r3, r9
 8004a54:	1891      	adds	r1, r2, r2
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	415b      	adcs	r3, r3
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a60:	4641      	mov	r1, r8
 8004a62:	1851      	adds	r1, r2, r1
 8004a64:	6039      	str	r1, [r7, #0]
 8004a66:	4649      	mov	r1, r9
 8004a68:	414b      	adcs	r3, r1
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a78:	4659      	mov	r1, fp
 8004a7a:	00cb      	lsls	r3, r1, #3
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a82:	4651      	mov	r1, sl
 8004a84:	00ca      	lsls	r2, r1, #3
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a92:	464b      	mov	r3, r9
 8004a94:	460a      	mov	r2, r1
 8004a96:	eb42 0303 	adc.w	r3, r2, r3
 8004a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8004aa6:	667a      	str	r2, [r7, #100]	; 0x64
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	008b      	lsls	r3, r1, #2
 8004ab8:	4641      	mov	r1, r8
 8004aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004abe:	4641      	mov	r1, r8
 8004ac0:	008a      	lsls	r2, r1, #2
 8004ac2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ac6:	f7fb fbeb 	bl	80002a0 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <UART_SetConfig+0x4e4>)
 8004ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	2164      	movs	r1, #100	; 0x64
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	3332      	adds	r3, #50	; 0x32
 8004ae2:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <UART_SetConfig+0x4e4>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	f003 020f 	and.w	r2, r3, #15
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4422      	add	r2, r4
 8004af6:	609a      	str	r2, [r3, #8]
}
 8004af8:	bf00      	nop
 8004afa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004afe:	46bd      	mov	sp, r7
 8004b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b04:	51eb851f 	.word	0x51eb851f

08004b08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b08:	b084      	sub	sp, #16
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	f107 001c 	add.w	r0, r7, #28
 8004b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d122      	bne.n	8004b66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d105      	bne.n	8004b5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 faa2 	bl	80050a4 <USB_CoreReset>
 8004b60:	4603      	mov	r3, r0
 8004b62:	73fb      	strb	r3, [r7, #15]
 8004b64:	e01a      	b.n	8004b9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fa96 	bl	80050a4 <USB_CoreReset>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8004b8e:	e005      	b.n	8004b9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10b      	bne.n	8004bba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f043 0206 	orr.w	r2, r3, #6
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f043 0220 	orr.w	r2, r3, #32
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bc6:	b004      	add	sp, #16
 8004bc8:	4770      	bx	lr

08004bca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f023 0201 	bic.w	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d115      	bne.n	8004c3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f7fc fd0e 	bl	800163c <HAL_Delay>
      ms++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa2e 	bl	8005088 <USB_GetMode>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d01e      	beq.n	8004c70 <USB_SetCurrentMode+0x84>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b31      	cmp	r3, #49	; 0x31
 8004c36:	d9f0      	bls.n	8004c1a <USB_SetCurrentMode+0x2e>
 8004c38:	e01a      	b.n	8004c70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d115      	bne.n	8004c6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	f7fc fcf5 	bl	800163c <HAL_Delay>
      ms++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa15 	bl	8005088 <USB_GetMode>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <USB_SetCurrentMode+0x84>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b31      	cmp	r3, #49	; 0x31
 8004c68:	d9f0      	bls.n	8004c4c <USB_SetCurrentMode+0x60>
 8004c6a:	e001      	b.n	8004c70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e005      	b.n	8004c7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b32      	cmp	r3, #50	; 0x32
 8004c74:	d101      	bne.n	8004c7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c84:	b084      	sub	sp, #16
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b086      	sub	sp, #24
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e009      	b.n	8004cb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	3340      	adds	r3, #64	; 0x40
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	2200      	movs	r2, #0
 8004cb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b0e      	cmp	r3, #14
 8004cbc:	d9f2      	bls.n	8004ca4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11c      	bne.n	8004cfe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd2:	f043 0302 	orr.w	r3, r3, #2
 8004cd6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
 8004cfc:	e00b      	b.n	8004d16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d28:	4619      	mov	r1, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d30:	461a      	mov	r2, r3
 8004d32:	680b      	ldr	r3, [r1, #0]
 8004d34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d10c      	bne.n	8004d56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d42:	2100      	movs	r1, #0
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f965 	bl	8005014 <USB_SetDevSpeed>
 8004d4a:	e008      	b.n	8004d5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f960 	bl	8005014 <USB_SetDevSpeed>
 8004d54:	e003      	b.n	8004d5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d56:	2103      	movs	r1, #3
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f95b 	bl	8005014 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d5e:	2110      	movs	r1, #16
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f8f3 	bl	8004f4c <USB_FlushTxFifo>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f91f 	bl	8004fb4 <USB_FlushRxFifo>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d86:	461a      	mov	r2, r3
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d92:	461a      	mov	r2, r3
 8004d94:	2300      	movs	r3, #0
 8004d96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2300      	movs	r3, #0
 8004da2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	e043      	b.n	8004e32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc0:	d118      	bne.n	8004df4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e013      	b.n	8004e06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	461a      	mov	r2, r3
 8004dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e008      	b.n	8004e06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	461a      	mov	r2, r3
 8004e02:	2300      	movs	r3, #0
 8004e04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e12:	461a      	mov	r2, r3
 8004e14:	2300      	movs	r3, #0
 8004e16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	461a      	mov	r2, r3
 8004e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d3b7      	bcc.n	8004daa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e043      	b.n	8004ec8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e56:	d118      	bne.n	8004e8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e013      	b.n	8004e9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	461a      	mov	r2, r3
 8004e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e008      	b.n	8004e9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	461a      	mov	r2, r3
 8004e98:	2300      	movs	r3, #0
 8004e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ec0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d3b7      	bcc.n	8004e40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f043 0210 	orr.w	r2, r3, #16
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <USB_DevInit+0x2c4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f043 0208 	orr.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d107      	bne.n	8004f38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f44:	b004      	add	sp, #16
 8004f46:	4770      	bx	lr
 8004f48:	803c3800 	.word	0x803c3800

08004f4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <USB_FlushTxFifo+0x64>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e01b      	b.n	8004fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	daf2      	bge.n	8004f5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	019b      	lsls	r3, r3, #6
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <USB_FlushTxFifo+0x64>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e006      	b.n	8004fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d0f0      	beq.n	8004f84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	00030d40 	.word	0x00030d40

08004fb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a11      	ldr	r2, [pc, #68]	; (8005010 <USB_FlushRxFifo+0x5c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e018      	b.n	8005004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	daf2      	bge.n	8004fc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4a08      	ldr	r2, [pc, #32]	; (8005010 <USB_FlushRxFifo+0x5c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e006      	b.n	8005004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d0f0      	beq.n	8004fe4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	00030d40 	.word	0x00030d40

08005014 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005046:	b480      	push	{r7}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005060:	f023 0303 	bic.w	r3, r3, #3
 8005064:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005074:	f043 0302 	orr.w	r3, r3, #2
 8005078:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f003 0301 	and.w	r3, r3, #1
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4a13      	ldr	r2, [pc, #76]	; (8005108 <USB_CoreReset+0x64>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e01b      	b.n	80050fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	daf2      	bge.n	80050b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f043 0201 	orr.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3301      	adds	r3, #1
 80050de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4a09      	ldr	r2, [pc, #36]	; (8005108 <USB_CoreReset+0x64>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d901      	bls.n	80050ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e006      	b.n	80050fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d0f0      	beq.n	80050da <USB_CoreReset+0x36>

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	00030d40 	.word	0x00030d40

0800510c <siprintf>:
 800510c:	b40e      	push	{r1, r2, r3}
 800510e:	b500      	push	{lr}
 8005110:	b09c      	sub	sp, #112	; 0x70
 8005112:	ab1d      	add	r3, sp, #116	; 0x74
 8005114:	9002      	str	r0, [sp, #8]
 8005116:	9006      	str	r0, [sp, #24]
 8005118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800511c:	4809      	ldr	r0, [pc, #36]	; (8005144 <siprintf+0x38>)
 800511e:	9107      	str	r1, [sp, #28]
 8005120:	9104      	str	r1, [sp, #16]
 8005122:	4909      	ldr	r1, [pc, #36]	; (8005148 <siprintf+0x3c>)
 8005124:	f853 2b04 	ldr.w	r2, [r3], #4
 8005128:	9105      	str	r1, [sp, #20]
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	a902      	add	r1, sp, #8
 8005130:	f000 f992 	bl	8005458 <_svfiprintf_r>
 8005134:	9b02      	ldr	r3, [sp, #8]
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	b01c      	add	sp, #112	; 0x70
 800513c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005140:	b003      	add	sp, #12
 8005142:	4770      	bx	lr
 8005144:	20000060 	.word	0x20000060
 8005148:	ffff0208 	.word	0xffff0208

0800514c <memset>:
 800514c:	4402      	add	r2, r0
 800514e:	4603      	mov	r3, r0
 8005150:	4293      	cmp	r3, r2
 8005152:	d100      	bne.n	8005156 <memset+0xa>
 8005154:	4770      	bx	lr
 8005156:	f803 1b01 	strb.w	r1, [r3], #1
 800515a:	e7f9      	b.n	8005150 <memset+0x4>

0800515c <__errno>:
 800515c:	4b01      	ldr	r3, [pc, #4]	; (8005164 <__errno+0x8>)
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20000060 	.word	0x20000060

08005168 <__libc_init_array>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	4d0d      	ldr	r5, [pc, #52]	; (80051a0 <__libc_init_array+0x38>)
 800516c:	4c0d      	ldr	r4, [pc, #52]	; (80051a4 <__libc_init_array+0x3c>)
 800516e:	1b64      	subs	r4, r4, r5
 8005170:	10a4      	asrs	r4, r4, #2
 8005172:	2600      	movs	r6, #0
 8005174:	42a6      	cmp	r6, r4
 8005176:	d109      	bne.n	800518c <__libc_init_array+0x24>
 8005178:	4d0b      	ldr	r5, [pc, #44]	; (80051a8 <__libc_init_array+0x40>)
 800517a:	4c0c      	ldr	r4, [pc, #48]	; (80051ac <__libc_init_array+0x44>)
 800517c:	f000 fc6a 	bl	8005a54 <_init>
 8005180:	1b64      	subs	r4, r4, r5
 8005182:	10a4      	asrs	r4, r4, #2
 8005184:	2600      	movs	r6, #0
 8005186:	42a6      	cmp	r6, r4
 8005188:	d105      	bne.n	8005196 <__libc_init_array+0x2e>
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005190:	4798      	blx	r3
 8005192:	3601      	adds	r6, #1
 8005194:	e7ee      	b.n	8005174 <__libc_init_array+0xc>
 8005196:	f855 3b04 	ldr.w	r3, [r5], #4
 800519a:	4798      	blx	r3
 800519c:	3601      	adds	r6, #1
 800519e:	e7f2      	b.n	8005186 <__libc_init_array+0x1e>
 80051a0:	08005b40 	.word	0x08005b40
 80051a4:	08005b40 	.word	0x08005b40
 80051a8:	08005b40 	.word	0x08005b40
 80051ac:	08005b44 	.word	0x08005b44

080051b0 <__retarget_lock_acquire_recursive>:
 80051b0:	4770      	bx	lr

080051b2 <__retarget_lock_release_recursive>:
 80051b2:	4770      	bx	lr

080051b4 <_free_r>:
 80051b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051b6:	2900      	cmp	r1, #0
 80051b8:	d044      	beq.n	8005244 <_free_r+0x90>
 80051ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051be:	9001      	str	r0, [sp, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f1a1 0404 	sub.w	r4, r1, #4
 80051c6:	bfb8      	it	lt
 80051c8:	18e4      	addlt	r4, r4, r3
 80051ca:	f000 f8df 	bl	800538c <__malloc_lock>
 80051ce:	4a1e      	ldr	r2, [pc, #120]	; (8005248 <_free_r+0x94>)
 80051d0:	9801      	ldr	r0, [sp, #4]
 80051d2:	6813      	ldr	r3, [r2, #0]
 80051d4:	b933      	cbnz	r3, 80051e4 <_free_r+0x30>
 80051d6:	6063      	str	r3, [r4, #4]
 80051d8:	6014      	str	r4, [r2, #0]
 80051da:	b003      	add	sp, #12
 80051dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051e0:	f000 b8da 	b.w	8005398 <__malloc_unlock>
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	d908      	bls.n	80051fa <_free_r+0x46>
 80051e8:	6825      	ldr	r5, [r4, #0]
 80051ea:	1961      	adds	r1, r4, r5
 80051ec:	428b      	cmp	r3, r1
 80051ee:	bf01      	itttt	eq
 80051f0:	6819      	ldreq	r1, [r3, #0]
 80051f2:	685b      	ldreq	r3, [r3, #4]
 80051f4:	1949      	addeq	r1, r1, r5
 80051f6:	6021      	streq	r1, [r4, #0]
 80051f8:	e7ed      	b.n	80051d6 <_free_r+0x22>
 80051fa:	461a      	mov	r2, r3
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	b10b      	cbz	r3, 8005204 <_free_r+0x50>
 8005200:	42a3      	cmp	r3, r4
 8005202:	d9fa      	bls.n	80051fa <_free_r+0x46>
 8005204:	6811      	ldr	r1, [r2, #0]
 8005206:	1855      	adds	r5, r2, r1
 8005208:	42a5      	cmp	r5, r4
 800520a:	d10b      	bne.n	8005224 <_free_r+0x70>
 800520c:	6824      	ldr	r4, [r4, #0]
 800520e:	4421      	add	r1, r4
 8005210:	1854      	adds	r4, r2, r1
 8005212:	42a3      	cmp	r3, r4
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	d1e0      	bne.n	80051da <_free_r+0x26>
 8005218:	681c      	ldr	r4, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	6053      	str	r3, [r2, #4]
 800521e:	440c      	add	r4, r1
 8005220:	6014      	str	r4, [r2, #0]
 8005222:	e7da      	b.n	80051da <_free_r+0x26>
 8005224:	d902      	bls.n	800522c <_free_r+0x78>
 8005226:	230c      	movs	r3, #12
 8005228:	6003      	str	r3, [r0, #0]
 800522a:	e7d6      	b.n	80051da <_free_r+0x26>
 800522c:	6825      	ldr	r5, [r4, #0]
 800522e:	1961      	adds	r1, r4, r5
 8005230:	428b      	cmp	r3, r1
 8005232:	bf04      	itt	eq
 8005234:	6819      	ldreq	r1, [r3, #0]
 8005236:	685b      	ldreq	r3, [r3, #4]
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	bf04      	itt	eq
 800523c:	1949      	addeq	r1, r1, r5
 800523e:	6021      	streq	r1, [r4, #0]
 8005240:	6054      	str	r4, [r2, #4]
 8005242:	e7ca      	b.n	80051da <_free_r+0x26>
 8005244:	b003      	add	sp, #12
 8005246:	bd30      	pop	{r4, r5, pc}
 8005248:	20000a60 	.word	0x20000a60

0800524c <sbrk_aligned>:
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	4e0e      	ldr	r6, [pc, #56]	; (8005288 <sbrk_aligned+0x3c>)
 8005250:	460c      	mov	r4, r1
 8005252:	6831      	ldr	r1, [r6, #0]
 8005254:	4605      	mov	r5, r0
 8005256:	b911      	cbnz	r1, 800525e <sbrk_aligned+0x12>
 8005258:	f000 fba6 	bl	80059a8 <_sbrk_r>
 800525c:	6030      	str	r0, [r6, #0]
 800525e:	4621      	mov	r1, r4
 8005260:	4628      	mov	r0, r5
 8005262:	f000 fba1 	bl	80059a8 <_sbrk_r>
 8005266:	1c43      	adds	r3, r0, #1
 8005268:	d00a      	beq.n	8005280 <sbrk_aligned+0x34>
 800526a:	1cc4      	adds	r4, r0, #3
 800526c:	f024 0403 	bic.w	r4, r4, #3
 8005270:	42a0      	cmp	r0, r4
 8005272:	d007      	beq.n	8005284 <sbrk_aligned+0x38>
 8005274:	1a21      	subs	r1, r4, r0
 8005276:	4628      	mov	r0, r5
 8005278:	f000 fb96 	bl	80059a8 <_sbrk_r>
 800527c:	3001      	adds	r0, #1
 800527e:	d101      	bne.n	8005284 <sbrk_aligned+0x38>
 8005280:	f04f 34ff 	mov.w	r4, #4294967295
 8005284:	4620      	mov	r0, r4
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	20000a64 	.word	0x20000a64

0800528c <_malloc_r>:
 800528c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005290:	1ccd      	adds	r5, r1, #3
 8005292:	f025 0503 	bic.w	r5, r5, #3
 8005296:	3508      	adds	r5, #8
 8005298:	2d0c      	cmp	r5, #12
 800529a:	bf38      	it	cc
 800529c:	250c      	movcc	r5, #12
 800529e:	2d00      	cmp	r5, #0
 80052a0:	4607      	mov	r7, r0
 80052a2:	db01      	blt.n	80052a8 <_malloc_r+0x1c>
 80052a4:	42a9      	cmp	r1, r5
 80052a6:	d905      	bls.n	80052b4 <_malloc_r+0x28>
 80052a8:	230c      	movs	r3, #12
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	2600      	movs	r6, #0
 80052ae:	4630      	mov	r0, r6
 80052b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005388 <_malloc_r+0xfc>
 80052b8:	f000 f868 	bl	800538c <__malloc_lock>
 80052bc:	f8d8 3000 	ldr.w	r3, [r8]
 80052c0:	461c      	mov	r4, r3
 80052c2:	bb5c      	cbnz	r4, 800531c <_malloc_r+0x90>
 80052c4:	4629      	mov	r1, r5
 80052c6:	4638      	mov	r0, r7
 80052c8:	f7ff ffc0 	bl	800524c <sbrk_aligned>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	4604      	mov	r4, r0
 80052d0:	d155      	bne.n	800537e <_malloc_r+0xf2>
 80052d2:	f8d8 4000 	ldr.w	r4, [r8]
 80052d6:	4626      	mov	r6, r4
 80052d8:	2e00      	cmp	r6, #0
 80052da:	d145      	bne.n	8005368 <_malloc_r+0xdc>
 80052dc:	2c00      	cmp	r4, #0
 80052de:	d048      	beq.n	8005372 <_malloc_r+0xe6>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	4631      	mov	r1, r6
 80052e4:	4638      	mov	r0, r7
 80052e6:	eb04 0903 	add.w	r9, r4, r3
 80052ea:	f000 fb5d 	bl	80059a8 <_sbrk_r>
 80052ee:	4581      	cmp	r9, r0
 80052f0:	d13f      	bne.n	8005372 <_malloc_r+0xe6>
 80052f2:	6821      	ldr	r1, [r4, #0]
 80052f4:	1a6d      	subs	r5, r5, r1
 80052f6:	4629      	mov	r1, r5
 80052f8:	4638      	mov	r0, r7
 80052fa:	f7ff ffa7 	bl	800524c <sbrk_aligned>
 80052fe:	3001      	adds	r0, #1
 8005300:	d037      	beq.n	8005372 <_malloc_r+0xe6>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	442b      	add	r3, r5
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	f8d8 3000 	ldr.w	r3, [r8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d038      	beq.n	8005382 <_malloc_r+0xf6>
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	42a2      	cmp	r2, r4
 8005314:	d12b      	bne.n	800536e <_malloc_r+0xe2>
 8005316:	2200      	movs	r2, #0
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	e00f      	b.n	800533c <_malloc_r+0xb0>
 800531c:	6822      	ldr	r2, [r4, #0]
 800531e:	1b52      	subs	r2, r2, r5
 8005320:	d41f      	bmi.n	8005362 <_malloc_r+0xd6>
 8005322:	2a0b      	cmp	r2, #11
 8005324:	d917      	bls.n	8005356 <_malloc_r+0xca>
 8005326:	1961      	adds	r1, r4, r5
 8005328:	42a3      	cmp	r3, r4
 800532a:	6025      	str	r5, [r4, #0]
 800532c:	bf18      	it	ne
 800532e:	6059      	strne	r1, [r3, #4]
 8005330:	6863      	ldr	r3, [r4, #4]
 8005332:	bf08      	it	eq
 8005334:	f8c8 1000 	streq.w	r1, [r8]
 8005338:	5162      	str	r2, [r4, r5]
 800533a:	604b      	str	r3, [r1, #4]
 800533c:	4638      	mov	r0, r7
 800533e:	f104 060b 	add.w	r6, r4, #11
 8005342:	f000 f829 	bl	8005398 <__malloc_unlock>
 8005346:	f026 0607 	bic.w	r6, r6, #7
 800534a:	1d23      	adds	r3, r4, #4
 800534c:	1af2      	subs	r2, r6, r3
 800534e:	d0ae      	beq.n	80052ae <_malloc_r+0x22>
 8005350:	1b9b      	subs	r3, r3, r6
 8005352:	50a3      	str	r3, [r4, r2]
 8005354:	e7ab      	b.n	80052ae <_malloc_r+0x22>
 8005356:	42a3      	cmp	r3, r4
 8005358:	6862      	ldr	r2, [r4, #4]
 800535a:	d1dd      	bne.n	8005318 <_malloc_r+0x8c>
 800535c:	f8c8 2000 	str.w	r2, [r8]
 8005360:	e7ec      	b.n	800533c <_malloc_r+0xb0>
 8005362:	4623      	mov	r3, r4
 8005364:	6864      	ldr	r4, [r4, #4]
 8005366:	e7ac      	b.n	80052c2 <_malloc_r+0x36>
 8005368:	4634      	mov	r4, r6
 800536a:	6876      	ldr	r6, [r6, #4]
 800536c:	e7b4      	b.n	80052d8 <_malloc_r+0x4c>
 800536e:	4613      	mov	r3, r2
 8005370:	e7cc      	b.n	800530c <_malloc_r+0x80>
 8005372:	230c      	movs	r3, #12
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	4638      	mov	r0, r7
 8005378:	f000 f80e 	bl	8005398 <__malloc_unlock>
 800537c:	e797      	b.n	80052ae <_malloc_r+0x22>
 800537e:	6025      	str	r5, [r4, #0]
 8005380:	e7dc      	b.n	800533c <_malloc_r+0xb0>
 8005382:	605b      	str	r3, [r3, #4]
 8005384:	deff      	udf	#255	; 0xff
 8005386:	bf00      	nop
 8005388:	20000a60 	.word	0x20000a60

0800538c <__malloc_lock>:
 800538c:	4801      	ldr	r0, [pc, #4]	; (8005394 <__malloc_lock+0x8>)
 800538e:	f7ff bf0f 	b.w	80051b0 <__retarget_lock_acquire_recursive>
 8005392:	bf00      	nop
 8005394:	20000a5c 	.word	0x20000a5c

08005398 <__malloc_unlock>:
 8005398:	4801      	ldr	r0, [pc, #4]	; (80053a0 <__malloc_unlock+0x8>)
 800539a:	f7ff bf0a 	b.w	80051b2 <__retarget_lock_release_recursive>
 800539e:	bf00      	nop
 80053a0:	20000a5c 	.word	0x20000a5c

080053a4 <__ssputs_r>:
 80053a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a8:	688e      	ldr	r6, [r1, #8]
 80053aa:	461f      	mov	r7, r3
 80053ac:	42be      	cmp	r6, r7
 80053ae:	680b      	ldr	r3, [r1, #0]
 80053b0:	4682      	mov	sl, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	4690      	mov	r8, r2
 80053b6:	d82c      	bhi.n	8005412 <__ssputs_r+0x6e>
 80053b8:	898a      	ldrh	r2, [r1, #12]
 80053ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053be:	d026      	beq.n	800540e <__ssputs_r+0x6a>
 80053c0:	6965      	ldr	r5, [r4, #20]
 80053c2:	6909      	ldr	r1, [r1, #16]
 80053c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053c8:	eba3 0901 	sub.w	r9, r3, r1
 80053cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053d0:	1c7b      	adds	r3, r7, #1
 80053d2:	444b      	add	r3, r9
 80053d4:	106d      	asrs	r5, r5, #1
 80053d6:	429d      	cmp	r5, r3
 80053d8:	bf38      	it	cc
 80053da:	461d      	movcc	r5, r3
 80053dc:	0553      	lsls	r3, r2, #21
 80053de:	d527      	bpl.n	8005430 <__ssputs_r+0x8c>
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7ff ff53 	bl	800528c <_malloc_r>
 80053e6:	4606      	mov	r6, r0
 80053e8:	b360      	cbz	r0, 8005444 <__ssputs_r+0xa0>
 80053ea:	6921      	ldr	r1, [r4, #16]
 80053ec:	464a      	mov	r2, r9
 80053ee:	f000 faeb 	bl	80059c8 <memcpy>
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	6126      	str	r6, [r4, #16]
 8005400:	6165      	str	r5, [r4, #20]
 8005402:	444e      	add	r6, r9
 8005404:	eba5 0509 	sub.w	r5, r5, r9
 8005408:	6026      	str	r6, [r4, #0]
 800540a:	60a5      	str	r5, [r4, #8]
 800540c:	463e      	mov	r6, r7
 800540e:	42be      	cmp	r6, r7
 8005410:	d900      	bls.n	8005414 <__ssputs_r+0x70>
 8005412:	463e      	mov	r6, r7
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	4632      	mov	r2, r6
 8005418:	4641      	mov	r1, r8
 800541a:	f000 faab 	bl	8005974 <memmove>
 800541e:	68a3      	ldr	r3, [r4, #8]
 8005420:	1b9b      	subs	r3, r3, r6
 8005422:	60a3      	str	r3, [r4, #8]
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	4433      	add	r3, r6
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	2000      	movs	r0, #0
 800542c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005430:	462a      	mov	r2, r5
 8005432:	f000 fad7 	bl	80059e4 <_realloc_r>
 8005436:	4606      	mov	r6, r0
 8005438:	2800      	cmp	r0, #0
 800543a:	d1e0      	bne.n	80053fe <__ssputs_r+0x5a>
 800543c:	6921      	ldr	r1, [r4, #16]
 800543e:	4650      	mov	r0, sl
 8005440:	f7ff feb8 	bl	80051b4 <_free_r>
 8005444:	230c      	movs	r3, #12
 8005446:	f8ca 3000 	str.w	r3, [sl]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	f04f 30ff 	mov.w	r0, #4294967295
 8005456:	e7e9      	b.n	800542c <__ssputs_r+0x88>

08005458 <_svfiprintf_r>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	4698      	mov	r8, r3
 800545e:	898b      	ldrh	r3, [r1, #12]
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	b09d      	sub	sp, #116	; 0x74
 8005464:	4607      	mov	r7, r0
 8005466:	460d      	mov	r5, r1
 8005468:	4614      	mov	r4, r2
 800546a:	d50e      	bpl.n	800548a <_svfiprintf_r+0x32>
 800546c:	690b      	ldr	r3, [r1, #16]
 800546e:	b963      	cbnz	r3, 800548a <_svfiprintf_r+0x32>
 8005470:	2140      	movs	r1, #64	; 0x40
 8005472:	f7ff ff0b 	bl	800528c <_malloc_r>
 8005476:	6028      	str	r0, [r5, #0]
 8005478:	6128      	str	r0, [r5, #16]
 800547a:	b920      	cbnz	r0, 8005486 <_svfiprintf_r+0x2e>
 800547c:	230c      	movs	r3, #12
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	f04f 30ff 	mov.w	r0, #4294967295
 8005484:	e0d0      	b.n	8005628 <_svfiprintf_r+0x1d0>
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	616b      	str	r3, [r5, #20]
 800548a:	2300      	movs	r3, #0
 800548c:	9309      	str	r3, [sp, #36]	; 0x24
 800548e:	2320      	movs	r3, #32
 8005490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005494:	f8cd 800c 	str.w	r8, [sp, #12]
 8005498:	2330      	movs	r3, #48	; 0x30
 800549a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005640 <_svfiprintf_r+0x1e8>
 800549e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054a2:	f04f 0901 	mov.w	r9, #1
 80054a6:	4623      	mov	r3, r4
 80054a8:	469a      	mov	sl, r3
 80054aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ae:	b10a      	cbz	r2, 80054b4 <_svfiprintf_r+0x5c>
 80054b0:	2a25      	cmp	r2, #37	; 0x25
 80054b2:	d1f9      	bne.n	80054a8 <_svfiprintf_r+0x50>
 80054b4:	ebba 0b04 	subs.w	fp, sl, r4
 80054b8:	d00b      	beq.n	80054d2 <_svfiprintf_r+0x7a>
 80054ba:	465b      	mov	r3, fp
 80054bc:	4622      	mov	r2, r4
 80054be:	4629      	mov	r1, r5
 80054c0:	4638      	mov	r0, r7
 80054c2:	f7ff ff6f 	bl	80053a4 <__ssputs_r>
 80054c6:	3001      	adds	r0, #1
 80054c8:	f000 80a9 	beq.w	800561e <_svfiprintf_r+0x1c6>
 80054cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ce:	445a      	add	r2, fp
 80054d0:	9209      	str	r2, [sp, #36]	; 0x24
 80054d2:	f89a 3000 	ldrb.w	r3, [sl]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80a1 	beq.w	800561e <_svfiprintf_r+0x1c6>
 80054dc:	2300      	movs	r3, #0
 80054de:	f04f 32ff 	mov.w	r2, #4294967295
 80054e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054e6:	f10a 0a01 	add.w	sl, sl, #1
 80054ea:	9304      	str	r3, [sp, #16]
 80054ec:	9307      	str	r3, [sp, #28]
 80054ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054f2:	931a      	str	r3, [sp, #104]	; 0x68
 80054f4:	4654      	mov	r4, sl
 80054f6:	2205      	movs	r2, #5
 80054f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054fc:	4850      	ldr	r0, [pc, #320]	; (8005640 <_svfiprintf_r+0x1e8>)
 80054fe:	f7fa fe7f 	bl	8000200 <memchr>
 8005502:	9a04      	ldr	r2, [sp, #16]
 8005504:	b9d8      	cbnz	r0, 800553e <_svfiprintf_r+0xe6>
 8005506:	06d0      	lsls	r0, r2, #27
 8005508:	bf44      	itt	mi
 800550a:	2320      	movmi	r3, #32
 800550c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005510:	0711      	lsls	r1, r2, #28
 8005512:	bf44      	itt	mi
 8005514:	232b      	movmi	r3, #43	; 0x2b
 8005516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800551a:	f89a 3000 	ldrb.w	r3, [sl]
 800551e:	2b2a      	cmp	r3, #42	; 0x2a
 8005520:	d015      	beq.n	800554e <_svfiprintf_r+0xf6>
 8005522:	9a07      	ldr	r2, [sp, #28]
 8005524:	4654      	mov	r4, sl
 8005526:	2000      	movs	r0, #0
 8005528:	f04f 0c0a 	mov.w	ip, #10
 800552c:	4621      	mov	r1, r4
 800552e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005532:	3b30      	subs	r3, #48	; 0x30
 8005534:	2b09      	cmp	r3, #9
 8005536:	d94d      	bls.n	80055d4 <_svfiprintf_r+0x17c>
 8005538:	b1b0      	cbz	r0, 8005568 <_svfiprintf_r+0x110>
 800553a:	9207      	str	r2, [sp, #28]
 800553c:	e014      	b.n	8005568 <_svfiprintf_r+0x110>
 800553e:	eba0 0308 	sub.w	r3, r0, r8
 8005542:	fa09 f303 	lsl.w	r3, r9, r3
 8005546:	4313      	orrs	r3, r2
 8005548:	9304      	str	r3, [sp, #16]
 800554a:	46a2      	mov	sl, r4
 800554c:	e7d2      	b.n	80054f4 <_svfiprintf_r+0x9c>
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	1d19      	adds	r1, r3, #4
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	9103      	str	r1, [sp, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	bfbb      	ittet	lt
 800555a:	425b      	neglt	r3, r3
 800555c:	f042 0202 	orrlt.w	r2, r2, #2
 8005560:	9307      	strge	r3, [sp, #28]
 8005562:	9307      	strlt	r3, [sp, #28]
 8005564:	bfb8      	it	lt
 8005566:	9204      	strlt	r2, [sp, #16]
 8005568:	7823      	ldrb	r3, [r4, #0]
 800556a:	2b2e      	cmp	r3, #46	; 0x2e
 800556c:	d10c      	bne.n	8005588 <_svfiprintf_r+0x130>
 800556e:	7863      	ldrb	r3, [r4, #1]
 8005570:	2b2a      	cmp	r3, #42	; 0x2a
 8005572:	d134      	bne.n	80055de <_svfiprintf_r+0x186>
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	9203      	str	r2, [sp, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	bfb8      	it	lt
 8005580:	f04f 33ff 	movlt.w	r3, #4294967295
 8005584:	3402      	adds	r4, #2
 8005586:	9305      	str	r3, [sp, #20]
 8005588:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005650 <_svfiprintf_r+0x1f8>
 800558c:	7821      	ldrb	r1, [r4, #0]
 800558e:	2203      	movs	r2, #3
 8005590:	4650      	mov	r0, sl
 8005592:	f7fa fe35 	bl	8000200 <memchr>
 8005596:	b138      	cbz	r0, 80055a8 <_svfiprintf_r+0x150>
 8005598:	9b04      	ldr	r3, [sp, #16]
 800559a:	eba0 000a 	sub.w	r0, r0, sl
 800559e:	2240      	movs	r2, #64	; 0x40
 80055a0:	4082      	lsls	r2, r0
 80055a2:	4313      	orrs	r3, r2
 80055a4:	3401      	adds	r4, #1
 80055a6:	9304      	str	r3, [sp, #16]
 80055a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ac:	4825      	ldr	r0, [pc, #148]	; (8005644 <_svfiprintf_r+0x1ec>)
 80055ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055b2:	2206      	movs	r2, #6
 80055b4:	f7fa fe24 	bl	8000200 <memchr>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d038      	beq.n	800562e <_svfiprintf_r+0x1d6>
 80055bc:	4b22      	ldr	r3, [pc, #136]	; (8005648 <_svfiprintf_r+0x1f0>)
 80055be:	bb1b      	cbnz	r3, 8005608 <_svfiprintf_r+0x1b0>
 80055c0:	9b03      	ldr	r3, [sp, #12]
 80055c2:	3307      	adds	r3, #7
 80055c4:	f023 0307 	bic.w	r3, r3, #7
 80055c8:	3308      	adds	r3, #8
 80055ca:	9303      	str	r3, [sp, #12]
 80055cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ce:	4433      	add	r3, r6
 80055d0:	9309      	str	r3, [sp, #36]	; 0x24
 80055d2:	e768      	b.n	80054a6 <_svfiprintf_r+0x4e>
 80055d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d8:	460c      	mov	r4, r1
 80055da:	2001      	movs	r0, #1
 80055dc:	e7a6      	b.n	800552c <_svfiprintf_r+0xd4>
 80055de:	2300      	movs	r3, #0
 80055e0:	3401      	adds	r4, #1
 80055e2:	9305      	str	r3, [sp, #20]
 80055e4:	4619      	mov	r1, r3
 80055e6:	f04f 0c0a 	mov.w	ip, #10
 80055ea:	4620      	mov	r0, r4
 80055ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055f0:	3a30      	subs	r2, #48	; 0x30
 80055f2:	2a09      	cmp	r2, #9
 80055f4:	d903      	bls.n	80055fe <_svfiprintf_r+0x1a6>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0c6      	beq.n	8005588 <_svfiprintf_r+0x130>
 80055fa:	9105      	str	r1, [sp, #20]
 80055fc:	e7c4      	b.n	8005588 <_svfiprintf_r+0x130>
 80055fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005602:	4604      	mov	r4, r0
 8005604:	2301      	movs	r3, #1
 8005606:	e7f0      	b.n	80055ea <_svfiprintf_r+0x192>
 8005608:	ab03      	add	r3, sp, #12
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	462a      	mov	r2, r5
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <_svfiprintf_r+0x1f4>)
 8005610:	a904      	add	r1, sp, #16
 8005612:	4638      	mov	r0, r7
 8005614:	f3af 8000 	nop.w
 8005618:	1c42      	adds	r2, r0, #1
 800561a:	4606      	mov	r6, r0
 800561c:	d1d6      	bne.n	80055cc <_svfiprintf_r+0x174>
 800561e:	89ab      	ldrh	r3, [r5, #12]
 8005620:	065b      	lsls	r3, r3, #25
 8005622:	f53f af2d 	bmi.w	8005480 <_svfiprintf_r+0x28>
 8005626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005628:	b01d      	add	sp, #116	; 0x74
 800562a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562e:	ab03      	add	r3, sp, #12
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	462a      	mov	r2, r5
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <_svfiprintf_r+0x1f4>)
 8005636:	a904      	add	r1, sp, #16
 8005638:	4638      	mov	r0, r7
 800563a:	f000 f879 	bl	8005730 <_printf_i>
 800563e:	e7eb      	b.n	8005618 <_svfiprintf_r+0x1c0>
 8005640:	08005b04 	.word	0x08005b04
 8005644:	08005b0e 	.word	0x08005b0e
 8005648:	00000000 	.word	0x00000000
 800564c:	080053a5 	.word	0x080053a5
 8005650:	08005b0a 	.word	0x08005b0a

08005654 <_printf_common>:
 8005654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005658:	4616      	mov	r6, r2
 800565a:	4699      	mov	r9, r3
 800565c:	688a      	ldr	r2, [r1, #8]
 800565e:	690b      	ldr	r3, [r1, #16]
 8005660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005664:	4293      	cmp	r3, r2
 8005666:	bfb8      	it	lt
 8005668:	4613      	movlt	r3, r2
 800566a:	6033      	str	r3, [r6, #0]
 800566c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005670:	4607      	mov	r7, r0
 8005672:	460c      	mov	r4, r1
 8005674:	b10a      	cbz	r2, 800567a <_printf_common+0x26>
 8005676:	3301      	adds	r3, #1
 8005678:	6033      	str	r3, [r6, #0]
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	0699      	lsls	r1, r3, #26
 800567e:	bf42      	ittt	mi
 8005680:	6833      	ldrmi	r3, [r6, #0]
 8005682:	3302      	addmi	r3, #2
 8005684:	6033      	strmi	r3, [r6, #0]
 8005686:	6825      	ldr	r5, [r4, #0]
 8005688:	f015 0506 	ands.w	r5, r5, #6
 800568c:	d106      	bne.n	800569c <_printf_common+0x48>
 800568e:	f104 0a19 	add.w	sl, r4, #25
 8005692:	68e3      	ldr	r3, [r4, #12]
 8005694:	6832      	ldr	r2, [r6, #0]
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	42ab      	cmp	r3, r5
 800569a:	dc26      	bgt.n	80056ea <_printf_common+0x96>
 800569c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056a0:	1e13      	subs	r3, r2, #0
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	bf18      	it	ne
 80056a6:	2301      	movne	r3, #1
 80056a8:	0692      	lsls	r2, r2, #26
 80056aa:	d42b      	bmi.n	8005704 <_printf_common+0xb0>
 80056ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056b0:	4649      	mov	r1, r9
 80056b2:	4638      	mov	r0, r7
 80056b4:	47c0      	blx	r8
 80056b6:	3001      	adds	r0, #1
 80056b8:	d01e      	beq.n	80056f8 <_printf_common+0xa4>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	6922      	ldr	r2, [r4, #16]
 80056be:	f003 0306 	and.w	r3, r3, #6
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	bf02      	ittt	eq
 80056c6:	68e5      	ldreq	r5, [r4, #12]
 80056c8:	6833      	ldreq	r3, [r6, #0]
 80056ca:	1aed      	subeq	r5, r5, r3
 80056cc:	68a3      	ldr	r3, [r4, #8]
 80056ce:	bf0c      	ite	eq
 80056d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056d4:	2500      	movne	r5, #0
 80056d6:	4293      	cmp	r3, r2
 80056d8:	bfc4      	itt	gt
 80056da:	1a9b      	subgt	r3, r3, r2
 80056dc:	18ed      	addgt	r5, r5, r3
 80056de:	2600      	movs	r6, #0
 80056e0:	341a      	adds	r4, #26
 80056e2:	42b5      	cmp	r5, r6
 80056e4:	d11a      	bne.n	800571c <_printf_common+0xc8>
 80056e6:	2000      	movs	r0, #0
 80056e8:	e008      	b.n	80056fc <_printf_common+0xa8>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4652      	mov	r2, sl
 80056ee:	4649      	mov	r1, r9
 80056f0:	4638      	mov	r0, r7
 80056f2:	47c0      	blx	r8
 80056f4:	3001      	adds	r0, #1
 80056f6:	d103      	bne.n	8005700 <_printf_common+0xac>
 80056f8:	f04f 30ff 	mov.w	r0, #4294967295
 80056fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005700:	3501      	adds	r5, #1
 8005702:	e7c6      	b.n	8005692 <_printf_common+0x3e>
 8005704:	18e1      	adds	r1, r4, r3
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	2030      	movs	r0, #48	; 0x30
 800570a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800570e:	4422      	add	r2, r4
 8005710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005718:	3302      	adds	r3, #2
 800571a:	e7c7      	b.n	80056ac <_printf_common+0x58>
 800571c:	2301      	movs	r3, #1
 800571e:	4622      	mov	r2, r4
 8005720:	4649      	mov	r1, r9
 8005722:	4638      	mov	r0, r7
 8005724:	47c0      	blx	r8
 8005726:	3001      	adds	r0, #1
 8005728:	d0e6      	beq.n	80056f8 <_printf_common+0xa4>
 800572a:	3601      	adds	r6, #1
 800572c:	e7d9      	b.n	80056e2 <_printf_common+0x8e>
	...

08005730 <_printf_i>:
 8005730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005734:	7e0f      	ldrb	r7, [r1, #24]
 8005736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005738:	2f78      	cmp	r7, #120	; 0x78
 800573a:	4691      	mov	r9, r2
 800573c:	4680      	mov	r8, r0
 800573e:	460c      	mov	r4, r1
 8005740:	469a      	mov	sl, r3
 8005742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005746:	d807      	bhi.n	8005758 <_printf_i+0x28>
 8005748:	2f62      	cmp	r7, #98	; 0x62
 800574a:	d80a      	bhi.n	8005762 <_printf_i+0x32>
 800574c:	2f00      	cmp	r7, #0
 800574e:	f000 80d4 	beq.w	80058fa <_printf_i+0x1ca>
 8005752:	2f58      	cmp	r7, #88	; 0x58
 8005754:	f000 80c0 	beq.w	80058d8 <_printf_i+0x1a8>
 8005758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800575c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005760:	e03a      	b.n	80057d8 <_printf_i+0xa8>
 8005762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005766:	2b15      	cmp	r3, #21
 8005768:	d8f6      	bhi.n	8005758 <_printf_i+0x28>
 800576a:	a101      	add	r1, pc, #4	; (adr r1, 8005770 <_printf_i+0x40>)
 800576c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005770:	080057c9 	.word	0x080057c9
 8005774:	080057dd 	.word	0x080057dd
 8005778:	08005759 	.word	0x08005759
 800577c:	08005759 	.word	0x08005759
 8005780:	08005759 	.word	0x08005759
 8005784:	08005759 	.word	0x08005759
 8005788:	080057dd 	.word	0x080057dd
 800578c:	08005759 	.word	0x08005759
 8005790:	08005759 	.word	0x08005759
 8005794:	08005759 	.word	0x08005759
 8005798:	08005759 	.word	0x08005759
 800579c:	080058e1 	.word	0x080058e1
 80057a0:	08005809 	.word	0x08005809
 80057a4:	0800589b 	.word	0x0800589b
 80057a8:	08005759 	.word	0x08005759
 80057ac:	08005759 	.word	0x08005759
 80057b0:	08005903 	.word	0x08005903
 80057b4:	08005759 	.word	0x08005759
 80057b8:	08005809 	.word	0x08005809
 80057bc:	08005759 	.word	0x08005759
 80057c0:	08005759 	.word	0x08005759
 80057c4:	080058a3 	.word	0x080058a3
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	1d1a      	adds	r2, r3, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	602a      	str	r2, [r5, #0]
 80057d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057d8:	2301      	movs	r3, #1
 80057da:	e09f      	b.n	800591c <_printf_i+0x1ec>
 80057dc:	6820      	ldr	r0, [r4, #0]
 80057de:	682b      	ldr	r3, [r5, #0]
 80057e0:	0607      	lsls	r7, r0, #24
 80057e2:	f103 0104 	add.w	r1, r3, #4
 80057e6:	6029      	str	r1, [r5, #0]
 80057e8:	d501      	bpl.n	80057ee <_printf_i+0xbe>
 80057ea:	681e      	ldr	r6, [r3, #0]
 80057ec:	e003      	b.n	80057f6 <_printf_i+0xc6>
 80057ee:	0646      	lsls	r6, r0, #25
 80057f0:	d5fb      	bpl.n	80057ea <_printf_i+0xba>
 80057f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057f6:	2e00      	cmp	r6, #0
 80057f8:	da03      	bge.n	8005802 <_printf_i+0xd2>
 80057fa:	232d      	movs	r3, #45	; 0x2d
 80057fc:	4276      	negs	r6, r6
 80057fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005802:	485a      	ldr	r0, [pc, #360]	; (800596c <_printf_i+0x23c>)
 8005804:	230a      	movs	r3, #10
 8005806:	e012      	b.n	800582e <_printf_i+0xfe>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	6820      	ldr	r0, [r4, #0]
 800580c:	1d19      	adds	r1, r3, #4
 800580e:	6029      	str	r1, [r5, #0]
 8005810:	0605      	lsls	r5, r0, #24
 8005812:	d501      	bpl.n	8005818 <_printf_i+0xe8>
 8005814:	681e      	ldr	r6, [r3, #0]
 8005816:	e002      	b.n	800581e <_printf_i+0xee>
 8005818:	0641      	lsls	r1, r0, #25
 800581a:	d5fb      	bpl.n	8005814 <_printf_i+0xe4>
 800581c:	881e      	ldrh	r6, [r3, #0]
 800581e:	4853      	ldr	r0, [pc, #332]	; (800596c <_printf_i+0x23c>)
 8005820:	2f6f      	cmp	r7, #111	; 0x6f
 8005822:	bf0c      	ite	eq
 8005824:	2308      	moveq	r3, #8
 8005826:	230a      	movne	r3, #10
 8005828:	2100      	movs	r1, #0
 800582a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800582e:	6865      	ldr	r5, [r4, #4]
 8005830:	60a5      	str	r5, [r4, #8]
 8005832:	2d00      	cmp	r5, #0
 8005834:	bfa2      	ittt	ge
 8005836:	6821      	ldrge	r1, [r4, #0]
 8005838:	f021 0104 	bicge.w	r1, r1, #4
 800583c:	6021      	strge	r1, [r4, #0]
 800583e:	b90e      	cbnz	r6, 8005844 <_printf_i+0x114>
 8005840:	2d00      	cmp	r5, #0
 8005842:	d04b      	beq.n	80058dc <_printf_i+0x1ac>
 8005844:	4615      	mov	r5, r2
 8005846:	fbb6 f1f3 	udiv	r1, r6, r3
 800584a:	fb03 6711 	mls	r7, r3, r1, r6
 800584e:	5dc7      	ldrb	r7, [r0, r7]
 8005850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005854:	4637      	mov	r7, r6
 8005856:	42bb      	cmp	r3, r7
 8005858:	460e      	mov	r6, r1
 800585a:	d9f4      	bls.n	8005846 <_printf_i+0x116>
 800585c:	2b08      	cmp	r3, #8
 800585e:	d10b      	bne.n	8005878 <_printf_i+0x148>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	07de      	lsls	r6, r3, #31
 8005864:	d508      	bpl.n	8005878 <_printf_i+0x148>
 8005866:	6923      	ldr	r3, [r4, #16]
 8005868:	6861      	ldr	r1, [r4, #4]
 800586a:	4299      	cmp	r1, r3
 800586c:	bfde      	ittt	le
 800586e:	2330      	movle	r3, #48	; 0x30
 8005870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005874:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005878:	1b52      	subs	r2, r2, r5
 800587a:	6122      	str	r2, [r4, #16]
 800587c:	f8cd a000 	str.w	sl, [sp]
 8005880:	464b      	mov	r3, r9
 8005882:	aa03      	add	r2, sp, #12
 8005884:	4621      	mov	r1, r4
 8005886:	4640      	mov	r0, r8
 8005888:	f7ff fee4 	bl	8005654 <_printf_common>
 800588c:	3001      	adds	r0, #1
 800588e:	d14a      	bne.n	8005926 <_printf_i+0x1f6>
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	b004      	add	sp, #16
 8005896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	f043 0320 	orr.w	r3, r3, #32
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	4833      	ldr	r0, [pc, #204]	; (8005970 <_printf_i+0x240>)
 80058a4:	2778      	movs	r7, #120	; 0x78
 80058a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	6829      	ldr	r1, [r5, #0]
 80058ae:	061f      	lsls	r7, r3, #24
 80058b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80058b4:	d402      	bmi.n	80058bc <_printf_i+0x18c>
 80058b6:	065f      	lsls	r7, r3, #25
 80058b8:	bf48      	it	mi
 80058ba:	b2b6      	uxthmi	r6, r6
 80058bc:	07df      	lsls	r7, r3, #31
 80058be:	bf48      	it	mi
 80058c0:	f043 0320 	orrmi.w	r3, r3, #32
 80058c4:	6029      	str	r1, [r5, #0]
 80058c6:	bf48      	it	mi
 80058c8:	6023      	strmi	r3, [r4, #0]
 80058ca:	b91e      	cbnz	r6, 80058d4 <_printf_i+0x1a4>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	f023 0320 	bic.w	r3, r3, #32
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	2310      	movs	r3, #16
 80058d6:	e7a7      	b.n	8005828 <_printf_i+0xf8>
 80058d8:	4824      	ldr	r0, [pc, #144]	; (800596c <_printf_i+0x23c>)
 80058da:	e7e4      	b.n	80058a6 <_printf_i+0x176>
 80058dc:	4615      	mov	r5, r2
 80058de:	e7bd      	b.n	800585c <_printf_i+0x12c>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	6826      	ldr	r6, [r4, #0]
 80058e4:	6961      	ldr	r1, [r4, #20]
 80058e6:	1d18      	adds	r0, r3, #4
 80058e8:	6028      	str	r0, [r5, #0]
 80058ea:	0635      	lsls	r5, r6, #24
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	d501      	bpl.n	80058f4 <_printf_i+0x1c4>
 80058f0:	6019      	str	r1, [r3, #0]
 80058f2:	e002      	b.n	80058fa <_printf_i+0x1ca>
 80058f4:	0670      	lsls	r0, r6, #25
 80058f6:	d5fb      	bpl.n	80058f0 <_printf_i+0x1c0>
 80058f8:	8019      	strh	r1, [r3, #0]
 80058fa:	2300      	movs	r3, #0
 80058fc:	6123      	str	r3, [r4, #16]
 80058fe:	4615      	mov	r5, r2
 8005900:	e7bc      	b.n	800587c <_printf_i+0x14c>
 8005902:	682b      	ldr	r3, [r5, #0]
 8005904:	1d1a      	adds	r2, r3, #4
 8005906:	602a      	str	r2, [r5, #0]
 8005908:	681d      	ldr	r5, [r3, #0]
 800590a:	6862      	ldr	r2, [r4, #4]
 800590c:	2100      	movs	r1, #0
 800590e:	4628      	mov	r0, r5
 8005910:	f7fa fc76 	bl	8000200 <memchr>
 8005914:	b108      	cbz	r0, 800591a <_printf_i+0x1ea>
 8005916:	1b40      	subs	r0, r0, r5
 8005918:	6060      	str	r0, [r4, #4]
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	2300      	movs	r3, #0
 8005920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005924:	e7aa      	b.n	800587c <_printf_i+0x14c>
 8005926:	6923      	ldr	r3, [r4, #16]
 8005928:	462a      	mov	r2, r5
 800592a:	4649      	mov	r1, r9
 800592c:	4640      	mov	r0, r8
 800592e:	47d0      	blx	sl
 8005930:	3001      	adds	r0, #1
 8005932:	d0ad      	beq.n	8005890 <_printf_i+0x160>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	079b      	lsls	r3, r3, #30
 8005938:	d413      	bmi.n	8005962 <_printf_i+0x232>
 800593a:	68e0      	ldr	r0, [r4, #12]
 800593c:	9b03      	ldr	r3, [sp, #12]
 800593e:	4298      	cmp	r0, r3
 8005940:	bfb8      	it	lt
 8005942:	4618      	movlt	r0, r3
 8005944:	e7a6      	b.n	8005894 <_printf_i+0x164>
 8005946:	2301      	movs	r3, #1
 8005948:	4632      	mov	r2, r6
 800594a:	4649      	mov	r1, r9
 800594c:	4640      	mov	r0, r8
 800594e:	47d0      	blx	sl
 8005950:	3001      	adds	r0, #1
 8005952:	d09d      	beq.n	8005890 <_printf_i+0x160>
 8005954:	3501      	adds	r5, #1
 8005956:	68e3      	ldr	r3, [r4, #12]
 8005958:	9903      	ldr	r1, [sp, #12]
 800595a:	1a5b      	subs	r3, r3, r1
 800595c:	42ab      	cmp	r3, r5
 800595e:	dcf2      	bgt.n	8005946 <_printf_i+0x216>
 8005960:	e7eb      	b.n	800593a <_printf_i+0x20a>
 8005962:	2500      	movs	r5, #0
 8005964:	f104 0619 	add.w	r6, r4, #25
 8005968:	e7f5      	b.n	8005956 <_printf_i+0x226>
 800596a:	bf00      	nop
 800596c:	08005b15 	.word	0x08005b15
 8005970:	08005b26 	.word	0x08005b26

08005974 <memmove>:
 8005974:	4288      	cmp	r0, r1
 8005976:	b510      	push	{r4, lr}
 8005978:	eb01 0402 	add.w	r4, r1, r2
 800597c:	d902      	bls.n	8005984 <memmove+0x10>
 800597e:	4284      	cmp	r4, r0
 8005980:	4623      	mov	r3, r4
 8005982:	d807      	bhi.n	8005994 <memmove+0x20>
 8005984:	1e43      	subs	r3, r0, #1
 8005986:	42a1      	cmp	r1, r4
 8005988:	d008      	beq.n	800599c <memmove+0x28>
 800598a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800598e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005992:	e7f8      	b.n	8005986 <memmove+0x12>
 8005994:	4402      	add	r2, r0
 8005996:	4601      	mov	r1, r0
 8005998:	428a      	cmp	r2, r1
 800599a:	d100      	bne.n	800599e <memmove+0x2a>
 800599c:	bd10      	pop	{r4, pc}
 800599e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059a6:	e7f7      	b.n	8005998 <memmove+0x24>

080059a8 <_sbrk_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	4d06      	ldr	r5, [pc, #24]	; (80059c4 <_sbrk_r+0x1c>)
 80059ac:	2300      	movs	r3, #0
 80059ae:	4604      	mov	r4, r0
 80059b0:	4608      	mov	r0, r1
 80059b2:	602b      	str	r3, [r5, #0]
 80059b4:	f7fb fc64 	bl	8001280 <_sbrk>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_sbrk_r+0x1a>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_sbrk_r+0x1a>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	20000a58 	.word	0x20000a58

080059c8 <memcpy>:
 80059c8:	440a      	add	r2, r1
 80059ca:	4291      	cmp	r1, r2
 80059cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80059d0:	d100      	bne.n	80059d4 <memcpy+0xc>
 80059d2:	4770      	bx	lr
 80059d4:	b510      	push	{r4, lr}
 80059d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059de:	4291      	cmp	r1, r2
 80059e0:	d1f9      	bne.n	80059d6 <memcpy+0xe>
 80059e2:	bd10      	pop	{r4, pc}

080059e4 <_realloc_r>:
 80059e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e8:	4680      	mov	r8, r0
 80059ea:	4614      	mov	r4, r2
 80059ec:	460e      	mov	r6, r1
 80059ee:	b921      	cbnz	r1, 80059fa <_realloc_r+0x16>
 80059f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	4611      	mov	r1, r2
 80059f6:	f7ff bc49 	b.w	800528c <_malloc_r>
 80059fa:	b92a      	cbnz	r2, 8005a08 <_realloc_r+0x24>
 80059fc:	f7ff fbda 	bl	80051b4 <_free_r>
 8005a00:	4625      	mov	r5, r4
 8005a02:	4628      	mov	r0, r5
 8005a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a08:	f000 f81b 	bl	8005a42 <_malloc_usable_size_r>
 8005a0c:	4284      	cmp	r4, r0
 8005a0e:	4607      	mov	r7, r0
 8005a10:	d802      	bhi.n	8005a18 <_realloc_r+0x34>
 8005a12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a16:	d812      	bhi.n	8005a3e <_realloc_r+0x5a>
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	f7ff fc36 	bl	800528c <_malloc_r>
 8005a20:	4605      	mov	r5, r0
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d0ed      	beq.n	8005a02 <_realloc_r+0x1e>
 8005a26:	42bc      	cmp	r4, r7
 8005a28:	4622      	mov	r2, r4
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	bf28      	it	cs
 8005a2e:	463a      	movcs	r2, r7
 8005a30:	f7ff ffca 	bl	80059c8 <memcpy>
 8005a34:	4631      	mov	r1, r6
 8005a36:	4640      	mov	r0, r8
 8005a38:	f7ff fbbc 	bl	80051b4 <_free_r>
 8005a3c:	e7e1      	b.n	8005a02 <_realloc_r+0x1e>
 8005a3e:	4635      	mov	r5, r6
 8005a40:	e7df      	b.n	8005a02 <_realloc_r+0x1e>

08005a42 <_malloc_usable_size_r>:
 8005a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a46:	1f18      	subs	r0, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	bfbc      	itt	lt
 8005a4c:	580b      	ldrlt	r3, [r1, r0]
 8005a4e:	18c0      	addlt	r0, r0, r3
 8005a50:	4770      	bx	lr
	...

08005a54 <_init>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	bf00      	nop
 8005a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5a:	bc08      	pop	{r3}
 8005a5c:	469e      	mov	lr, r3
 8005a5e:	4770      	bx	lr

08005a60 <_fini>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	bf00      	nop
 8005a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a66:	bc08      	pop	{r3}
 8005a68:	469e      	mov	lr, r3
 8005a6a:	4770      	bx	lr
