
RTC_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d20  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb0  08006fb0  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fb8  08006fb8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000a98  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000afc  20000afc  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b428  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000401e  00000000  00000000  0003b4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001818  00000000  00000000  0003f520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012c5  00000000  00000000  00040d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029da7  00000000  00000000  00041ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021339  00000000  00000000  0006bda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f94d5  00000000  00000000  0008d0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b74  00000000  00000000  001865b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0018d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006eb8 	.word	0x08006eb8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08006eb8 	.word	0x08006eb8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b970 	b.w	8000920 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9e08      	ldr	r6, [sp, #32]
 800065e:	460d      	mov	r5, r1
 8000660:	4604      	mov	r4, r0
 8000662:	460f      	mov	r7, r1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d14a      	bne.n	80006fe <__udivmoddi4+0xa6>
 8000668:	428a      	cmp	r2, r1
 800066a:	4694      	mov	ip, r2
 800066c:	d965      	bls.n	800073a <__udivmoddi4+0xe2>
 800066e:	fab2 f382 	clz	r3, r2
 8000672:	b143      	cbz	r3, 8000686 <__udivmoddi4+0x2e>
 8000674:	fa02 fc03 	lsl.w	ip, r2, r3
 8000678:	f1c3 0220 	rsb	r2, r3, #32
 800067c:	409f      	lsls	r7, r3
 800067e:	fa20 f202 	lsr.w	r2, r0, r2
 8000682:	4317      	orrs	r7, r2
 8000684:	409c      	lsls	r4, r3
 8000686:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800068a:	fa1f f58c 	uxth.w	r5, ip
 800068e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000692:	0c22      	lsrs	r2, r4, #16
 8000694:	fb0e 7711 	mls	r7, lr, r1, r7
 8000698:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800069c:	fb01 f005 	mul.w	r0, r1, r5
 80006a0:	4290      	cmp	r0, r2
 80006a2:	d90a      	bls.n	80006ba <__udivmoddi4+0x62>
 80006a4:	eb1c 0202 	adds.w	r2, ip, r2
 80006a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006ac:	f080 811c 	bcs.w	80008e8 <__udivmoddi4+0x290>
 80006b0:	4290      	cmp	r0, r2
 80006b2:	f240 8119 	bls.w	80008e8 <__udivmoddi4+0x290>
 80006b6:	3902      	subs	r1, #2
 80006b8:	4462      	add	r2, ip
 80006ba:	1a12      	subs	r2, r2, r0
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	fbb2 f0fe 	udiv	r0, r2, lr
 80006c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006ca:	fb00 f505 	mul.w	r5, r0, r5
 80006ce:	42a5      	cmp	r5, r4
 80006d0:	d90a      	bls.n	80006e8 <__udivmoddi4+0x90>
 80006d2:	eb1c 0404 	adds.w	r4, ip, r4
 80006d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006da:	f080 8107 	bcs.w	80008ec <__udivmoddi4+0x294>
 80006de:	42a5      	cmp	r5, r4
 80006e0:	f240 8104 	bls.w	80008ec <__udivmoddi4+0x294>
 80006e4:	4464      	add	r4, ip
 80006e6:	3802      	subs	r0, #2
 80006e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ec:	1b64      	subs	r4, r4, r5
 80006ee:	2100      	movs	r1, #0
 80006f0:	b11e      	cbz	r6, 80006fa <__udivmoddi4+0xa2>
 80006f2:	40dc      	lsrs	r4, r3
 80006f4:	2300      	movs	r3, #0
 80006f6:	e9c6 4300 	strd	r4, r3, [r6]
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d908      	bls.n	8000714 <__udivmoddi4+0xbc>
 8000702:	2e00      	cmp	r6, #0
 8000704:	f000 80ed 	beq.w	80008e2 <__udivmoddi4+0x28a>
 8000708:	2100      	movs	r1, #0
 800070a:	e9c6 0500 	strd	r0, r5, [r6]
 800070e:	4608      	mov	r0, r1
 8000710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000714:	fab3 f183 	clz	r1, r3
 8000718:	2900      	cmp	r1, #0
 800071a:	d149      	bne.n	80007b0 <__udivmoddi4+0x158>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d302      	bcc.n	8000726 <__udivmoddi4+0xce>
 8000720:	4282      	cmp	r2, r0
 8000722:	f200 80f8 	bhi.w	8000916 <__udivmoddi4+0x2be>
 8000726:	1a84      	subs	r4, r0, r2
 8000728:	eb65 0203 	sbc.w	r2, r5, r3
 800072c:	2001      	movs	r0, #1
 800072e:	4617      	mov	r7, r2
 8000730:	2e00      	cmp	r6, #0
 8000732:	d0e2      	beq.n	80006fa <__udivmoddi4+0xa2>
 8000734:	e9c6 4700 	strd	r4, r7, [r6]
 8000738:	e7df      	b.n	80006fa <__udivmoddi4+0xa2>
 800073a:	b902      	cbnz	r2, 800073e <__udivmoddi4+0xe6>
 800073c:	deff      	udf	#255	; 0xff
 800073e:	fab2 f382 	clz	r3, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8090 	bne.w	8000868 <__udivmoddi4+0x210>
 8000748:	1a8a      	subs	r2, r1, r2
 800074a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800074e:	fa1f fe8c 	uxth.w	lr, ip
 8000752:	2101      	movs	r1, #1
 8000754:	fbb2 f5f7 	udiv	r5, r2, r7
 8000758:	fb07 2015 	mls	r0, r7, r5, r2
 800075c:	0c22      	lsrs	r2, r4, #16
 800075e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000762:	fb0e f005 	mul.w	r0, lr, r5
 8000766:	4290      	cmp	r0, r2
 8000768:	d908      	bls.n	800077c <__udivmoddi4+0x124>
 800076a:	eb1c 0202 	adds.w	r2, ip, r2
 800076e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x122>
 8000774:	4290      	cmp	r0, r2
 8000776:	f200 80cb 	bhi.w	8000910 <__udivmoddi4+0x2b8>
 800077a:	4645      	mov	r5, r8
 800077c:	1a12      	subs	r2, r2, r0
 800077e:	b2a4      	uxth	r4, r4
 8000780:	fbb2 f0f7 	udiv	r0, r2, r7
 8000784:	fb07 2210 	mls	r2, r7, r0, r2
 8000788:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800078c:	fb0e fe00 	mul.w	lr, lr, r0
 8000790:	45a6      	cmp	lr, r4
 8000792:	d908      	bls.n	80007a6 <__udivmoddi4+0x14e>
 8000794:	eb1c 0404 	adds.w	r4, ip, r4
 8000798:	f100 32ff 	add.w	r2, r0, #4294967295
 800079c:	d202      	bcs.n	80007a4 <__udivmoddi4+0x14c>
 800079e:	45a6      	cmp	lr, r4
 80007a0:	f200 80bb 	bhi.w	800091a <__udivmoddi4+0x2c2>
 80007a4:	4610      	mov	r0, r2
 80007a6:	eba4 040e 	sub.w	r4, r4, lr
 80007aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007ae:	e79f      	b.n	80006f0 <__udivmoddi4+0x98>
 80007b0:	f1c1 0720 	rsb	r7, r1, #32
 80007b4:	408b      	lsls	r3, r1
 80007b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80007be:	fa05 f401 	lsl.w	r4, r5, r1
 80007c2:	fa20 f307 	lsr.w	r3, r0, r7
 80007c6:	40fd      	lsrs	r5, r7
 80007c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007cc:	4323      	orrs	r3, r4
 80007ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80007d2:	fa1f fe8c 	uxth.w	lr, ip
 80007d6:	fb09 5518 	mls	r5, r9, r8, r5
 80007da:	0c1c      	lsrs	r4, r3, #16
 80007dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007e0:	fb08 f50e 	mul.w	r5, r8, lr
 80007e4:	42a5      	cmp	r5, r4
 80007e6:	fa02 f201 	lsl.w	r2, r2, r1
 80007ea:	fa00 f001 	lsl.w	r0, r0, r1
 80007ee:	d90b      	bls.n	8000808 <__udivmoddi4+0x1b0>
 80007f0:	eb1c 0404 	adds.w	r4, ip, r4
 80007f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007f8:	f080 8088 	bcs.w	800090c <__udivmoddi4+0x2b4>
 80007fc:	42a5      	cmp	r5, r4
 80007fe:	f240 8085 	bls.w	800090c <__udivmoddi4+0x2b4>
 8000802:	f1a8 0802 	sub.w	r8, r8, #2
 8000806:	4464      	add	r4, ip
 8000808:	1b64      	subs	r4, r4, r5
 800080a:	b29d      	uxth	r5, r3
 800080c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000810:	fb09 4413 	mls	r4, r9, r3, r4
 8000814:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000818:	fb03 fe0e 	mul.w	lr, r3, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d908      	bls.n	8000832 <__udivmoddi4+0x1da>
 8000820:	eb1c 0404 	adds.w	r4, ip, r4
 8000824:	f103 35ff 	add.w	r5, r3, #4294967295
 8000828:	d26c      	bcs.n	8000904 <__udivmoddi4+0x2ac>
 800082a:	45a6      	cmp	lr, r4
 800082c:	d96a      	bls.n	8000904 <__udivmoddi4+0x2ac>
 800082e:	3b02      	subs	r3, #2
 8000830:	4464      	add	r4, ip
 8000832:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000836:	fba3 9502 	umull	r9, r5, r3, r2
 800083a:	eba4 040e 	sub.w	r4, r4, lr
 800083e:	42ac      	cmp	r4, r5
 8000840:	46c8      	mov	r8, r9
 8000842:	46ae      	mov	lr, r5
 8000844:	d356      	bcc.n	80008f4 <__udivmoddi4+0x29c>
 8000846:	d053      	beq.n	80008f0 <__udivmoddi4+0x298>
 8000848:	b156      	cbz	r6, 8000860 <__udivmoddi4+0x208>
 800084a:	ebb0 0208 	subs.w	r2, r0, r8
 800084e:	eb64 040e 	sbc.w	r4, r4, lr
 8000852:	fa04 f707 	lsl.w	r7, r4, r7
 8000856:	40ca      	lsrs	r2, r1
 8000858:	40cc      	lsrs	r4, r1
 800085a:	4317      	orrs	r7, r2
 800085c:	e9c6 7400 	strd	r7, r4, [r6]
 8000860:	4618      	mov	r0, r3
 8000862:	2100      	movs	r1, #0
 8000864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000868:	f1c3 0120 	rsb	r1, r3, #32
 800086c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000870:	fa20 f201 	lsr.w	r2, r0, r1
 8000874:	fa25 f101 	lsr.w	r1, r5, r1
 8000878:	409d      	lsls	r5, r3
 800087a:	432a      	orrs	r2, r5
 800087c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000880:	fa1f fe8c 	uxth.w	lr, ip
 8000884:	fbb1 f0f7 	udiv	r0, r1, r7
 8000888:	fb07 1510 	mls	r5, r7, r0, r1
 800088c:	0c11      	lsrs	r1, r2, #16
 800088e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000892:	fb00 f50e 	mul.w	r5, r0, lr
 8000896:	428d      	cmp	r5, r1
 8000898:	fa04 f403 	lsl.w	r4, r4, r3
 800089c:	d908      	bls.n	80008b0 <__udivmoddi4+0x258>
 800089e:	eb1c 0101 	adds.w	r1, ip, r1
 80008a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008a6:	d22f      	bcs.n	8000908 <__udivmoddi4+0x2b0>
 80008a8:	428d      	cmp	r5, r1
 80008aa:	d92d      	bls.n	8000908 <__udivmoddi4+0x2b0>
 80008ac:	3802      	subs	r0, #2
 80008ae:	4461      	add	r1, ip
 80008b0:	1b49      	subs	r1, r1, r5
 80008b2:	b292      	uxth	r2, r2
 80008b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008b8:	fb07 1115 	mls	r1, r7, r5, r1
 80008bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c0:	fb05 f10e 	mul.w	r1, r5, lr
 80008c4:	4291      	cmp	r1, r2
 80008c6:	d908      	bls.n	80008da <__udivmoddi4+0x282>
 80008c8:	eb1c 0202 	adds.w	r2, ip, r2
 80008cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80008d0:	d216      	bcs.n	8000900 <__udivmoddi4+0x2a8>
 80008d2:	4291      	cmp	r1, r2
 80008d4:	d914      	bls.n	8000900 <__udivmoddi4+0x2a8>
 80008d6:	3d02      	subs	r5, #2
 80008d8:	4462      	add	r2, ip
 80008da:	1a52      	subs	r2, r2, r1
 80008dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008e0:	e738      	b.n	8000754 <__udivmoddi4+0xfc>
 80008e2:	4631      	mov	r1, r6
 80008e4:	4630      	mov	r0, r6
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xa2>
 80008e8:	4639      	mov	r1, r7
 80008ea:	e6e6      	b.n	80006ba <__udivmoddi4+0x62>
 80008ec:	4610      	mov	r0, r2
 80008ee:	e6fb      	b.n	80006e8 <__udivmoddi4+0x90>
 80008f0:	4548      	cmp	r0, r9
 80008f2:	d2a9      	bcs.n	8000848 <__udivmoddi4+0x1f0>
 80008f4:	ebb9 0802 	subs.w	r8, r9, r2
 80008f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008fc:	3b01      	subs	r3, #1
 80008fe:	e7a3      	b.n	8000848 <__udivmoddi4+0x1f0>
 8000900:	4645      	mov	r5, r8
 8000902:	e7ea      	b.n	80008da <__udivmoddi4+0x282>
 8000904:	462b      	mov	r3, r5
 8000906:	e794      	b.n	8000832 <__udivmoddi4+0x1da>
 8000908:	4640      	mov	r0, r8
 800090a:	e7d1      	b.n	80008b0 <__udivmoddi4+0x258>
 800090c:	46d0      	mov	r8, sl
 800090e:	e77b      	b.n	8000808 <__udivmoddi4+0x1b0>
 8000910:	3d02      	subs	r5, #2
 8000912:	4462      	add	r2, ip
 8000914:	e732      	b.n	800077c <__udivmoddi4+0x124>
 8000916:	4608      	mov	r0, r1
 8000918:	e70a      	b.n	8000730 <__udivmoddi4+0xd8>
 800091a:	4464      	add	r4, ip
 800091c:	3802      	subs	r0, #2
 800091e:	e742      	b.n	80007a6 <__udivmoddi4+0x14e>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_ADC1_Init+0x98>)
 8000938:	4a21      	ldr	r2, [pc, #132]	; (80009c0 <MX_ADC1_Init+0x9c>)
 800093a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_ADC1_Init+0x98>)
 800093e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000942:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_ADC1_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_ADC1_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_ADC1_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_ADC1_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_ADC1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_ADC1_Init+0x98>)
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <MX_ADC1_Init+0xa0>)
 8000968:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_ADC1_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_ADC1_Init+0x98>)
 8000972:	2201      	movs	r2, #1
 8000974:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_ADC1_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_ADC1_Init+0x98>)
 8000980:	2201      	movs	r2, #1
 8000982:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_ADC1_Init+0x98>)
 8000986:	f001 fb7f 	bl	8002088 <HAL_ADC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000990:	f001 f80c 	bl	80019ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_ADC1_Init+0xa4>)
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_ADC1_Init+0x98>)
 80009a6:	f001 fbb3 	bl	8002110 <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009b0:	f000 fffc 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000080 	.word	0x20000080
 80009c0:	40012000 	.word	0x40012000
 80009c4:	0f000001 	.word	0x0f000001
 80009c8:	10000012 	.word	0x10000012

080009cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <HAL_ADC_MspInit+0x3c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d10d      	bne.n	80009fa <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_ADC_MspInit+0x40>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <HAL_ADC_MspInit+0x40>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <HAL_ADC_MspInit+0x40>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40012000 	.word	0x40012000
 8000a0c:	40023800 	.word	0x40023800

08000a10 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_DAC_Init+0x4c>)
 8000a20:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <MX_DAC_Init+0x50>)
 8000a22:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_DAC_Init+0x4c>)
 8000a26:	f001 feb2 	bl	800278e <HAL_DAC_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a30:	f000 ffbc 	bl	80019ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_DAC_Init+0x4c>)
 8000a44:	f001 fec5 	bl	80027d2 <HAL_DAC_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a4e:	f000 ffad 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000c8 	.word	0x200000c8
 8000a60:	40007400 	.word	0x40007400

08000a64 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <HAL_DAC_MspInit+0x7c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d127      	bne.n	8000ad6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_DAC_MspInit+0x80>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <HAL_DAC_MspInit+0x80>)
 8000a90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <HAL_DAC_MspInit+0x80>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_DAC_MspInit+0x80>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_DAC_MspInit+0x80>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_DAC_MspInit+0x80>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000abe:	2310      	movs	r3, #16
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_DAC_MspInit+0x84>)
 8000ad2:	f002 f9f5 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40007400 	.word	0x40007400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000

08000aec <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_ETH_Init+0x84>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	; (8000b74 <MX_ETH_Init+0x88>)
 8000af4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <MX_ETH_Init+0x8c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <MX_ETH_Init+0x8c>)
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_ETH_Init+0x8c>)
 8000b04:	22e1      	movs	r2, #225	; 0xe1
 8000b06:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_ETH_Init+0x8c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_ETH_Init+0x8c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_ETH_Init+0x8c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_ETH_Init+0x84>)
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <MX_ETH_Init+0x8c>)
 8000b1e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_ETH_Init+0x84>)
 8000b22:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b26:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_ETH_Init+0x84>)
 8000b2a:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <MX_ETH_Init+0x90>)
 8000b2c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_ETH_Init+0x84>)
 8000b30:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <MX_ETH_Init+0x94>)
 8000b32:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_ETH_Init+0x84>)
 8000b36:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b3a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <MX_ETH_Init+0x84>)
 8000b3e:	f001 fe97 	bl	8002870 <HAL_ETH_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b48:	f000 ff30 	bl	80019ac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b4c:	2238      	movs	r2, #56	; 0x38
 8000b4e:	2100      	movs	r1, #0
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_ETH_Init+0x98>)
 8000b52:	f005 fd2d 	bl	80065b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_ETH_Init+0x98>)
 8000b58:	2221      	movs	r2, #33	; 0x21
 8000b5a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_ETH_Init+0x98>)
 8000b5e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b62:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_ETH_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000254 	.word	0x20000254
 8000b74:	40028000 	.word	0x40028000
 8000b78:	20000304 	.word	0x20000304
 8000b7c:	2000017c 	.word	0x2000017c
 8000b80:	200000dc 	.word	0x200000dc
 8000b84:	2000021c 	.word	0x2000021c

08000b88 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	; 0x38
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a55      	ldr	r2, [pc, #340]	; (8000cfc <HAL_ETH_MspInit+0x174>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	f040 80a4 	bne.w	8000cf4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
 8000bb0:	4b53      	ldr	r3, [pc, #332]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a52      	ldr	r2, [pc, #328]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000bb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b50      	ldr	r3, [pc, #320]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc4:	623b      	str	r3, [r7, #32]
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	4b4c      	ldr	r3, [pc, #304]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	4a4b      	ldr	r2, [pc, #300]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000bd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd8:	4b49      	ldr	r3, [pc, #292]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	4b45      	ldr	r3, [pc, #276]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a44      	ldr	r2, [pc, #272]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b42      	ldr	r3, [pc, #264]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	4b3e      	ldr	r3, [pc, #248]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a3d      	ldr	r2, [pc, #244]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	4b3b      	ldr	r3, [pc, #236]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a36      	ldr	r2, [pc, #216]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	4a2f      	ldr	r2, [pc, #188]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	6313      	str	r3, [r2, #48]	; 0x30
 8000c48:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	4a28      	ldr	r2, [pc, #160]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c62:	6313      	str	r3, [r2, #48]	; 0x30
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <HAL_ETH_MspInit+0x178>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c70:	2332      	movs	r3, #50	; 0x32
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c80:	230b      	movs	r3, #11
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	481e      	ldr	r0, [pc, #120]	; (8000d04 <HAL_ETH_MspInit+0x17c>)
 8000c8c:	f002 f918 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c90:	2386      	movs	r3, #134	; 0x86
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca0:	230b      	movs	r3, #11
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4817      	ldr	r0, [pc, #92]	; (8000d08 <HAL_ETH_MspInit+0x180>)
 8000cac:	f002 f908 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc2:	230b      	movs	r3, #11
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <HAL_ETH_MspInit+0x184>)
 8000cce:	f002 f8f7 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cd2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce4:	230b      	movs	r3, #11
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <HAL_ETH_MspInit+0x188>)
 8000cf0:	f002 f8e6 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3738      	adds	r7, #56	; 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40028000 	.word	0x40028000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40021800 	.word	0x40021800

08000d14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	4b62      	ldr	r3, [pc, #392]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a61      	ldr	r2, [pc, #388]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b5f      	ldr	r3, [pc, #380]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	4b5b      	ldr	r3, [pc, #364]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a5a      	ldr	r2, [pc, #360]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b58      	ldr	r3, [pc, #352]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a53      	ldr	r2, [pc, #332]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a4c      	ldr	r2, [pc, #304]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b46      	ldr	r3, [pc, #280]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a45      	ldr	r2, [pc, #276]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b43      	ldr	r3, [pc, #268]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a3e      	ldr	r2, [pc, #248]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b3c      	ldr	r3, [pc, #240]	; (8000eb8 <MX_GPIO_Init+0x1a4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	4839      	ldr	r0, [pc, #228]	; (8000ebc <MX_GPIO_Init+0x1a8>)
 8000dd8:	f002 fa36 	bl	8003248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f244 0181 	movw	r1, #16513	; 0x4081
 8000de2:	4837      	ldr	r0, [pc, #220]	; (8000ec0 <MX_GPIO_Init+0x1ac>)
 8000de4:	f002 fa30 	bl	8003248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	4835      	ldr	r0, [pc, #212]	; (8000ec4 <MX_GPIO_Init+0x1b0>)
 8000dee:	f002 fa2b 	bl	8003248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	482f      	ldr	r0, [pc, #188]	; (8000ec8 <MX_GPIO_Init+0x1b4>)
 8000e0a:	f002 f859 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8000e0e:	2308      	movs	r3, #8
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4825      	ldr	r0, [pc, #148]	; (8000ebc <MX_GPIO_Init+0x1a8>)
 8000e26:	f002 f84b 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e2a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	481f      	ldr	r0, [pc, #124]	; (8000ec0 <MX_GPIO_Init+0x1ac>)
 8000e44:	f002 f83c 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4819      	ldr	r0, [pc, #100]	; (8000ec4 <MX_GPIO_Init+0x1b0>)
 8000e5e:	f002 f82f 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e62:	2340      	movs	r3, #64	; 0x40
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <MX_GPIO_Init+0x1b0>)
 8000e7a:	f002 f821 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_GPIO_Init+0x1b0>)
 8000e92:	f002 f815 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BTN_down_Pin|BTN_up_Pin|BTN_select_Pin;
 8000e96:	23e0      	movs	r3, #224	; 0xe0
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4808      	ldr	r0, [pc, #32]	; (8000ecc <MX_GPIO_Init+0x1b8>)
 8000eac:	f002 f808 	bl	8002ec0 <HAL_GPIO_Init>

}
 8000eb0:	bf00      	nop
 8000eb2:	3730      	adds	r7, #48	; 0x30
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40021800 	.word	0x40021800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020c00 	.word	0x40020c00

08000ed0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <MX_I2C1_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000edc:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <MX_I2C1_Init+0x7c>)
 8000ede:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f0e:	f002 f9cd 	bl	80032ac <HAL_I2C_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f18:	f000 fd48 	bl	80019ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f20:	f002 ff3d 	bl	8003d9e <HAL_I2CEx_ConfigAnalogFilter>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000f2a:	f000 fd3f 	bl	80019ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f32:	f002 ff70 	bl	8003e16 <HAL_I2CEx_ConfigDigitalFilter>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000f3c:	f000 fd36 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000030c 	.word	0x2000030c
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	000186a0 	.word	0x000186a0

08000f50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <HAL_I2C_MspInit+0x84>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12c      	bne.n	8000fcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f94:	2312      	movs	r3, #18
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480c      	ldr	r0, [pc, #48]	; (8000fdc <HAL_I2C_MspInit+0x8c>)
 8000fac:	f001 ff88 	bl	8002ec0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <LCD_SendInternal>:
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	460b      	mov	r3, r1
 8000fec:	71bb      	strb	r3, [r7, #6]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4822      	ldr	r0, [pc, #136]	; (8001088 <LCD_SendInternal+0xa8>)
 8000ffe:	f002 fb97 	bl	8003730 <HAL_I2C_IsDeviceReady>
 8001002:	4603      	mov	r3, r0
 8001004:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d000      	beq.n	800100e <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800100c:	e7f1      	b.n	8000ff2 <LCD_SendInternal+0x12>
            break;
 800100e:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	f023 030f 	bic.w	r3, r3, #15
 8001016:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 800101e:	7bba      	ldrb	r2, [r7, #14]
 8001020:	797b      	ldrb	r3, [r7, #5]
 8001022:	4313      	orrs	r3, r2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	f043 030c 	orr.w	r3, r3, #12
 800102a:	b2db      	uxtb	r3, r3
 800102c:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 800102e:	7bba      	ldrb	r2, [r7, #14]
 8001030:	797b      	ldrb	r3, [r7, #5]
 8001032:	4313      	orrs	r3, r2
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	b2db      	uxtb	r3, r3
 800103c:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 800103e:	7b7a      	ldrb	r2, [r7, #13]
 8001040:	797b      	ldrb	r3, [r7, #5]
 8001042:	4313      	orrs	r3, r2
 8001044:	b2db      	uxtb	r3, r3
 8001046:	f043 030c 	orr.w	r3, r3, #12
 800104a:	b2db      	uxtb	r3, r3
 800104c:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 800104e:	7b7a      	ldrb	r2, [r7, #13]
 8001050:	797b      	ldrb	r3, [r7, #5]
 8001052:	4313      	orrs	r3, r2
 8001054:	b2db      	uxtb	r3, r3
 8001056:	f043 0308 	orr.w	r3, r3, #8
 800105a:	b2db      	uxtb	r3, r3
 800105c:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	b299      	uxth	r1, r3
 8001062:	f107 0208 	add.w	r2, r7, #8
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2304      	movs	r3, #4
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <LCD_SendInternal+0xa8>)
 8001070:	f002 fa60 	bl	8003534 <HAL_I2C_Master_Transmit>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8001078:	2005      	movs	r0, #5
 800107a:	f000 ffe1 	bl	8002040 <HAL_Delay>
    return res;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000030c 	.word	0x2000030c

0800108c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	460a      	mov	r2, r1
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 800109c:	79b9      	ldrb	r1, [r7, #6]
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2200      	movs	r2, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff9c 	bl	8000fe0 <LCD_SendInternal>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	4613      	mov	r3, r2
 80010be:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 80010c0:	79b9      	ldrb	r1, [r7, #6]
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2201      	movs	r2, #1
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff8a 	bl	8000fe0 <LCD_SendInternal>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2130      	movs	r1, #48	; 0x30
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ffd2 	bl	800108c <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2102      	movs	r1, #2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffcd 	bl	800108c <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	210c      	movs	r1, #12
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ffc8 	bl	800108c <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ffc3 	bl	800108c <LCD_SendCommand>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	6039      	str	r1, [r7, #0]
 8001118:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 800111a:	e009      	b.n	8001130 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ffc3 	bl	80010b0 <LCD_SendData>
        str++;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f1      	bne.n	800111c <LCD_SendString+0xe>
    }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <get_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800114a:	2200      	movs	r2, #0
 800114c:	4943      	ldr	r1, [pc, #268]	; (800125c <get_time+0x118>)
 800114e:	4844      	ldr	r0, [pc, #272]	; (8001260 <get_time+0x11c>)
 8001150:	f003 ff26 	bl	8004fa0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001154:	2200      	movs	r2, #0
 8001156:	4943      	ldr	r1, [pc, #268]	; (8001264 <get_time+0x120>)
 8001158:	4841      	ldr	r0, [pc, #260]	; (8001260 <get_time+0x11c>)
 800115a:	f004 f803 	bl	8005164 <HAL_RTC_GetDate>

	if (strcmp(ampm[sTime.TimeFormat], "AM") == 0 && sTime.Hours == 12)
 800115e:	4b3f      	ldr	r3, [pc, #252]	; (800125c <get_time+0x118>)
 8001160:	78db      	ldrb	r3, [r3, #3]
 8001162:	461a      	mov	r2, r3
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	4a3f      	ldr	r2, [pc, #252]	; (8001268 <get_time+0x124>)
 800116c:	4413      	add	r3, r2
 800116e:	493f      	ldr	r1, [pc, #252]	; (800126c <get_time+0x128>)
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f83d 	bl	80001f0 <strcmp>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d106      	bne.n	800118a <get_time+0x46>
 800117c:	4b37      	ldr	r3, [pc, #220]	; (800125c <get_time+0x118>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b0c      	cmp	r3, #12
 8001182:	d102      	bne.n	800118a <get_time+0x46>
	{
		sTime.Hours = 0;
 8001184:	4b35      	ldr	r3, [pc, #212]	; (800125c <get_time+0x118>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	}

	if (selection == 0)
 800118a:	4b39      	ldr	r3, [pc, #228]	; (8001270 <get_time+0x12c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10f      	bne.n	80011b2 <get_time+0x6e>
		sprintf((char*)showDate, "%04d-%02d-%02d      ", 2000+sDate.Year, sDate.Month, sDate.Date);
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <get_time+0x120>)
 8001194:	78db      	ldrb	r3, [r3, #3]
 8001196:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800119a:	4b32      	ldr	r3, [pc, #200]	; (8001264 <get_time+0x120>)
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	4619      	mov	r1, r3
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <get_time+0x120>)
 80011a2:	789b      	ldrb	r3, [r3, #2]
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	460b      	mov	r3, r1
 80011a8:	4932      	ldr	r1, [pc, #200]	; (8001274 <get_time+0x130>)
 80011aa:	4833      	ldr	r0, [pc, #204]	; (8001278 <get_time+0x134>)
 80011ac:	f005 f9e0 	bl	8006570 <siprintf>
 80011b0:	e03a      	b.n	8001228 <get_time+0xe4>
	else if (selection == 1)
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <get_time+0x12c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d10f      	bne.n	80011da <get_time+0x96>
		sprintf((char*)showDate, "%04d-%02d-%02d[HOUR]", 2000+sDate.Year, sDate.Month, sDate.Date);
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <get_time+0x120>)
 80011bc:	78db      	ldrb	r3, [r3, #3]
 80011be:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80011c2:	4b28      	ldr	r3, [pc, #160]	; (8001264 <get_time+0x120>)
 80011c4:	785b      	ldrb	r3, [r3, #1]
 80011c6:	4619      	mov	r1, r3
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <get_time+0x120>)
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	460b      	mov	r3, r1
 80011d0:	492a      	ldr	r1, [pc, #168]	; (800127c <get_time+0x138>)
 80011d2:	4829      	ldr	r0, [pc, #164]	; (8001278 <get_time+0x134>)
 80011d4:	f005 f9cc 	bl	8006570 <siprintf>
 80011d8:	e026      	b.n	8001228 <get_time+0xe4>
	else if (selection == 2)
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <get_time+0x12c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d10f      	bne.n	8001202 <get_time+0xbe>
	    sprintf((char*)showDate, "%04d-%02d-%02d[MIN] ", 2000+sDate.Year, sDate.Month, sDate.Date);
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <get_time+0x120>)
 80011e4:	78db      	ldrb	r3, [r3, #3]
 80011e6:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <get_time+0x120>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <get_time+0x120>)
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	460b      	mov	r3, r1
 80011f8:	4921      	ldr	r1, [pc, #132]	; (8001280 <get_time+0x13c>)
 80011fa:	481f      	ldr	r0, [pc, #124]	; (8001278 <get_time+0x134>)
 80011fc:	f005 f9b8 	bl	8006570 <siprintf>
 8001200:	e012      	b.n	8001228 <get_time+0xe4>
	else if (selection == 3)
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <get_time+0x12c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d10e      	bne.n	8001228 <get_time+0xe4>
	    sprintf((char*)showDate, "%04d-%02d-%02d[SEC] ", 2000+sDate.Year, sDate.Month, sDate.Date);
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <get_time+0x120>)
 800120c:	78db      	ldrb	r3, [r3, #3]
 800120e:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <get_time+0x120>)
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	4619      	mov	r1, r3
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <get_time+0x120>)
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	460b      	mov	r3, r1
 8001220:	4918      	ldr	r1, [pc, #96]	; (8001284 <get_time+0x140>)
 8001222:	4815      	ldr	r0, [pc, #84]	; (8001278 <get_time+0x134>)
 8001224:	f005 f9a4 	bl	8006570 <siprintf>

	sprintf((char *)showTime, "%s %02d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <get_time+0x118>)
 800122a:	78db      	ldrb	r3, [r3, #3]
 800122c:	461a      	mov	r2, r3
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <get_time+0x124>)
 8001236:	441a      	add	r2, r3
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <get_time+0x118>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <get_time+0x118>)
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	4619      	mov	r1, r3
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <get_time+0x118>)
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	9100      	str	r1, [sp, #0]
 800124c:	4603      	mov	r3, r0
 800124e:	490e      	ldr	r1, [pc, #56]	; (8001288 <get_time+0x144>)
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <get_time+0x148>)
 8001252:	f005 f98d 	bl	8006570 <siprintf>
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000364 	.word	0x20000364
 8001260:	200003f4 	.word	0x200003f4
 8001264:	20000360 	.word	0x20000360
 8001268:	20000000 	.word	0x20000000
 800126c:	08006ed0 	.word	0x08006ed0
 8001270:	200003d6 	.word	0x200003d6
 8001274:	08006ed4 	.word	0x08006ed4
 8001278:	20000398 	.word	0x20000398
 800127c:	08006eec 	.word	0x08006eec
 8001280:	08006f04 	.word	0x08006f04
 8001284:	08006f1c 	.word	0x08006f1c
 8001288:	08006f34 	.word	0x08006f34
 800128c:	20000378 	.word	0x20000378

08001290 <delay_us>:

float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void delay_us(uint16_t time) {
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);              // ???��머�?? 0?���??????????? 초기?��
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <delay_us+0x30>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1))<time);   // ?��?��?�� ?��간까�??????????? ??�???????????
 80012a2:	bf00      	nop
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <delay_us+0x30>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3f9      	bcc.n	80012a4 <delay_us+0x14>
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000418 	.word	0x20000418

080012c4 <Set_Pin_Output>:
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f001 fde4 	bl	8002ec0 <HAL_GPIO_Init>
}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001324:	2301      	movs	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4619      	mov	r1, r3
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f001 fdc6 	bl	8002ec0 <HAL_GPIO_Init>
}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <DHT11_Start>:
void DHT11_Start (void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_GPIO_Port, DHT11_Pin);  // set the pin as output
 8001340:	2108      	movs	r1, #8
 8001342:	4809      	ldr	r0, [pc, #36]	; (8001368 <DHT11_Start+0x2c>)
 8001344:	f7ff ffbe 	bl	80012c4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_GPIO_Port, DHT11_Pin, 0);   // pull the pin low
 8001348:	2200      	movs	r2, #0
 800134a:	2108      	movs	r1, #8
 800134c:	4806      	ldr	r0, [pc, #24]	; (8001368 <DHT11_Start+0x2c>)
 800134e:	f001 ff7b 	bl	8003248 <HAL_GPIO_WritePin>
	delay_us(18000);   // wait for 18ms
 8001352:	f244 6050 	movw	r0, #18000	; 0x4650
 8001356:	f7ff ff9b 	bl	8001290 <delay_us>
	Set_Pin_Input(DHT11_GPIO_Port, DHT11_Pin);    // set as input
 800135a:	2108      	movs	r1, #8
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <DHT11_Start+0x2c>)
 800135e:	f7ff ffcf 	bl	8001300 <Set_Pin_Input>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40020000 	.word	0x40020000

0800136c <DHT11_Check_Response>:
uint8_t DHT11_Check_Response (void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 8001376:	2028      	movs	r0, #40	; 0x28
 8001378:	f7ff ff8a 	bl	8001290 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))
 800137c:	2108      	movs	r1, #8
 800137e:	4811      	ldr	r0, [pc, #68]	; (80013c4 <DHT11_Check_Response+0x58>)
 8001380:	f001 ff4a 	bl	8003218 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10e      	bne.n	80013a8 <DHT11_Check_Response+0x3c>
	{
		delay_us (80);
 800138a:	2050      	movs	r0, #80	; 0x50
 800138c:	f7ff ff80 	bl	8001290 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin))) Response = 1;
 8001390:	2108      	movs	r1, #8
 8001392:	480c      	ldr	r0, [pc, #48]	; (80013c4 <DHT11_Check_Response+0x58>)
 8001394:	f001 ff40 	bl	8003218 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <DHT11_Check_Response+0x38>
 800139e:	2301      	movs	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	e001      	b.n	80013a8 <DHT11_Check_Response+0x3c>
		else Response = -1;
 80013a4:	23ff      	movs	r3, #255	; 0xff
 80013a6:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go low
 80013a8:	bf00      	nop
 80013aa:	2108      	movs	r1, #8
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <DHT11_Check_Response+0x58>)
 80013ae:	f001 ff33 	bl	8003218 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f8      	bne.n	80013aa <DHT11_Check_Response+0x3e>

	return Response;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40020000 	.word	0x40020000

080013c8 <DHT11_Read>:
uint8_t DHT11_Read (void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	71bb      	strb	r3, [r7, #6]
 80013d2:	e037      	b.n	8001444 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go high
 80013d4:	bf00      	nop
 80013d6:	2108      	movs	r1, #8
 80013d8:	481e      	ldr	r0, [pc, #120]	; (8001454 <DHT11_Read+0x8c>)
 80013da:	f001 ff1d 	bl	8003218 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f8      	beq.n	80013d6 <DHT11_Read+0xe>
		delay_us (40);   // wait for 40 us
 80013e4:	2028      	movs	r0, #40	; 0x28
 80013e6:	f7ff ff53 	bl	8001290 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))   // if the pin is low
 80013ea:	2108      	movs	r1, #8
 80013ec:	4819      	ldr	r0, [pc, #100]	; (8001454 <DHT11_Read+0x8c>)
 80013ee:	f001 ff13 	bl	8003218 <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10e      	bne.n	8001416 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2201      	movs	r2, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	b25b      	sxtb	r3, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	b25a      	sxtb	r2, r3
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	4013      	ands	r3, r2
 8001410:	b25b      	sxtb	r3, r3
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	e00b      	b.n	800142e <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001416:	79bb      	ldrb	r3, [r7, #6]
 8001418:	f1c3 0307 	rsb	r3, r3, #7
 800141c:	2201      	movs	r2, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	b25a      	sxtb	r2, r3
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4313      	orrs	r3, r2
 800142a:	b25b      	sxtb	r3, r3
 800142c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));  // wait for the pin to go low
 800142e:	bf00      	nop
 8001430:	2108      	movs	r1, #8
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <DHT11_Read+0x8c>)
 8001434:	f001 fef0 	bl	8003218 <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f8      	bne.n	8001430 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	3301      	adds	r3, #1
 8001442:	71bb      	strb	r3, [r7, #6]
 8001444:	79bb      	ldrb	r3, [r7, #6]
 8001446:	2b07      	cmp	r3, #7
 8001448:	d9c4      	bls.n	80013d4 <DHT11_Read+0xc>
	}
	return i;
 800144a:	79fb      	ldrb	r3, [r7, #7]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40020000 	.word	0x40020000

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145e:	f000 fd7d 	bl	8001f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001462:	f000 f8a1 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001466:	f7ff fc55 	bl	8000d14 <MX_GPIO_Init>
  MX_ETH_Init();
 800146a:	f7ff fb3f 	bl	8000aec <MX_ETH_Init>
  MX_USART3_UART_Init();
 800146e:	f000 fc51 	bl	8001d14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001472:	f000 fcc1 	bl	8001df8 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8001476:	f000 fa9f 	bl	80019b8 <MX_RTC_Init>
  MX_I2C1_Init();
 800147a:	f7ff fd29 	bl	8000ed0 <MX_I2C1_Init>
  MX_ADC1_Init();
 800147e:	f7ff fa51 	bl	8000924 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001482:	f000 fbd5 	bl	8001c30 <MX_TIM1_Init>
  MX_DAC_Init();
 8001486:	f7ff fac3 	bl	8000a10 <MX_DAC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800148a:	f000 f8f9 	bl	8001680 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800148e:	4838      	ldr	r0, [pc, #224]	; (8001570 <main+0x118>)
 8001490:	f003 ffc4 	bl	800541c <HAL_TIM_Base_Start>
  LCD_Init(LCD_ADDR);
 8001494:	204e      	movs	r0, #78	; 0x4e
 8001496:	f7ff fe1d 	bl	80010d4 <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DHT11_Start();
 800149a:	f7ff ff4f 	bl	800133c <DHT11_Start>
	  Presence = DHT11_Check_Response();
 800149e:	f7ff ff65 	bl	800136c <DHT11_Check_Response>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <main+0x11c>)
 80014a8:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read ();
 80014aa:	f7ff ff8d 	bl	80013c8 <DHT11_Read>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <main+0x120>)
 80014b4:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read ();
 80014b6:	f7ff ff87 	bl	80013c8 <DHT11_Read>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <main+0x124>)
 80014c0:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read ();
 80014c2:	f7ff ff81 	bl	80013c8 <DHT11_Read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <main+0x128>)
 80014cc:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read ();
 80014ce:	f7ff ff7b 	bl	80013c8 <DHT11_Read>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <main+0x12c>)
 80014d8:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 80014da:	f7ff ff75 	bl	80013c8 <DHT11_Read>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <main+0x130>)
 80014e4:	801a      	strh	r2, [r3, #0]

	  TEMP = Temp_byte1;
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <main+0x128>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <main+0x134>)
 80014ee:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <main+0x120>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b26      	ldr	r3, [pc, #152]	; (8001590 <main+0x138>)
 80014f8:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) TEMP;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <main+0x134>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <main+0x13c>)
 8001508:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) RH;
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <main+0x138>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <main+0x140>)
 800151a:	edc3 7a00 	vstr	s15, [r3]

	  sprintf(dhtValue, "TEMP: %3.1f RH: %2.1f", Temperature, Humidity); // @suppress("Float formatting support")
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <main+0x13c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f828 	bl	8000578 <__aeabi_f2d>
 8001528:	4604      	mov	r4, r0
 800152a:	460d      	mov	r5, r1
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <main+0x140>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f821 	bl	8000578 <__aeabi_f2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9cd 2300 	strd	r2, r3, [sp]
 800153e:	4622      	mov	r2, r4
 8001540:	462b      	mov	r3, r5
 8001542:	4916      	ldr	r1, [pc, #88]	; (800159c <main+0x144>)
 8001544:	4816      	ldr	r0, [pc, #88]	; (80015a0 <main+0x148>)
 8001546:	f005 f813 	bl	8006570 <siprintf>

	  get_time();
 800154a:	f7ff fdfb 	bl	8001144 <get_time>

	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	204e      	movs	r0, #78	; 0x4e
 8001552:	f7ff fd9b 	bl	800108c <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, dhtValue);
 8001556:	4912      	ldr	r1, [pc, #72]	; (80015a0 <main+0x148>)
 8001558:	204e      	movs	r0, #78	; 0x4e
 800155a:	f7ff fdd8 	bl	800110e <LCD_SendString>

	  // set address to 0x40
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 800155e:	21c0      	movs	r1, #192	; 0xc0
 8001560:	204e      	movs	r0, #78	; 0x4e
 8001562:	f7ff fd93 	bl	800108c <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, showTime);
 8001566:	490f      	ldr	r1, [pc, #60]	; (80015a4 <main+0x14c>)
 8001568:	204e      	movs	r0, #78	; 0x4e
 800156a:	f7ff fdd0 	bl	800110e <LCD_SendString>
	  DHT11_Start();
 800156e:	e794      	b.n	800149a <main+0x42>
 8001570:	20000418 	.word	0x20000418
 8001574:	200003ec 	.word	0x200003ec
 8001578:	200003d7 	.word	0x200003d7
 800157c:	200003d8 	.word	0x200003d8
 8001580:	200003d9 	.word	0x200003d9
 8001584:	200003da 	.word	0x200003da
 8001588:	200003dc 	.word	0x200003dc
 800158c:	200003e0 	.word	0x200003e0
 8001590:	200003de 	.word	0x200003de
 8001594:	200003e4 	.word	0x200003e4
 8001598:	200003e8 	.word	0x200003e8
 800159c:	08006f48 	.word	0x08006f48
 80015a0:	200003b8 	.word	0x200003b8
 80015a4:	20000378 	.word	0x20000378

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	; 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	2230      	movs	r2, #48	; 0x30
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f004 fffa 	bl	80065b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <SystemClock_Config+0xd0>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a28      	ldr	r2, [pc, #160]	; (8001678 <SystemClock_Config+0xd0>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <SystemClock_Config+0xd0>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <SystemClock_Config+0xd4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <SystemClock_Config+0xd4>)
 80015f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <SystemClock_Config+0xd4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001604:	2305      	movs	r3, #5
 8001606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001608:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800160e:	2301      	movs	r3, #1
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001612:	2302      	movs	r3, #2
 8001614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800161c:	2304      	movs	r3, #4
 800161e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001620:	23a8      	movs	r3, #168	; 0xa8
 8001622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001624:	2302      	movs	r3, #2
 8001626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001628:	2307      	movs	r3, #7
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fd4d 	bl	80040d0 <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800163c:	f000 f9b6 	bl	80019ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001640:	230f      	movs	r3, #15
 8001642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001644:	2302      	movs	r3, #2
 8001646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800164c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2105      	movs	r1, #5
 800165e:	4618      	mov	r0, r3
 8001660:	f002 ffae 	bl	80045c0 <HAL_RCC_ClockConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800166a:	f000 f99f 	bl	80019ac <Error_Handler>
  }
}
 800166e:	bf00      	nop
 8001670:	3750      	adds	r7, #80	; 0x50
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000

08001680 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2007      	movs	r0, #7
 800168a:	f001 f84a 	bl	8002722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800168e:	2007      	movs	r0, #7
 8001690:	f001 f863 	bl	800275a <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2017      	movs	r0, #23
 800169a:	f001 f842 	bl	8002722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800169e:	2017      	movs	r0, #23
 80016a0:	f001 f85b 	bl	800275a <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2028      	movs	r0, #40	; 0x28
 80016aa:	f001 f83a 	bl	8002722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ae:	2028      	movs	r0, #40	; 0x28
 80016b0:	f001 f853 	bl	800275a <HAL_NVIC_EnableIRQ>
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick = 0;

	if (GPIO_Pin == GPIO_PIN_1)
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d11d      	bne.n	8001704 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		if (HAL_GetTick() - before_tick >= 300)
 80016c8:	f000 fcae 	bl	8002028 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b9f      	ldr	r3, [pc, #636]	; (800194c <HAL_GPIO_EXTI_Callback+0x294>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016d8:	f0c0 815d 	bcc.w	8001996 <HAL_GPIO_EXTI_Callback+0x2de>
		{
			before_tick = HAL_GetTick();
 80016dc:	f000 fca4 	bl	8002028 <HAL_GetTick>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a9a      	ldr	r2, [pc, #616]	; (800194c <HAL_GPIO_EXTI_Callback+0x294>)
 80016e4:	6013      	str	r3, [r2, #0]

			selection++;
 80016e6:	4b9a      	ldr	r3, [pc, #616]	; (8001950 <HAL_GPIO_EXTI_Callback+0x298>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b98      	ldr	r3, [pc, #608]	; (8001950 <HAL_GPIO_EXTI_Callback+0x298>)
 80016f0:	701a      	strb	r2, [r3, #0]

			if (selection > 3)
 80016f2:	4b97      	ldr	r3, [pc, #604]	; (8001950 <HAL_GPIO_EXTI_Callback+0x298>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	f240 814d 	bls.w	8001996 <HAL_GPIO_EXTI_Callback+0x2de>
				selection = 0;
 80016fc:	4b94      	ldr	r3, [pc, #592]	; (8001950 <HAL_GPIO_EXTI_Callback+0x298>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
					sTime.Seconds--;
			}
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		}
	}
}
 8001702:	e148      	b.n	8001996 <HAL_GPIO_EXTI_Callback+0x2de>
	else if (GPIO_Pin == GPIO_PIN_6)
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	2b40      	cmp	r3, #64	; 0x40
 8001708:	d17e      	bne.n	8001808 <HAL_GPIO_EXTI_Callback+0x150>
		if (HAL_GetTick() - before_tick >= 300)
 800170a:	f000 fc8d 	bl	8002028 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	4b8e      	ldr	r3, [pc, #568]	; (800194c <HAL_GPIO_EXTI_Callback+0x294>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800171a:	f0c0 813c 	bcc.w	8001996 <HAL_GPIO_EXTI_Callback+0x2de>
			before_tick = HAL_GetTick();
 800171e:	f000 fc83 	bl	8002028 <HAL_GetTick>
 8001722:	4603      	mov	r3, r0
 8001724:	4a89      	ldr	r2, [pc, #548]	; (800194c <HAL_GPIO_EXTI_Callback+0x294>)
 8001726:	6013      	str	r3, [r2, #0]
			if (selection == 1) // hour select
 8001728:	4b89      	ldr	r3, [pc, #548]	; (8001950 <HAL_GPIO_EXTI_Callback+0x298>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d142      	bne.n	80017b6 <HAL_GPIO_EXTI_Callback+0xfe>
				sTime.Hours++;
 8001730:	4b88      	ldr	r3, [pc, #544]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b86      	ldr	r3, [pc, #536]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 800173a:	701a      	strb	r2, [r3, #0]
				if (sTime.Hours == 12)
 800173c:	4b85      	ldr	r3, [pc, #532]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d130      	bne.n	80017a6 <HAL_GPIO_EXTI_Callback+0xee>
					if (strcmp(ampm[sTime.TimeFormat], "AM") == 0)
 8001744:	4b83      	ldr	r3, [pc, #524]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001746:	78db      	ldrb	r3, [r3, #3]
 8001748:	461a      	mov	r2, r3
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	4a81      	ldr	r2, [pc, #516]	; (8001958 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001752:	4413      	add	r3, r2
 8001754:	4981      	ldr	r1, [pc, #516]	; (800195c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fd4a 	bl	80001f0 <strcmp>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d110      	bne.n	8001784 <HAL_GPIO_EXTI_Callback+0xcc>
						strcpy(ampm[sTime.TimeFormat], "PM");
 8001762:	4b7c      	ldr	r3, [pc, #496]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001764:	78db      	ldrb	r3, [r3, #3]
 8001766:	461a      	mov	r2, r3
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	4a7a      	ldr	r2, [pc, #488]	; (8001958 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001770:	4413      	add	r3, r2
 8001772:	4a7b      	ldr	r2, [pc, #492]	; (8001960 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001774:	8811      	ldrh	r1, [r2, #0]
 8001776:	7892      	ldrb	r2, [r2, #2]
 8001778:	8019      	strh	r1, [r3, #0]
 800177a:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 12;
 800177c:	4b75      	ldr	r3, [pc, #468]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 800177e:	220c      	movs	r2, #12
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e03b      	b.n	80017fc <HAL_GPIO_EXTI_Callback+0x144>
						strcpy(ampm[sTime.TimeFormat], "AM");
 8001784:	4b73      	ldr	r3, [pc, #460]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001786:	78db      	ldrb	r3, [r3, #3]
 8001788:	461a      	mov	r2, r3
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	4a71      	ldr	r2, [pc, #452]	; (8001958 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001792:	4413      	add	r3, r2
 8001794:	4a71      	ldr	r2, [pc, #452]	; (800195c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001796:	8811      	ldrh	r1, [r2, #0]
 8001798:	7892      	ldrb	r2, [r2, #2]
 800179a:	8019      	strh	r1, [r3, #0]
 800179c:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 0;
 800179e:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	e02a      	b.n	80017fc <HAL_GPIO_EXTI_Callback+0x144>
				else if (sTime.Hours > 12)
 80017a6:	4b6b      	ldr	r3, [pc, #428]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d926      	bls.n	80017fc <HAL_GPIO_EXTI_Callback+0x144>
					sTime.Hours = 1;
 80017ae:	4b69      	ldr	r3, [pc, #420]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e022      	b.n	80017fc <HAL_GPIO_EXTI_Callback+0x144>
			else if (selection == 2) // minutes select
 80017b6:	4b66      	ldr	r3, [pc, #408]	; (8001950 <HAL_GPIO_EXTI_Callback+0x298>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d10d      	bne.n	80017da <HAL_GPIO_EXTI_Callback+0x122>
				sTime.Minutes++;
 80017be:	4b65      	ldr	r3, [pc, #404]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b63      	ldr	r3, [pc, #396]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80017c8:	705a      	strb	r2, [r3, #1]
				if (sTime.Minutes > 59)
 80017ca:	4b62      	ldr	r3, [pc, #392]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80017cc:	785b      	ldrb	r3, [r3, #1]
 80017ce:	2b3b      	cmp	r3, #59	; 0x3b
 80017d0:	d914      	bls.n	80017fc <HAL_GPIO_EXTI_Callback+0x144>
					sTime.Minutes = 0;
 80017d2:	4b60      	ldr	r3, [pc, #384]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	705a      	strb	r2, [r3, #1]
 80017d8:	e010      	b.n	80017fc <HAL_GPIO_EXTI_Callback+0x144>
			else if (selection == 3) // second select
 80017da:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <HAL_GPIO_EXTI_Callback+0x298>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d10c      	bne.n	80017fc <HAL_GPIO_EXTI_Callback+0x144>
				sTime.Seconds++;
 80017e2:	4b5c      	ldr	r3, [pc, #368]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80017e4:	789b      	ldrb	r3, [r3, #2]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80017ec:	709a      	strb	r2, [r3, #2]
				if (sTime.Seconds > 59)
 80017ee:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80017f0:	789b      	ldrb	r3, [r3, #2]
 80017f2:	2b3b      	cmp	r3, #59	; 0x3b
 80017f4:	d902      	bls.n	80017fc <HAL_GPIO_EXTI_Callback+0x144>
					sTime.Seconds = 0;
 80017f6:	4b57      	ldr	r3, [pc, #348]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80017fc:	2200      	movs	r2, #0
 80017fe:	4955      	ldr	r1, [pc, #340]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001800:	4858      	ldr	r0, [pc, #352]	; (8001964 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001802:	f003 fb33 	bl	8004e6c <HAL_RTC_SetTime>
}
 8001806:	e0c6      	b.n	8001996 <HAL_GPIO_EXTI_Callback+0x2de>
	else if (GPIO_Pin == GPIO_PIN_5)
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	2b20      	cmp	r3, #32
 800180c:	f040 80c3 	bne.w	8001996 <HAL_GPIO_EXTI_Callback+0x2de>
		if (HAL_GetTick() - before_tick >= 300)
 8001810:	f000 fc0a 	bl	8002028 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	4b4d      	ldr	r3, [pc, #308]	; (800194c <HAL_GPIO_EXTI_Callback+0x294>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001820:	f0c0 80b9 	bcc.w	8001996 <HAL_GPIO_EXTI_Callback+0x2de>
			before_tick = HAL_GetTick();
 8001824:	f000 fc00 	bl	8002028 <HAL_GetTick>
 8001828:	4603      	mov	r3, r0
 800182a:	4a48      	ldr	r2, [pc, #288]	; (800194c <HAL_GPIO_EXTI_Callback+0x294>)
 800182c:	6013      	str	r3, [r2, #0]
			if (selection == 1)
 800182e:	4b48      	ldr	r3, [pc, #288]	; (8001950 <HAL_GPIO_EXTI_Callback+0x298>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d176      	bne.n	8001924 <HAL_GPIO_EXTI_Callback+0x26c>
				if (sTime.Hours == 0)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d130      	bne.n	80018a0 <HAL_GPIO_EXTI_Callback+0x1e8>
					if (strcmp(ampm[sTime.TimeFormat], "AM") == 0)
 800183e:	4b45      	ldr	r3, [pc, #276]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001840:	78db      	ldrb	r3, [r3, #3]
 8001842:	461a      	mov	r2, r3
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	4a43      	ldr	r2, [pc, #268]	; (8001958 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800184c:	4413      	add	r3, r2
 800184e:	4943      	ldr	r1, [pc, #268]	; (800195c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fccd 	bl	80001f0 <strcmp>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d110      	bne.n	800187e <HAL_GPIO_EXTI_Callback+0x1c6>
						strcpy(ampm[sTime.TimeFormat], "PM");
 800185c:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 800185e:	78db      	ldrb	r3, [r3, #3]
 8001860:	461a      	mov	r2, r3
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	4a3b      	ldr	r2, [pc, #236]	; (8001958 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800186a:	4413      	add	r3, r2
 800186c:	4a3c      	ldr	r2, [pc, #240]	; (8001960 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800186e:	8811      	ldrh	r1, [r2, #0]
 8001870:	7892      	ldrb	r2, [r2, #2]
 8001872:	8019      	strh	r1, [r3, #0]
 8001874:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 11;
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001878:	220b      	movs	r2, #11
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	e086      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x2d4>
						strcpy(ampm[sTime.TimeFormat], "AM");
 800187e:	4b35      	ldr	r3, [pc, #212]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001880:	78db      	ldrb	r3, [r3, #3]
 8001882:	461a      	mov	r2, r3
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	4a33      	ldr	r2, [pc, #204]	; (8001958 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800188c:	4413      	add	r3, r2
 800188e:	4a33      	ldr	r2, [pc, #204]	; (800195c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001890:	8811      	ldrh	r1, [r2, #0]
 8001892:	7892      	ldrb	r2, [r2, #2]
 8001894:	8019      	strh	r1, [r3, #0]
 8001896:	709a      	strb	r2, [r3, #2]
						sTime.Hours = 11;
 8001898:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 800189a:	220b      	movs	r2, #11
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	e075      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x2d4>
				else if (strcmp(ampm[sTime.TimeFormat], "PM") == 0 && sTime.Hours == 1)
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80018a2:	78db      	ldrb	r3, [r3, #3]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80018ae:	4413      	add	r3, r2
 80018b0:	492b      	ldr	r1, [pc, #172]	; (8001960 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fc9c 	bl	80001f0 <strcmp>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d107      	bne.n	80018ce <HAL_GPIO_EXTI_Callback+0x216>
 80018be:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d103      	bne.n	80018ce <HAL_GPIO_EXTI_Callback+0x216>
					sTime.Hours = 12;
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80018c8:	220c      	movs	r2, #12
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e05e      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x2d4>
				else if (strcmp(ampm[sTime.TimeFormat], "PM") == 0 && sTime.Hours == 12)
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80018d0:	78db      	ldrb	r3, [r3, #3]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80018dc:	4413      	add	r3, r2
 80018de:	4920      	ldr	r1, [pc, #128]	; (8001960 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fc85 	bl	80001f0 <strcmp>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d114      	bne.n	8001916 <HAL_GPIO_EXTI_Callback+0x25e>
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	d110      	bne.n	8001916 <HAL_GPIO_EXTI_Callback+0x25e>
					strcpy(ampm[sTime.TimeFormat], "AM");
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 80018f6:	78db      	ldrb	r3, [r3, #3]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	4a15      	ldr	r2, [pc, #84]	; (8001958 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001902:	4413      	add	r3, r2
 8001904:	4a15      	ldr	r2, [pc, #84]	; (800195c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001906:	8811      	ldrh	r1, [r2, #0]
 8001908:	7892      	ldrb	r2, [r2, #2]
 800190a:	8019      	strh	r1, [r3, #0]
 800190c:	709a      	strb	r2, [r3, #2]
					sTime.Hours = 11;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001910:	220b      	movs	r2, #11
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e03a      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x2d4>
					sTime.Hours--;
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	3b01      	subs	r3, #1
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e033      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x2d4>
			else if (selection == 2)
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_GPIO_EXTI_Callback+0x298>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d11d      	bne.n	8001968 <HAL_GPIO_EXTI_Callback+0x2b0>
				if (sTime.Minutes == 0)
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 800192e:	785b      	ldrb	r3, [r3, #1]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d103      	bne.n	800193c <HAL_GPIO_EXTI_Callback+0x284>
					sTime.Minutes = 59;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001936:	223b      	movs	r2, #59	; 0x3b
 8001938:	705a      	strb	r2, [r3, #1]
 800193a:	e027      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x2d4>
					sTime.Minutes--;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	3b01      	subs	r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001946:	705a      	strb	r2, [r3, #1]
 8001948:	e020      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x2d4>
 800194a:	bf00      	nop
 800194c:	200003f0 	.word	0x200003f0
 8001950:	200003d6 	.word	0x200003d6
 8001954:	20000364 	.word	0x20000364
 8001958:	20000000 	.word	0x20000000
 800195c:	08006ed0 	.word	0x08006ed0
 8001960:	08006f60 	.word	0x08006f60
 8001964:	200003f4 	.word	0x200003f4
			else if (selection == 3)
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d10d      	bne.n	800198c <HAL_GPIO_EXTI_Callback+0x2d4>
				if (sTime.Seconds == 0)
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001972:	789b      	ldrb	r3, [r3, #2]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d103      	bne.n	8001980 <HAL_GPIO_EXTI_Callback+0x2c8>
					sTime.Seconds = 59;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 800197a:	223b      	movs	r2, #59	; 0x3b
 800197c:	709a      	strb	r2, [r3, #2]
 800197e:	e005      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x2d4>
					sTime.Seconds--;
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001982:	789b      	ldrb	r3, [r3, #2]
 8001984:	3b01      	subs	r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 800198a:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800198c:	2200      	movs	r2, #0
 800198e:	4905      	ldr	r1, [pc, #20]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001992:	f003 fa6b 	bl	8004e6c <HAL_RTC_SetTime>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200003d6 	.word	0x200003d6
 80019a4:	20000364 	.word	0x20000364
 80019a8:	200003f4 	.word	0x200003f4

080019ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <Error_Handler+0x8>
	...

080019b8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019cc:	2300      	movs	r3, #0
 80019ce:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <MX_RTC_Init+0xb0>)
 80019d2:	4a26      	ldr	r2, [pc, #152]	; (8001a6c <MX_RTC_Init+0xb4>)
 80019d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <MX_RTC_Init+0xb0>)
 80019d8:	2240      	movs	r2, #64	; 0x40
 80019da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <MX_RTC_Init+0xb0>)
 80019de:	227f      	movs	r2, #127	; 0x7f
 80019e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <MX_RTC_Init+0xb0>)
 80019e4:	22ff      	movs	r2, #255	; 0xff
 80019e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <MX_RTC_Init+0xb0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <MX_RTC_Init+0xb0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019f4:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <MX_RTC_Init+0xb0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019fa:	481b      	ldr	r0, [pc, #108]	; (8001a68 <MX_RTC_Init+0xb0>)
 80019fc:	f003 f9c0 	bl	8004d80 <HAL_RTC_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001a06:	f7ff ffd1 	bl	80019ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001a16:	2300      	movs	r3, #0
 8001a18:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8001a1e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a22:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480f      	ldr	r0, [pc, #60]	; (8001a68 <MX_RTC_Init+0xb0>)
 8001a2c:	f003 fa1e 	bl	8004e6c <HAL_RTC_SetTime>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001a36:	f7ff ffb9 	bl	80019ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8001a3e:	2311      	movs	r3, #17
 8001a40:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 23;
 8001a46:	2317      	movs	r3, #23
 8001a48:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_RTC_Init+0xb0>)
 8001a52:	f003 fb03 	bl	800505c <HAL_RTC_SetDate>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001a5c:	f7ff ffa6 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200003f4 	.word	0x200003f4
 8001a6c:	40002800 	.word	0x40002800

08001a70 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	; 0x38
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	2230      	movs	r2, #48	; 0x30
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f004 fd95 	bl	80065b0 <memset>
  if(rtcHandle->Instance==RTC)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <HAL_RTC_MspInit+0x4c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d111      	bne.n	8001ab4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a90:	2320      	movs	r3, #32
 8001a92:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 ffae 	bl	8004a00 <HAL_RCCEx_PeriphCLKConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001aaa:	f7ff ff7f 	bl	80019ac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_RTC_MspInit+0x50>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3738      	adds	r7, #56	; 0x38
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40002800 	.word	0x40002800
 8001ac0:	42470e3c 	.word	0x42470e3c

08001ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_MspInit+0x4c>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_MspInit+0x4c>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_MspInit+0x4c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_MspInit+0x4c>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_MspInit+0x4c>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_MspInit+0x4c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b60:	f000 fa4e 	bl	8002000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	f001 fb85 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_down_Pin);
 8001b7a:	2020      	movs	r0, #32
 8001b7c:	f001 fb7e 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_up_Pin);
 8001b80:	2040      	movs	r0, #64	; 0x40
 8001b82:	f001 fb7b 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_select_Pin);
 8001b86:	2080      	movs	r0, #128	; 0x80
 8001b88:	f001 fb78 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001b94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b98:	f001 fb70 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <_sbrk+0x5c>)
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <_sbrk+0x60>)
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <_sbrk+0x64>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <_sbrk+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd0:	f004 fcf6 	bl	80065c0 <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20030000 	.word	0x20030000
 8001c00:	00000400 	.word	0x00000400
 8001c04:	20000414 	.word	0x20000414
 8001c08:	20000b00 	.word	0x20000b00

08001c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <SystemInit+0x20>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <SystemInit+0x20>)
 8001c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c44:	463b      	mov	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <MX_TIM1_Init+0x98>)
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <MX_TIM1_Init+0x9c>)
 8001c50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <MX_TIM1_Init+0x98>)
 8001c54:	22a7      	movs	r2, #167	; 0xa7
 8001c56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_TIM1_Init+0x98>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_TIM1_Init+0x98>)
 8001c60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001c64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_TIM1_Init+0x98>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_TIM1_Init+0x98>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <MX_TIM1_Init+0x98>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c78:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <MX_TIM1_Init+0x98>)
 8001c7a:	f003 fb7f 	bl	800537c <HAL_TIM_Base_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001c84:	f7ff fe92 	bl	80019ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	4619      	mov	r1, r3
 8001c94:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <MX_TIM1_Init+0x98>)
 8001c96:	f003 fc29 	bl	80054ec <HAL_TIM_ConfigClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ca0:	f7ff fe84 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_TIM1_Init+0x98>)
 8001cb2:	f003 fe1d 	bl	80058f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cbc:	f7ff fe76 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000418 	.word	0x20000418
 8001ccc:	40010000 	.word	0x40010000

08001cd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_TIM_Base_MspInit+0x3c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10d      	bne.n	8001cfe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_TIM_Base_MspInit+0x40>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <HAL_TIM_Base_MspInit+0x40>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <HAL_TIM_Base_MspInit+0x40>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40023800 	.word	0x40023800

08001d14 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_USART3_UART_Init+0x50>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d4c:	f003 fe4c 	bl	80059e8 <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d56:	f7ff fe29 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000460 	.word	0x20000460
 8001d64:	40004800 	.word	0x40004800

08001d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_UART_MspInit+0x84>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d12c      	bne.n	8001de4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001dc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dd4:	2307      	movs	r3, #7
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_UART_MspInit+0x8c>)
 8001de0:	f001 f86e 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001de4:	bf00      	nop
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40004800 	.word	0x40004800
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020c00 	.word	0x40020c00

08001df8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e06:	2204      	movs	r2, #4
 8001e08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e18:	2202      	movs	r2, #2
 8001e1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e3c:	f002 f82a 	bl	8003e94 <HAL_PCD_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e46:	f7ff fdb1 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200004a4 	.word	0x200004a4

08001e54 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e74:	d13f      	bne.n	8001ef6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_PCD_MspInit+0xac>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <HAL_PCD_MspInit+0xac>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_PCD_MspInit+0xac>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e92:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	4619      	mov	r1, r3
 8001eae:	4815      	ldr	r0, [pc, #84]	; (8001f04 <HAL_PCD_MspInit+0xb0>)
 8001eb0:	f001 f806 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480e      	ldr	r0, [pc, #56]	; (8001f04 <HAL_PCD_MspInit+0xb0>)
 8001eca:	f000 fff9 	bl	8002ec0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_PCD_MspInit+0xac>)
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <HAL_PCD_MspInit+0xac>)
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed8:	6353      	str	r3, [r2, #52]	; 0x34
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_PCD_MspInit+0xac>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_PCD_MspInit+0xac>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_PCD_MspInit+0xac>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020000 	.word	0x40020000

08001f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f40 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f0c:	480d      	ldr	r0, [pc, #52]	; (8001f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f0e:	490e      	ldr	r1, [pc, #56]	; (8001f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f10:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f24:	4c0b      	ldr	r4, [pc, #44]	; (8001f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f32:	f7ff fe6b 	bl	8001c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f36:	f004 fb49 	bl	80065cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3a:	f7ff fa8d 	bl	8001458 <main>
  bx  lr    
 8001f3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f48:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001f4c:	08006fc0 	.word	0x08006fc0
  ldr r2, =_sbss
 8001f50:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001f54:	20000afc 	.word	0x20000afc

08001f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f58:	e7fe      	b.n	8001f58 <ADC_IRQHandler>
	...

08001f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <HAL_Init+0x40>)
 8001f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_Init+0x40>)
 8001f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_Init+0x40>)
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f000 fbc1 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f000 f808 	bl	8001fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f90:	f7ff fd98 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x54>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_InitTick+0x58>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fbd9 	bl	8002776 <HAL_SYSTICK_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00e      	b.n	8001fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d80a      	bhi.n	8001fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f000 fba1 	bl	8002722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <HAL_InitTick+0x5c>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	20000010 	.word	0x20000010
 8001ffc:	2000000c 	.word	0x2000000c

08002000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x24>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_IncTick+0x24>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000010 	.word	0x20000010
 8002024:	200009b0 	.word	0x200009b0

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_GetTick+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	200009b0 	.word	0x200009b0

08002040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff ffee 	bl	8002028 <HAL_GetTick>
 800204c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d005      	beq.n	8002066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_Delay+0x44>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002066:	bf00      	nop
 8002068:	f7ff ffde 	bl	8002028 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d8f7      	bhi.n	8002068 <HAL_Delay+0x28>
  {
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000010 	.word	0x20000010

08002088 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e033      	b.n	8002106 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fc90 	bl	80009cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020ce:	f023 0302 	bic.w	r3, r3, #2
 80020d2:	f043 0202 	orr.w	r2, r3, #2
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f94a 	bl	8002374 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
 80020f6:	e001      	b.n	80020fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x1c>
 8002128:	2302      	movs	r3, #2
 800212a:	e113      	b.n	8002354 <HAL_ADC_ConfigChannel+0x244>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b09      	cmp	r3, #9
 800213a:	d925      	bls.n	8002188 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68d9      	ldr	r1, [r3, #12]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	3b1e      	subs	r3, #30
 8002152:	2207      	movs	r2, #7
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43da      	mvns	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	400a      	ands	r2, r1
 8002160:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68d9      	ldr	r1, [r3, #12]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	4603      	mov	r3, r0
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4403      	add	r3, r0
 800217a:	3b1e      	subs	r3, #30
 800217c:	409a      	lsls	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	e022      	b.n	80021ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6919      	ldr	r1, [r3, #16]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	4613      	mov	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	2207      	movs	r2, #7
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	400a      	ands	r2, r1
 80021aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6919      	ldr	r1, [r3, #16]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4403      	add	r3, r0
 80021c4:	409a      	lsls	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d824      	bhi.n	8002220 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b05      	subs	r3, #5
 80021e8:	221f      	movs	r2, #31
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	400a      	ands	r2, r1
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	4618      	mov	r0, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b05      	subs	r3, #5
 8002212:	fa00 f203 	lsl.w	r2, r0, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	635a      	str	r2, [r3, #52]	; 0x34
 800221e:	e04c      	b.n	80022ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b0c      	cmp	r3, #12
 8002226:	d824      	bhi.n	8002272 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b23      	subs	r3, #35	; 0x23
 800223a:	221f      	movs	r2, #31
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43da      	mvns	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	400a      	ands	r2, r1
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	4618      	mov	r0, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b23      	subs	r3, #35	; 0x23
 8002264:	fa00 f203 	lsl.w	r2, r0, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
 8002270:	e023      	b.n	80022ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	3b41      	subs	r3, #65	; 0x41
 8002284:	221f      	movs	r2, #31
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4618      	mov	r0, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b41      	subs	r3, #65	; 0x41
 80022ae:	fa00 f203 	lsl.w	r2, r0, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_ADC_ConfigChannel+0x250>)
 80022bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_ADC_ConfigChannel+0x254>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d10f      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1d8>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b12      	cmp	r3, #18
 80022ce:	d10b      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <HAL_ADC_ConfigChannel+0x254>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d12b      	bne.n	800234a <HAL_ADC_ConfigChannel+0x23a>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <HAL_ADC_ConfigChannel+0x258>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d003      	beq.n	8002304 <HAL_ADC_ConfigChannel+0x1f4>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b11      	cmp	r3, #17
 8002302:	d122      	bne.n	800234a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a11      	ldr	r2, [pc, #68]	; (8002368 <HAL_ADC_ConfigChannel+0x258>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d111      	bne.n	800234a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_ADC_ConfigChannel+0x25c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_ADC_ConfigChannel+0x260>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	0c9a      	lsrs	r2, r3, #18
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800233c:	e002      	b.n	8002344 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3b01      	subs	r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f9      	bne.n	800233e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40012300 	.word	0x40012300
 8002364:	40012000 	.word	0x40012000
 8002368:	10000012 	.word	0x10000012
 800236c:	20000008 	.word	0x20000008
 8002370:	431bde83 	.word	0x431bde83

08002374 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800237c:	4b79      	ldr	r3, [pc, #484]	; (8002564 <ADC_Init+0x1f0>)
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	431a      	orrs	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	021a      	lsls	r2, r3, #8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	4a58      	ldr	r2, [pc, #352]	; (8002568 <ADC_Init+0x1f4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d022      	beq.n	8002452 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800241a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800243c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e00f      	b.n	8002472 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002470:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0202 	bic.w	r2, r2, #2
 8002480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7e1b      	ldrb	r3, [r3, #24]
 800248c:	005a      	lsls	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01b      	beq.n	80024d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	3b01      	subs	r3, #1
 80024cc:	035a      	lsls	r2, r3, #13
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	e007      	b.n	80024e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	3b01      	subs	r3, #1
 8002504:	051a      	lsls	r2, r3, #20
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800251c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800252a:	025a      	lsls	r2, r3, #9
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6899      	ldr	r1, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	029a      	lsls	r2, r3, #10
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40012300 	.word	0x40012300
 8002568:	0f000001 	.word	0x0f000001

0800256c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002588:	4013      	ands	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259e:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60d3      	str	r3, [r2, #12]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <__NVIC_GetPriorityGrouping+0x18>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	f003 0307 	and.w	r3, r3, #7
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db0b      	blt.n	80025fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4907      	ldr	r1, [pc, #28]	; (8002608 <__NVIC_EnableIRQ+0x38>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e100 	.word	0xe000e100

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	; (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <__NVIC_SetPriority+0x50>)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
         );
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f7ff ff8e 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff29 	bl	800256c <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002734:	f7ff ff3e 	bl	80025b4 <__NVIC_GetPriorityGrouping>
 8002738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff ff8e 	bl	8002660 <NVIC_EncodePriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff5d 	bl	800260c <__NVIC_SetPriority>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff31 	bl	80025d0 <__NVIC_EnableIRQ>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffa2 	bl	80026c8 <SysTick_Config>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e014      	b.n	80027ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	791b      	ldrb	r3, [r3, #4]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7fe f957 	bl	8000a64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b087      	sub	sp, #28
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	795b      	ldrb	r3, [r3, #5]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_DAC_ConfigChannel+0x18>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e03c      	b.n	8002864 <HAL_DAC_ConfigChannel+0x92>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2202      	movs	r2, #2
 80027f4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4013      	ands	r3, r2
 8002812:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	22c0      	movs	r2, #192	; 0xc0
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43da      	mvns	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	400a      	ands	r2, r1
 8002854:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06c      	b.n	800295c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002888:	2b00      	cmp	r3, #0
 800288a:	d106      	bne.n	800289a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2223      	movs	r2, #35	; 0x23
 8002890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fe f977 	bl	8000b88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	4b31      	ldr	r3, [pc, #196]	; (8002964 <HAL_ETH_Init+0xf4>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	4a30      	ldr	r2, [pc, #192]	; (8002964 <HAL_ETH_Init+0xf4>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a8:	6453      	str	r3, [r2, #68]	; 0x44
 80028aa:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <HAL_ETH_Init+0xf4>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80028b6:	4b2c      	ldr	r3, [pc, #176]	; (8002968 <HAL_ETH_Init+0xf8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a2b      	ldr	r2, [pc, #172]	; (8002968 <HAL_ETH_Init+0xf8>)
 80028bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80028c2:	4b29      	ldr	r3, [pc, #164]	; (8002968 <HAL_ETH_Init+0xf8>)
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	4927      	ldr	r1, [pc, #156]	; (8002968 <HAL_ETH_Init+0xf8>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80028d0:	4b25      	ldr	r3, [pc, #148]	; (8002968 <HAL_ETH_Init+0xf8>)
 80028d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ec:	f7ff fb9c 	bl	8002028 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028f2:	e011      	b.n	8002918 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028f4:	f7ff fb98 	bl	8002028 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002902:	d909      	bls.n	8002918 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2204      	movs	r2, #4
 8002908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	22e0      	movs	r2, #224	; 0xe0
 8002910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e021      	b.n	800295c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1e4      	bne.n	80028f4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f958 	bl	8002be0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f9ff 	bl	8002d34 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa55 	bl	8002de6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	461a      	mov	r2, r3
 8002942:	2100      	movs	r1, #0
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f9bd 	bl	8002cc4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2210      	movs	r2, #16
 8002956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	40013800 	.word	0x40013800

0800296c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4b51      	ldr	r3, [pc, #324]	; (8002ac8 <ETH_SetMACConfig+0x15c>)
 8002982:	4013      	ands	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	7c1b      	ldrb	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <ETH_SetMACConfig+0x28>
 800298e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002992:	e000      	b.n	8002996 <ETH_SetMACConfig+0x2a>
 8002994:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	7c5b      	ldrb	r3, [r3, #17]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <ETH_SetMACConfig+0x38>
 800299e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029a2:	e000      	b.n	80029a6 <ETH_SetMACConfig+0x3a>
 80029a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	7fdb      	ldrb	r3, [r3, #31]
 80029b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80029b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	7f92      	ldrb	r2, [r2, #30]
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	d102      	bne.n	80029ca <ETH_SetMACConfig+0x5e>
 80029c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c8:	e000      	b.n	80029cc <ETH_SetMACConfig+0x60>
 80029ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80029cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	7f1b      	ldrb	r3, [r3, #28]
 80029d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	791b      	ldrb	r3, [r3, #4]
 80029e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80029e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029ea:	2a00      	cmp	r2, #0
 80029ec:	d102      	bne.n	80029f4 <ETH_SetMACConfig+0x88>
 80029ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f2:	e000      	b.n	80029f6 <ETH_SetMACConfig+0x8a>
 80029f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	7bdb      	ldrb	r3, [r3, #15]
 80029fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a0c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a26:	2001      	movs	r0, #1
 8002a28:	f7ff fb0a 	bl	8002040 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002a42:	4013      	ands	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a52:	2a00      	cmp	r2, #0
 8002a54:	d101      	bne.n	8002a5a <ETH_SetMACConfig+0xee>
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	e000      	b.n	8002a5c <ETH_SetMACConfig+0xf0>
 8002a5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a5c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002a6a:	2a01      	cmp	r2, #1
 8002a6c:	d101      	bne.n	8002a72 <ETH_SetMACConfig+0x106>
 8002a6e:	2208      	movs	r2, #8
 8002a70:	e000      	b.n	8002a74 <ETH_SetMACConfig+0x108>
 8002a72:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002a7c:	2a01      	cmp	r2, #1
 8002a7e:	d101      	bne.n	8002a84 <ETH_SetMACConfig+0x118>
 8002a80:	2204      	movs	r2, #4
 8002a82:	e000      	b.n	8002a86 <ETH_SetMACConfig+0x11a>
 8002a84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002a8e:	2a01      	cmp	r2, #1
 8002a90:	d101      	bne.n	8002a96 <ETH_SetMACConfig+0x12a>
 8002a92:	2202      	movs	r2, #2
 8002a94:	e000      	b.n	8002a98 <ETH_SetMACConfig+0x12c>
 8002a96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f7ff fac5 	bl	8002040 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	ff20810f 	.word	0xff20810f

08002acc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <ETH_SetDMAConfig+0x110>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	7b1b      	ldrb	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d102      	bne.n	8002af8 <ETH_SetDMAConfig+0x2c>
 8002af2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002af6:	e000      	b.n	8002afa <ETH_SetDMAConfig+0x2e>
 8002af8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	7b5b      	ldrb	r3, [r3, #13]
 8002afe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b00:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	7f52      	ldrb	r2, [r2, #29]
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	d102      	bne.n	8002b10 <ETH_SetDMAConfig+0x44>
 8002b0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b0e:	e000      	b.n	8002b12 <ETH_SetDMAConfig+0x46>
 8002b10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	7b9b      	ldrb	r3, [r3, #14]
 8002b18:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b1a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	7f1b      	ldrb	r3, [r3, #28]
 8002b26:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002b28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	7f9b      	ldrb	r3, [r3, #30]
 8002b2e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b30:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b3e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b40:	4313      	orrs	r3, r2
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b50:	461a      	mov	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b62:	2001      	movs	r0, #1
 8002b64:	f7ff fa6c 	bl	8002040 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b70:	461a      	mov	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	791b      	ldrb	r3, [r3, #4]
 8002b7a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b80:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b86:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b8c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b94:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b96:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b9e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ba4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bb2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	f7ff fa3d 	bl	8002040 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	f8de3f23 	.word	0xf8de3f23

08002be0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b0a6      	sub	sp, #152	; 0x98
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c46:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fe86 	bl	800296c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c60:	2301      	movs	r3, #1
 8002c62:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c64:	2301      	movs	r3, #1
 8002c66:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c94:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ca0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ff08 	bl	8002acc <ETH_SetDMAConfig>
}
 8002cbc:	bf00      	nop
 8002cbe:	3798      	adds	r7, #152	; 0x98
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3305      	adds	r3, #5
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	3204      	adds	r2, #4
 8002cdc:	7812      	ldrb	r2, [r2, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <ETH_MACAddressConfig+0x68>)
 8002ce6:	4413      	add	r3, r2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3303      	adds	r3, #3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	061a      	lsls	r2, r3, #24
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	041b      	lsls	r3, r3, #16
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3301      	adds	r3, #1
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <ETH_MACAddressConfig+0x6c>)
 8002d16:	4413      	add	r3, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6013      	str	r3, [r2, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40028040 	.word	0x40028040
 8002d30:	40028044 	.word	0x40028044

08002d34 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e03e      	b.n	8002dc0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68d9      	ldr	r1, [r3, #12]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	3206      	adds	r2, #6
 8002d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d80c      	bhi.n	8002da4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68d9      	ldr	r1, [r3, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	e004      	b.n	8002dae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d9bd      	bls.n	8002d42 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd8:	611a      	str	r2, [r3, #16]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e046      	b.n	8002e82 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6919      	ldr	r1, [r3, #16]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2200      	movs	r2, #0
 8002e22:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2200      	movs	r2, #0
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e30:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002e38:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	3212      	adds	r2, #18
 8002e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d80c      	bhi.n	8002e72 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6919      	ldr	r1, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
 8002e70:	e004      	b.n	8002e7c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d9b5      	bls.n	8002df4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb2:	60da      	str	r2, [r3, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	e177      	b.n	80031cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002edc:	2201      	movs	r2, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	f040 8166 	bne.w	80031c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d005      	beq.n	8002f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d130      	bne.n	8002f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 0201 	and.w	r2, r3, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d017      	beq.n	8002fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d123      	bne.n	8003004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	08da      	lsrs	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3208      	adds	r2, #8
 8002ffe:	69b9      	ldr	r1, [r7, #24]
 8003000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0203 	and.w	r2, r3, #3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80c0 	beq.w	80031c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b66      	ldr	r3, [pc, #408]	; (80031e4 <HAL_GPIO_Init+0x324>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a65      	ldr	r2, [pc, #404]	; (80031e4 <HAL_GPIO_Init+0x324>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_GPIO_Init+0x324>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003062:	4a61      	ldr	r2, [pc, #388]	; (80031e8 <HAL_GPIO_Init+0x328>)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	3302      	adds	r3, #2
 800306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a58      	ldr	r2, [pc, #352]	; (80031ec <HAL_GPIO_Init+0x32c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d037      	beq.n	80030fe <HAL_GPIO_Init+0x23e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a57      	ldr	r2, [pc, #348]	; (80031f0 <HAL_GPIO_Init+0x330>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d031      	beq.n	80030fa <HAL_GPIO_Init+0x23a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a56      	ldr	r2, [pc, #344]	; (80031f4 <HAL_GPIO_Init+0x334>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02b      	beq.n	80030f6 <HAL_GPIO_Init+0x236>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a55      	ldr	r2, [pc, #340]	; (80031f8 <HAL_GPIO_Init+0x338>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d025      	beq.n	80030f2 <HAL_GPIO_Init+0x232>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a54      	ldr	r2, [pc, #336]	; (80031fc <HAL_GPIO_Init+0x33c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01f      	beq.n	80030ee <HAL_GPIO_Init+0x22e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a53      	ldr	r2, [pc, #332]	; (8003200 <HAL_GPIO_Init+0x340>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x22a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_GPIO_Init+0x344>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x226>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_GPIO_Init+0x348>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_GPIO_Init+0x34c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4f      	ldr	r2, [pc, #316]	; (8003210 <HAL_GPIO_Init+0x350>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x21a>
 80030d6:	2309      	movs	r3, #9
 80030d8:	e012      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030da:	230a      	movs	r3, #10
 80030dc:	e010      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030de:	2308      	movs	r3, #8
 80030e0:	e00e      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e00c      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e6:	2306      	movs	r3, #6
 80030e8:	e00a      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ea:	2305      	movs	r3, #5
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ee:	2304      	movs	r3, #4
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fe:	2300      	movs	r3, #0
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003110:	4935      	ldr	r1, [pc, #212]	; (80031e8 <HAL_GPIO_Init+0x328>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003142:	4a34      	ldr	r2, [pc, #208]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_GPIO_Init+0x354>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800316c:	4a29      	ldr	r2, [pc, #164]	; (8003214 <HAL_GPIO_Init+0x354>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003196:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_GPIO_Init+0x354>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <HAL_GPIO_Init+0x354>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	f67f ae84 	bls.w	8002edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40021000 	.word	0x40021000
 8003200:	40021400 	.word	0x40021400
 8003204:	40021800 	.word	0x40021800
 8003208:	40021c00 	.word	0x40021c00
 800320c:	40022000 	.word	0x40022000
 8003210:	40022400 	.word	0x40022400
 8003214:	40013c00 	.word	0x40013c00

08003218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	887b      	ldrh	r3, [r7, #2]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	e001      	b.n	800323a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]
 8003254:	4613      	mov	r3, r2
 8003256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003258:	787b      	ldrb	r3, [r7, #1]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800325e:	887a      	ldrh	r2, [r7, #2]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003264:	e003      	b.n	800326e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003266:	887b      	ldrh	r3, [r7, #2]
 8003268:	041a      	lsls	r2, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	619a      	str	r2, [r3, #24]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d006      	beq.n	80032a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003292:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe fa0c 	bl	80016b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40013c00 	.word	0x40013c00

080032ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e12b      	b.n	8003516 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd fe3c 	bl	8000f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2224      	movs	r2, #36	; 0x24
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800330e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003310:	f001 fb4e 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8003314:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4a81      	ldr	r2, [pc, #516]	; (8003520 <HAL_I2C_Init+0x274>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d807      	bhi.n	8003330 <HAL_I2C_Init+0x84>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a80      	ldr	r2, [pc, #512]	; (8003524 <HAL_I2C_Init+0x278>)
 8003324:	4293      	cmp	r3, r2
 8003326:	bf94      	ite	ls
 8003328:	2301      	movls	r3, #1
 800332a:	2300      	movhi	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e006      	b.n	800333e <HAL_I2C_Init+0x92>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a7d      	ldr	r2, [pc, #500]	; (8003528 <HAL_I2C_Init+0x27c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	bf94      	ite	ls
 8003338:	2301      	movls	r3, #1
 800333a:	2300      	movhi	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0e7      	b.n	8003516 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4a78      	ldr	r2, [pc, #480]	; (800352c <HAL_I2C_Init+0x280>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	0c9b      	lsrs	r3, r3, #18
 8003350:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4a6a      	ldr	r2, [pc, #424]	; (8003520 <HAL_I2C_Init+0x274>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d802      	bhi.n	8003380 <HAL_I2C_Init+0xd4>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3301      	adds	r3, #1
 800337e:	e009      	b.n	8003394 <HAL_I2C_Init+0xe8>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	4a69      	ldr	r2, [pc, #420]	; (8003530 <HAL_I2C_Init+0x284>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	3301      	adds	r3, #1
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	430b      	orrs	r3, r1
 800339a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	495c      	ldr	r1, [pc, #368]	; (8003520 <HAL_I2C_Init+0x274>)
 80033b0:	428b      	cmp	r3, r1
 80033b2:	d819      	bhi.n	80033e8 <HAL_I2C_Init+0x13c>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1e59      	subs	r1, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c2:	1c59      	adds	r1, r3, #1
 80033c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033c8:	400b      	ands	r3, r1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_I2C_Init+0x138>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e59      	subs	r1, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e2:	e051      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 80033e4:	2304      	movs	r3, #4
 80033e6:	e04f      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d111      	bne.n	8003414 <HAL_I2C_Init+0x168>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e58      	subs	r0, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e012      	b.n	800343a <HAL_I2C_Init+0x18e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e58      	subs	r0, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	0099      	lsls	r1, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	fbb0 f3f3 	udiv	r3, r0, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_Init+0x196>
 800343e:	2301      	movs	r3, #1
 8003440:	e022      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10e      	bne.n	8003468 <HAL_I2C_Init+0x1bc>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1e58      	subs	r0, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6859      	ldr	r1, [r3, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	440b      	add	r3, r1
 8003458:	fbb0 f3f3 	udiv	r3, r0, r3
 800345c:	3301      	adds	r3, #1
 800345e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003466:	e00f      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1e58      	subs	r0, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	0099      	lsls	r1, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	fbb0 f3f3 	udiv	r3, r0, r3
 800347e:	3301      	adds	r3, #1
 8003480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	6809      	ldr	r1, [r1, #0]
 800348c:	4313      	orrs	r3, r2
 800348e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6911      	ldr	r1, [r2, #16]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68d2      	ldr	r2, [r2, #12]
 80034c2:	4311      	orrs	r1, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	000186a0 	.word	0x000186a0
 8003524:	001e847f 	.word	0x001e847f
 8003528:	003d08ff 	.word	0x003d08ff
 800352c:	431bde83 	.word	0x431bde83
 8003530:	10624dd3 	.word	0x10624dd3

08003534 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	461a      	mov	r2, r3
 8003540:	460b      	mov	r3, r1
 8003542:	817b      	strh	r3, [r7, #10]
 8003544:	4613      	mov	r3, r2
 8003546:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003548:	f7fe fd6e 	bl	8002028 <HAL_GetTick>
 800354c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b20      	cmp	r3, #32
 8003558:	f040 80e0 	bne.w	800371c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2319      	movs	r3, #25
 8003562:	2201      	movs	r2, #1
 8003564:	4970      	ldr	r1, [pc, #448]	; (8003728 <HAL_I2C_Master_Transmit+0x1f4>)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 fa92 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
 8003574:	e0d3      	b.n	800371e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_I2C_Master_Transmit+0x50>
 8003580:	2302      	movs	r3, #2
 8003582:	e0cc      	b.n	800371e <HAL_I2C_Master_Transmit+0x1ea>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d007      	beq.n	80035aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2221      	movs	r2, #33	; 0x21
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2210      	movs	r2, #16
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	893a      	ldrh	r2, [r7, #8]
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4a50      	ldr	r2, [pc, #320]	; (800372c <HAL_I2C_Master_Transmit+0x1f8>)
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035ec:	8979      	ldrh	r1, [r7, #10]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	6a3a      	ldr	r2, [r7, #32]
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f9ca 	bl	800398c <I2C_MasterRequestWrite>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e08d      	b.n	800371e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003618:	e066      	b.n	80036e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	6a39      	ldr	r1, [r7, #32]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fb0c 	bl	8003c3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	2b04      	cmp	r3, #4
 8003630:	d107      	bne.n	8003642 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003640:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e06b      	b.n	800371e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	781a      	ldrb	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d11b      	bne.n	80036bc <HAL_I2C_Master_Transmit+0x188>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d017      	beq.n	80036bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	6a39      	ldr	r1, [r7, #32]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fafc 	bl	8003cbe <I2C_WaitOnBTFFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d107      	bne.n	80036e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e01a      	b.n	800371e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d194      	bne.n	800361a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e000      	b.n	800371e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	00100002 	.word	0x00100002
 800372c:	ffff0000 	.word	0xffff0000

08003730 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	; 0x28
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	460b      	mov	r3, r1
 800373e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003740:	f7fe fc72 	bl	8002028 <HAL_GetTick>
 8003744:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b20      	cmp	r3, #32
 8003754:	f040 8111 	bne.w	800397a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2319      	movs	r3, #25
 800375e:	2201      	movs	r2, #1
 8003760:	4988      	ldr	r1, [pc, #544]	; (8003984 <HAL_I2C_IsDeviceReady+0x254>)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f994 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800376e:	2302      	movs	r3, #2
 8003770:	e104      	b.n	800397c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_I2C_IsDeviceReady+0x50>
 800377c:	2302      	movs	r3, #2
 800377e:	e0fd      	b.n	800397c <HAL_I2C_IsDeviceReady+0x24c>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d007      	beq.n	80037a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2224      	movs	r2, #36	; 0x24
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a70      	ldr	r2, [pc, #448]	; (8003988 <HAL_I2C_IsDeviceReady+0x258>)
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f952 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003800:	d103      	bne.n	800380a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e0b6      	b.n	800397c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800380e:	897b      	ldrh	r3, [r7, #10]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800381c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800381e:	f7fe fc03 	bl	8002028 <HAL_GetTick>
 8003822:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b02      	cmp	r3, #2
 8003830:	bf0c      	ite	eq
 8003832:	2301      	moveq	r3, #1
 8003834:	2300      	movne	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003848:	bf0c      	ite	eq
 800384a:	2301      	moveq	r3, #1
 800384c:	2300      	movne	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003852:	e025      	b.n	80038a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003854:	f7fe fbe8 	bl	8002028 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d302      	bcc.n	800386a <HAL_I2C_IsDeviceReady+0x13a>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	22a0      	movs	r2, #160	; 0xa0
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b02      	cmp	r3, #2
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2ba0      	cmp	r3, #160	; 0xa0
 80038aa:	d005      	beq.n	80038b8 <HAL_I2C_IsDeviceReady+0x188>
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <HAL_I2C_IsDeviceReady+0x188>
 80038b2:	7dbb      	ldrb	r3, [r7, #22]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0cd      	beq.n	8003854 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d129      	bne.n	8003922 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	2319      	movs	r3, #25
 80038fa:	2201      	movs	r2, #1
 80038fc:	4921      	ldr	r1, [pc, #132]	; (8003984 <HAL_I2C_IsDeviceReady+0x254>)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f8c6 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e036      	b.n	800397c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e02c      	b.n	800397c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003930:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800393a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2319      	movs	r3, #25
 8003942:	2201      	movs	r2, #1
 8003944:	490f      	ldr	r1, [pc, #60]	; (8003984 <HAL_I2C_IsDeviceReady+0x254>)
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f8a2 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e012      	b.n	800397c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	3301      	adds	r3, #1
 800395a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	429a      	cmp	r2, r3
 8003962:	f4ff af32 	bcc.w	80037ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	00100002 	.word	0x00100002
 8003988:	ffff0000 	.word	0xffff0000

0800398c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	460b      	mov	r3, r1
 800399a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d006      	beq.n	80039b6 <I2C_MasterRequestWrite+0x2a>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d003      	beq.n	80039b6 <I2C_MasterRequestWrite+0x2a>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039b4:	d108      	bne.n	80039c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e00b      	b.n	80039e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	2b12      	cmp	r3, #18
 80039ce:	d107      	bne.n	80039e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f84f 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00d      	beq.n	8003a14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a06:	d103      	bne.n	8003a10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e035      	b.n	8003a80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a1c:	d108      	bne.n	8003a30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a1e:	897b      	ldrh	r3, [r7, #10]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a2c:	611a      	str	r2, [r3, #16]
 8003a2e:	e01b      	b.n	8003a68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a30:	897b      	ldrh	r3, [r7, #10]
 8003a32:	11db      	asrs	r3, r3, #7
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f003 0306 	and.w	r3, r3, #6
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f063 030f 	orn	r3, r3, #15
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	490e      	ldr	r1, [pc, #56]	; (8003a88 <I2C_MasterRequestWrite+0xfc>)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f875 	bl	8003b3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e010      	b.n	8003a80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a5e:	897b      	ldrh	r3, [r7, #10]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4907      	ldr	r1, [pc, #28]	; (8003a8c <I2C_MasterRequestWrite+0x100>)
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f865 	bl	8003b3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	00010008 	.word	0x00010008
 8003a8c:	00010002 	.word	0x00010002

08003a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa0:	e025      	b.n	8003aee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d021      	beq.n	8003aee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fe fabd 	bl	8002028 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d116      	bne.n	8003aee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f043 0220 	orr.w	r2, r3, #32
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e023      	b.n	8003b36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10d      	bne.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4013      	ands	r3, r2
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bf0c      	ite	eq
 8003b0a:	2301      	moveq	r3, #1
 8003b0c:	2300      	movne	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	e00c      	b.n	8003b2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	bf0c      	ite	eq
 8003b26:	2301      	moveq	r3, #1
 8003b28:	2300      	movne	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d0b6      	beq.n	8003aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b4c:	e051      	b.n	8003bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5c:	d123      	bne.n	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f043 0204 	orr.w	r2, r3, #4
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e046      	b.n	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d021      	beq.n	8003bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7fe fa3b 	bl	8002028 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d116      	bne.n	8003bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f043 0220 	orr.w	r2, r3, #32
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e020      	b.n	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10c      	bne.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	43da      	mvns	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4013      	ands	r3, r2
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	e00b      	b.n	8003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	43da      	mvns	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4013      	ands	r3, r2
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d18d      	bne.n	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c48:	e02d      	b.n	8003ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f878 	bl	8003d40 <I2C_IsAcknowledgeFailed>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e02d      	b.n	8003cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d021      	beq.n	8003ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c62:	f7fe f9e1 	bl	8002028 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d116      	bne.n	8003ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f043 0220 	orr.w	r2, r3, #32
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e007      	b.n	8003cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b80      	cmp	r3, #128	; 0x80
 8003cb2:	d1ca      	bne.n	8003c4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cca:	e02d      	b.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f837 	bl	8003d40 <I2C_IsAcknowledgeFailed>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e02d      	b.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d021      	beq.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7fe f9a0 	bl	8002028 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d116      	bne.n	8003d28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e007      	b.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d1ca      	bne.n	8003ccc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d56:	d11b      	bne.n	8003d90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	f043 0204 	orr.w	r2, r3, #4
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d129      	bne.n	8003e08 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0210 	bic.w	r2, r2, #16
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d12a      	bne.n	8003e86 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	; 0x24
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	f023 030f 	bic.w	r3, r3, #15
 8003e56:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	89fb      	ldrh	r3, [r7, #14]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	89fa      	ldrh	r2, [r7, #14]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
  }
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e96:	b08f      	sub	sp, #60	; 0x3c
 8003e98:	af0a      	add	r7, sp, #40	; 0x28
 8003e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e10f      	b.n	80040c6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d106      	bne.n	8003ec6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fd ffc7 	bl	8001e54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f002 f8a2 	bl	800602e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	687e      	ldr	r6, [r7, #4]
 8003ef2:	466d      	mov	r5, sp
 8003ef4:	f106 0410 	add.w	r4, r6, #16
 8003ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f04:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f08:	1d33      	adds	r3, r6, #4
 8003f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f0c:	6838      	ldr	r0, [r7, #0]
 8003f0e:	f002 f82d 	bl	8005f6c <USB_CoreInit>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0d0      	b.n	80040c6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f002 f890 	bl	8006050 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	73fb      	strb	r3, [r7, #15]
 8003f34:	e04a      	b.n	8003fcc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	333d      	adds	r3, #61	; 0x3d
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	333c      	adds	r3, #60	; 0x3c
 8003f5a:	7bfa      	ldrb	r2, [r7, #15]
 8003f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	b298      	uxth	r0, r3
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	3344      	adds	r3, #68	; 0x44
 8003f72:	4602      	mov	r2, r0
 8003f74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f76:	7bfa      	ldrb	r2, [r7, #15]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	3340      	adds	r3, #64	; 0x40
 8003f86:	2200      	movs	r2, #0
 8003f88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3348      	adds	r3, #72	; 0x48
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	334c      	adds	r3, #76	; 0x4c
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3354      	adds	r3, #84	; 0x54
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d3af      	bcc.n	8003f36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	e044      	b.n	8004066 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ff2:	7bfa      	ldrb	r2, [r7, #15]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004008:	7bfa      	ldrb	r2, [r7, #15]
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004034:	7bfa      	ldrb	r2, [r7, #15]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	3301      	adds	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	429a      	cmp	r2, r3
 800406e:	d3b5      	bcc.n	8003fdc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	687e      	ldr	r6, [r7, #4]
 8004078:	466d      	mov	r5, sp
 800407a:	f106 0410 	add.w	r4, r6, #16
 800407e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800408a:	e885 0003 	stmia.w	r5, {r0, r1}
 800408e:	1d33      	adds	r3, r6, #4
 8004090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004092:	6838      	ldr	r0, [r7, #0]
 8004094:	f002 f828 	bl	80060e8 <USB_DevInit>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e00d      	b.n	80040c6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 f9f3 	bl	80064aa <USB_DevDisconnect>

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080040d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e267      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d075      	beq.n	80041da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ee:	4b88      	ldr	r3, [pc, #544]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d00c      	beq.n	8004114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fa:	4b85      	ldr	r3, [pc, #532]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004102:	2b08      	cmp	r3, #8
 8004104:	d112      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4b82      	ldr	r3, [pc, #520]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004112:	d10b      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	4b7e      	ldr	r3, [pc, #504]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d05b      	beq.n	80041d8 <HAL_RCC_OscConfig+0x108>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d157      	bne.n	80041d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e242      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d106      	bne.n	8004144 <HAL_RCC_OscConfig+0x74>
 8004136:	4b76      	ldr	r3, [pc, #472]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a75      	ldr	r2, [pc, #468]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x98>
 800414e:	4b70      	ldr	r3, [pc, #448]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a6f      	ldr	r2, [pc, #444]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b6d      	ldr	r3, [pc, #436]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a6c      	ldr	r2, [pc, #432]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004168:	4b69      	ldr	r3, [pc, #420]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a68      	ldr	r2, [pc, #416]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b66      	ldr	r3, [pc, #408]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a65      	ldr	r2, [pc, #404]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fd ff4e 	bl	8002028 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004190:	f7fd ff4a 	bl	8002028 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e207      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b5b      	ldr	r3, [pc, #364]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xc0>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fd ff3a 	bl	8002028 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fd ff36 	bl	8002028 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1f3      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	4b51      	ldr	r3, [pc, #324]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0xe8>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d063      	beq.n	80042ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041e6:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f2:	4b47      	ldr	r3, [pc, #284]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11c      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fe:	4b44      	ldr	r3, [pc, #272]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	4b41      	ldr	r3, [pc, #260]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e1c7      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004222:	4b3b      	ldr	r3, [pc, #236]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4937      	ldr	r1, [pc, #220]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004236:	e03a      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004240:	4b34      	ldr	r3, [pc, #208]	; (8004314 <HAL_RCC_OscConfig+0x244>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd feef 	bl	8002028 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424e:	f7fd feeb 	bl	8002028 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e1a8      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004260:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4925      	ldr	r1, [pc, #148]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_RCC_OscConfig+0x244>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fd fece 	bl	8002028 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004290:	f7fd feca 	bl	8002028 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e187      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a2:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d036      	beq.n	8004328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <HAL_RCC_OscConfig+0x248>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fd feae 	bl	8002028 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fd feaa 	bl	8002028 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e167      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80042e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x200>
 80042ee:	e01b      	b.n	8004328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCC_OscConfig+0x248>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f6:	f7fd fe97 	bl	8002028 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fc:	e00e      	b.n	800431c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042fe:	f7fd fe93 	bl	8002028 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d907      	bls.n	800431c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e150      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
 8004310:	40023800 	.word	0x40023800
 8004314:	42470000 	.word	0x42470000
 8004318:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	4b88      	ldr	r3, [pc, #544]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1ea      	bne.n	80042fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8097 	beq.w	8004464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b81      	ldr	r3, [pc, #516]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	4b7d      	ldr	r3, [pc, #500]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	4a7c      	ldr	r2, [pc, #496]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	; 0x40
 8004356:	4b7a      	ldr	r3, [pc, #488]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b77      	ldr	r3, [pc, #476]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d118      	bne.n	80043a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004372:	4b74      	ldr	r3, [pc, #464]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a73      	ldr	r2, [pc, #460]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437e:	f7fd fe53 	bl	8002028 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004386:	f7fd fe4f 	bl	8002028 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e10c      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004398:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x2ea>
 80043ac:	4b64      	ldr	r3, [pc, #400]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a63      	ldr	r2, [pc, #396]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	e01c      	b.n	80043f4 <HAL_RCC_OscConfig+0x324>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x30c>
 80043c2:	4b5f      	ldr	r3, [pc, #380]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	4a5e      	ldr	r2, [pc, #376]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043c8:	f043 0304 	orr.w	r3, r3, #4
 80043cc:	6713      	str	r3, [r2, #112]	; 0x70
 80043ce:	4b5c      	ldr	r3, [pc, #368]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	4a5b      	ldr	r2, [pc, #364]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6713      	str	r3, [r2, #112]	; 0x70
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0x324>
 80043dc:	4b58      	ldr	r3, [pc, #352]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	4a57      	ldr	r2, [pc, #348]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6713      	str	r3, [r2, #112]	; 0x70
 80043e8:	4b55      	ldr	r3, [pc, #340]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	4a54      	ldr	r2, [pc, #336]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ee:	f023 0304 	bic.w	r3, r3, #4
 80043f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d015      	beq.n	8004428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fd fe14 	bl	8002028 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fd fe10 	bl	8002028 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0cb      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441a:	4b49      	ldr	r3, [pc, #292]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ee      	beq.n	8004404 <HAL_RCC_OscConfig+0x334>
 8004426:	e014      	b.n	8004452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004428:	f7fd fdfe 	bl	8002028 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442e:	e00a      	b.n	8004446 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004430:	f7fd fdfa 	bl	8002028 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0b5      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004446:	4b3e      	ldr	r3, [pc, #248]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1ee      	bne.n	8004430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004452:	7dfb      	ldrb	r3, [r7, #23]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d105      	bne.n	8004464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004458:	4b39      	ldr	r3, [pc, #228]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	4a38      	ldr	r2, [pc, #224]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800445e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004462:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80a1 	beq.w	80045b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800446e:	4b34      	ldr	r3, [pc, #208]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b08      	cmp	r3, #8
 8004478:	d05c      	beq.n	8004534 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d141      	bne.n	8004506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b31      	ldr	r3, [pc, #196]	; (8004548 <HAL_RCC_OscConfig+0x478>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fd fdce 	bl	8002028 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004490:	f7fd fdca 	bl	8002028 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e087      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a2:	4b27      	ldr	r3, [pc, #156]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	019b      	lsls	r3, r3, #6
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	3b01      	subs	r3, #1
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	491b      	ldr	r1, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x478>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044de:	f7fd fda3 	bl	8002028 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fd fd9f 	bl	8002028 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e05c      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x416>
 8004504:	e054      	b.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_RCC_OscConfig+0x478>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd fd8c 	bl	8002028 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004514:	f7fd fd88 	bl	8002028 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e045      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x444>
 8004532:	e03d      	b.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e038      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
 8004540:	40023800 	.word	0x40023800
 8004544:	40007000 	.word	0x40007000
 8004548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_RCC_OscConfig+0x4ec>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d028      	beq.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d121      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d11a      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800457c:	4013      	ands	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004584:	4293      	cmp	r3, r2
 8004586:	d111      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3b01      	subs	r3, #1
 8004596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d107      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800

080045c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0cc      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d4:	4b68      	ldr	r3, [pc, #416]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d90c      	bls.n	80045fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0b8      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004614:	4b59      	ldr	r3, [pc, #356]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4a58      	ldr	r2, [pc, #352]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800461e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800462c:	4b53      	ldr	r3, [pc, #332]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a52      	ldr	r2, [pc, #328]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b50      	ldr	r3, [pc, #320]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	494d      	ldr	r1, [pc, #308]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d044      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d119      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e07f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d003      	beq.n	800467e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467a:	2b03      	cmp	r3, #3
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	4b3f      	ldr	r3, [pc, #252]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e06f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468e:	4b3b      	ldr	r3, [pc, #236]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e067      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b37      	ldr	r3, [pc, #220]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4934      	ldr	r1, [pc, #208]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b0:	f7fd fcba 	bl	8002028 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fd fcb6 	bl	8002028 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e04f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b2b      	ldr	r3, [pc, #172]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d20c      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e032      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4916      	ldr	r1, [pc, #88]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	490e      	ldr	r1, [pc, #56]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004746:	f000 f821 	bl	800478c <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490a      	ldr	r1, [pc, #40]	; (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fc1a 	bl	8001fa0 <HAL_InitTick>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023c00 	.word	0x40023c00
 800477c:	40023800 	.word	0x40023800
 8004780:	08006f64 	.word	0x08006f64
 8004784:	20000008 	.word	0x20000008
 8004788:	2000000c 	.word	0x2000000c

0800478c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800478c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004790:	b094      	sub	sp, #80	; 0x50
 8004792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	647b      	str	r3, [r7, #68]	; 0x44
 8004798:	2300      	movs	r3, #0
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479c:	2300      	movs	r3, #0
 800479e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a4:	4b79      	ldr	r3, [pc, #484]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d00d      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x40>
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	f200 80e1 	bhi.w	8004978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x34>
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047be:	e0db      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b73      	ldr	r3, [pc, #460]	; (8004990 <HAL_RCC_GetSysClockFreq+0x204>)
 80047c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047c4:	e0db      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047c6:	4b73      	ldr	r3, [pc, #460]	; (8004994 <HAL_RCC_GetSysClockFreq+0x208>)
 80047c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ca:	e0d8      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047cc:	4b6f      	ldr	r3, [pc, #444]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d6:	4b6d      	ldr	r3, [pc, #436]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d063      	beq.n	80048aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e2:	4b6a      	ldr	r3, [pc, #424]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	2200      	movs	r2, #0
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	633b      	str	r3, [r7, #48]	; 0x30
 80047f6:	2300      	movs	r3, #0
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
 80047fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047fe:	4622      	mov	r2, r4
 8004800:	462b      	mov	r3, r5
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	0159      	lsls	r1, r3, #5
 800480c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004810:	0150      	lsls	r0, r2, #5
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4621      	mov	r1, r4
 8004818:	1a51      	subs	r1, r2, r1
 800481a:	6139      	str	r1, [r7, #16]
 800481c:	4629      	mov	r1, r5
 800481e:	eb63 0301 	sbc.w	r3, r3, r1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004830:	4659      	mov	r1, fp
 8004832:	018b      	lsls	r3, r1, #6
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800483a:	4651      	mov	r1, sl
 800483c:	018a      	lsls	r2, r1, #6
 800483e:	4651      	mov	r1, sl
 8004840:	ebb2 0801 	subs.w	r8, r2, r1
 8004844:	4659      	mov	r1, fp
 8004846:	eb63 0901 	sbc.w	r9, r3, r1
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800485a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485e:	4690      	mov	r8, r2
 8004860:	4699      	mov	r9, r3
 8004862:	4623      	mov	r3, r4
 8004864:	eb18 0303 	adds.w	r3, r8, r3
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	462b      	mov	r3, r5
 800486c:	eb49 0303 	adc.w	r3, r9, r3
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800487e:	4629      	mov	r1, r5
 8004880:	024b      	lsls	r3, r1, #9
 8004882:	4621      	mov	r1, r4
 8004884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004888:	4621      	mov	r1, r4
 800488a:	024a      	lsls	r2, r1, #9
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004892:	2200      	movs	r2, #0
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
 8004896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800489c:	f7fb fec4 	bl	8000628 <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4613      	mov	r3, r2
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a8:	e058      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048aa:	4b38      	ldr	r3, [pc, #224]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	099b      	lsrs	r3, r3, #6
 80048b0:	2200      	movs	r2, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	4611      	mov	r1, r2
 80048b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048ba:	623b      	str	r3, [r7, #32]
 80048bc:	2300      	movs	r3, #0
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
 80048c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	f04f 0000 	mov.w	r0, #0
 80048cc:	f04f 0100 	mov.w	r1, #0
 80048d0:	0159      	lsls	r1, r3, #5
 80048d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d6:	0150      	lsls	r0, r2, #5
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4641      	mov	r1, r8
 80048de:	ebb2 0a01 	subs.w	sl, r2, r1
 80048e2:	4649      	mov	r1, r9
 80048e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004900:	eb63 050b 	sbc.w	r5, r3, fp
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	00eb      	lsls	r3, r5, #3
 800490e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004912:	00e2      	lsls	r2, r4, #3
 8004914:	4614      	mov	r4, r2
 8004916:	461d      	mov	r5, r3
 8004918:	4643      	mov	r3, r8
 800491a:	18e3      	adds	r3, r4, r3
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	464b      	mov	r3, r9
 8004920:	eb45 0303 	adc.w	r3, r5, r3
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004932:	4629      	mov	r1, r5
 8004934:	028b      	lsls	r3, r1, #10
 8004936:	4621      	mov	r1, r4
 8004938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800493c:	4621      	mov	r1, r4
 800493e:	028a      	lsls	r2, r1, #10
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	2200      	movs	r2, #0
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	61fa      	str	r2, [r7, #28]
 800494c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004950:	f7fb fe6a 	bl	8000628 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	3301      	adds	r3, #1
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800496c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800496e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004976:	e002      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_RCC_GetSysClockFreq+0x204>)
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800497c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800497e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004980:	4618      	mov	r0, r3
 8004982:	3750      	adds	r7, #80	; 0x50
 8004984:	46bd      	mov	sp, r7
 8004986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800
 8004990:	00f42400 	.word	0x00f42400
 8004994:	007a1200 	.word	0x007a1200

08004998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <HAL_RCC_GetHCLKFreq+0x14>)
 800499e:	681b      	ldr	r3, [r3, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	20000008 	.word	0x20000008

080049b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049b4:	f7ff fff0 	bl	8004998 <HAL_RCC_GetHCLKFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	0a9b      	lsrs	r3, r3, #10
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	4903      	ldr	r1, [pc, #12]	; (80049d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40023800 	.word	0x40023800
 80049d4:	08006f74 	.word	0x08006f74

080049d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049dc:	f7ff ffdc 	bl	8004998 <HAL_RCC_GetHCLKFreq>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	0b5b      	lsrs	r3, r3, #13
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	4903      	ldr	r1, [pc, #12]	; (80049fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ee:	5ccb      	ldrb	r3, [r1, r3]
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40023800 	.word	0x40023800
 80049fc:	08006f74 	.word	0x08006f74

08004a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10b      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d075      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a34:	4b91      	ldr	r3, [pc, #580]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a3a:	f7fd faf5 	bl	8002028 <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a42:	f7fd faf1 	bl	8002028 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e189      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a54:	4b8a      	ldr	r3, [pc, #552]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f0      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	019a      	lsls	r2, r3, #6
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	071b      	lsls	r3, r3, #28
 8004a78:	4981      	ldr	r1, [pc, #516]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01f      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a8c:	4b7c      	ldr	r3, [pc, #496]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a92:	0f1b      	lsrs	r3, r3, #28
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	019a      	lsls	r2, r3, #6
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	071b      	lsls	r3, r3, #28
 8004aac:	4974      	ldr	r1, [pc, #464]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ab4:	4b72      	ldr	r3, [pc, #456]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aba:	f023 021f 	bic.w	r2, r3, #31
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	496e      	ldr	r1, [pc, #440]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00d      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	019a      	lsls	r2, r3, #6
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	061b      	lsls	r3, r3, #24
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	071b      	lsls	r3, r3, #28
 8004aec:	4964      	ldr	r1, [pc, #400]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004af4:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004afa:	f7fd fa95 	bl	8002028 <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b02:	f7fd fa91 	bl	8002028 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e129      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b14:	4b5a      	ldr	r3, [pc, #360]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d079      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b38:	4b52      	ldr	r3, [pc, #328]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b3e:	f7fd fa73 	bl	8002028 <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004b46:	f7fd fa6f 	bl	8002028 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e107      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b58:	4b49      	ldr	r3, [pc, #292]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b64:	d0ef      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d020      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b72:	4b43      	ldr	r3, [pc, #268]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	0f1b      	lsrs	r3, r3, #28
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	019a      	lsls	r2, r3, #6
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	493b      	ldr	r1, [pc, #236]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b9a:	4b39      	ldr	r3, [pc, #228]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	4934      	ldr	r1, [pc, #208]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01e      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bc0:	4b2f      	ldr	r3, [pc, #188]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	0e1b      	lsrs	r3, r3, #24
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	019a      	lsls	r2, r3, #6
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	061b      	lsls	r3, r3, #24
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	071b      	lsls	r3, r3, #28
 8004be0:	4927      	ldr	r1, [pc, #156]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004be8:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	4922      	ldr	r1, [pc, #136]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bfe:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c04:	f7fd fa10 	bl	8002028 <HAL_GetTick>
 8004c08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004c0c:	f7fd fa0c 	bl	8002028 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e0a4      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c1e:	4b18      	ldr	r3, [pc, #96]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2a:	d1ef      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 808b 	beq.w	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4a0f      	ldr	r2, [pc, #60]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a0b      	ldr	r2, [pc, #44]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c62:	f7fd f9e1 	bl	8002028 <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c68:	e010      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c6a:	f7fd f9dd 	bl	8002028 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d909      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e075      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004c7c:	42470068 	.word	0x42470068
 8004c80:	40023800 	.word	0x40023800
 8004c84:	42470070 	.word	0x42470070
 8004c88:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c8c:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0e8      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c98:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d02f      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d028      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb6:	4b2f      	ldr	r3, [pc, #188]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cc0:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc6:	4b2c      	ldr	r3, [pc, #176]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ccc:	4a29      	ldr	r2, [pc, #164]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cd2:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d114      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fd f9a3 	bl	8002028 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fd f99f 	bl	8002028 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e035      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0ee      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d14:	d10d      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004d16:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2a:	4912      	ldr	r1, [pc, #72]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]
 8004d30:	e005      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004d32:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4a0f      	ldr	r2, [pc, #60]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d3c:	6093      	str	r3, [r2, #8]
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4a:	490a      	ldr	r1, [pc, #40]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d64:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40007000 	.word	0x40007000
 8004d74:	40023800 	.word	0x40023800
 8004d78:	42470e40 	.word	0x42470e40
 8004d7c:	424711e0 	.word	0x424711e0

08004d80 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e066      	b.n	8004e64 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	7f5b      	ldrb	r3, [r3, #29]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d105      	bne.n	8004dac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fc fe62 	bl	8001a70 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	22ca      	movs	r2, #202	; 0xca
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2253      	movs	r2, #83	; 0x53
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fa45 	bl	8005252 <RTC_EnterInitMode>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d12c      	bne.n	8004e2c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6899      	ldr	r1, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	68d2      	ldr	r2, [r2, #12]
 8004e0c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6919      	ldr	r1, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	041a      	lsls	r2, r3, #16
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa4c 	bl	80052c0 <RTC_ExitInitMode>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d113      	bne.n	8004e5a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	22ff      	movs	r2, #255	; 0xff
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	7f1b      	ldrb	r3, [r3, #28]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_RTC_SetTime+0x1c>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e087      	b.n	8004f98 <HAL_RTC_SetTime+0x12c>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2202      	movs	r2, #2
 8004e92:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d126      	bne.n	8004ee8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fa29 	bl	800530a <RTC_ByteToBcd2>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fa22 	bl	800530a <RTC_ByteToBcd2>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004eca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	789b      	ldrb	r3, [r3, #2]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fa1a 	bl	800530a <RTC_ByteToBcd2>
 8004ed6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ed8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	78db      	ldrb	r3, [r3, #3]
 8004ee0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e018      	b.n	8004f1a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f08:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004f0e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	78db      	ldrb	r3, [r3, #3]
 8004f14:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	22ca      	movs	r2, #202	; 0xca
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2253      	movs	r2, #83	; 0x53
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f991 	bl	8005252 <RTC_EnterInitMode>
 8004f30:	4603      	mov	r3, r0
 8004f32:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d120      	bne.n	8004f7c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004f44:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f48:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6899      	ldr	r1, [r3, #8]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f9a4 	bl	80052c0 <RTC_ExitInitMode>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	22ff      	movs	r2, #255	; 0xff
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	771a      	strb	r2, [r3, #28]

  return status;
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd90      	pop	{r4, r7, pc}

08004fa0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004fd2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005000:	b2da      	uxtb	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	0d9b      	lsrs	r3, r3, #22
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	b2da      	uxtb	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d11a      	bne.n	8005052 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f000 f98f 	bl	8005344 <RTC_Bcd2ToByte>
 8005026:	4603      	mov	r3, r0
 8005028:	461a      	mov	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	785b      	ldrb	r3, [r3, #1]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f986 	bl	8005344 <RTC_Bcd2ToByte>
 8005038:	4603      	mov	r3, r0
 800503a:	461a      	mov	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	789b      	ldrb	r3, [r3, #2]
 8005044:	4618      	mov	r0, r3
 8005046:	f000 f97d 	bl	8005344 <RTC_Bcd2ToByte>
 800504a:	4603      	mov	r3, r0
 800504c:	461a      	mov	r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	7f1b      	ldrb	r3, [r3, #28]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_RTC_SetDate+0x1c>
 8005074:	2302      	movs	r3, #2
 8005076:	e071      	b.n	800515c <HAL_RTC_SetDate+0x100>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2202      	movs	r2, #2
 8005082:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10e      	bne.n	80050a8 <HAL_RTC_SetDate+0x4c>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	f023 0310 	bic.w	r3, r3, #16
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	330a      	adds	r3, #10
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d11c      	bne.n	80050e8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	78db      	ldrb	r3, [r3, #3]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f929 	bl	800530a <RTC_ByteToBcd2>
 80050b8:	4603      	mov	r3, r0
 80050ba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f922 	bl	800530a <RTC_ByteToBcd2>
 80050c6:	4603      	mov	r3, r0
 80050c8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80050ca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	789b      	ldrb	r3, [r3, #2]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 f91a 	bl	800530a <RTC_ByteToBcd2>
 80050d6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80050d8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e00e      	b.n	8005106 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	78db      	ldrb	r3, [r3, #3]
 80050ec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80050f4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80050fa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	22ca      	movs	r2, #202	; 0xca
 800510c:	625a      	str	r2, [r3, #36]	; 0x24
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2253      	movs	r2, #83	; 0x53
 8005114:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f89b 	bl	8005252 <RTC_EnterInitMode>
 800511c:	4603      	mov	r3, r0
 800511e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10c      	bne.n	8005140 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005130:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005134:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f8c2 	bl	80052c0 <RTC_ExitInitMode>
 800513c:	4603      	mov	r3, r0
 800513e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005140:	7cfb      	ldrb	r3, [r7, #19]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	22ff      	movs	r2, #255	; 0xff
 8005152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	771a      	strb	r2, [r3, #28]

  return status;
 800515a:	7cfb      	ldrb	r3, [r7, #19]
}
 800515c:	4618      	mov	r0, r3
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	bd90      	pop	{r4, r7, pc}

08005164 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800517e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005182:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	0c1b      	lsrs	r3, r3, #16
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	0a1b      	lsrs	r3, r3, #8
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	0b5b      	lsrs	r3, r3, #13
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d11a      	bne.n	80051f8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	78db      	ldrb	r3, [r3, #3]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 f8bc 	bl	8005344 <RTC_Bcd2ToByte>
 80051cc:	4603      	mov	r3, r0
 80051ce:	461a      	mov	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 f8b3 	bl	8005344 <RTC_Bcd2ToByte>
 80051de:	4603      	mov	r3, r0
 80051e0:	461a      	mov	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	789b      	ldrb	r3, [r3, #2]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 f8aa 	bl	8005344 <RTC_Bcd2ToByte>
 80051f0:	4603      	mov	r3, r0
 80051f2:	461a      	mov	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800521c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800521e:	f7fc ff03 	bl	8002028 <HAL_GetTick>
 8005222:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005224:	e009      	b.n	800523a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005226:	f7fc feff 	bl	8002028 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005234:	d901      	bls.n	800523a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e007      	b.n	800524a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0ee      	beq.n	8005226 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d122      	bne.n	80052b6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800527e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005280:	f7fc fed2 	bl	8002028 <HAL_GetTick>
 8005284:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005286:	e00c      	b.n	80052a2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005288:	f7fc fece 	bl	8002028 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005296:	d904      	bls.n	80052a2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2204      	movs	r2, #4
 800529c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <RTC_EnterInitMode+0x64>
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d1e8      	bne.n	8005288 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052da:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff ff89 	bl	8005202 <HAL_RTC_WaitForSynchro>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2204      	movs	r2, #4
 80052fa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005300:	7bfb      	ldrb	r3, [r7, #15]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	4603      	mov	r3, r0
 8005312:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005318:	e005      	b.n	8005326 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	3301      	adds	r3, #1
 800531e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	3b0a      	subs	r3, #10
 8005324:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	2b09      	cmp	r3, #9
 800532a:	d8f6      	bhi.n	800531a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	b2da      	uxtb	r2, r3
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	4313      	orrs	r3, r2
 8005336:	b2db      	uxtb	r3, r3
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	b2db      	uxtb	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	0092      	lsls	r2, r2, #2
 800535c:	4413      	add	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	b2da      	uxtb	r2, r3
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	4413      	add	r3, r2
 800536e:	b2db      	uxtb	r3, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e041      	b.n	8005412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fc fc94 	bl	8001cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f000 f95e 	bl	800567c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d001      	beq.n	8005434 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e046      	b.n	80054c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a23      	ldr	r2, [pc, #140]	; (80054d0 <HAL_TIM_Base_Start+0xb4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_TIM_Base_Start+0x70>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544e:	d01d      	beq.n	800548c <HAL_TIM_Base_Start+0x70>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <HAL_TIM_Base_Start+0xb8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_TIM_Base_Start+0x70>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <HAL_TIM_Base_Start+0xbc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_TIM_Base_Start+0x70>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1c      	ldr	r2, [pc, #112]	; (80054dc <HAL_TIM_Base_Start+0xc0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_TIM_Base_Start+0x70>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <HAL_TIM_Base_Start+0xc4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_TIM_Base_Start+0x70>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a19      	ldr	r2, [pc, #100]	; (80054e4 <HAL_TIM_Base_Start+0xc8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_TIM_Base_Start+0x70>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a18      	ldr	r2, [pc, #96]	; (80054e8 <HAL_TIM_Base_Start+0xcc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d111      	bne.n	80054b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b06      	cmp	r3, #6
 800549c:	d010      	beq.n	80054c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ae:	e007      	b.n	80054c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40010400 	.word	0x40010400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40001800 	.word	0x40001800

080054ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_TIM_ConfigClockSource+0x1c>
 8005504:	2302      	movs	r3, #2
 8005506:	e0b4      	b.n	8005672 <HAL_TIM_ConfigClockSource+0x186>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800552e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005540:	d03e      	beq.n	80055c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005546:	f200 8087 	bhi.w	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 800554a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554e:	f000 8086 	beq.w	800565e <HAL_TIM_ConfigClockSource+0x172>
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	d87f      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005558:	2b70      	cmp	r3, #112	; 0x70
 800555a:	d01a      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0xa6>
 800555c:	2b70      	cmp	r3, #112	; 0x70
 800555e:	d87b      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b60      	cmp	r3, #96	; 0x60
 8005562:	d050      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x11a>
 8005564:	2b60      	cmp	r3, #96	; 0x60
 8005566:	d877      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b50      	cmp	r3, #80	; 0x50
 800556a:	d03c      	beq.n	80055e6 <HAL_TIM_ConfigClockSource+0xfa>
 800556c:	2b50      	cmp	r3, #80	; 0x50
 800556e:	d873      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d058      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0x13a>
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d86f      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b30      	cmp	r3, #48	; 0x30
 800557a:	d064      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15a>
 800557c:	2b30      	cmp	r3, #48	; 0x30
 800557e:	d86b      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b20      	cmp	r3, #32
 8005582:	d060      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15a>
 8005584:	2b20      	cmp	r3, #32
 8005586:	d867      	bhi.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d05c      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15a>
 800558c:	2b10      	cmp	r3, #16
 800558e:	d05a      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x15a>
 8005590:	e062      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6899      	ldr	r1, [r3, #8]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f000 f985 	bl	80058b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	609a      	str	r2, [r3, #8]
      break;
 80055be:	e04f      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	6899      	ldr	r1, [r3, #8]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f000 f96e 	bl	80058b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055e2:	609a      	str	r2, [r3, #8]
      break;
 80055e4:	e03c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6859      	ldr	r1, [r3, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	461a      	mov	r2, r3
 80055f4:	f000 f8e2 	bl	80057bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2150      	movs	r1, #80	; 0x50
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f93b 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 8005604:	e02c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6859      	ldr	r1, [r3, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	461a      	mov	r2, r3
 8005614:	f000 f901 	bl	800581a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2160      	movs	r1, #96	; 0x60
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f92b 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 8005624:	e01c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6859      	ldr	r1, [r3, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	461a      	mov	r2, r3
 8005634:	f000 f8c2 	bl	80057bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2140      	movs	r1, #64	; 0x40
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f91b 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 8005644:	e00c      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f000 f912 	bl	800587a <TIM_ITRx_SetConfig>
      break;
 8005656:	e003      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
      break;
 800565c:	e000      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800565e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a40      	ldr	r2, [pc, #256]	; (8005790 <TIM_Base_SetConfig+0x114>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3d      	ldr	r2, [pc, #244]	; (8005794 <TIM_Base_SetConfig+0x118>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3c      	ldr	r2, [pc, #240]	; (8005798 <TIM_Base_SetConfig+0x11c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3b      	ldr	r2, [pc, #236]	; (800579c <TIM_Base_SetConfig+0x120>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a3a      	ldr	r2, [pc, #232]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2f      	ldr	r2, [pc, #188]	; (8005790 <TIM_Base_SetConfig+0x114>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d02b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056dc:	d027      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <TIM_Base_SetConfig+0x118>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d023      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <TIM_Base_SetConfig+0x11c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01f      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2a      	ldr	r2, [pc, #168]	; (800579c <TIM_Base_SetConfig+0x120>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a29      	ldr	r2, [pc, #164]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d017      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <TIM_Base_SetConfig+0x128>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a27      	ldr	r2, [pc, #156]	; (80057a8 <TIM_Base_SetConfig+0x12c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00f      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a26      	ldr	r2, [pc, #152]	; (80057ac <TIM_Base_SetConfig+0x130>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a25      	ldr	r2, [pc, #148]	; (80057b0 <TIM_Base_SetConfig+0x134>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a24      	ldr	r2, [pc, #144]	; (80057b4 <TIM_Base_SetConfig+0x138>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a23      	ldr	r2, [pc, #140]	; (80057b8 <TIM_Base_SetConfig+0x13c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d108      	bne.n	8005740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <TIM_Base_SetConfig+0x114>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0xf8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d103      	bne.n	800577c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	615a      	str	r2, [r3, #20]
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40010000 	.word	0x40010000
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40010400 	.word	0x40010400
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40014400 	.word	0x40014400
 80057ac:	40014800 	.word	0x40014800
 80057b0:	40001800 	.word	0x40001800
 80057b4:	40001c00 	.word	0x40001c00
 80057b8:	40002000 	.word	0x40002000

080057bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f023 0201 	bic.w	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f023 030a 	bic.w	r3, r3, #10
 80057f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581a:	b480      	push	{r7}
 800581c:	b087      	sub	sp, #28
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f023 0210 	bic.w	r2, r3, #16
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	031b      	lsls	r3, r3, #12
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005856:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	f043 0307 	orr.w	r3, r3, #7
 800589c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	609a      	str	r2, [r3, #8]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	021a      	lsls	r2, r3, #8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	609a      	str	r2, [r3, #8]
}
 80058e4:	bf00      	nop
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005904:	2302      	movs	r3, #2
 8005906:	e05a      	b.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a21      	ldr	r2, [pc, #132]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d022      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005954:	d01d      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1d      	ldr	r2, [pc, #116]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d018      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00e      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a18      	ldr	r2, [pc, #96]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d009      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a17      	ldr	r2, [pc, #92]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d10c      	bne.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	40000c00 	.word	0x40000c00
 80059dc:	40010400 	.word	0x40010400
 80059e0:	40014000 	.word	0x40014000
 80059e4:	40001800 	.word	0x40001800

080059e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e03f      	b.n	8005a7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fc f9aa 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2224      	movs	r2, #36	; 0x24
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f829 	bl	8005a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a88:	b0c0      	sub	sp, #256	; 0x100
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa0:	68d9      	ldr	r1, [r3, #12]
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	ea40 0301 	orr.w	r3, r0, r1
 8005aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005adc:	f021 010c 	bic.w	r1, r1, #12
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005aea:	430b      	orrs	r3, r1
 8005aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	6999      	ldr	r1, [r3, #24]
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	ea40 0301 	orr.w	r3, r0, r1
 8005b0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b8f      	ldr	r3, [pc, #572]	; (8005d50 <UART_SetConfig+0x2cc>)
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d005      	beq.n	8005b24 <UART_SetConfig+0xa0>
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b8d      	ldr	r3, [pc, #564]	; (8005d54 <UART_SetConfig+0x2d0>)
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d104      	bne.n	8005b2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b24:	f7fe ff58 	bl	80049d8 <HAL_RCC_GetPCLK2Freq>
 8005b28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b2c:	e003      	b.n	8005b36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b2e:	f7fe ff3f 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8005b32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b40:	f040 810c 	bne.w	8005d5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b56:	4622      	mov	r2, r4
 8005b58:	462b      	mov	r3, r5
 8005b5a:	1891      	adds	r1, r2, r2
 8005b5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b5e:	415b      	adcs	r3, r3
 8005b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b66:	4621      	mov	r1, r4
 8005b68:	eb12 0801 	adds.w	r8, r2, r1
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	eb43 0901 	adc.w	r9, r3, r1
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b86:	4690      	mov	r8, r2
 8005b88:	4699      	mov	r9, r3
 8005b8a:	4623      	mov	r3, r4
 8005b8c:	eb18 0303 	adds.w	r3, r8, r3
 8005b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b94:	462b      	mov	r3, r5
 8005b96:	eb49 0303 	adc.w	r3, r9, r3
 8005b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005baa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	18db      	adds	r3, r3, r3
 8005bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8005bb8:	4613      	mov	r3, r2
 8005bba:	eb42 0303 	adc.w	r3, r2, r3
 8005bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bc8:	f7fa fd2e 	bl	8000628 <__aeabi_uldivmod>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4b61      	ldr	r3, [pc, #388]	; (8005d58 <UART_SetConfig+0x2d4>)
 8005bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	011c      	lsls	r4, r3, #4
 8005bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005be4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005be8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bec:	4642      	mov	r2, r8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	1891      	adds	r1, r2, r2
 8005bf2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bf4:	415b      	adcs	r3, r3
 8005bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	eb12 0a01 	adds.w	sl, r2, r1
 8005c02:	4649      	mov	r1, r9
 8005c04:	eb43 0b01 	adc.w	fp, r3, r1
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c1c:	4692      	mov	sl, r2
 8005c1e:	469b      	mov	fp, r3
 8005c20:	4643      	mov	r3, r8
 8005c22:	eb1a 0303 	adds.w	r3, sl, r3
 8005c26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	eb4b 0303 	adc.w	r3, fp, r3
 8005c30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	18db      	adds	r3, r3, r3
 8005c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c4e:	4613      	mov	r3, r2
 8005c50:	eb42 0303 	adc.w	r3, r2, r3
 8005c54:	647b      	str	r3, [r7, #68]	; 0x44
 8005c56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c5e:	f7fa fce3 	bl	8000628 <__aeabi_uldivmod>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	4b3b      	ldr	r3, [pc, #236]	; (8005d58 <UART_SetConfig+0x2d4>)
 8005c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	2264      	movs	r2, #100	; 0x64
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
 8005c76:	1acb      	subs	r3, r1, r3
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c7e:	4b36      	ldr	r3, [pc, #216]	; (8005d58 <UART_SetConfig+0x2d4>)
 8005c80:	fba3 2302 	umull	r2, r3, r3, r2
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c8c:	441c      	add	r4, r3
 8005c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	1891      	adds	r1, r2, r2
 8005ca6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ca8:	415b      	adcs	r3, r3
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cb0:	4641      	mov	r1, r8
 8005cb2:	1851      	adds	r1, r2, r1
 8005cb4:	6339      	str	r1, [r7, #48]	; 0x30
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	414b      	adcs	r3, r1
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cc8:	4659      	mov	r1, fp
 8005cca:	00cb      	lsls	r3, r1, #3
 8005ccc:	4651      	mov	r1, sl
 8005cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd2:	4651      	mov	r1, sl
 8005cd4:	00ca      	lsls	r2, r1, #3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4642      	mov	r2, r8
 8005cde:	189b      	adds	r3, r3, r2
 8005ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	460a      	mov	r2, r1
 8005ce8:	eb42 0303 	adc.w	r3, r2, r3
 8005cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d04:	460b      	mov	r3, r1
 8005d06:	18db      	adds	r3, r3, r3
 8005d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	eb42 0303 	adc.w	r3, r2, r3
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d1a:	f7fa fc85 	bl	8000628 <__aeabi_uldivmod>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4b0d      	ldr	r3, [pc, #52]	; (8005d58 <UART_SetConfig+0x2d4>)
 8005d24:	fba3 1302 	umull	r1, r3, r3, r2
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	2164      	movs	r1, #100	; 0x64
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	3332      	adds	r3, #50	; 0x32
 8005d36:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <UART_SetConfig+0x2d4>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	f003 0207 	and.w	r2, r3, #7
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4422      	add	r2, r4
 8005d4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d4c:	e106      	b.n	8005f5c <UART_SetConfig+0x4d8>
 8005d4e:	bf00      	nop
 8005d50:	40011000 	.word	0x40011000
 8005d54:	40011400 	.word	0x40011400
 8005d58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d6e:	4642      	mov	r2, r8
 8005d70:	464b      	mov	r3, r9
 8005d72:	1891      	adds	r1, r2, r2
 8005d74:	6239      	str	r1, [r7, #32]
 8005d76:	415b      	adcs	r3, r3
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d7e:	4641      	mov	r1, r8
 8005d80:	1854      	adds	r4, r2, r1
 8005d82:	4649      	mov	r1, r9
 8005d84:	eb43 0501 	adc.w	r5, r3, r1
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	00eb      	lsls	r3, r5, #3
 8005d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d96:	00e2      	lsls	r2, r4, #3
 8005d98:	4614      	mov	r4, r2
 8005d9a:	461d      	mov	r5, r3
 8005d9c:	4643      	mov	r3, r8
 8005d9e:	18e3      	adds	r3, r4, r3
 8005da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005da4:	464b      	mov	r3, r9
 8005da6:	eb45 0303 	adc.w	r3, r5, r3
 8005daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	f04f 0300 	mov.w	r3, #0
 8005dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dca:	4629      	mov	r1, r5
 8005dcc:	008b      	lsls	r3, r1, #2
 8005dce:	4621      	mov	r1, r4
 8005dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	008a      	lsls	r2, r1, #2
 8005dd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ddc:	f7fa fc24 	bl	8000628 <__aeabi_uldivmod>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4b60      	ldr	r3, [pc, #384]	; (8005f68 <UART_SetConfig+0x4e4>)
 8005de6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	011c      	lsls	r4, r3, #4
 8005dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005df8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005dfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e00:	4642      	mov	r2, r8
 8005e02:	464b      	mov	r3, r9
 8005e04:	1891      	adds	r1, r2, r2
 8005e06:	61b9      	str	r1, [r7, #24]
 8005e08:	415b      	adcs	r3, r3
 8005e0a:	61fb      	str	r3, [r7, #28]
 8005e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e10:	4641      	mov	r1, r8
 8005e12:	1851      	adds	r1, r2, r1
 8005e14:	6139      	str	r1, [r7, #16]
 8005e16:	4649      	mov	r1, r9
 8005e18:	414b      	adcs	r3, r1
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e28:	4659      	mov	r1, fp
 8005e2a:	00cb      	lsls	r3, r1, #3
 8005e2c:	4651      	mov	r1, sl
 8005e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e32:	4651      	mov	r1, sl
 8005e34:	00ca      	lsls	r2, r1, #3
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	189b      	adds	r3, r3, r2
 8005e40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e44:	464b      	mov	r3, r9
 8005e46:	460a      	mov	r2, r1
 8005e48:	eb42 0303 	adc.w	r3, r2, r3
 8005e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e5c:	f04f 0200 	mov.w	r2, #0
 8005e60:	f04f 0300 	mov.w	r3, #0
 8005e64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e68:	4649      	mov	r1, r9
 8005e6a:	008b      	lsls	r3, r1, #2
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e72:	4641      	mov	r1, r8
 8005e74:	008a      	lsls	r2, r1, #2
 8005e76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e7a:	f7fa fbd5 	bl	8000628 <__aeabi_uldivmod>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	4b38      	ldr	r3, [pc, #224]	; (8005f68 <UART_SetConfig+0x4e4>)
 8005e86:	fba3 2301 	umull	r2, r3, r3, r1
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	2264      	movs	r2, #100	; 0x64
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
 8005e92:	1acb      	subs	r3, r1, r3
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	3332      	adds	r3, #50	; 0x32
 8005e98:	4a33      	ldr	r2, [pc, #204]	; (8005f68 <UART_SetConfig+0x4e4>)
 8005e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea4:	441c      	add	r4, r3
 8005ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eaa:	2200      	movs	r2, #0
 8005eac:	673b      	str	r3, [r7, #112]	; 0x70
 8005eae:	677a      	str	r2, [r7, #116]	; 0x74
 8005eb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	1891      	adds	r1, r2, r2
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	415b      	adcs	r3, r3
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ec4:	4641      	mov	r1, r8
 8005ec6:	1851      	adds	r1, r2, r1
 8005ec8:	6039      	str	r1, [r7, #0]
 8005eca:	4649      	mov	r1, r9
 8005ecc:	414b      	adcs	r3, r1
 8005ece:	607b      	str	r3, [r7, #4]
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005edc:	4659      	mov	r1, fp
 8005ede:	00cb      	lsls	r3, r1, #3
 8005ee0:	4651      	mov	r1, sl
 8005ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee6:	4651      	mov	r1, sl
 8005ee8:	00ca      	lsls	r2, r1, #3
 8005eea:	4610      	mov	r0, r2
 8005eec:	4619      	mov	r1, r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	189b      	adds	r3, r3, r2
 8005ef4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	460a      	mov	r2, r1
 8005efa:	eb42 0303 	adc.w	r3, r2, r3
 8005efe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	663b      	str	r3, [r7, #96]	; 0x60
 8005f0a:	667a      	str	r2, [r7, #100]	; 0x64
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f18:	4649      	mov	r1, r9
 8005f1a:	008b      	lsls	r3, r1, #2
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f22:	4641      	mov	r1, r8
 8005f24:	008a      	lsls	r2, r1, #2
 8005f26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f2a:	f7fa fb7d 	bl	8000628 <__aeabi_uldivmod>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <UART_SetConfig+0x4e4>)
 8005f34:	fba3 1302 	umull	r1, r3, r3, r2
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	2164      	movs	r1, #100	; 0x64
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	3332      	adds	r3, #50	; 0x32
 8005f46:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <UART_SetConfig+0x4e4>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	f003 020f 	and.w	r2, r3, #15
 8005f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4422      	add	r2, r4
 8005f5a:	609a      	str	r2, [r3, #8]
}
 8005f5c:	bf00      	nop
 8005f5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f62:	46bd      	mov	sp, r7
 8005f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f68:	51eb851f 	.word	0x51eb851f

08005f6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	f107 001c 	add.w	r0, r7, #28
 8005f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d122      	bne.n	8005fca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d105      	bne.n	8005fbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 faa2 	bl	8006508 <USB_CoreReset>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	e01a      	b.n	8006000 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa96 	bl	8006508 <USB_CoreReset>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ff2:	e005      	b.n	8006000 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	2b01      	cmp	r3, #1
 8006004:	d10b      	bne.n	800601e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f043 0206 	orr.w	r2, r3, #6
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f043 0220 	orr.w	r2, r3, #32
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800602a:	b004      	add	sp, #16
 800602c:	4770      	bx	lr

0800602e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d115      	bne.n	800609e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800607e:	2001      	movs	r0, #1
 8006080:	f7fb ffde 	bl	8002040 <HAL_Delay>
      ms++;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3301      	adds	r3, #1
 8006088:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fa2e 	bl	80064ec <USB_GetMode>
 8006090:	4603      	mov	r3, r0
 8006092:	2b01      	cmp	r3, #1
 8006094:	d01e      	beq.n	80060d4 <USB_SetCurrentMode+0x84>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b31      	cmp	r3, #49	; 0x31
 800609a:	d9f0      	bls.n	800607e <USB_SetCurrentMode+0x2e>
 800609c:	e01a      	b.n	80060d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d115      	bne.n	80060d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060b0:	2001      	movs	r0, #1
 80060b2:	f7fb ffc5 	bl	8002040 <HAL_Delay>
      ms++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fa15 	bl	80064ec <USB_GetMode>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <USB_SetCurrentMode+0x84>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b31      	cmp	r3, #49	; 0x31
 80060cc:	d9f0      	bls.n	80060b0 <USB_SetCurrentMode+0x60>
 80060ce:	e001      	b.n	80060d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e005      	b.n	80060e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b32      	cmp	r3, #50	; 0x32
 80060d8:	d101      	bne.n	80060de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060e8:	b084      	sub	sp, #16
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b086      	sub	sp, #24
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006102:	2300      	movs	r3, #0
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	e009      	b.n	800611c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	3340      	adds	r3, #64	; 0x40
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	2200      	movs	r2, #0
 8006114:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	3301      	adds	r3, #1
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b0e      	cmp	r3, #14
 8006120:	d9f2      	bls.n	8006108 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d11c      	bne.n	8006162 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006136:	f043 0302 	orr.w	r3, r3, #2
 800613a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	639a      	str	r2, [r3, #56]	; 0x38
 8006160:	e00b      	b.n	800617a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006180:	461a      	mov	r2, r3
 8006182:	2300      	movs	r3, #0
 8006184:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	4619      	mov	r1, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006194:	461a      	mov	r2, r3
 8006196:	680b      	ldr	r3, [r1, #0]
 8006198:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10c      	bne.n	80061ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061a6:	2100      	movs	r1, #0
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f965 	bl	8006478 <USB_SetDevSpeed>
 80061ae:	e008      	b.n	80061c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061b0:	2101      	movs	r1, #1
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f960 	bl	8006478 <USB_SetDevSpeed>
 80061b8:	e003      	b.n	80061c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061ba:	2103      	movs	r1, #3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f95b 	bl	8006478 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061c2:	2110      	movs	r1, #16
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f8f3 	bl	80063b0 <USB_FlushTxFifo>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f91f 	bl	8006418 <USB_FlushRxFifo>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	461a      	mov	r2, r3
 80061ec:	2300      	movs	r3, #0
 80061ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	461a      	mov	r2, r3
 80061f8:	2300      	movs	r3, #0
 80061fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	461a      	mov	r2, r3
 8006204:	2300      	movs	r3, #0
 8006206:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	e043      	b.n	8006296 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006224:	d118      	bne.n	8006258 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	461a      	mov	r2, r3
 800623a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	e013      	b.n	800626a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624e:	461a      	mov	r2, r3
 8006250:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e008      	b.n	800626a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	461a      	mov	r2, r3
 8006266:	2300      	movs	r3, #0
 8006268:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006276:	461a      	mov	r2, r3
 8006278:	2300      	movs	r3, #0
 800627a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006288:	461a      	mov	r2, r3
 800628a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800628e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	3301      	adds	r3, #1
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d3b7      	bcc.n	800620e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	e043      	b.n	800632c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ba:	d118      	bne.n	80062ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ce:	461a      	mov	r2, r3
 80062d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e013      	b.n	8006300 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e4:	461a      	mov	r2, r3
 80062e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	e008      	b.n	8006300 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	461a      	mov	r2, r3
 80062fc:	2300      	movs	r3, #0
 80062fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	461a      	mov	r2, r3
 800630e:	2300      	movs	r3, #0
 8006310:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	461a      	mov	r2, r3
 8006320:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006324:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3301      	adds	r3, #1
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	429a      	cmp	r2, r3
 8006332:	d3b7      	bcc.n	80062a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006346:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006354:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d105      	bne.n	8006368 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f043 0210 	orr.w	r2, r3, #16
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699a      	ldr	r2, [r3, #24]
 800636c:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <USB_DevInit+0x2c4>)
 800636e:	4313      	orrs	r3, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f043 0208 	orr.w	r2, r3, #8
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d107      	bne.n	800639c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006394:	f043 0304 	orr.w	r3, r3, #4
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800639c:	7dfb      	ldrb	r3, [r7, #23]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063a8:	b004      	add	sp, #16
 80063aa:	4770      	bx	lr
 80063ac:	803c3800 	.word	0x803c3800

080063b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a13      	ldr	r2, [pc, #76]	; (8006414 <USB_FlushTxFifo+0x64>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d901      	bls.n	80063d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e01b      	b.n	8006408 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	daf2      	bge.n	80063be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	019b      	lsls	r3, r3, #6
 80063e0:	f043 0220 	orr.w	r2, r3, #32
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a08      	ldr	r2, [pc, #32]	; (8006414 <USB_FlushTxFifo+0x64>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e006      	b.n	8006408 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b20      	cmp	r3, #32
 8006404:	d0f0      	beq.n	80063e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	00030d40 	.word	0x00030d40

08006418 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4a11      	ldr	r2, [pc, #68]	; (8006474 <USB_FlushRxFifo+0x5c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d901      	bls.n	8006436 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e018      	b.n	8006468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	daf2      	bge.n	8006424 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2210      	movs	r2, #16
 8006446:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3301      	adds	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a08      	ldr	r2, [pc, #32]	; (8006474 <USB_FlushRxFifo+0x5c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d901      	bls.n	800645a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e006      	b.n	8006468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f003 0310 	and.w	r3, r3, #16
 8006462:	2b10      	cmp	r3, #16
 8006464:	d0f0      	beq.n	8006448 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	00030d40 	.word	0x00030d40

08006478 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006498:	4313      	orrs	r3, r2
 800649a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b085      	sub	sp, #20
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064c4:	f023 0303 	bic.w	r3, r3, #3
 80064c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064d8:	f043 0302 	orr.w	r3, r3, #2
 80064dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	f003 0301 	and.w	r3, r3, #1
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a13      	ldr	r2, [pc, #76]	; (800656c <USB_CoreReset+0x64>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e01b      	b.n	800655e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	daf2      	bge.n	8006514 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f043 0201 	orr.w	r2, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4a09      	ldr	r2, [pc, #36]	; (800656c <USB_CoreReset+0x64>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e006      	b.n	800655e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b01      	cmp	r3, #1
 800655a:	d0f0      	beq.n	800653e <USB_CoreReset+0x36>

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	00030d40 	.word	0x00030d40

08006570 <siprintf>:
 8006570:	b40e      	push	{r1, r2, r3}
 8006572:	b500      	push	{lr}
 8006574:	b09c      	sub	sp, #112	; 0x70
 8006576:	ab1d      	add	r3, sp, #116	; 0x74
 8006578:	9002      	str	r0, [sp, #8]
 800657a:	9006      	str	r0, [sp, #24]
 800657c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006580:	4809      	ldr	r0, [pc, #36]	; (80065a8 <siprintf+0x38>)
 8006582:	9107      	str	r1, [sp, #28]
 8006584:	9104      	str	r1, [sp, #16]
 8006586:	4909      	ldr	r1, [pc, #36]	; (80065ac <siprintf+0x3c>)
 8006588:	f853 2b04 	ldr.w	r2, [r3], #4
 800658c:	9105      	str	r1, [sp, #20]
 800658e:	6800      	ldr	r0, [r0, #0]
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	a902      	add	r1, sp, #8
 8006594:	f000 f992 	bl	80068bc <_svfiprintf_r>
 8006598:	9b02      	ldr	r3, [sp, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	b01c      	add	sp, #112	; 0x70
 80065a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a4:	b003      	add	sp, #12
 80065a6:	4770      	bx	lr
 80065a8:	20000060 	.word	0x20000060
 80065ac:	ffff0208 	.word	0xffff0208

080065b0 <memset>:
 80065b0:	4402      	add	r2, r0
 80065b2:	4603      	mov	r3, r0
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d100      	bne.n	80065ba <memset+0xa>
 80065b8:	4770      	bx	lr
 80065ba:	f803 1b01 	strb.w	r1, [r3], #1
 80065be:	e7f9      	b.n	80065b4 <memset+0x4>

080065c0 <__errno>:
 80065c0:	4b01      	ldr	r3, [pc, #4]	; (80065c8 <__errno+0x8>)
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000060 	.word	0x20000060

080065cc <__libc_init_array>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4d0d      	ldr	r5, [pc, #52]	; (8006604 <__libc_init_array+0x38>)
 80065d0:	4c0d      	ldr	r4, [pc, #52]	; (8006608 <__libc_init_array+0x3c>)
 80065d2:	1b64      	subs	r4, r4, r5
 80065d4:	10a4      	asrs	r4, r4, #2
 80065d6:	2600      	movs	r6, #0
 80065d8:	42a6      	cmp	r6, r4
 80065da:	d109      	bne.n	80065f0 <__libc_init_array+0x24>
 80065dc:	4d0b      	ldr	r5, [pc, #44]	; (800660c <__libc_init_array+0x40>)
 80065de:	4c0c      	ldr	r4, [pc, #48]	; (8006610 <__libc_init_array+0x44>)
 80065e0:	f000 fc6a 	bl	8006eb8 <_init>
 80065e4:	1b64      	subs	r4, r4, r5
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	2600      	movs	r6, #0
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	d105      	bne.n	80065fa <__libc_init_array+0x2e>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f4:	4798      	blx	r3
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7ee      	b.n	80065d8 <__libc_init_array+0xc>
 80065fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fe:	4798      	blx	r3
 8006600:	3601      	adds	r6, #1
 8006602:	e7f2      	b.n	80065ea <__libc_init_array+0x1e>
 8006604:	08006fb8 	.word	0x08006fb8
 8006608:	08006fb8 	.word	0x08006fb8
 800660c:	08006fb8 	.word	0x08006fb8
 8006610:	08006fbc 	.word	0x08006fbc

08006614 <__retarget_lock_acquire_recursive>:
 8006614:	4770      	bx	lr

08006616 <__retarget_lock_release_recursive>:
 8006616:	4770      	bx	lr

08006618 <_free_r>:
 8006618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800661a:	2900      	cmp	r1, #0
 800661c:	d044      	beq.n	80066a8 <_free_r+0x90>
 800661e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006622:	9001      	str	r0, [sp, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f1a1 0404 	sub.w	r4, r1, #4
 800662a:	bfb8      	it	lt
 800662c:	18e4      	addlt	r4, r4, r3
 800662e:	f000 f8df 	bl	80067f0 <__malloc_lock>
 8006632:	4a1e      	ldr	r2, [pc, #120]	; (80066ac <_free_r+0x94>)
 8006634:	9801      	ldr	r0, [sp, #4]
 8006636:	6813      	ldr	r3, [r2, #0]
 8006638:	b933      	cbnz	r3, 8006648 <_free_r+0x30>
 800663a:	6063      	str	r3, [r4, #4]
 800663c:	6014      	str	r4, [r2, #0]
 800663e:	b003      	add	sp, #12
 8006640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006644:	f000 b8da 	b.w	80067fc <__malloc_unlock>
 8006648:	42a3      	cmp	r3, r4
 800664a:	d908      	bls.n	800665e <_free_r+0x46>
 800664c:	6825      	ldr	r5, [r4, #0]
 800664e:	1961      	adds	r1, r4, r5
 8006650:	428b      	cmp	r3, r1
 8006652:	bf01      	itttt	eq
 8006654:	6819      	ldreq	r1, [r3, #0]
 8006656:	685b      	ldreq	r3, [r3, #4]
 8006658:	1949      	addeq	r1, r1, r5
 800665a:	6021      	streq	r1, [r4, #0]
 800665c:	e7ed      	b.n	800663a <_free_r+0x22>
 800665e:	461a      	mov	r2, r3
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	b10b      	cbz	r3, 8006668 <_free_r+0x50>
 8006664:	42a3      	cmp	r3, r4
 8006666:	d9fa      	bls.n	800665e <_free_r+0x46>
 8006668:	6811      	ldr	r1, [r2, #0]
 800666a:	1855      	adds	r5, r2, r1
 800666c:	42a5      	cmp	r5, r4
 800666e:	d10b      	bne.n	8006688 <_free_r+0x70>
 8006670:	6824      	ldr	r4, [r4, #0]
 8006672:	4421      	add	r1, r4
 8006674:	1854      	adds	r4, r2, r1
 8006676:	42a3      	cmp	r3, r4
 8006678:	6011      	str	r1, [r2, #0]
 800667a:	d1e0      	bne.n	800663e <_free_r+0x26>
 800667c:	681c      	ldr	r4, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	6053      	str	r3, [r2, #4]
 8006682:	440c      	add	r4, r1
 8006684:	6014      	str	r4, [r2, #0]
 8006686:	e7da      	b.n	800663e <_free_r+0x26>
 8006688:	d902      	bls.n	8006690 <_free_r+0x78>
 800668a:	230c      	movs	r3, #12
 800668c:	6003      	str	r3, [r0, #0]
 800668e:	e7d6      	b.n	800663e <_free_r+0x26>
 8006690:	6825      	ldr	r5, [r4, #0]
 8006692:	1961      	adds	r1, r4, r5
 8006694:	428b      	cmp	r3, r1
 8006696:	bf04      	itt	eq
 8006698:	6819      	ldreq	r1, [r3, #0]
 800669a:	685b      	ldreq	r3, [r3, #4]
 800669c:	6063      	str	r3, [r4, #4]
 800669e:	bf04      	itt	eq
 80066a0:	1949      	addeq	r1, r1, r5
 80066a2:	6021      	streq	r1, [r4, #0]
 80066a4:	6054      	str	r4, [r2, #4]
 80066a6:	e7ca      	b.n	800663e <_free_r+0x26>
 80066a8:	b003      	add	sp, #12
 80066aa:	bd30      	pop	{r4, r5, pc}
 80066ac:	20000af4 	.word	0x20000af4

080066b0 <sbrk_aligned>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	4e0e      	ldr	r6, [pc, #56]	; (80066ec <sbrk_aligned+0x3c>)
 80066b4:	460c      	mov	r4, r1
 80066b6:	6831      	ldr	r1, [r6, #0]
 80066b8:	4605      	mov	r5, r0
 80066ba:	b911      	cbnz	r1, 80066c2 <sbrk_aligned+0x12>
 80066bc:	f000 fba6 	bl	8006e0c <_sbrk_r>
 80066c0:	6030      	str	r0, [r6, #0]
 80066c2:	4621      	mov	r1, r4
 80066c4:	4628      	mov	r0, r5
 80066c6:	f000 fba1 	bl	8006e0c <_sbrk_r>
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	d00a      	beq.n	80066e4 <sbrk_aligned+0x34>
 80066ce:	1cc4      	adds	r4, r0, #3
 80066d0:	f024 0403 	bic.w	r4, r4, #3
 80066d4:	42a0      	cmp	r0, r4
 80066d6:	d007      	beq.n	80066e8 <sbrk_aligned+0x38>
 80066d8:	1a21      	subs	r1, r4, r0
 80066da:	4628      	mov	r0, r5
 80066dc:	f000 fb96 	bl	8006e0c <_sbrk_r>
 80066e0:	3001      	adds	r0, #1
 80066e2:	d101      	bne.n	80066e8 <sbrk_aligned+0x38>
 80066e4:	f04f 34ff 	mov.w	r4, #4294967295
 80066e8:	4620      	mov	r0, r4
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
 80066ec:	20000af8 	.word	0x20000af8

080066f0 <_malloc_r>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	1ccd      	adds	r5, r1, #3
 80066f6:	f025 0503 	bic.w	r5, r5, #3
 80066fa:	3508      	adds	r5, #8
 80066fc:	2d0c      	cmp	r5, #12
 80066fe:	bf38      	it	cc
 8006700:	250c      	movcc	r5, #12
 8006702:	2d00      	cmp	r5, #0
 8006704:	4607      	mov	r7, r0
 8006706:	db01      	blt.n	800670c <_malloc_r+0x1c>
 8006708:	42a9      	cmp	r1, r5
 800670a:	d905      	bls.n	8006718 <_malloc_r+0x28>
 800670c:	230c      	movs	r3, #12
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	2600      	movs	r6, #0
 8006712:	4630      	mov	r0, r6
 8006714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006718:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067ec <_malloc_r+0xfc>
 800671c:	f000 f868 	bl	80067f0 <__malloc_lock>
 8006720:	f8d8 3000 	ldr.w	r3, [r8]
 8006724:	461c      	mov	r4, r3
 8006726:	bb5c      	cbnz	r4, 8006780 <_malloc_r+0x90>
 8006728:	4629      	mov	r1, r5
 800672a:	4638      	mov	r0, r7
 800672c:	f7ff ffc0 	bl	80066b0 <sbrk_aligned>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	4604      	mov	r4, r0
 8006734:	d155      	bne.n	80067e2 <_malloc_r+0xf2>
 8006736:	f8d8 4000 	ldr.w	r4, [r8]
 800673a:	4626      	mov	r6, r4
 800673c:	2e00      	cmp	r6, #0
 800673e:	d145      	bne.n	80067cc <_malloc_r+0xdc>
 8006740:	2c00      	cmp	r4, #0
 8006742:	d048      	beq.n	80067d6 <_malloc_r+0xe6>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	4631      	mov	r1, r6
 8006748:	4638      	mov	r0, r7
 800674a:	eb04 0903 	add.w	r9, r4, r3
 800674e:	f000 fb5d 	bl	8006e0c <_sbrk_r>
 8006752:	4581      	cmp	r9, r0
 8006754:	d13f      	bne.n	80067d6 <_malloc_r+0xe6>
 8006756:	6821      	ldr	r1, [r4, #0]
 8006758:	1a6d      	subs	r5, r5, r1
 800675a:	4629      	mov	r1, r5
 800675c:	4638      	mov	r0, r7
 800675e:	f7ff ffa7 	bl	80066b0 <sbrk_aligned>
 8006762:	3001      	adds	r0, #1
 8006764:	d037      	beq.n	80067d6 <_malloc_r+0xe6>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	442b      	add	r3, r5
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	f8d8 3000 	ldr.w	r3, [r8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d038      	beq.n	80067e6 <_malloc_r+0xf6>
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	42a2      	cmp	r2, r4
 8006778:	d12b      	bne.n	80067d2 <_malloc_r+0xe2>
 800677a:	2200      	movs	r2, #0
 800677c:	605a      	str	r2, [r3, #4]
 800677e:	e00f      	b.n	80067a0 <_malloc_r+0xb0>
 8006780:	6822      	ldr	r2, [r4, #0]
 8006782:	1b52      	subs	r2, r2, r5
 8006784:	d41f      	bmi.n	80067c6 <_malloc_r+0xd6>
 8006786:	2a0b      	cmp	r2, #11
 8006788:	d917      	bls.n	80067ba <_malloc_r+0xca>
 800678a:	1961      	adds	r1, r4, r5
 800678c:	42a3      	cmp	r3, r4
 800678e:	6025      	str	r5, [r4, #0]
 8006790:	bf18      	it	ne
 8006792:	6059      	strne	r1, [r3, #4]
 8006794:	6863      	ldr	r3, [r4, #4]
 8006796:	bf08      	it	eq
 8006798:	f8c8 1000 	streq.w	r1, [r8]
 800679c:	5162      	str	r2, [r4, r5]
 800679e:	604b      	str	r3, [r1, #4]
 80067a0:	4638      	mov	r0, r7
 80067a2:	f104 060b 	add.w	r6, r4, #11
 80067a6:	f000 f829 	bl	80067fc <__malloc_unlock>
 80067aa:	f026 0607 	bic.w	r6, r6, #7
 80067ae:	1d23      	adds	r3, r4, #4
 80067b0:	1af2      	subs	r2, r6, r3
 80067b2:	d0ae      	beq.n	8006712 <_malloc_r+0x22>
 80067b4:	1b9b      	subs	r3, r3, r6
 80067b6:	50a3      	str	r3, [r4, r2]
 80067b8:	e7ab      	b.n	8006712 <_malloc_r+0x22>
 80067ba:	42a3      	cmp	r3, r4
 80067bc:	6862      	ldr	r2, [r4, #4]
 80067be:	d1dd      	bne.n	800677c <_malloc_r+0x8c>
 80067c0:	f8c8 2000 	str.w	r2, [r8]
 80067c4:	e7ec      	b.n	80067a0 <_malloc_r+0xb0>
 80067c6:	4623      	mov	r3, r4
 80067c8:	6864      	ldr	r4, [r4, #4]
 80067ca:	e7ac      	b.n	8006726 <_malloc_r+0x36>
 80067cc:	4634      	mov	r4, r6
 80067ce:	6876      	ldr	r6, [r6, #4]
 80067d0:	e7b4      	b.n	800673c <_malloc_r+0x4c>
 80067d2:	4613      	mov	r3, r2
 80067d4:	e7cc      	b.n	8006770 <_malloc_r+0x80>
 80067d6:	230c      	movs	r3, #12
 80067d8:	603b      	str	r3, [r7, #0]
 80067da:	4638      	mov	r0, r7
 80067dc:	f000 f80e 	bl	80067fc <__malloc_unlock>
 80067e0:	e797      	b.n	8006712 <_malloc_r+0x22>
 80067e2:	6025      	str	r5, [r4, #0]
 80067e4:	e7dc      	b.n	80067a0 <_malloc_r+0xb0>
 80067e6:	605b      	str	r3, [r3, #4]
 80067e8:	deff      	udf	#255	; 0xff
 80067ea:	bf00      	nop
 80067ec:	20000af4 	.word	0x20000af4

080067f0 <__malloc_lock>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__malloc_lock+0x8>)
 80067f2:	f7ff bf0f 	b.w	8006614 <__retarget_lock_acquire_recursive>
 80067f6:	bf00      	nop
 80067f8:	20000af0 	.word	0x20000af0

080067fc <__malloc_unlock>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__malloc_unlock+0x8>)
 80067fe:	f7ff bf0a 	b.w	8006616 <__retarget_lock_release_recursive>
 8006802:	bf00      	nop
 8006804:	20000af0 	.word	0x20000af0

08006808 <__ssputs_r>:
 8006808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800680c:	688e      	ldr	r6, [r1, #8]
 800680e:	461f      	mov	r7, r3
 8006810:	42be      	cmp	r6, r7
 8006812:	680b      	ldr	r3, [r1, #0]
 8006814:	4682      	mov	sl, r0
 8006816:	460c      	mov	r4, r1
 8006818:	4690      	mov	r8, r2
 800681a:	d82c      	bhi.n	8006876 <__ssputs_r+0x6e>
 800681c:	898a      	ldrh	r2, [r1, #12]
 800681e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006822:	d026      	beq.n	8006872 <__ssputs_r+0x6a>
 8006824:	6965      	ldr	r5, [r4, #20]
 8006826:	6909      	ldr	r1, [r1, #16]
 8006828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800682c:	eba3 0901 	sub.w	r9, r3, r1
 8006830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006834:	1c7b      	adds	r3, r7, #1
 8006836:	444b      	add	r3, r9
 8006838:	106d      	asrs	r5, r5, #1
 800683a:	429d      	cmp	r5, r3
 800683c:	bf38      	it	cc
 800683e:	461d      	movcc	r5, r3
 8006840:	0553      	lsls	r3, r2, #21
 8006842:	d527      	bpl.n	8006894 <__ssputs_r+0x8c>
 8006844:	4629      	mov	r1, r5
 8006846:	f7ff ff53 	bl	80066f0 <_malloc_r>
 800684a:	4606      	mov	r6, r0
 800684c:	b360      	cbz	r0, 80068a8 <__ssputs_r+0xa0>
 800684e:	6921      	ldr	r1, [r4, #16]
 8006850:	464a      	mov	r2, r9
 8006852:	f000 faeb 	bl	8006e2c <memcpy>
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800685c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006860:	81a3      	strh	r3, [r4, #12]
 8006862:	6126      	str	r6, [r4, #16]
 8006864:	6165      	str	r5, [r4, #20]
 8006866:	444e      	add	r6, r9
 8006868:	eba5 0509 	sub.w	r5, r5, r9
 800686c:	6026      	str	r6, [r4, #0]
 800686e:	60a5      	str	r5, [r4, #8]
 8006870:	463e      	mov	r6, r7
 8006872:	42be      	cmp	r6, r7
 8006874:	d900      	bls.n	8006878 <__ssputs_r+0x70>
 8006876:	463e      	mov	r6, r7
 8006878:	6820      	ldr	r0, [r4, #0]
 800687a:	4632      	mov	r2, r6
 800687c:	4641      	mov	r1, r8
 800687e:	f000 faab 	bl	8006dd8 <memmove>
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	1b9b      	subs	r3, r3, r6
 8006886:	60a3      	str	r3, [r4, #8]
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	4433      	add	r3, r6
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	2000      	movs	r0, #0
 8006890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006894:	462a      	mov	r2, r5
 8006896:	f000 fad7 	bl	8006e48 <_realloc_r>
 800689a:	4606      	mov	r6, r0
 800689c:	2800      	cmp	r0, #0
 800689e:	d1e0      	bne.n	8006862 <__ssputs_r+0x5a>
 80068a0:	6921      	ldr	r1, [r4, #16]
 80068a2:	4650      	mov	r0, sl
 80068a4:	f7ff feb8 	bl	8006618 <_free_r>
 80068a8:	230c      	movs	r3, #12
 80068aa:	f8ca 3000 	str.w	r3, [sl]
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b4:	81a3      	strh	r3, [r4, #12]
 80068b6:	f04f 30ff 	mov.w	r0, #4294967295
 80068ba:	e7e9      	b.n	8006890 <__ssputs_r+0x88>

080068bc <_svfiprintf_r>:
 80068bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	4698      	mov	r8, r3
 80068c2:	898b      	ldrh	r3, [r1, #12]
 80068c4:	061b      	lsls	r3, r3, #24
 80068c6:	b09d      	sub	sp, #116	; 0x74
 80068c8:	4607      	mov	r7, r0
 80068ca:	460d      	mov	r5, r1
 80068cc:	4614      	mov	r4, r2
 80068ce:	d50e      	bpl.n	80068ee <_svfiprintf_r+0x32>
 80068d0:	690b      	ldr	r3, [r1, #16]
 80068d2:	b963      	cbnz	r3, 80068ee <_svfiprintf_r+0x32>
 80068d4:	2140      	movs	r1, #64	; 0x40
 80068d6:	f7ff ff0b 	bl	80066f0 <_malloc_r>
 80068da:	6028      	str	r0, [r5, #0]
 80068dc:	6128      	str	r0, [r5, #16]
 80068de:	b920      	cbnz	r0, 80068ea <_svfiprintf_r+0x2e>
 80068e0:	230c      	movs	r3, #12
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	e0d0      	b.n	8006a8c <_svfiprintf_r+0x1d0>
 80068ea:	2340      	movs	r3, #64	; 0x40
 80068ec:	616b      	str	r3, [r5, #20]
 80068ee:	2300      	movs	r3, #0
 80068f0:	9309      	str	r3, [sp, #36]	; 0x24
 80068f2:	2320      	movs	r3, #32
 80068f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80068fc:	2330      	movs	r3, #48	; 0x30
 80068fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006aa4 <_svfiprintf_r+0x1e8>
 8006902:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006906:	f04f 0901 	mov.w	r9, #1
 800690a:	4623      	mov	r3, r4
 800690c:	469a      	mov	sl, r3
 800690e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006912:	b10a      	cbz	r2, 8006918 <_svfiprintf_r+0x5c>
 8006914:	2a25      	cmp	r2, #37	; 0x25
 8006916:	d1f9      	bne.n	800690c <_svfiprintf_r+0x50>
 8006918:	ebba 0b04 	subs.w	fp, sl, r4
 800691c:	d00b      	beq.n	8006936 <_svfiprintf_r+0x7a>
 800691e:	465b      	mov	r3, fp
 8006920:	4622      	mov	r2, r4
 8006922:	4629      	mov	r1, r5
 8006924:	4638      	mov	r0, r7
 8006926:	f7ff ff6f 	bl	8006808 <__ssputs_r>
 800692a:	3001      	adds	r0, #1
 800692c:	f000 80a9 	beq.w	8006a82 <_svfiprintf_r+0x1c6>
 8006930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006932:	445a      	add	r2, fp
 8006934:	9209      	str	r2, [sp, #36]	; 0x24
 8006936:	f89a 3000 	ldrb.w	r3, [sl]
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 80a1 	beq.w	8006a82 <_svfiprintf_r+0x1c6>
 8006940:	2300      	movs	r3, #0
 8006942:	f04f 32ff 	mov.w	r2, #4294967295
 8006946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800694a:	f10a 0a01 	add.w	sl, sl, #1
 800694e:	9304      	str	r3, [sp, #16]
 8006950:	9307      	str	r3, [sp, #28]
 8006952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006956:	931a      	str	r3, [sp, #104]	; 0x68
 8006958:	4654      	mov	r4, sl
 800695a:	2205      	movs	r2, #5
 800695c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006960:	4850      	ldr	r0, [pc, #320]	; (8006aa4 <_svfiprintf_r+0x1e8>)
 8006962:	f7f9 fc55 	bl	8000210 <memchr>
 8006966:	9a04      	ldr	r2, [sp, #16]
 8006968:	b9d8      	cbnz	r0, 80069a2 <_svfiprintf_r+0xe6>
 800696a:	06d0      	lsls	r0, r2, #27
 800696c:	bf44      	itt	mi
 800696e:	2320      	movmi	r3, #32
 8006970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006974:	0711      	lsls	r1, r2, #28
 8006976:	bf44      	itt	mi
 8006978:	232b      	movmi	r3, #43	; 0x2b
 800697a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800697e:	f89a 3000 	ldrb.w	r3, [sl]
 8006982:	2b2a      	cmp	r3, #42	; 0x2a
 8006984:	d015      	beq.n	80069b2 <_svfiprintf_r+0xf6>
 8006986:	9a07      	ldr	r2, [sp, #28]
 8006988:	4654      	mov	r4, sl
 800698a:	2000      	movs	r0, #0
 800698c:	f04f 0c0a 	mov.w	ip, #10
 8006990:	4621      	mov	r1, r4
 8006992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006996:	3b30      	subs	r3, #48	; 0x30
 8006998:	2b09      	cmp	r3, #9
 800699a:	d94d      	bls.n	8006a38 <_svfiprintf_r+0x17c>
 800699c:	b1b0      	cbz	r0, 80069cc <_svfiprintf_r+0x110>
 800699e:	9207      	str	r2, [sp, #28]
 80069a0:	e014      	b.n	80069cc <_svfiprintf_r+0x110>
 80069a2:	eba0 0308 	sub.w	r3, r0, r8
 80069a6:	fa09 f303 	lsl.w	r3, r9, r3
 80069aa:	4313      	orrs	r3, r2
 80069ac:	9304      	str	r3, [sp, #16]
 80069ae:	46a2      	mov	sl, r4
 80069b0:	e7d2      	b.n	8006958 <_svfiprintf_r+0x9c>
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	1d19      	adds	r1, r3, #4
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	9103      	str	r1, [sp, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	bfbb      	ittet	lt
 80069be:	425b      	neglt	r3, r3
 80069c0:	f042 0202 	orrlt.w	r2, r2, #2
 80069c4:	9307      	strge	r3, [sp, #28]
 80069c6:	9307      	strlt	r3, [sp, #28]
 80069c8:	bfb8      	it	lt
 80069ca:	9204      	strlt	r2, [sp, #16]
 80069cc:	7823      	ldrb	r3, [r4, #0]
 80069ce:	2b2e      	cmp	r3, #46	; 0x2e
 80069d0:	d10c      	bne.n	80069ec <_svfiprintf_r+0x130>
 80069d2:	7863      	ldrb	r3, [r4, #1]
 80069d4:	2b2a      	cmp	r3, #42	; 0x2a
 80069d6:	d134      	bne.n	8006a42 <_svfiprintf_r+0x186>
 80069d8:	9b03      	ldr	r3, [sp, #12]
 80069da:	1d1a      	adds	r2, r3, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	9203      	str	r2, [sp, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	bfb8      	it	lt
 80069e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80069e8:	3402      	adds	r4, #2
 80069ea:	9305      	str	r3, [sp, #20]
 80069ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006ab4 <_svfiprintf_r+0x1f8>
 80069f0:	7821      	ldrb	r1, [r4, #0]
 80069f2:	2203      	movs	r2, #3
 80069f4:	4650      	mov	r0, sl
 80069f6:	f7f9 fc0b 	bl	8000210 <memchr>
 80069fa:	b138      	cbz	r0, 8006a0c <_svfiprintf_r+0x150>
 80069fc:	9b04      	ldr	r3, [sp, #16]
 80069fe:	eba0 000a 	sub.w	r0, r0, sl
 8006a02:	2240      	movs	r2, #64	; 0x40
 8006a04:	4082      	lsls	r2, r0
 8006a06:	4313      	orrs	r3, r2
 8006a08:	3401      	adds	r4, #1
 8006a0a:	9304      	str	r3, [sp, #16]
 8006a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a10:	4825      	ldr	r0, [pc, #148]	; (8006aa8 <_svfiprintf_r+0x1ec>)
 8006a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a16:	2206      	movs	r2, #6
 8006a18:	f7f9 fbfa 	bl	8000210 <memchr>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d038      	beq.n	8006a92 <_svfiprintf_r+0x1d6>
 8006a20:	4b22      	ldr	r3, [pc, #136]	; (8006aac <_svfiprintf_r+0x1f0>)
 8006a22:	bb1b      	cbnz	r3, 8006a6c <_svfiprintf_r+0x1b0>
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	3307      	adds	r3, #7
 8006a28:	f023 0307 	bic.w	r3, r3, #7
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	9303      	str	r3, [sp, #12]
 8006a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a32:	4433      	add	r3, r6
 8006a34:	9309      	str	r3, [sp, #36]	; 0x24
 8006a36:	e768      	b.n	800690a <_svfiprintf_r+0x4e>
 8006a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	2001      	movs	r0, #1
 8006a40:	e7a6      	b.n	8006990 <_svfiprintf_r+0xd4>
 8006a42:	2300      	movs	r3, #0
 8006a44:	3401      	adds	r4, #1
 8006a46:	9305      	str	r3, [sp, #20]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f04f 0c0a 	mov.w	ip, #10
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a54:	3a30      	subs	r2, #48	; 0x30
 8006a56:	2a09      	cmp	r2, #9
 8006a58:	d903      	bls.n	8006a62 <_svfiprintf_r+0x1a6>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0c6      	beq.n	80069ec <_svfiprintf_r+0x130>
 8006a5e:	9105      	str	r1, [sp, #20]
 8006a60:	e7c4      	b.n	80069ec <_svfiprintf_r+0x130>
 8006a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a66:	4604      	mov	r4, r0
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e7f0      	b.n	8006a4e <_svfiprintf_r+0x192>
 8006a6c:	ab03      	add	r3, sp, #12
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	462a      	mov	r2, r5
 8006a72:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <_svfiprintf_r+0x1f4>)
 8006a74:	a904      	add	r1, sp, #16
 8006a76:	4638      	mov	r0, r7
 8006a78:	f3af 8000 	nop.w
 8006a7c:	1c42      	adds	r2, r0, #1
 8006a7e:	4606      	mov	r6, r0
 8006a80:	d1d6      	bne.n	8006a30 <_svfiprintf_r+0x174>
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	065b      	lsls	r3, r3, #25
 8006a86:	f53f af2d 	bmi.w	80068e4 <_svfiprintf_r+0x28>
 8006a8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a8c:	b01d      	add	sp, #116	; 0x74
 8006a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a92:	ab03      	add	r3, sp, #12
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	462a      	mov	r2, r5
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <_svfiprintf_r+0x1f4>)
 8006a9a:	a904      	add	r1, sp, #16
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f000 f879 	bl	8006b94 <_printf_i>
 8006aa2:	e7eb      	b.n	8006a7c <_svfiprintf_r+0x1c0>
 8006aa4:	08006f7c 	.word	0x08006f7c
 8006aa8:	08006f86 	.word	0x08006f86
 8006aac:	00000000 	.word	0x00000000
 8006ab0:	08006809 	.word	0x08006809
 8006ab4:	08006f82 	.word	0x08006f82

08006ab8 <_printf_common>:
 8006ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006abc:	4616      	mov	r6, r2
 8006abe:	4699      	mov	r9, r3
 8006ac0:	688a      	ldr	r2, [r1, #8]
 8006ac2:	690b      	ldr	r3, [r1, #16]
 8006ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	bfb8      	it	lt
 8006acc:	4613      	movlt	r3, r2
 8006ace:	6033      	str	r3, [r6, #0]
 8006ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	b10a      	cbz	r2, 8006ade <_printf_common+0x26>
 8006ada:	3301      	adds	r3, #1
 8006adc:	6033      	str	r3, [r6, #0]
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	0699      	lsls	r1, r3, #26
 8006ae2:	bf42      	ittt	mi
 8006ae4:	6833      	ldrmi	r3, [r6, #0]
 8006ae6:	3302      	addmi	r3, #2
 8006ae8:	6033      	strmi	r3, [r6, #0]
 8006aea:	6825      	ldr	r5, [r4, #0]
 8006aec:	f015 0506 	ands.w	r5, r5, #6
 8006af0:	d106      	bne.n	8006b00 <_printf_common+0x48>
 8006af2:	f104 0a19 	add.w	sl, r4, #25
 8006af6:	68e3      	ldr	r3, [r4, #12]
 8006af8:	6832      	ldr	r2, [r6, #0]
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	42ab      	cmp	r3, r5
 8006afe:	dc26      	bgt.n	8006b4e <_printf_common+0x96>
 8006b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b04:	1e13      	subs	r3, r2, #0
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	bf18      	it	ne
 8006b0a:	2301      	movne	r3, #1
 8006b0c:	0692      	lsls	r2, r2, #26
 8006b0e:	d42b      	bmi.n	8006b68 <_printf_common+0xb0>
 8006b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b14:	4649      	mov	r1, r9
 8006b16:	4638      	mov	r0, r7
 8006b18:	47c0      	blx	r8
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d01e      	beq.n	8006b5c <_printf_common+0xa4>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	6922      	ldr	r2, [r4, #16]
 8006b22:	f003 0306 	and.w	r3, r3, #6
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	bf02      	ittt	eq
 8006b2a:	68e5      	ldreq	r5, [r4, #12]
 8006b2c:	6833      	ldreq	r3, [r6, #0]
 8006b2e:	1aed      	subeq	r5, r5, r3
 8006b30:	68a3      	ldr	r3, [r4, #8]
 8006b32:	bf0c      	ite	eq
 8006b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b38:	2500      	movne	r5, #0
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	bfc4      	itt	gt
 8006b3e:	1a9b      	subgt	r3, r3, r2
 8006b40:	18ed      	addgt	r5, r5, r3
 8006b42:	2600      	movs	r6, #0
 8006b44:	341a      	adds	r4, #26
 8006b46:	42b5      	cmp	r5, r6
 8006b48:	d11a      	bne.n	8006b80 <_printf_common+0xc8>
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	e008      	b.n	8006b60 <_printf_common+0xa8>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4652      	mov	r2, sl
 8006b52:	4649      	mov	r1, r9
 8006b54:	4638      	mov	r0, r7
 8006b56:	47c0      	blx	r8
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d103      	bne.n	8006b64 <_printf_common+0xac>
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b64:	3501      	adds	r5, #1
 8006b66:	e7c6      	b.n	8006af6 <_printf_common+0x3e>
 8006b68:	18e1      	adds	r1, r4, r3
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	2030      	movs	r0, #48	; 0x30
 8006b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b72:	4422      	add	r2, r4
 8006b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	e7c7      	b.n	8006b10 <_printf_common+0x58>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4622      	mov	r2, r4
 8006b84:	4649      	mov	r1, r9
 8006b86:	4638      	mov	r0, r7
 8006b88:	47c0      	blx	r8
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d0e6      	beq.n	8006b5c <_printf_common+0xa4>
 8006b8e:	3601      	adds	r6, #1
 8006b90:	e7d9      	b.n	8006b46 <_printf_common+0x8e>
	...

08006b94 <_printf_i>:
 8006b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	7e0f      	ldrb	r7, [r1, #24]
 8006b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b9c:	2f78      	cmp	r7, #120	; 0x78
 8006b9e:	4691      	mov	r9, r2
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	469a      	mov	sl, r3
 8006ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006baa:	d807      	bhi.n	8006bbc <_printf_i+0x28>
 8006bac:	2f62      	cmp	r7, #98	; 0x62
 8006bae:	d80a      	bhi.n	8006bc6 <_printf_i+0x32>
 8006bb0:	2f00      	cmp	r7, #0
 8006bb2:	f000 80d4 	beq.w	8006d5e <_printf_i+0x1ca>
 8006bb6:	2f58      	cmp	r7, #88	; 0x58
 8006bb8:	f000 80c0 	beq.w	8006d3c <_printf_i+0x1a8>
 8006bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bc4:	e03a      	b.n	8006c3c <_printf_i+0xa8>
 8006bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bca:	2b15      	cmp	r3, #21
 8006bcc:	d8f6      	bhi.n	8006bbc <_printf_i+0x28>
 8006bce:	a101      	add	r1, pc, #4	; (adr r1, 8006bd4 <_printf_i+0x40>)
 8006bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bd4:	08006c2d 	.word	0x08006c2d
 8006bd8:	08006c41 	.word	0x08006c41
 8006bdc:	08006bbd 	.word	0x08006bbd
 8006be0:	08006bbd 	.word	0x08006bbd
 8006be4:	08006bbd 	.word	0x08006bbd
 8006be8:	08006bbd 	.word	0x08006bbd
 8006bec:	08006c41 	.word	0x08006c41
 8006bf0:	08006bbd 	.word	0x08006bbd
 8006bf4:	08006bbd 	.word	0x08006bbd
 8006bf8:	08006bbd 	.word	0x08006bbd
 8006bfc:	08006bbd 	.word	0x08006bbd
 8006c00:	08006d45 	.word	0x08006d45
 8006c04:	08006c6d 	.word	0x08006c6d
 8006c08:	08006cff 	.word	0x08006cff
 8006c0c:	08006bbd 	.word	0x08006bbd
 8006c10:	08006bbd 	.word	0x08006bbd
 8006c14:	08006d67 	.word	0x08006d67
 8006c18:	08006bbd 	.word	0x08006bbd
 8006c1c:	08006c6d 	.word	0x08006c6d
 8006c20:	08006bbd 	.word	0x08006bbd
 8006c24:	08006bbd 	.word	0x08006bbd
 8006c28:	08006d07 	.word	0x08006d07
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	1d1a      	adds	r2, r3, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	602a      	str	r2, [r5, #0]
 8006c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e09f      	b.n	8006d80 <_printf_i+0x1ec>
 8006c40:	6820      	ldr	r0, [r4, #0]
 8006c42:	682b      	ldr	r3, [r5, #0]
 8006c44:	0607      	lsls	r7, r0, #24
 8006c46:	f103 0104 	add.w	r1, r3, #4
 8006c4a:	6029      	str	r1, [r5, #0]
 8006c4c:	d501      	bpl.n	8006c52 <_printf_i+0xbe>
 8006c4e:	681e      	ldr	r6, [r3, #0]
 8006c50:	e003      	b.n	8006c5a <_printf_i+0xc6>
 8006c52:	0646      	lsls	r6, r0, #25
 8006c54:	d5fb      	bpl.n	8006c4e <_printf_i+0xba>
 8006c56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	da03      	bge.n	8006c66 <_printf_i+0xd2>
 8006c5e:	232d      	movs	r3, #45	; 0x2d
 8006c60:	4276      	negs	r6, r6
 8006c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c66:	485a      	ldr	r0, [pc, #360]	; (8006dd0 <_printf_i+0x23c>)
 8006c68:	230a      	movs	r3, #10
 8006c6a:	e012      	b.n	8006c92 <_printf_i+0xfe>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	6820      	ldr	r0, [r4, #0]
 8006c70:	1d19      	adds	r1, r3, #4
 8006c72:	6029      	str	r1, [r5, #0]
 8006c74:	0605      	lsls	r5, r0, #24
 8006c76:	d501      	bpl.n	8006c7c <_printf_i+0xe8>
 8006c78:	681e      	ldr	r6, [r3, #0]
 8006c7a:	e002      	b.n	8006c82 <_printf_i+0xee>
 8006c7c:	0641      	lsls	r1, r0, #25
 8006c7e:	d5fb      	bpl.n	8006c78 <_printf_i+0xe4>
 8006c80:	881e      	ldrh	r6, [r3, #0]
 8006c82:	4853      	ldr	r0, [pc, #332]	; (8006dd0 <_printf_i+0x23c>)
 8006c84:	2f6f      	cmp	r7, #111	; 0x6f
 8006c86:	bf0c      	ite	eq
 8006c88:	2308      	moveq	r3, #8
 8006c8a:	230a      	movne	r3, #10
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c92:	6865      	ldr	r5, [r4, #4]
 8006c94:	60a5      	str	r5, [r4, #8]
 8006c96:	2d00      	cmp	r5, #0
 8006c98:	bfa2      	ittt	ge
 8006c9a:	6821      	ldrge	r1, [r4, #0]
 8006c9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ca0:	6021      	strge	r1, [r4, #0]
 8006ca2:	b90e      	cbnz	r6, 8006ca8 <_printf_i+0x114>
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	d04b      	beq.n	8006d40 <_printf_i+0x1ac>
 8006ca8:	4615      	mov	r5, r2
 8006caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cae:	fb03 6711 	mls	r7, r3, r1, r6
 8006cb2:	5dc7      	ldrb	r7, [r0, r7]
 8006cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cb8:	4637      	mov	r7, r6
 8006cba:	42bb      	cmp	r3, r7
 8006cbc:	460e      	mov	r6, r1
 8006cbe:	d9f4      	bls.n	8006caa <_printf_i+0x116>
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d10b      	bne.n	8006cdc <_printf_i+0x148>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	07de      	lsls	r6, r3, #31
 8006cc8:	d508      	bpl.n	8006cdc <_printf_i+0x148>
 8006cca:	6923      	ldr	r3, [r4, #16]
 8006ccc:	6861      	ldr	r1, [r4, #4]
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	bfde      	ittt	le
 8006cd2:	2330      	movle	r3, #48	; 0x30
 8006cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cdc:	1b52      	subs	r2, r2, r5
 8006cde:	6122      	str	r2, [r4, #16]
 8006ce0:	f8cd a000 	str.w	sl, [sp]
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	aa03      	add	r2, sp, #12
 8006ce8:	4621      	mov	r1, r4
 8006cea:	4640      	mov	r0, r8
 8006cec:	f7ff fee4 	bl	8006ab8 <_printf_common>
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d14a      	bne.n	8006d8a <_printf_i+0x1f6>
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf8:	b004      	add	sp, #16
 8006cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	f043 0320 	orr.w	r3, r3, #32
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	4833      	ldr	r0, [pc, #204]	; (8006dd4 <_printf_i+0x240>)
 8006d08:	2778      	movs	r7, #120	; 0x78
 8006d0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	6829      	ldr	r1, [r5, #0]
 8006d12:	061f      	lsls	r7, r3, #24
 8006d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d18:	d402      	bmi.n	8006d20 <_printf_i+0x18c>
 8006d1a:	065f      	lsls	r7, r3, #25
 8006d1c:	bf48      	it	mi
 8006d1e:	b2b6      	uxthmi	r6, r6
 8006d20:	07df      	lsls	r7, r3, #31
 8006d22:	bf48      	it	mi
 8006d24:	f043 0320 	orrmi.w	r3, r3, #32
 8006d28:	6029      	str	r1, [r5, #0]
 8006d2a:	bf48      	it	mi
 8006d2c:	6023      	strmi	r3, [r4, #0]
 8006d2e:	b91e      	cbnz	r6, 8006d38 <_printf_i+0x1a4>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	f023 0320 	bic.w	r3, r3, #32
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	2310      	movs	r3, #16
 8006d3a:	e7a7      	b.n	8006c8c <_printf_i+0xf8>
 8006d3c:	4824      	ldr	r0, [pc, #144]	; (8006dd0 <_printf_i+0x23c>)
 8006d3e:	e7e4      	b.n	8006d0a <_printf_i+0x176>
 8006d40:	4615      	mov	r5, r2
 8006d42:	e7bd      	b.n	8006cc0 <_printf_i+0x12c>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	6826      	ldr	r6, [r4, #0]
 8006d48:	6961      	ldr	r1, [r4, #20]
 8006d4a:	1d18      	adds	r0, r3, #4
 8006d4c:	6028      	str	r0, [r5, #0]
 8006d4e:	0635      	lsls	r5, r6, #24
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	d501      	bpl.n	8006d58 <_printf_i+0x1c4>
 8006d54:	6019      	str	r1, [r3, #0]
 8006d56:	e002      	b.n	8006d5e <_printf_i+0x1ca>
 8006d58:	0670      	lsls	r0, r6, #25
 8006d5a:	d5fb      	bpl.n	8006d54 <_printf_i+0x1c0>
 8006d5c:	8019      	strh	r1, [r3, #0]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6123      	str	r3, [r4, #16]
 8006d62:	4615      	mov	r5, r2
 8006d64:	e7bc      	b.n	8006ce0 <_printf_i+0x14c>
 8006d66:	682b      	ldr	r3, [r5, #0]
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	602a      	str	r2, [r5, #0]
 8006d6c:	681d      	ldr	r5, [r3, #0]
 8006d6e:	6862      	ldr	r2, [r4, #4]
 8006d70:	2100      	movs	r1, #0
 8006d72:	4628      	mov	r0, r5
 8006d74:	f7f9 fa4c 	bl	8000210 <memchr>
 8006d78:	b108      	cbz	r0, 8006d7e <_printf_i+0x1ea>
 8006d7a:	1b40      	subs	r0, r0, r5
 8006d7c:	6060      	str	r0, [r4, #4]
 8006d7e:	6863      	ldr	r3, [r4, #4]
 8006d80:	6123      	str	r3, [r4, #16]
 8006d82:	2300      	movs	r3, #0
 8006d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d88:	e7aa      	b.n	8006ce0 <_printf_i+0x14c>
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	462a      	mov	r2, r5
 8006d8e:	4649      	mov	r1, r9
 8006d90:	4640      	mov	r0, r8
 8006d92:	47d0      	blx	sl
 8006d94:	3001      	adds	r0, #1
 8006d96:	d0ad      	beq.n	8006cf4 <_printf_i+0x160>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	079b      	lsls	r3, r3, #30
 8006d9c:	d413      	bmi.n	8006dc6 <_printf_i+0x232>
 8006d9e:	68e0      	ldr	r0, [r4, #12]
 8006da0:	9b03      	ldr	r3, [sp, #12]
 8006da2:	4298      	cmp	r0, r3
 8006da4:	bfb8      	it	lt
 8006da6:	4618      	movlt	r0, r3
 8006da8:	e7a6      	b.n	8006cf8 <_printf_i+0x164>
 8006daa:	2301      	movs	r3, #1
 8006dac:	4632      	mov	r2, r6
 8006dae:	4649      	mov	r1, r9
 8006db0:	4640      	mov	r0, r8
 8006db2:	47d0      	blx	sl
 8006db4:	3001      	adds	r0, #1
 8006db6:	d09d      	beq.n	8006cf4 <_printf_i+0x160>
 8006db8:	3501      	adds	r5, #1
 8006dba:	68e3      	ldr	r3, [r4, #12]
 8006dbc:	9903      	ldr	r1, [sp, #12]
 8006dbe:	1a5b      	subs	r3, r3, r1
 8006dc0:	42ab      	cmp	r3, r5
 8006dc2:	dcf2      	bgt.n	8006daa <_printf_i+0x216>
 8006dc4:	e7eb      	b.n	8006d9e <_printf_i+0x20a>
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	f104 0619 	add.w	r6, r4, #25
 8006dcc:	e7f5      	b.n	8006dba <_printf_i+0x226>
 8006dce:	bf00      	nop
 8006dd0:	08006f8d 	.word	0x08006f8d
 8006dd4:	08006f9e 	.word	0x08006f9e

08006dd8 <memmove>:
 8006dd8:	4288      	cmp	r0, r1
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	eb01 0402 	add.w	r4, r1, r2
 8006de0:	d902      	bls.n	8006de8 <memmove+0x10>
 8006de2:	4284      	cmp	r4, r0
 8006de4:	4623      	mov	r3, r4
 8006de6:	d807      	bhi.n	8006df8 <memmove+0x20>
 8006de8:	1e43      	subs	r3, r0, #1
 8006dea:	42a1      	cmp	r1, r4
 8006dec:	d008      	beq.n	8006e00 <memmove+0x28>
 8006dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006df2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006df6:	e7f8      	b.n	8006dea <memmove+0x12>
 8006df8:	4402      	add	r2, r0
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	428a      	cmp	r2, r1
 8006dfe:	d100      	bne.n	8006e02 <memmove+0x2a>
 8006e00:	bd10      	pop	{r4, pc}
 8006e02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e0a:	e7f7      	b.n	8006dfc <memmove+0x24>

08006e0c <_sbrk_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4d06      	ldr	r5, [pc, #24]	; (8006e28 <_sbrk_r+0x1c>)
 8006e10:	2300      	movs	r3, #0
 8006e12:	4604      	mov	r4, r0
 8006e14:	4608      	mov	r0, r1
 8006e16:	602b      	str	r3, [r5, #0]
 8006e18:	f7fa fec2 	bl	8001ba0 <_sbrk>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d102      	bne.n	8006e26 <_sbrk_r+0x1a>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	b103      	cbz	r3, 8006e26 <_sbrk_r+0x1a>
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	20000aec 	.word	0x20000aec

08006e2c <memcpy>:
 8006e2c:	440a      	add	r2, r1
 8006e2e:	4291      	cmp	r1, r2
 8006e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e34:	d100      	bne.n	8006e38 <memcpy+0xc>
 8006e36:	4770      	bx	lr
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e42:	4291      	cmp	r1, r2
 8006e44:	d1f9      	bne.n	8006e3a <memcpy+0xe>
 8006e46:	bd10      	pop	{r4, pc}

08006e48 <_realloc_r>:
 8006e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	4614      	mov	r4, r2
 8006e50:	460e      	mov	r6, r1
 8006e52:	b921      	cbnz	r1, 8006e5e <_realloc_r+0x16>
 8006e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e58:	4611      	mov	r1, r2
 8006e5a:	f7ff bc49 	b.w	80066f0 <_malloc_r>
 8006e5e:	b92a      	cbnz	r2, 8006e6c <_realloc_r+0x24>
 8006e60:	f7ff fbda 	bl	8006618 <_free_r>
 8006e64:	4625      	mov	r5, r4
 8006e66:	4628      	mov	r0, r5
 8006e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6c:	f000 f81b 	bl	8006ea6 <_malloc_usable_size_r>
 8006e70:	4284      	cmp	r4, r0
 8006e72:	4607      	mov	r7, r0
 8006e74:	d802      	bhi.n	8006e7c <_realloc_r+0x34>
 8006e76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e7a:	d812      	bhi.n	8006ea2 <_realloc_r+0x5a>
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4640      	mov	r0, r8
 8006e80:	f7ff fc36 	bl	80066f0 <_malloc_r>
 8006e84:	4605      	mov	r5, r0
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d0ed      	beq.n	8006e66 <_realloc_r+0x1e>
 8006e8a:	42bc      	cmp	r4, r7
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	4631      	mov	r1, r6
 8006e90:	bf28      	it	cs
 8006e92:	463a      	movcs	r2, r7
 8006e94:	f7ff ffca 	bl	8006e2c <memcpy>
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	f7ff fbbc 	bl	8006618 <_free_r>
 8006ea0:	e7e1      	b.n	8006e66 <_realloc_r+0x1e>
 8006ea2:	4635      	mov	r5, r6
 8006ea4:	e7df      	b.n	8006e66 <_realloc_r+0x1e>

08006ea6 <_malloc_usable_size_r>:
 8006ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eaa:	1f18      	subs	r0, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bfbc      	itt	lt
 8006eb0:	580b      	ldrlt	r3, [r1, r0]
 8006eb2:	18c0      	addlt	r0, r0, r3
 8006eb4:	4770      	bx	lr
	...

08006eb8 <_init>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	bf00      	nop
 8006ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ebe:	bc08      	pop	{r3}
 8006ec0:	469e      	mov	lr, r3
 8006ec2:	4770      	bx	lr

08006ec4 <_fini>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	bf00      	nop
 8006ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eca:	bc08      	pop	{r3}
 8006ecc:	469e      	mov	lr, r3
 8006ece:	4770      	bx	lr
