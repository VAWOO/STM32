
BluetoothAlarmClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08007398  08007398  00017398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800758c  0800758c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007594  08007594  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007594  08007594  00017594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800759c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000aa4  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b08  20000b08  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a02c  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b44  00000000  00000000  0003a103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016e8  00000000  00000000  0003dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011e3  00000000  00000000  0003f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029825  00000000  00000000  00040513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f9d8  00000000  00000000  00069d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f7c3e  00000000  00000000  00089710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000065dc  00000000  00000000  00181350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0018792c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007380 	.word	0x08007380

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08007380 	.word	0x08007380

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	463b      	mov	r3, r7
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_ADC1_Init+0x98>)
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <MX_ADC1_Init+0x9c>)
 80005a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_ADC1_Init+0x98>)
 80005a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_ADC1_Init+0x98>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_ADC1_Init+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_ADC1_Init+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_ADC1_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_ADC1_Init+0x98>)
 80005ce:	4a17      	ldr	r2, [pc, #92]	; (800062c <MX_ADC1_Init+0xa0>)
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_ADC1_Init+0x98>)
 80005da:	2201      	movs	r2, #1
 80005dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_ADC1_Init+0x98>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <MX_ADC1_Init+0x98>)
 80005ee:	f001 fceb 	bl	8001fc8 <HAL_ADC_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f8:	f001 f96e 	bl	80018d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000600:	2301      	movs	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_ADC1_Init+0x98>)
 800060e:	f001 fe89 	bl	8002324 <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000618:	f001 f95e 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000080 	.word	0x20000080
 8000628:	40012000 	.word	0x40012000
 800062c:	0f000001 	.word	0x0f000001

08000630 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <HAL_ADC_MspInit+0x7c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d127      	bne.n	80006a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 800065c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000660:	6453      	str	r3, [r2, #68]	; 0x44
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_ADC_MspInit+0x80>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800068a:	2308      	movs	r3, #8
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_ADC_MspInit+0x84>)
 800069e:	f002 fc7d 	bl	8002f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40012000 	.word	0x40012000
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000

080006b8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ETH_Init+0x84>)
 80006be:	4a20      	ldr	r2, [pc, #128]	; (8000740 <MX_ETH_Init+0x88>)
 80006c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <MX_ETH_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_ETH_Init+0x8c>)
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <MX_ETH_Init+0x8c>)
 80006d0:	22e1      	movs	r2, #225	; 0xe1
 80006d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_ETH_Init+0x8c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_ETH_Init+0x8c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_ETH_Init+0x8c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_ETH_Init+0x84>)
 80006e8:	4a16      	ldr	r2, [pc, #88]	; (8000744 <MX_ETH_Init+0x8c>)
 80006ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_ETH_Init+0x84>)
 80006ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_ETH_Init+0x84>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <MX_ETH_Init+0x90>)
 80006f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_ETH_Init+0x84>)
 80006fc:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_ETH_Init+0x94>)
 80006fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_ETH_Init+0x84>)
 8000702:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000706:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <MX_ETH_Init+0x84>)
 800070a:	f002 f91f 	bl	800294c <HAL_ETH_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000714:	f001 f8e0 	bl	80018d8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000718:	2238      	movs	r2, #56	; 0x38
 800071a:	2100      	movs	r1, #0
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_ETH_Init+0x98>)
 800071e:	f006 f9ab 	bl	8006a78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_ETH_Init+0x98>)
 8000724:	2221      	movs	r2, #33	; 0x21
 8000726:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_ETH_Init+0x98>)
 800072a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800072e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_ETH_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000240 	.word	0x20000240
 8000740:	40028000 	.word	0x40028000
 8000744:	200002f0 	.word	0x200002f0
 8000748:	20000168 	.word	0x20000168
 800074c:	200000c8 	.word	0x200000c8
 8000750:	20000208 	.word	0x20000208

08000754 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a55      	ldr	r2, [pc, #340]	; (80008c8 <HAL_ETH_MspInit+0x174>)
 8000772:	4293      	cmp	r3, r2
 8000774:	f040 80a4 	bne.w	80008c0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
 800077c:	4b53      	ldr	r3, [pc, #332]	; (80008cc <HAL_ETH_MspInit+0x178>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	4a52      	ldr	r2, [pc, #328]	; (80008cc <HAL_ETH_MspInit+0x178>)
 8000782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000786:	6313      	str	r3, [r2, #48]	; 0x30
 8000788:	4b50      	ldr	r3, [pc, #320]	; (80008cc <HAL_ETH_MspInit+0x178>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000790:	623b      	str	r3, [r7, #32]
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	4b4c      	ldr	r3, [pc, #304]	; (80008cc <HAL_ETH_MspInit+0x178>)
 800079a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079c:	4a4b      	ldr	r2, [pc, #300]	; (80008cc <HAL_ETH_MspInit+0x178>)
 800079e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007a2:	6313      	str	r3, [r2, #48]	; 0x30
 80007a4:	4b49      	ldr	r3, [pc, #292]	; (80008cc <HAL_ETH_MspInit+0x178>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007ac:	61fb      	str	r3, [r7, #28]
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	4b45      	ldr	r3, [pc, #276]	; (80008cc <HAL_ETH_MspInit+0x178>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	4a44      	ldr	r2, [pc, #272]	; (80008cc <HAL_ETH_MspInit+0x178>)
 80007ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007be:	6313      	str	r3, [r2, #48]	; 0x30
 80007c0:	4b42      	ldr	r3, [pc, #264]	; (80008cc <HAL_ETH_MspInit+0x178>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <HAL_ETH_MspInit+0x178>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	4a3d      	ldr	r2, [pc, #244]	; (80008cc <HAL_ETH_MspInit+0x178>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	6313      	str	r3, [r2, #48]	; 0x30
 80007dc:	4b3b      	ldr	r3, [pc, #236]	; (80008cc <HAL_ETH_MspInit+0x178>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	4b37      	ldr	r3, [pc, #220]	; (80008cc <HAL_ETH_MspInit+0x178>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a36      	ldr	r2, [pc, #216]	; (80008cc <HAL_ETH_MspInit+0x178>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <HAL_ETH_MspInit+0x178>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	4b30      	ldr	r3, [pc, #192]	; (80008cc <HAL_ETH_MspInit+0x178>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <HAL_ETH_MspInit+0x178>)
 800080e:	f043 0302 	orr.w	r3, r3, #2
 8000812:	6313      	str	r3, [r2, #48]	; 0x30
 8000814:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <HAL_ETH_MspInit+0x178>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	f003 0302 	and.w	r3, r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <HAL_ETH_MspInit+0x178>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4a28      	ldr	r2, [pc, #160]	; (80008cc <HAL_ETH_MspInit+0x178>)
 800082a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082e:	6313      	str	r3, [r2, #48]	; 0x30
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <HAL_ETH_MspInit+0x178>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800083c:	2332      	movs	r3, #50	; 0x32
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084c:	230b      	movs	r3, #11
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000854:	4619      	mov	r1, r3
 8000856:	481e      	ldr	r0, [pc, #120]	; (80008d0 <HAL_ETH_MspInit+0x17c>)
 8000858:	f002 fba0 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800085c:	2386      	movs	r3, #134	; 0x86
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800086c:	230b      	movs	r3, #11
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	4817      	ldr	r0, [pc, #92]	; (80008d4 <HAL_ETH_MspInit+0x180>)
 8000878:	f002 fb90 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088e:	230b      	movs	r3, #11
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	480f      	ldr	r0, [pc, #60]	; (80008d8 <HAL_ETH_MspInit+0x184>)
 800089a:	f002 fb7f 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800089e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b0:	230b      	movs	r3, #11
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	4808      	ldr	r0, [pc, #32]	; (80008dc <HAL_ETH_MspInit+0x188>)
 80008bc:	f002 fb6e 	bl	8002f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80008c0:	bf00      	nop
 80008c2:	3738      	adds	r7, #56	; 0x38
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40028000 	.word	0x40028000
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020400 	.word	0x40020400
 80008dc:	40021800 	.word	0x40021800

080008e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <MX_GPIO_Init+0x14c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a4b      	ldr	r2, [pc, #300]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b49      	ldr	r3, [pc, #292]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a44      	ldr	r2, [pc, #272]	; (8000a2c <MX_GPIO_Init+0x14c>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b3e      	ldr	r3, [pc, #248]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a3d      	ldr	r2, [pc, #244]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a36      	ldr	r2, [pc, #216]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <MX_GPIO_Init+0x14c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <MX_GPIO_Init+0x14c>)
 800098c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_GPIO_Init+0x14c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a4:	4822      	ldr	r0, [pc, #136]	; (8000a30 <MX_GPIO_Init+0x150>)
 80009a6:	f002 fcbd 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	4821      	ldr	r0, [pc, #132]	; (8000a34 <MX_GPIO_Init+0x154>)
 80009b0:	f002 fcb8 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009ba:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	481b      	ldr	r0, [pc, #108]	; (8000a38 <MX_GPIO_Init+0x158>)
 80009cc:	f002 fae6 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d0:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_GPIO_Init+0x150>)
 80009ea:	f002 fad7 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	480b      	ldr	r0, [pc, #44]	; (8000a34 <MX_GPIO_Init+0x154>)
 8000a06:	f002 fac9 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_GPIO_Init+0x154>)
 8000a1e:	f002 fabd 	bl	8002f9c <HAL_GPIO_Init>

}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	; 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400
 8000a34:	40021800 	.word	0x40021800
 8000a38:	40020800 	.word	0x40020800

08000a3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MX_I2C1_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <MX_I2C1_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a7a:	f002 fc6d 	bl	8003358 <HAL_I2C_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a84:	f000 ff28 	bl	80018d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a8c:	f003 f8af 	bl	8003bee <HAL_I2CEx_ConfigAnalogFilter>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a96:	f000 ff1f 	bl	80018d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a9e:	f003 f8e2 	bl	8003c66 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000aa8:	f000 ff16 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200002f8 	.word	0x200002f8
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_I2C_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12c      	bne.n	8000b38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000afa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <HAL_I2C_MspInit+0x8c>)
 8000b18:	f002 fa40 	bl	8002f9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400

08000b4c <LCD_SendInternal>:
//    }
//
//    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
//}

void LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	460b      	mov	r3, r1
 8000b58:	71bb      	strb	r3, [r7, #6]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	717b      	strb	r3, [r7, #5]
//        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
//        if(res == HAL_OK)
//            break;
//    }

    uint8_t up = data & 0xF0;
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	f023 030f 	bic.w	r3, r3, #15
 8000b64:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 8000b66:	79bb      	ldrb	r3, [r7, #6]
 8000b68:	011b      	lsls	r3, r3, #4
 8000b6a:	73bb      	strb	r3, [r7, #14]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000b6c:	7bfa      	ldrb	r2, [r7, #15]
 8000b6e:	797b      	ldrb	r3, [r7, #5]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f043 030c 	orr.w	r3, r3, #12
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000b7c:	7bfa      	ldrb	r2, [r7, #15]
 8000b7e:	797b      	ldrb	r3, [r7, #5]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000b8c:	7bba      	ldrb	r2, [r7, #14]
 8000b8e:	797b      	ldrb	r3, [r7, #5]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	f043 030c 	orr.w	r3, r3, #12
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8000b9c:	7bba      	ldrb	r2, [r7, #14]
 8000b9e:	797b      	ldrb	r3, [r7, #5]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	b299      	uxth	r1, r3
 8000bb0:	f107 0208 	add.w	r2, r7, #8
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2304      	movs	r3, #4
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <LCD_SendInternal+0x84>)
 8000bbe:	f002 fd0f 	bl	80035e0 <HAL_I2C_Master_Transmit>
    HAL_Delay(LCD_DELAY_MS);
 8000bc2:	2005      	movs	r0, #5
 8000bc4:	f001 f9dc 	bl	8001f80 <HAL_Delay>
}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200002f8 	.word	0x200002f8

08000bd4 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000be4:	79b9      	ldrb	r1, [r7, #6]
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2200      	movs	r2, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ffae 	bl	8000b4c <LCD_SendInternal>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(LCD_ADDR, data, PIN_RS);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2201      	movs	r2, #1
 8000c06:	4619      	mov	r1, r3
 8000c08:	204e      	movs	r0, #78	; 0x4e
 8000c0a:	f7ff ff9f 	bl	8000b4c <LCD_SendInternal>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2130      	movs	r1, #48	; 0x30
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ffd5 	bl	8000bd4 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ffd0 	bl	8000bd4 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	210c      	movs	r1, #12
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ffcb 	bl	8000bd4 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2101      	movs	r1, #1
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ffc6 	bl	8000bd4 <LCD_SendCommand>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <LCD_SendString>:

void LCD_SendString(char *str) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
    while(*str) {
 8000c58:	e007      	b.n	8000c6a <LCD_SendString+0x1a>
        LCD_SendData((uint8_t)(*str));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffca 	bl	8000bf8 <LCD_SendData>
        str++;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3301      	adds	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
    while(*str) {
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f3      	bne.n	8000c5a <LCD_SendString+0xa>
    }
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <LCM1602_init>:

void LCM1602_init() {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
//    I2C_Scan();
    LCD_Init(LCD_ADDR);
 8000c80:	204e      	movs	r0, #78	; 0x4e
 8000c82:	f7ff ffc8 	bl	8000c16 <LCD_Init>
//    LCD_SendString(LCD_ADDR, "SooHyun's Clock");
//
//     set address to 0x40
//    LCD_SendCommand(LCD_ADDR, 0b11000000);
//    LCD_SendString(LCD_ADDR, "  over I2C bus");
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <lcd_put_cur>:

void lcd_put_cur(int row, int col){
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
    switch (row){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <lcd_put_cur+0x18>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d005      	beq.n	8000cac <lcd_put_cur+0x22>
 8000ca0:	e009      	b.n	8000cb6 <lcd_put_cur+0x2c>
        case 0:
            col |= 0x80;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	603b      	str	r3, [r7, #0]
            break;
 8000caa:	e004      	b.n	8000cb6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000cb2:	603b      	str	r3, [r7, #0]
            break;
 8000cb4:	bf00      	nop
    }
    LCD_SendCommand(LCD_ADDR, col);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4619      	mov	r1, r3
 8000cbc:	204e      	movs	r0, #78	; 0x4e
 8000cbe:	f7ff ff89 	bl	8000bd4 <LCD_SendCommand>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b5b0      	push	{r4, r5, r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd2:	f001 f8e3 	bl	8001e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd6:	f000 fbf3 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cda:	f7ff fe01 	bl	80008e0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000cde:	f7ff fceb 	bl	80006b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ce2:	f000 ffb7 	bl	8001c54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ce6:	f001 f827 	bl	8001d38 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000cea:	f7ff fc4f 	bl	800058c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cee:	f7ff fea5 	bl	8000a3c <MX_I2C1_Init>
  MX_RTC_Init();
 8000cf2:	f000 fdf7 	bl	80018e4 <MX_RTC_Init>
  MX_TIM2_Init();
 8000cf6:	f000 fedf 	bl	8001ab8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  LCM1602_init();
 8000cfa:	f7ff ffbf 	bl	8000c7c <LCM1602_init>
  uint8_t toggle=0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71fb      	strb	r3, [r7, #7]

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000d02:	2200      	movs	r2, #0
 8000d04:	4992      	ldr	r1, [pc, #584]	; (8000f50 <main+0x284>)
 8000d06:	4893      	ldr	r0, [pc, #588]	; (8000f54 <main+0x288>)
 8000d08:	f004 f872 	bl	8004df0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4992      	ldr	r1, [pc, #584]	; (8000f58 <main+0x28c>)
 8000d10:	4890      	ldr	r0, [pc, #576]	; (8000f54 <main+0x288>)
 8000d12:	f004 f8cb 	bl	8004eac <HAL_RTC_GetDate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // setting mode
	  if(mode==SETTING)
 8000d16:	4b91      	ldr	r3, [pc, #580]	; (8000f5c <main+0x290>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f040 8179 	bne.w	8001012 <main+0x346>
	  {
		  toggle^=1;
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f083 0301 	eor.w	r3, r3, #1
 8000d26:	71fb      	strb	r3, [r7, #7]

		  lcd_put_cur(0,0);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff ffad 	bl	8000c8a <lcd_put_cur>
		  LCD_SendString("Time Setting   ");
 8000d30:	488b      	ldr	r0, [pc, #556]	; (8000f60 <main+0x294>)
 8000d32:	f7ff ff8d 	bl	8000c50 <LCD_SendString>
		  // ADC
		  HAL_ADC_Start(&hadc1);
 8000d36:	488b      	ldr	r0, [pc, #556]	; (8000f64 <main+0x298>)
 8000d38:	f001 f98a 	bl	8002050 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8000d3c:	210a      	movs	r1, #10
 8000d3e:	4889      	ldr	r0, [pc, #548]	; (8000f64 <main+0x298>)
 8000d40:	f001 fa58 	bl	80021f4 <HAL_ADC_PollForConversion>
		  adc_value = HAL_ADC_GetValue(&hadc1);
 8000d44:	4887      	ldr	r0, [pc, #540]	; (8000f64 <main+0x298>)
 8000d46:	f001 fae0 	bl	800230a <HAL_ADC_GetValue>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a86      	ldr	r2, [pc, #536]	; (8000f68 <main+0x29c>)
 8000d4e:	6013      	str	r3, [r2, #0]
		  // read button
		  button = getButton();
 8000d50:	f000 fc22 	bl	8001598 <getButton>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b84      	ldr	r3, [pc, #528]	; (8000f6c <main+0x2a0>)
 8000d5a:	701a      	strb	r2, [r3, #0]
		  // Processing when the button is changed
		  if(button!=button_before){
 8000d5c:	4b83      	ldr	r3, [pc, #524]	; (8000f6c <main+0x2a0>)
 8000d5e:	781a      	ldrb	r2, [r3, #0]
 8000d60:	4b83      	ldr	r3, [pc, #524]	; (8000f70 <main+0x2a4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d00e      	beq.n	8000d86 <main+0xba>
			  move_cur_time(&sTime, button);
 8000d68:	4b80      	ldr	r3, [pc, #512]	; (8000f6c <main+0x2a0>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4878      	ldr	r0, [pc, #480]	; (8000f50 <main+0x284>)
 8000d70:	f000 fc64 	bl	800163c <move_cur_time>
			  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000d74:	2200      	movs	r2, #0
 8000d76:	4976      	ldr	r1, [pc, #472]	; (8000f50 <main+0x284>)
 8000d78:	4876      	ldr	r0, [pc, #472]	; (8000f54 <main+0x288>)
 8000d7a:	f003 ff9f 	bl	8004cbc <HAL_RTC_SetTime>
			  button_before=button;
 8000d7e:	4b7b      	ldr	r3, [pc, #492]	; (8000f6c <main+0x2a0>)
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	4b7b      	ldr	r3, [pc, #492]	; (8000f70 <main+0x2a4>)
 8000d84:	701a      	strb	r2, [r3, #0]
		  }
		  // the part where it's big and blinking
		  if(toggle){
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d017      	beq.n	8000dbc <main+0xf0>
			  sprintf(tmpTime,"%s %02d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000d8c:	4b70      	ldr	r3, [pc, #448]	; (8000f50 <main+0x284>)
 8000d8e:	78db      	ldrb	r3, [r3, #3]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	4a76      	ldr	r2, [pc, #472]	; (8000f74 <main+0x2a8>)
 8000d9a:	441a      	add	r2, r3
 8000d9c:	4b6c      	ldr	r3, [pc, #432]	; (8000f50 <main+0x284>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	4b6b      	ldr	r3, [pc, #428]	; (8000f50 <main+0x284>)
 8000da4:	785b      	ldrb	r3, [r3, #1]
 8000da6:	4619      	mov	r1, r3
 8000da8:	4b69      	ldr	r3, [pc, #420]	; (8000f50 <main+0x284>)
 8000daa:	789b      	ldrb	r3, [r3, #2]
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	9100      	str	r1, [sp, #0]
 8000db0:	4603      	mov	r3, r0
 8000db2:	4971      	ldr	r1, [pc, #452]	; (8000f78 <main+0x2ac>)
 8000db4:	4871      	ldr	r0, [pc, #452]	; (8000f7c <main+0x2b0>)
 8000db6:	f005 fe3f 	bl	8006a38 <siprintf>
 8000dba:	e111      	b.n	8000fe0 <main+0x314>
		  }else{
			  if(setmode==AMPM){
 8000dbc:	4b70      	ldr	r3, [pc, #448]	; (8000f80 <main+0x2b4>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10e      	bne.n	8000de2 <main+0x116>
				  sprintf(tmpTime,"   %02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000dc4:	4b62      	ldr	r3, [pc, #392]	; (8000f50 <main+0x284>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b61      	ldr	r3, [pc, #388]	; (8000f50 <main+0x284>)
 8000dcc:	785b      	ldrb	r3, [r3, #1]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4b5f      	ldr	r3, [pc, #380]	; (8000f50 <main+0x284>)
 8000dd2:	789b      	ldrb	r3, [r3, #2]
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	496a      	ldr	r1, [pc, #424]	; (8000f84 <main+0x2b8>)
 8000dda:	4868      	ldr	r0, [pc, #416]	; (8000f7c <main+0x2b0>)
 8000ddc:	f005 fe2c 	bl	8006a38 <siprintf>
 8000de0:	e0fe      	b.n	8000fe0 <main+0x314>
			  }else if(setmode==HOUR_T){
 8000de2:	4b67      	ldr	r3, [pc, #412]	; (8000f80 <main+0x2b4>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d122      	bne.n	8000e30 <main+0x164>
				  sprintf(tmpTime,"%s  %d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours%10, sTime.Minutes, sTime.Seconds);
 8000dea:	4b59      	ldr	r3, [pc, #356]	; (8000f50 <main+0x284>)
 8000dec:	78db      	ldrb	r3, [r3, #3]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	4a5f      	ldr	r2, [pc, #380]	; (8000f74 <main+0x2a8>)
 8000df8:	1898      	adds	r0, r3, r2
 8000dfa:	4b55      	ldr	r3, [pc, #340]	; (8000f50 <main+0x284>)
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	4b62      	ldr	r3, [pc, #392]	; (8000f88 <main+0x2bc>)
 8000e00:	fba3 1302 	umull	r1, r3, r3, r2
 8000e04:	08d9      	lsrs	r1, r3, #3
 8000e06:	460b      	mov	r3, r1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4619      	mov	r1, r3
 8000e14:	4b4e      	ldr	r3, [pc, #312]	; (8000f50 <main+0x284>)
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b4d      	ldr	r3, [pc, #308]	; (8000f50 <main+0x284>)
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	9200      	str	r2, [sp, #0]
 8000e22:	460b      	mov	r3, r1
 8000e24:	4602      	mov	r2, r0
 8000e26:	4959      	ldr	r1, [pc, #356]	; (8000f8c <main+0x2c0>)
 8000e28:	4854      	ldr	r0, [pc, #336]	; (8000f7c <main+0x2b0>)
 8000e2a:	f005 fe05 	bl	8006a38 <siprintf>
 8000e2e:	e0d7      	b.n	8000fe0 <main+0x314>
			  }else if(setmode==HOUR_O){
 8000e30:	4b53      	ldr	r3, [pc, #332]	; (8000f80 <main+0x2b4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d11c      	bne.n	8000e72 <main+0x1a6>
				  sprintf(tmpTime,"%s %d :%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours/10, sTime.Minutes, sTime.Seconds);
 8000e38:	4b45      	ldr	r3, [pc, #276]	; (8000f50 <main+0x284>)
 8000e3a:	78db      	ldrb	r3, [r3, #3]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	4a4b      	ldr	r2, [pc, #300]	; (8000f74 <main+0x2a8>)
 8000e46:	441a      	add	r2, r3
 8000e48:	4b41      	ldr	r3, [pc, #260]	; (8000f50 <main+0x284>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	494e      	ldr	r1, [pc, #312]	; (8000f88 <main+0x2bc>)
 8000e4e:	fba1 1303 	umull	r1, r3, r1, r3
 8000e52:	08db      	lsrs	r3, r3, #3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	4b3d      	ldr	r3, [pc, #244]	; (8000f50 <main+0x284>)
 8000e5a:	785b      	ldrb	r3, [r3, #1]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4b3c      	ldr	r3, [pc, #240]	; (8000f50 <main+0x284>)
 8000e60:	789b      	ldrb	r3, [r3, #2]
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	9100      	str	r1, [sp, #0]
 8000e66:	4603      	mov	r3, r0
 8000e68:	4949      	ldr	r1, [pc, #292]	; (8000f90 <main+0x2c4>)
 8000e6a:	4844      	ldr	r0, [pc, #272]	; (8000f7c <main+0x2b0>)
 8000e6c:	f005 fde4 	bl	8006a38 <siprintf>
 8000e70:	e0b6      	b.n	8000fe0 <main+0x314>
			  }else if(setmode==MINUTE_T){
 8000e72:	4b43      	ldr	r3, [pc, #268]	; (8000f80 <main+0x2b4>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d122      	bne.n	8000ec0 <main+0x1f4>
				  sprintf(tmpTime,"%s %02d: %d:%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes%10, sTime.Seconds);
 8000e7a:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <main+0x284>)
 8000e7c:	78db      	ldrb	r3, [r3, #3]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	4a3b      	ldr	r2, [pc, #236]	; (8000f74 <main+0x2a8>)
 8000e88:	1898      	adds	r0, r3, r2
 8000e8a:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <main+0x284>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461c      	mov	r4, r3
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <main+0x284>)
 8000e92:	785a      	ldrb	r2, [r3, #1]
 8000e94:	4b3c      	ldr	r3, [pc, #240]	; (8000f88 <main+0x2bc>)
 8000e96:	fba3 1302 	umull	r1, r3, r3, r2
 8000e9a:	08d9      	lsrs	r1, r3, #3
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <main+0x284>)
 8000eac:	789b      	ldrb	r3, [r3, #2]
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	9200      	str	r2, [sp, #0]
 8000eb2:	4623      	mov	r3, r4
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4937      	ldr	r1, [pc, #220]	; (8000f94 <main+0x2c8>)
 8000eb8:	4830      	ldr	r0, [pc, #192]	; (8000f7c <main+0x2b0>)
 8000eba:	f005 fdbd 	bl	8006a38 <siprintf>
 8000ebe:	e08f      	b.n	8000fe0 <main+0x314>
			  }else if(setmode==MINUTE_O){
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <main+0x2b4>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d11c      	bne.n	8000f02 <main+0x236>
				  sprintf(tmpTime,"%s %02d:%d :%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes/10, sTime.Seconds);
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <main+0x284>)
 8000eca:	78db      	ldrb	r3, [r3, #3]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <main+0x2a8>)
 8000ed6:	441a      	add	r2, r3
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <main+0x284>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <main+0x284>)
 8000ee0:	785b      	ldrb	r3, [r3, #1]
 8000ee2:	4929      	ldr	r1, [pc, #164]	; (8000f88 <main+0x2bc>)
 8000ee4:	fba1 1303 	umull	r1, r3, r1, r3
 8000ee8:	08db      	lsrs	r3, r3, #3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4619      	mov	r1, r3
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <main+0x284>)
 8000ef0:	789b      	ldrb	r3, [r3, #2]
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	9100      	str	r1, [sp, #0]
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4927      	ldr	r1, [pc, #156]	; (8000f98 <main+0x2cc>)
 8000efa:	4820      	ldr	r0, [pc, #128]	; (8000f7c <main+0x2b0>)
 8000efc:	f005 fd9c 	bl	8006a38 <siprintf>
 8000f00:	e06e      	b.n	8000fe0 <main+0x314>
			  }else if(setmode==SECOND_T){
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <main+0x2b4>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b05      	cmp	r3, #5
 8000f08:	d14a      	bne.n	8000fa0 <main+0x2d4>
				  sprintf(tmpTime,"%s %02d:%02d: %d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds%10);
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <main+0x284>)
 8000f0c:	78db      	ldrb	r3, [r3, #3]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <main+0x2a8>)
 8000f18:	1898      	adds	r0, r3, r2
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <main+0x284>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461d      	mov	r5, r3
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <main+0x284>)
 8000f22:	785b      	ldrb	r3, [r3, #1]
 8000f24:	461c      	mov	r4, r3
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <main+0x284>)
 8000f28:	789a      	ldrb	r2, [r3, #2]
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <main+0x2bc>)
 8000f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8000f30:	08d9      	lsrs	r1, r3, #3
 8000f32:	460b      	mov	r3, r1
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	9400      	str	r4, [sp, #0]
 8000f42:	462b      	mov	r3, r5
 8000f44:	4602      	mov	r2, r0
 8000f46:	4915      	ldr	r1, [pc, #84]	; (8000f9c <main+0x2d0>)
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <main+0x2b0>)
 8000f4a:	f005 fd75 	bl	8006a38 <siprintf>
 8000f4e:	e047      	b.n	8000fe0 <main+0x314>
 8000f50:	2000034c 	.word	0x2000034c
 8000f54:	20000400 	.word	0x20000400
 8000f58:	20000360 	.word	0x20000360
 8000f5c:	200003eb 	.word	0x200003eb
 8000f60:	08007398 	.word	0x08007398
 8000f64:	20000080 	.word	0x20000080
 8000f68:	200003e4 	.word	0x200003e4
 8000f6c:	200003e8 	.word	0x200003e8
 8000f70:	200003e9 	.word	0x200003e9
 8000f74:	20000000 	.word	0x20000000
 8000f78:	080073a8 	.word	0x080073a8
 8000f7c:	20000380 	.word	0x20000380
 8000f80:	2000037c 	.word	0x2000037c
 8000f84:	080073bc 	.word	0x080073bc
 8000f88:	cccccccd 	.word	0xcccccccd
 8000f8c:	080073d0 	.word	0x080073d0
 8000f90:	080073e4 	.word	0x080073e4
 8000f94:	080073f8 	.word	0x080073f8
 8000f98:	0800740c 	.word	0x0800740c
 8000f9c:	08007420 	.word	0x08007420
			  }else if(setmode==SECOND_O){
 8000fa0:	4b9e      	ldr	r3, [pc, #632]	; (800121c <main+0x550>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b06      	cmp	r3, #6
 8000fa6:	d11b      	bne.n	8000fe0 <main+0x314>
				  sprintf(tmpTime,"%s %02d:%02d:%d ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds/10);
 8000fa8:	4b9d      	ldr	r3, [pc, #628]	; (8001220 <main+0x554>)
 8000faa:	78db      	ldrb	r3, [r3, #3]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a9b      	ldr	r2, [pc, #620]	; (8001224 <main+0x558>)
 8000fb6:	441a      	add	r2, r3
 8000fb8:	4b99      	ldr	r3, [pc, #612]	; (8001220 <main+0x554>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461c      	mov	r4, r3
 8000fbe:	4b98      	ldr	r3, [pc, #608]	; (8001220 <main+0x554>)
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	4b96      	ldr	r3, [pc, #600]	; (8001220 <main+0x554>)
 8000fc6:	789b      	ldrb	r3, [r3, #2]
 8000fc8:	4997      	ldr	r1, [pc, #604]	; (8001228 <main+0x55c>)
 8000fca:	fba1 1303 	umull	r1, r3, r1, r3
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	9000      	str	r0, [sp, #0]
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4994      	ldr	r1, [pc, #592]	; (800122c <main+0x560>)
 8000fda:	4895      	ldr	r0, [pc, #596]	; (8001230 <main+0x564>)
 8000fdc:	f005 fd2c 	bl	8006a38 <siprintf>
			  }
		  }

		  lcd_put_cur(1,0);;
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff fe51 	bl	8000c8a <lcd_put_cur>
		  LCD_SendString(tmpTime);
 8000fe8:	4891      	ldr	r0, [pc, #580]	; (8001230 <main+0x564>)
 8000fea:	f7ff fe31 	bl	8000c50 <LCD_SendString>
		  // Check the Change Mode button
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff2:	4890      	ldr	r0, [pc, #576]	; (8001234 <main+0x568>)
 8000ff4:	f002 f97e 	bl	80032f4 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f43f ae8b 	beq.w	8000d16 <main+0x4a>
			  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001000:	2200      	movs	r2, #0
 8001002:	4987      	ldr	r1, [pc, #540]	; (8001220 <main+0x554>)
 8001004:	488c      	ldr	r0, [pc, #560]	; (8001238 <main+0x56c>)
 8001006:	f003 fe59 	bl	8004cbc <HAL_RTC_SetTime>
			  mode=NORMAL;
 800100a:	4b8c      	ldr	r3, [pc, #560]	; (800123c <main+0x570>)
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e681      	b.n	8000d16 <main+0x4a>
		  }
	  }
	  // normal mode
	  else if(mode==NORMAL){
 8001012:	4b8a      	ldr	r3, [pc, #552]	; (800123c <main+0x570>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	f040 809f 	bne.w	800115a <main+0x48e>

		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800101c:	2200      	movs	r2, #0
 800101e:	4980      	ldr	r1, [pc, #512]	; (8001220 <main+0x554>)
 8001020:	4885      	ldr	r0, [pc, #532]	; (8001238 <main+0x56c>)
 8001022:	f003 fee5 	bl	8004df0 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001026:	2200      	movs	r2, #0
 8001028:	4985      	ldr	r1, [pc, #532]	; (8001240 <main+0x574>)
 800102a:	4883      	ldr	r0, [pc, #524]	; (8001238 <main+0x56c>)
 800102c:	f003 ff3e 	bl	8004eac <HAL_RTC_GetDate>
		  sprintf(tmpTime,"%s %02d:%02d:%02d    ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001030:	4b7b      	ldr	r3, [pc, #492]	; (8001220 <main+0x554>)
 8001032:	78db      	ldrb	r3, [r3, #3]
 8001034:	461a      	mov	r2, r3
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	4a79      	ldr	r2, [pc, #484]	; (8001224 <main+0x558>)
 800103e:	441a      	add	r2, r3
 8001040:	4b77      	ldr	r3, [pc, #476]	; (8001220 <main+0x554>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	4b76      	ldr	r3, [pc, #472]	; (8001220 <main+0x554>)
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	4619      	mov	r1, r3
 800104c:	4b74      	ldr	r3, [pc, #464]	; (8001220 <main+0x554>)
 800104e:	789b      	ldrb	r3, [r3, #2]
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	9100      	str	r1, [sp, #0]
 8001054:	4603      	mov	r3, r0
 8001056:	497b      	ldr	r1, [pc, #492]	; (8001244 <main+0x578>)
 8001058:	4875      	ldr	r0, [pc, #468]	; (8001230 <main+0x564>)
 800105a:	f005 fced 	bl	8006a38 <siprintf>
		  lcd_put_cur(0,0);
 800105e:	2100      	movs	r1, #0
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fe12 	bl	8000c8a <lcd_put_cur>
		  LCD_SendString("Current Time   ");
 8001066:	4878      	ldr	r0, [pc, #480]	; (8001248 <main+0x57c>)
 8001068:	f7ff fdf2 	bl	8000c50 <LCD_SendString>
		  lcd_put_cur(1,0);
 800106c:	2100      	movs	r1, #0
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff fe0b 	bl	8000c8a <lcd_put_cur>
		  LCD_SendString(tmpTime);
 8001074:	486e      	ldr	r0, [pc, #440]	; (8001230 <main+0x564>)
 8001076:	f7ff fdeb 	bl	8000c50 <LCD_SendString>


		  if(sTime.TimeFormat==aTime.TimeFormat
 800107a:	4b69      	ldr	r3, [pc, #420]	; (8001220 <main+0x554>)
 800107c:	78da      	ldrb	r2, [r3, #3]
 800107e:	4b73      	ldr	r3, [pc, #460]	; (800124c <main+0x580>)
 8001080:	78db      	ldrb	r3, [r3, #3]
 8001082:	429a      	cmp	r2, r3
 8001084:	d114      	bne.n	80010b0 <main+0x3e4>
				  && sTime.Hours==aTime.Hours
 8001086:	4b66      	ldr	r3, [pc, #408]	; (8001220 <main+0x554>)
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	4b70      	ldr	r3, [pc, #448]	; (800124c <main+0x580>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d10e      	bne.n	80010b0 <main+0x3e4>
				  && sTime.Minutes==aTime.Minutes
 8001092:	4b63      	ldr	r3, [pc, #396]	; (8001220 <main+0x554>)
 8001094:	785a      	ldrb	r2, [r3, #1]
 8001096:	4b6d      	ldr	r3, [pc, #436]	; (800124c <main+0x580>)
 8001098:	785b      	ldrb	r3, [r3, #1]
 800109a:	429a      	cmp	r2, r3
 800109c:	d108      	bne.n	80010b0 <main+0x3e4>
				  && sTime.Seconds==aTime.Seconds){
 800109e:	4b60      	ldr	r3, [pc, #384]	; (8001220 <main+0x554>)
 80010a0:	789a      	ldrb	r2, [r3, #2]
 80010a2:	4b6a      	ldr	r3, [pc, #424]	; (800124c <main+0x580>)
 80010a4:	789b      	ldrb	r3, [r3, #2]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d102      	bne.n	80010b0 <main+0x3e4>
			  alarm_on=1;
 80010aa:	4b69      	ldr	r3, [pc, #420]	; (8001250 <main+0x584>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
		  }


		  if(alarm_on==1){
 80010b0:	4b67      	ldr	r3, [pc, #412]	; (8001250 <main+0x584>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d128      	bne.n	800110a <main+0x43e>
			  toggle^=1;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f083 0301 	eor.w	r3, r3, #1
 80010be:	71fb      	strb	r3, [r7, #7]
			  current_alarm_tick=HAL_GetTick();
 80010c0:	f000 ff52 	bl	8001f68 <HAL_GetTick>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a63      	ldr	r2, [pc, #396]	; (8001254 <main+0x588>)
 80010c8:	6013      	str	r3, [r2, #0]
			  if(toggle==1){
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d104      	bne.n	80010da <main+0x40e>
				  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80010d0:	2100      	movs	r1, #0
 80010d2:	4861      	ldr	r0, [pc, #388]	; (8001258 <main+0x58c>)
 80010d4:	f004 f966 	bl	80053a4 <HAL_TIM_PWM_Stop>
 80010d8:	e003      	b.n	80010e2 <main+0x416>
			  }else{
				  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010da:	2100      	movs	r1, #0
 80010dc:	485e      	ldr	r0, [pc, #376]	; (8001258 <main+0x58c>)
 80010de:	f004 f899 	bl	8005214 <HAL_TIM_PWM_Start>
			  }
			  if(current_alarm_tick-old_alarm_tick > 3000){
 80010e2:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <main+0x588>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b5d      	ldr	r3, [pc, #372]	; (800125c <main+0x590>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d90a      	bls.n	800110a <main+0x43e>
				  old_alarm_tick=current_alarm_tick;
 80010f4:	4b57      	ldr	r3, [pc, #348]	; (8001254 <main+0x588>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a58      	ldr	r2, [pc, #352]	; (800125c <main+0x590>)
 80010fa:	6013      	str	r3, [r2, #0]
				  alarm_on=0;
 80010fc:	4b54      	ldr	r3, [pc, #336]	; (8001250 <main+0x584>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001102:	2100      	movs	r1, #0
 8001104:	4854      	ldr	r0, [pc, #336]	; (8001258 <main+0x58c>)
 8001106:	f004 f94d 	bl	80053a4 <HAL_TIM_PWM_Stop>
			  }
		  }


		  if(user_pressed_flag==1){
 800110a:	4b55      	ldr	r3, [pc, #340]	; (8001260 <main+0x594>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	f47f ae01 	bne.w	8000d16 <main+0x4a>
			  current_tick=HAL_GetTick();
 8001114:	f000 ff28 	bl	8001f68 <HAL_GetTick>
 8001118:	4603      	mov	r3, r0
 800111a:	4a52      	ldr	r2, [pc, #328]	; (8001264 <main+0x598>)
 800111c:	6013      	str	r3, [r2, #0]
			  if(current_tick-old_tick > 2000){
 800111e:	4b51      	ldr	r3, [pc, #324]	; (8001264 <main+0x598>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b51      	ldr	r3, [pc, #324]	; (8001268 <main+0x59c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800112c:	f67f adf3 	bls.w	8000d16 <main+0x4a>
				  old_tick=current_tick;
 8001130:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <main+0x598>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a4c      	ldr	r2, [pc, #304]	; (8001268 <main+0x59c>)
 8001136:	6013      	str	r3, [r2, #0]
				  user_pressed_flag=0;
 8001138:	4b49      	ldr	r3, [pc, #292]	; (8001260 <main+0x594>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
				  mode=ALARM;
 800113e:	4b3f      	ldr	r3, [pc, #252]	; (800123c <main+0x570>)
 8001140:	2202      	movs	r2, #2
 8001142:	701a      	strb	r2, [r3, #0]
				  HAL_RTC_GetTime(&hrtc, &aTime, RTC_FORMAT_BIN);
 8001144:	2200      	movs	r2, #0
 8001146:	4941      	ldr	r1, [pc, #260]	; (800124c <main+0x580>)
 8001148:	483b      	ldr	r0, [pc, #236]	; (8001238 <main+0x56c>)
 800114a:	f003 fe51 	bl	8004df0 <HAL_RTC_GetTime>
				  HAL_RTC_GetDate(&hrtc, &aDate, RTC_FORMAT_BIN);
 800114e:	2200      	movs	r2, #0
 8001150:	4946      	ldr	r1, [pc, #280]	; (800126c <main+0x5a0>)
 8001152:	4839      	ldr	r0, [pc, #228]	; (8001238 <main+0x56c>)
 8001154:	f003 feaa 	bl	8004eac <HAL_RTC_GetDate>
 8001158:	e5dd      	b.n	8000d16 <main+0x4a>
			  }
		  }


	// alarm mode
	  }else if(mode==ALARM){
 800115a:	4b38      	ldr	r3, [pc, #224]	; (800123c <main+0x570>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b02      	cmp	r3, #2
 8001160:	f47f add9 	bne.w	8000d16 <main+0x4a>

		  toggle^=1;
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f083 0301 	eor.w	r3, r3, #1
 800116a:	71fb      	strb	r3, [r7, #7]

		  lcd_put_cur(0,0);
 800116c:	2100      	movs	r1, #0
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff fd8b 	bl	8000c8a <lcd_put_cur>
		  LCD_SendString("Alarm Setting");
 8001174:	483e      	ldr	r0, [pc, #248]	; (8001270 <main+0x5a4>)
 8001176:	f7ff fd6b 	bl	8000c50 <LCD_SendString>

		  HAL_ADC_Start(&hadc1);
 800117a:	483e      	ldr	r0, [pc, #248]	; (8001274 <main+0x5a8>)
 800117c:	f000 ff68 	bl	8002050 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001180:	210a      	movs	r1, #10
 8001182:	483c      	ldr	r0, [pc, #240]	; (8001274 <main+0x5a8>)
 8001184:	f001 f836 	bl	80021f4 <HAL_ADC_PollForConversion>
		  adc_value = HAL_ADC_GetValue(&hadc1);
 8001188:	483a      	ldr	r0, [pc, #232]	; (8001274 <main+0x5a8>)
 800118a:	f001 f8be 	bl	800230a <HAL_ADC_GetValue>
 800118e:	4603      	mov	r3, r0
 8001190:	4a39      	ldr	r2, [pc, #228]	; (8001278 <main+0x5ac>)
 8001192:	6013      	str	r3, [r2, #0]

		  button = getButton();
 8001194:	f000 fa00 	bl	8001598 <getButton>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b37      	ldr	r3, [pc, #220]	; (800127c <main+0x5b0>)
 800119e:	701a      	strb	r2, [r3, #0]

		  if(button!=button_before){
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <main+0x5b0>)
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	4b36      	ldr	r3, [pc, #216]	; (8001280 <main+0x5b4>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d009      	beq.n	80011c0 <main+0x4f4>
			  move_cur_time(&aTime, button);
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <main+0x5b0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4826      	ldr	r0, [pc, #152]	; (800124c <main+0x580>)
 80011b4:	f000 fa42 	bl	800163c <move_cur_time>
			  button_before=button;
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <main+0x5b0>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <main+0x5b4>)
 80011be:	701a      	strb	r2, [r3, #0]
		  }


		  if(toggle){
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d017      	beq.n	80011f6 <main+0x52a>
			  sprintf(tmpTime,"%s %02d:%02d:%02d  AL", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes, aTime.Seconds);
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <main+0x580>)
 80011c8:	78db      	ldrb	r3, [r3, #3]
 80011ca:	461a      	mov	r2, r3
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	4a14      	ldr	r2, [pc, #80]	; (8001224 <main+0x558>)
 80011d4:	441a      	add	r2, r3
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <main+0x580>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <main+0x580>)
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <main+0x580>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	9100      	str	r1, [sp, #0]
 80011ea:	4603      	mov	r3, r0
 80011ec:	4925      	ldr	r1, [pc, #148]	; (8001284 <main+0x5b8>)
 80011ee:	4810      	ldr	r0, [pc, #64]	; (8001230 <main+0x564>)
 80011f0:	f005 fc22 	bl	8006a38 <siprintf>
 80011f4:	e121      	b.n	800143a <main+0x76e>
		  }else{
			  if(setmode==AMPM){
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <main+0x550>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d146      	bne.n	800128c <main+0x5c0>
				  sprintf(tmpTime,"   %02d:%02d:%02d  AL", aTime.Hours, aTime.Minutes, aTime.Seconds);
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <main+0x580>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <main+0x580>)
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	4619      	mov	r1, r3
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <main+0x580>)
 800120c:	789b      	ldrb	r3, [r3, #2]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	460b      	mov	r3, r1
 8001212:	491d      	ldr	r1, [pc, #116]	; (8001288 <main+0x5bc>)
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <main+0x564>)
 8001216:	f005 fc0f 	bl	8006a38 <siprintf>
 800121a:	e10e      	b.n	800143a <main+0x76e>
 800121c:	2000037c 	.word	0x2000037c
 8001220:	2000034c 	.word	0x2000034c
 8001224:	20000000 	.word	0x20000000
 8001228:	cccccccd 	.word	0xcccccccd
 800122c:	08007434 	.word	0x08007434
 8001230:	20000380 	.word	0x20000380
 8001234:	40020800 	.word	0x40020800
 8001238:	20000400 	.word	0x20000400
 800123c:	200003eb 	.word	0x200003eb
 8001240:	20000360 	.word	0x20000360
 8001244:	08007448 	.word	0x08007448
 8001248:	08007460 	.word	0x08007460
 800124c:	20000364 	.word	0x20000364
 8001250:	200003fc 	.word	0x200003fc
 8001254:	200003f8 	.word	0x200003f8
 8001258:	20000424 	.word	0x20000424
 800125c:	200003f4 	.word	0x200003f4
 8001260:	200003ea 	.word	0x200003ea
 8001264:	200003f0 	.word	0x200003f0
 8001268:	200003ec 	.word	0x200003ec
 800126c:	20000378 	.word	0x20000378
 8001270:	08007470 	.word	0x08007470
 8001274:	20000080 	.word	0x20000080
 8001278:	200003e4 	.word	0x200003e4
 800127c:	200003e8 	.word	0x200003e8
 8001280:	200003e9 	.word	0x200003e9
 8001284:	08007480 	.word	0x08007480
 8001288:	08007498 	.word	0x08007498
			  }else if(setmode==HOUR_T){
 800128c:	4b7d      	ldr	r3, [pc, #500]	; (8001484 <main+0x7b8>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d122      	bne.n	80012da <main+0x60e>
				  sprintf(tmpTime,"%s  %d:%02d:%02d  AL", ampm[aTime.TimeFormat], aTime.Hours%10, aTime.Minutes, aTime.Seconds);
 8001294:	4b7c      	ldr	r3, [pc, #496]	; (8001488 <main+0x7bc>)
 8001296:	78db      	ldrb	r3, [r3, #3]
 8001298:	461a      	mov	r2, r3
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	4a7a      	ldr	r2, [pc, #488]	; (800148c <main+0x7c0>)
 80012a2:	1898      	adds	r0, r3, r2
 80012a4:	4b78      	ldr	r3, [pc, #480]	; (8001488 <main+0x7bc>)
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	4b79      	ldr	r3, [pc, #484]	; (8001490 <main+0x7c4>)
 80012aa:	fba3 1302 	umull	r1, r3, r3, r2
 80012ae:	08d9      	lsrs	r1, r3, #3
 80012b0:	460b      	mov	r3, r1
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4619      	mov	r1, r3
 80012be:	4b72      	ldr	r3, [pc, #456]	; (8001488 <main+0x7bc>)
 80012c0:	785b      	ldrb	r3, [r3, #1]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b70      	ldr	r3, [pc, #448]	; (8001488 <main+0x7bc>)
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	9200      	str	r2, [sp, #0]
 80012cc:	460b      	mov	r3, r1
 80012ce:	4602      	mov	r2, r0
 80012d0:	4970      	ldr	r1, [pc, #448]	; (8001494 <main+0x7c8>)
 80012d2:	4871      	ldr	r0, [pc, #452]	; (8001498 <main+0x7cc>)
 80012d4:	f005 fbb0 	bl	8006a38 <siprintf>
 80012d8:	e0af      	b.n	800143a <main+0x76e>
			  }else if(setmode==HOUR_O){
 80012da:	4b6a      	ldr	r3, [pc, #424]	; (8001484 <main+0x7b8>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d11c      	bne.n	800131c <main+0x650>
				  sprintf(tmpTime,"%s %d :%02d:%02d  AL", ampm[aTime.TimeFormat], aTime.Hours/10, aTime.Minutes, aTime.Seconds);
 80012e2:	4b69      	ldr	r3, [pc, #420]	; (8001488 <main+0x7bc>)
 80012e4:	78db      	ldrb	r3, [r3, #3]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	4a67      	ldr	r2, [pc, #412]	; (800148c <main+0x7c0>)
 80012f0:	441a      	add	r2, r3
 80012f2:	4b65      	ldr	r3, [pc, #404]	; (8001488 <main+0x7bc>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	4966      	ldr	r1, [pc, #408]	; (8001490 <main+0x7c4>)
 80012f8:	fba1 1303 	umull	r1, r3, r1, r3
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	4b61      	ldr	r3, [pc, #388]	; (8001488 <main+0x7bc>)
 8001304:	785b      	ldrb	r3, [r3, #1]
 8001306:	4619      	mov	r1, r3
 8001308:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <main+0x7bc>)
 800130a:	789b      	ldrb	r3, [r3, #2]
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	9100      	str	r1, [sp, #0]
 8001310:	4603      	mov	r3, r0
 8001312:	4962      	ldr	r1, [pc, #392]	; (800149c <main+0x7d0>)
 8001314:	4860      	ldr	r0, [pc, #384]	; (8001498 <main+0x7cc>)
 8001316:	f005 fb8f 	bl	8006a38 <siprintf>
 800131a:	e08e      	b.n	800143a <main+0x76e>
			  }else if(setmode==MINUTE_T){
 800131c:	4b59      	ldr	r3, [pc, #356]	; (8001484 <main+0x7b8>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d122      	bne.n	800136a <main+0x69e>
				  sprintf(tmpTime,"%s %02d: %d:%02d  AL", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes%10, aTime.Seconds);
 8001324:	4b58      	ldr	r3, [pc, #352]	; (8001488 <main+0x7bc>)
 8001326:	78db      	ldrb	r3, [r3, #3]
 8001328:	461a      	mov	r2, r3
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	4a56      	ldr	r2, [pc, #344]	; (800148c <main+0x7c0>)
 8001332:	1898      	adds	r0, r3, r2
 8001334:	4b54      	ldr	r3, [pc, #336]	; (8001488 <main+0x7bc>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461c      	mov	r4, r3
 800133a:	4b53      	ldr	r3, [pc, #332]	; (8001488 <main+0x7bc>)
 800133c:	785a      	ldrb	r2, [r3, #1]
 800133e:	4b54      	ldr	r3, [pc, #336]	; (8001490 <main+0x7c4>)
 8001340:	fba3 1302 	umull	r1, r3, r3, r2
 8001344:	08d9      	lsrs	r1, r3, #3
 8001346:	460b      	mov	r3, r1
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <main+0x7bc>)
 8001356:	789b      	ldrb	r3, [r3, #2]
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	9200      	str	r2, [sp, #0]
 800135c:	4623      	mov	r3, r4
 800135e:	4602      	mov	r2, r0
 8001360:	494f      	ldr	r1, [pc, #316]	; (80014a0 <main+0x7d4>)
 8001362:	484d      	ldr	r0, [pc, #308]	; (8001498 <main+0x7cc>)
 8001364:	f005 fb68 	bl	8006a38 <siprintf>
 8001368:	e067      	b.n	800143a <main+0x76e>
			  }else if(setmode==MINUTE_O){
 800136a:	4b46      	ldr	r3, [pc, #280]	; (8001484 <main+0x7b8>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b04      	cmp	r3, #4
 8001370:	d11c      	bne.n	80013ac <main+0x6e0>
				  sprintf(tmpTime,"%s %02d:%d :%02d  AL", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes/10, aTime.Seconds);
 8001372:	4b45      	ldr	r3, [pc, #276]	; (8001488 <main+0x7bc>)
 8001374:	78db      	ldrb	r3, [r3, #3]
 8001376:	461a      	mov	r2, r3
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	4a43      	ldr	r2, [pc, #268]	; (800148c <main+0x7c0>)
 8001380:	441a      	add	r2, r3
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <main+0x7bc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <main+0x7bc>)
 800138a:	785b      	ldrb	r3, [r3, #1]
 800138c:	4940      	ldr	r1, [pc, #256]	; (8001490 <main+0x7c4>)
 800138e:	fba1 1303 	umull	r1, r3, r1, r3
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <main+0x7bc>)
 800139a:	789b      	ldrb	r3, [r3, #2]
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	9100      	str	r1, [sp, #0]
 80013a0:	4603      	mov	r3, r0
 80013a2:	4940      	ldr	r1, [pc, #256]	; (80014a4 <main+0x7d8>)
 80013a4:	483c      	ldr	r0, [pc, #240]	; (8001498 <main+0x7cc>)
 80013a6:	f005 fb47 	bl	8006a38 <siprintf>
 80013aa:	e046      	b.n	800143a <main+0x76e>
			  }else if(setmode==SECOND_T){
 80013ac:	4b35      	ldr	r3, [pc, #212]	; (8001484 <main+0x7b8>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d122      	bne.n	80013fa <main+0x72e>
				  sprintf(tmpTime,"%s %02d:%02d: %d  AL", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes, aTime.Seconds%10);
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <main+0x7bc>)
 80013b6:	78db      	ldrb	r3, [r3, #3]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	4a32      	ldr	r2, [pc, #200]	; (800148c <main+0x7c0>)
 80013c2:	1898      	adds	r0, r3, r2
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <main+0x7bc>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461d      	mov	r5, r3
 80013ca:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <main+0x7bc>)
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	461c      	mov	r4, r3
 80013d0:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <main+0x7bc>)
 80013d2:	789a      	ldrb	r2, [r3, #2]
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <main+0x7c4>)
 80013d6:	fba3 1302 	umull	r1, r3, r3, r2
 80013da:	08d9      	lsrs	r1, r3, #3
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	9400      	str	r4, [sp, #0]
 80013ec:	462b      	mov	r3, r5
 80013ee:	4602      	mov	r2, r0
 80013f0:	492d      	ldr	r1, [pc, #180]	; (80014a8 <main+0x7dc>)
 80013f2:	4829      	ldr	r0, [pc, #164]	; (8001498 <main+0x7cc>)
 80013f4:	f005 fb20 	bl	8006a38 <siprintf>
 80013f8:	e01f      	b.n	800143a <main+0x76e>
			  }else if(setmode==SECOND_O){
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <main+0x7b8>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d11b      	bne.n	800143a <main+0x76e>
				  sprintf(tmpTime,"%s %02d:%02d:%d   AL", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes, aTime.Seconds/10);
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <main+0x7bc>)
 8001404:	78db      	ldrb	r3, [r3, #3]
 8001406:	461a      	mov	r2, r3
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	4a1f      	ldr	r2, [pc, #124]	; (800148c <main+0x7c0>)
 8001410:	441a      	add	r2, r3
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <main+0x7bc>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461c      	mov	r4, r3
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <main+0x7bc>)
 800141a:	785b      	ldrb	r3, [r3, #1]
 800141c:	4618      	mov	r0, r3
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <main+0x7bc>)
 8001420:	789b      	ldrb	r3, [r3, #2]
 8001422:	491b      	ldr	r1, [pc, #108]	; (8001490 <main+0x7c4>)
 8001424:	fba1 1303 	umull	r1, r3, r1, r3
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	9000      	str	r0, [sp, #0]
 8001430:	4623      	mov	r3, r4
 8001432:	491e      	ldr	r1, [pc, #120]	; (80014ac <main+0x7e0>)
 8001434:	4818      	ldr	r0, [pc, #96]	; (8001498 <main+0x7cc>)
 8001436:	f005 faff 	bl	8006a38 <siprintf>
			  }
		  }


		  lcd_put_cur(1,0);
 800143a:	2100      	movs	r1, #0
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff fc24 	bl	8000c8a <lcd_put_cur>
		  LCD_SendString(tmpTime);
 8001442:	4815      	ldr	r0, [pc, #84]	; (8001498 <main+0x7cc>)
 8001444:	f7ff fc04 	bl	8000c50 <LCD_SendString>



		  if(user_pressed_flag==1){
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <main+0x7e4>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	f47f ac62 	bne.w	8000d16 <main+0x4a>
			  current_tick=HAL_GetTick();
 8001452:	f000 fd89 	bl	8001f68 <HAL_GetTick>
 8001456:	4603      	mov	r3, r0
 8001458:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <main+0x7e8>)
 800145a:	6013      	str	r3, [r2, #0]
			  if(current_tick-old_tick > 1){
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <main+0x7e8>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <main+0x7ec>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b01      	cmp	r3, #1
 8001468:	f67f ac55 	bls.w	8000d16 <main+0x4a>
				  old_tick=current_tick;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <main+0x7e8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a11      	ldr	r2, [pc, #68]	; (80014b8 <main+0x7ec>)
 8001472:	6013      	str	r3, [r2, #0]
				  user_pressed_flag=0;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <main+0x7e4>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
				  mode=NORMAL;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <main+0x7f0>)
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
	  if(mode==SETTING)
 8001480:	e449      	b.n	8000d16 <main+0x4a>
 8001482:	bf00      	nop
 8001484:	2000037c 	.word	0x2000037c
 8001488:	20000364 	.word	0x20000364
 800148c:	20000000 	.word	0x20000000
 8001490:	cccccccd 	.word	0xcccccccd
 8001494:	080074b0 	.word	0x080074b0
 8001498:	20000380 	.word	0x20000380
 800149c:	080074c8 	.word	0x080074c8
 80014a0:	080074e0 	.word	0x080074e0
 80014a4:	080074f8 	.word	0x080074f8
 80014a8:	08007510 	.word	0x08007510
 80014ac:	08007528 	.word	0x08007528
 80014b0:	200003ea 	.word	0x200003ea
 80014b4:	200003f0 	.word	0x200003f0
 80014b8:	200003ec 	.word	0x200003ec
 80014bc:	200003eb 	.word	0x200003eb

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	; 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0320 	add.w	r3, r7, #32
 80014ca:	2230      	movs	r2, #48	; 0x30
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 fad2 	bl	8006a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <SystemClock_Config+0xd0>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a28      	ldr	r2, [pc, #160]	; (8001590 <SystemClock_Config+0xd0>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <SystemClock_Config+0xd0>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	4b23      	ldr	r3, [pc, #140]	; (8001594 <SystemClock_Config+0xd4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a22      	ldr	r2, [pc, #136]	; (8001594 <SystemClock_Config+0xd4>)
 800150a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <SystemClock_Config+0xd4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800151c:	2305      	movs	r3, #5
 800151e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001520:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001526:	2301      	movs	r3, #1
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001534:	2304      	movs	r3, #4
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001538:	23a8      	movs	r3, #168	; 0xa8
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001540:	2307      	movs	r3, #7
 8001542:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	4618      	mov	r0, r3
 800154a:	f002 fce9 	bl	8003f20 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001554:	f000 f9c0 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001564:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2105      	movs	r1, #5
 8001576:	4618      	mov	r0, r3
 8001578:	f002 ff4a 	bl	8004410 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001582:	f000 f9a9 	bl	80018d8 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3750      	adds	r7, #80	; 0x50
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000

08001598 <getButton>:

/* USER CODE BEGIN 4 */
_Direction getButton(){
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

	if(adc_value > 3700){
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <getButton+0x9c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f640 6274 	movw	r2, #3700	; 0xe74
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <getButton+0x14>
		return NONE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e03e      	b.n	800162a <getButton+0x92>
	}else if(adc_value < 20 && button_before==NONE){
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <getButton+0x9c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b13      	cmp	r3, #19
 80015b2:	d805      	bhi.n	80015c0 <getButton+0x28>
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <getButton+0xa0>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <getButton+0x28>
		return UP;
 80015bc:	2301      	movs	r3, #1
 80015be:	e034      	b.n	800162a <getButton+0x92>
	}else if(adc_value > 800 && adc_value < 900 && button_before==NONE){
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <getButton+0x9c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80015c8:	d90a      	bls.n	80015e0 <getButton+0x48>
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <getButton+0x9c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80015d2:	d205      	bcs.n	80015e0 <getButton+0x48>
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <getButton+0xa0>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <getButton+0x48>
		return DOWN;
 80015dc:	2302      	movs	r3, #2
 80015de:	e024      	b.n	800162a <getButton+0x92>
	}else if(adc_value > 1700 && adc_value < 2100 && button_before==NONE){
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <getButton+0x9c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d90b      	bls.n	8001604 <getButton+0x6c>
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <getButton+0x9c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f640 0233 	movw	r2, #2099	; 0x833
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d805      	bhi.n	8001604 <getButton+0x6c>
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <getButton+0xa0>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <getButton+0x6c>
		return LEFT;
 8001600:	2304      	movs	r3, #4
 8001602:	e012      	b.n	800162a <getButton+0x92>
	}else if(adc_value > 2700 && adc_value < 3100 && button_before==NONE){
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <getButton+0x9c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f640 228c 	movw	r2, #2700	; 0xa8c
 800160c:	4293      	cmp	r3, r2
 800160e:	d90b      	bls.n	8001628 <getButton+0x90>
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <getButton+0x9c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f640 421b 	movw	r2, #3099	; 0xc1b
 8001618:	4293      	cmp	r3, r2
 800161a:	d805      	bhi.n	8001628 <getButton+0x90>
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <getButton+0xa0>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <getButton+0x90>
		return RIGHT;
 8001624:	2303      	movs	r3, #3
 8001626:	e000      	b.n	800162a <getButton+0x92>
	}else
		return UNKNOWN;
 8001628:	2305      	movs	r3, #5
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	200003e4 	.word	0x200003e4
 8001638:	200003e9 	.word	0x200003e9

0800163c <move_cur_time>:

void move_cur_time(RTC_TimeTypeDef *Time, _Direction direction){
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
	switch(direction){
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	2b05      	cmp	r3, #5
 800164c:	f200 813d 	bhi.w	80018ca <move_cur_time+0x28e>
 8001650:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <move_cur_time+0x1c>)
 8001652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001656:	bf00      	nop
 8001658:	080018b5 	.word	0x080018b5
 800165c:	080016a7 	.word	0x080016a7
 8001660:	080017b5 	.word	0x080017b5
 8001664:	08001671 	.word	0x08001671
 8001668:	0800168f 	.word	0x0800168f
 800166c:	080018b5 	.word	0x080018b5
	case RIGHT:
		setmode++;
 8001670:	4b92      	ldr	r3, [pc, #584]	; (80018bc <move_cur_time+0x280>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	b2da      	uxtb	r2, r3
 8001678:	4b90      	ldr	r3, [pc, #576]	; (80018bc <move_cur_time+0x280>)
 800167a:	701a      	strb	r2, [r3, #0]
		if(setmode > SECOND_O) setmode = SECOND_O;
 800167c:	4b8f      	ldr	r3, [pc, #572]	; (80018bc <move_cur_time+0x280>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b06      	cmp	r3, #6
 8001682:	f240 8119 	bls.w	80018b8 <move_cur_time+0x27c>
 8001686:	4b8d      	ldr	r3, [pc, #564]	; (80018bc <move_cur_time+0x280>)
 8001688:	2206      	movs	r2, #6
 800168a:	701a      	strb	r2, [r3, #0]
		break;
 800168c:	e114      	b.n	80018b8 <move_cur_time+0x27c>
	case LEFT:
		if(setmode > AMPM) setmode--;
 800168e:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <move_cur_time+0x280>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8114 	beq.w	80018c0 <move_cur_time+0x284>
 8001698:	4b88      	ldr	r3, [pc, #544]	; (80018bc <move_cur_time+0x280>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	3b01      	subs	r3, #1
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b86      	ldr	r3, [pc, #536]	; (80018bc <move_cur_time+0x280>)
 80016a2:	701a      	strb	r2, [r3, #0]
		break;
 80016a4:	e10c      	b.n	80018c0 <move_cur_time+0x284>
	case UP:
		if(setmode==AMPM){
 80016a6:	4b85      	ldr	r3, [pc, #532]	; (80018bc <move_cur_time+0x280>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d107      	bne.n	80016be <move_cur_time+0x82>
			Time->TimeFormat ^= 1;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	78db      	ldrb	r3, [r3, #3]
 80016b2:	f083 0301 	eor.w	r3, r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	70da      	strb	r2, [r3, #3]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
		}else if(setmode==SECOND_O){
			Time->Seconds++;
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
		}
		break;
 80016bc:	e102      	b.n	80018c4 <move_cur_time+0x288>
		}else if(setmode==HOUR_T){
 80016be:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <move_cur_time+0x280>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d112      	bne.n	80016ec <move_cur_time+0xb0>
			Time->Hours+=10;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	330a      	adds	r3, #10
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d004      	beq.n	80016e4 <move_cur_time+0xa8>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	f240 80f0 	bls.w	80018c4 <move_cur_time+0x288>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
		break;
 80016ea:	e0eb      	b.n	80018c4 <move_cur_time+0x288>
		}else if(setmode==HOUR_O){
 80016ec:	4b73      	ldr	r3, [pc, #460]	; (80018bc <move_cur_time+0x280>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d112      	bne.n	800171a <move_cur_time+0xde>
			Time->Hours++;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 1;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d004      	beq.n	8001712 <move_cur_time+0xd6>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b0c      	cmp	r3, #12
 800170e:	f240 80d9 	bls.w	80018c4 <move_cur_time+0x288>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
		break;
 8001718:	e0d4      	b.n	80018c4 <move_cur_time+0x288>
		}else if(setmode==MINUTE_T){
 800171a:	4b68      	ldr	r3, [pc, #416]	; (80018bc <move_cur_time+0x280>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d10e      	bne.n	8001740 <move_cur_time+0x104>
			Time->Minutes+=10;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	785b      	ldrb	r3, [r3, #1]
 8001726:	330a      	adds	r3, #10
 8001728:	b2da      	uxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	785b      	ldrb	r3, [r3, #1]
 8001732:	2b3b      	cmp	r3, #59	; 0x3b
 8001734:	f240 80c6 	bls.w	80018c4 <move_cur_time+0x288>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	705a      	strb	r2, [r3, #1]
		break;
 800173e:	e0c1      	b.n	80018c4 <move_cur_time+0x288>
		}else if(setmode==MINUTE_O){
 8001740:	4b5e      	ldr	r3, [pc, #376]	; (80018bc <move_cur_time+0x280>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d10e      	bne.n	8001766 <move_cur_time+0x12a>
			Time->Minutes++;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	785b      	ldrb	r3, [r3, #1]
 800174c:	3301      	adds	r3, #1
 800174e:	b2da      	uxtb	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 0;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	785b      	ldrb	r3, [r3, #1]
 8001758:	2b3b      	cmp	r3, #59	; 0x3b
 800175a:	f240 80b3 	bls.w	80018c4 <move_cur_time+0x288>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	705a      	strb	r2, [r3, #1]
		break;
 8001764:	e0ae      	b.n	80018c4 <move_cur_time+0x288>
		}else if(setmode==SECOND_T){
 8001766:	4b55      	ldr	r3, [pc, #340]	; (80018bc <move_cur_time+0x280>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b05      	cmp	r3, #5
 800176c:	d10e      	bne.n	800178c <move_cur_time+0x150>
			Time->Seconds+=10;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	330a      	adds	r3, #10
 8001774:	b2da      	uxtb	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	789b      	ldrb	r3, [r3, #2]
 800177e:	2b3b      	cmp	r3, #59	; 0x3b
 8001780:	f240 80a0 	bls.w	80018c4 <move_cur_time+0x288>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	709a      	strb	r2, [r3, #2]
		break;
 800178a:	e09b      	b.n	80018c4 <move_cur_time+0x288>
		}else if(setmode==SECOND_O){
 800178c:	4b4b      	ldr	r3, [pc, #300]	; (80018bc <move_cur_time+0x280>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b06      	cmp	r3, #6
 8001792:	f040 8097 	bne.w	80018c4 <move_cur_time+0x288>
			Time->Seconds++;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	789b      	ldrb	r3, [r3, #2]
 800179a:	3301      	adds	r3, #1
 800179c:	b2da      	uxtb	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	789b      	ldrb	r3, [r3, #2]
 80017a6:	2b3b      	cmp	r3, #59	; 0x3b
 80017a8:	f240 808c 	bls.w	80018c4 <move_cur_time+0x288>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	709a      	strb	r2, [r3, #2]
		break;
 80017b2:	e087      	b.n	80018c4 <move_cur_time+0x288>
	case DOWN:
		if(setmode==AMPM){
 80017b4:	4b41      	ldr	r3, [pc, #260]	; (80018bc <move_cur_time+0x280>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <move_cur_time+0x190>
			Time->TimeFormat ^= 1;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	78db      	ldrb	r3, [r3, #3]
 80017c0:	f083 0301 	eor.w	r3, r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	70da      	strb	r2, [r3, #3]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
		}else if(setmode==SECOND_O){
			Time->Seconds--;
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
		}
		break;
 80017ca:	e07d      	b.n	80018c8 <move_cur_time+0x28c>
		}else if(setmode==HOUR_T){
 80017cc:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <move_cur_time+0x280>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d111      	bne.n	80017f8 <move_cur_time+0x1bc>
			Time->Hours-=10;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3b0a      	subs	r3, #10
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 12;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <move_cur_time+0x1b4>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	d96b      	bls.n	80018c8 <move_cur_time+0x28c>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	220c      	movs	r2, #12
 80017f4:	701a      	strb	r2, [r3, #0]
		break;
 80017f6:	e067      	b.n	80018c8 <move_cur_time+0x28c>
		}else if(setmode==HOUR_O){
 80017f8:	4b30      	ldr	r3, [pc, #192]	; (80018bc <move_cur_time+0x280>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d111      	bne.n	8001824 <move_cur_time+0x1e8>
			Time->Hours--;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	3b01      	subs	r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 12;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <move_cur_time+0x1e0>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b0c      	cmp	r3, #12
 800181a:	d955      	bls.n	80018c8 <move_cur_time+0x28c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	220c      	movs	r2, #12
 8001820:	701a      	strb	r2, [r3, #0]
		break;
 8001822:	e051      	b.n	80018c8 <move_cur_time+0x28c>
		}else if(setmode==MINUTE_T){
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <move_cur_time+0x280>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d10d      	bne.n	8001848 <move_cur_time+0x20c>
			Time->Minutes-=10;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	785b      	ldrb	r3, [r3, #1]
 8001830:	3b0a      	subs	r3, #10
 8001832:	b2da      	uxtb	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 59;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	785b      	ldrb	r3, [r3, #1]
 800183c:	2b3b      	cmp	r3, #59	; 0x3b
 800183e:	d943      	bls.n	80018c8 <move_cur_time+0x28c>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	223b      	movs	r2, #59	; 0x3b
 8001844:	705a      	strb	r2, [r3, #1]
		break;
 8001846:	e03f      	b.n	80018c8 <move_cur_time+0x28c>
		}else if(setmode==MINUTE_O){
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <move_cur_time+0x280>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d10d      	bne.n	800186c <move_cur_time+0x230>
			Time->Minutes--;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	785b      	ldrb	r3, [r3, #1]
 8001854:	3b01      	subs	r3, #1
 8001856:	b2da      	uxtb	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 59;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	2b3b      	cmp	r3, #59	; 0x3b
 8001862:	d931      	bls.n	80018c8 <move_cur_time+0x28c>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	223b      	movs	r2, #59	; 0x3b
 8001868:	705a      	strb	r2, [r3, #1]
		break;
 800186a:	e02d      	b.n	80018c8 <move_cur_time+0x28c>
		}else if(setmode==SECOND_T){
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <move_cur_time+0x280>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d10d      	bne.n	8001890 <move_cur_time+0x254>
			Time->Seconds-=10;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	789b      	ldrb	r3, [r3, #2]
 8001878:	3b0a      	subs	r3, #10
 800187a:	b2da      	uxtb	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	789b      	ldrb	r3, [r3, #2]
 8001884:	2b3b      	cmp	r3, #59	; 0x3b
 8001886:	d91f      	bls.n	80018c8 <move_cur_time+0x28c>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	223b      	movs	r2, #59	; 0x3b
 800188c:	709a      	strb	r2, [r3, #2]
		break;
 800188e:	e01b      	b.n	80018c8 <move_cur_time+0x28c>
		}else if(setmode==SECOND_O){
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <move_cur_time+0x280>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b06      	cmp	r3, #6
 8001896:	d117      	bne.n	80018c8 <move_cur_time+0x28c>
			Time->Seconds--;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	789b      	ldrb	r3, [r3, #2]
 800189c:	3b01      	subs	r3, #1
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	789b      	ldrb	r3, [r3, #2]
 80018a8:	2b3b      	cmp	r3, #59	; 0x3b
 80018aa:	d90d      	bls.n	80018c8 <move_cur_time+0x28c>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	223b      	movs	r2, #59	; 0x3b
 80018b0:	709a      	strb	r2, [r3, #2]
		break;
 80018b2:	e009      	b.n	80018c8 <move_cur_time+0x28c>
	case NONE:
		break;
 80018b4:	bf00      	nop
 80018b6:	e008      	b.n	80018ca <move_cur_time+0x28e>
		break;
 80018b8:	bf00      	nop
 80018ba:	e006      	b.n	80018ca <move_cur_time+0x28e>
 80018bc:	2000037c 	.word	0x2000037c
		break;
 80018c0:	bf00      	nop
 80018c2:	e002      	b.n	80018ca <move_cur_time+0x28e>
		break;
 80018c4:	bf00      	nop
 80018c6:	e000      	b.n	80018ca <move_cur_time+0x28e>
		break;
 80018c8:	bf00      	nop
	case UNKNOWN:
		break;
	}


}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_RTC_Init+0x44>)
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <MX_RTC_Init+0x48>)
 80018ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_RTC_Init+0x44>)
 80018f0:	2240      	movs	r2, #64	; 0x40
 80018f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_RTC_Init+0x44>)
 80018f6:	227f      	movs	r2, #127	; 0x7f
 80018f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MX_RTC_Init+0x44>)
 80018fc:	22ff      	movs	r2, #255	; 0xff
 80018fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_RTC_Init+0x44>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MX_RTC_Init+0x44>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_RTC_Init+0x44>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_RTC_Init+0x44>)
 8001914:	f003 f95c 	bl	8004bd0 <HAL_RTC_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800191e:	f7ff ffdb 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000400 	.word	0x20000400
 800192c:	40002800 	.word	0x40002800

08001930 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08e      	sub	sp, #56	; 0x38
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	2230      	movs	r2, #48	; 0x30
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f005 f899 	bl	8006a78 <memset>
  if(rtcHandle->Instance==RTC)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a0c      	ldr	r2, [pc, #48]	; (800197c <HAL_RTC_MspInit+0x4c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d111      	bne.n	8001974 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001950:	2320      	movs	r3, #32
 8001952:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4618      	mov	r0, r3
 8001960:	f002 ff76 	bl	8004850 <HAL_RCCEx_PeriphCLKConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800196a:	f7ff ffb5 	bl	80018d8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_RTC_MspInit+0x50>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001974:	bf00      	nop
 8001976:	3738      	adds	r7, #56	; 0x38
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40002800 	.word	0x40002800
 8001980:	42470e3c 	.word	0x42470e3c

08001984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_MspInit+0x4c>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_MspInit+0x4c>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_MspInit+0x4c>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_MspInit+0x4c>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <NMI_Handler+0x4>

080019da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <MemManage_Handler+0x4>

080019e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a20:	f000 fa8e 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f005 f816 	bl	8006a88 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20030000 	.word	0x20030000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	20000420 	.word	0x20000420
 8001a90:	20000b08 	.word	0x20000b08

08001a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08e      	sub	sp, #56	; 0x38
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	f107 0320 	add.w	r3, r7, #32
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	615a      	str	r2, [r3, #20]
 8001ae6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001af2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001af6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001b00:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b12:	4823      	ldr	r0, [pc, #140]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001b14:	f003 fad6 	bl	80050c4 <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b1e:	f7ff fedb 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	481c      	ldr	r0, [pc, #112]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001b30:	f003 fd6a 	bl	8005608 <HAL_TIM_ConfigClockSource>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b3a:	f7ff fecd 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b3e:	4818      	ldr	r0, [pc, #96]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001b40:	f003 fb0f 	bl	8005162 <HAL_TIM_PWM_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b4a:	f7ff fec5 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b56:	f107 0320 	add.w	r3, r7, #32
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4810      	ldr	r0, [pc, #64]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001b5e:	f004 f92b 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b68:	f7ff feb6 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001b84:	f003 fc7e 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b8e:	f7ff fea3 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <MX_TIM2_Init+0xe8>)
 8001b94:	f000 f826 	bl	8001be4 <HAL_TIM_MspPostInit>

}
 8001b98:	bf00      	nop
 8001b9a:	3738      	adds	r7, #56	; 0x38
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000424 	.word	0x20000424

08001ba4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c04:	d11d      	bne.n	8001c42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_TIM_MspPostInit+0x68>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a0f      	ldr	r2, [pc, #60]	; (8001c4c <HAL_TIM_MspPostInit+0x68>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_TIM_MspPostInit+0x68>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c22:	2301      	movs	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <HAL_TIM_MspPostInit+0x6c>)
 8001c3e:	f001 f9ad 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000

08001c54 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <MX_USART3_UART_Init+0x50>)
 8001c5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c8c:	f004 f910 	bl	8005eb0 <HAL_UART_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c96:	f7ff fe1f 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000046c 	.word	0x2000046c
 8001ca4:	40004800 	.word	0x40004800

08001ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_UART_MspInit+0x84>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d12c      	bne.n	8001d24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_UART_MspInit+0x88>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_UART_MspInit+0x88>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_UART_MspInit+0x88>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_UART_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <HAL_UART_MspInit+0x88>)
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_UART_MspInit+0x88>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d14:	2307      	movs	r3, #7
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <HAL_UART_MspInit+0x8c>)
 8001d20:	f001 f93c 	bl	8002f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40004800 	.word	0x40004800
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020c00 	.word	0x40020c00

08001d38 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d46:	2204      	movs	r2, #4
 8001d48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d58:	2202      	movs	r2, #2
 8001d5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d7c:	f001 ffb2 	bl	8003ce4 <HAL_PCD_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d86:	f7ff fda7 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200004b0 	.word	0x200004b0

08001d94 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db4:	d13f      	bne.n	8001e36 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_PCD_MspInit+0xac>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a20      	ldr	r2, [pc, #128]	; (8001e40 <HAL_PCD_MspInit+0xac>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_PCD_MspInit+0xac>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001dd2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001de4:	230a      	movs	r3, #10
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4619      	mov	r1, r3
 8001dee:	4815      	ldr	r0, [pc, #84]	; (8001e44 <HAL_PCD_MspInit+0xb0>)
 8001df0:	f001 f8d4 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	480e      	ldr	r0, [pc, #56]	; (8001e44 <HAL_PCD_MspInit+0xb0>)
 8001e0a:	f001 f8c7 	bl	8002f9c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <HAL_PCD_MspInit+0xac>)
 8001e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <HAL_PCD_MspInit+0xac>)
 8001e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e18:	6353      	str	r3, [r2, #52]	; 0x34
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_PCD_MspInit+0xac>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_PCD_MspInit+0xac>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_PCD_MspInit+0xac>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001e36:	bf00      	nop
 8001e38:	3728      	adds	r7, #40	; 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020000 	.word	0x40020000

08001e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e80 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e4e:	490e      	ldr	r1, [pc, #56]	; (8001e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e64:	4c0b      	ldr	r4, [pc, #44]	; (8001e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e72:	f7ff fe0f 	bl	8001a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e76:	f004 fe0d 	bl	8006a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7a:	f7fe ff27 	bl	8000ccc <main>
  bx  lr    
 8001e7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001e8c:	0800759c 	.word	0x0800759c
  ldr r2, =_sbss
 8001e90:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001e94:	20000b08 	.word	0x20000b08

08001e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <HAL_Init+0x40>)
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_Init+0x40>)
 8001eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_Init+0x40>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 fd0d 	bl	80028e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f000 f808 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fd58 	bl	8001984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c00 	.word	0x40023c00

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_InitTick+0x54>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_InitTick+0x58>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fd17 	bl	8002932 <HAL_SYSTICK_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00e      	b.n	8001f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d80a      	bhi.n	8001f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f000 fced 	bl	80028fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f20:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <HAL_InitTick+0x5c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e000      	b.n	8001f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20000010 	.word	0x20000010
 8001f3c:	2000000c 	.word	0x2000000c

08001f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x20>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_IncTick+0x24>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <HAL_IncTick+0x24>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000010 	.word	0x20000010
 8001f64:	200009bc 	.word	0x200009bc

08001f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <HAL_GetTick+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	200009bc 	.word	0x200009bc

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff ffee 	bl	8001f68 <HAL_GetTick>
 8001f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fa6:	bf00      	nop
 8001fa8:	f7ff ffde 	bl	8001f68 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000010 	.word	0x20000010

08001fc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e033      	b.n	8002046 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fb22 	bl	8000630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800200e:	f023 0302 	bic.w	r3, r3, #2
 8002012:	f043 0202 	orr.w	r2, r3, #2
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fab4 	bl	8002588 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
 8002036:	e001      	b.n	800203c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_ADC_Start+0x1a>
 8002066:	2302      	movs	r3, #2
 8002068:	e0b2      	b.n	80021d0 <HAL_ADC_Start+0x180>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d018      	beq.n	80020b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002090:	4b52      	ldr	r3, [pc, #328]	; (80021dc <HAL_ADC_Start+0x18c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a52      	ldr	r2, [pc, #328]	; (80021e0 <HAL_ADC_Start+0x190>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0c9a      	lsrs	r2, r3, #18
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020a4:	e002      	b.n	80020ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f9      	bne.n	80020a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d17a      	bne.n	80021b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d007      	beq.n	80020f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fe:	d106      	bne.n	800210e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	f023 0206 	bic.w	r2, r3, #6
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	645a      	str	r2, [r3, #68]	; 0x44
 800210c:	e002      	b.n	8002114 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800211c:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <HAL_ADC_Start+0x194>)
 800211e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002128:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	2b00      	cmp	r3, #0
 8002134:	d12a      	bne.n	800218c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a2b      	ldr	r2, [pc, #172]	; (80021e8 <HAL_ADC_Start+0x198>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d015      	beq.n	800216c <HAL_ADC_Start+0x11c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a29      	ldr	r2, [pc, #164]	; (80021ec <HAL_ADC_Start+0x19c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d105      	bne.n	8002156 <HAL_ADC_Start+0x106>
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_ADC_Start+0x194>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <HAL_ADC_Start+0x1a0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d136      	bne.n	80021ce <HAL_ADC_Start+0x17e>
 8002160:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_ADC_Start+0x194>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d130      	bne.n	80021ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d129      	bne.n	80021ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	e020      	b.n	80021ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <HAL_ADC_Start+0x198>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d11b      	bne.n	80021ce <HAL_ADC_Start+0x17e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d114      	bne.n	80021ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	e00b      	b.n	80021ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f043 0210 	orr.w	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f043 0201 	orr.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	20000008 	.word	0x20000008
 80021e0:	431bde83 	.word	0x431bde83
 80021e4:	40012300 	.word	0x40012300
 80021e8:	40012000 	.word	0x40012000
 80021ec:	40012100 	.word	0x40012100
 80021f0:	40012200 	.word	0x40012200

080021f4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002210:	d113      	bne.n	800223a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800221c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002220:	d10b      	bne.n	800223a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f043 0220 	orr.w	r2, r3, #32
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e063      	b.n	8002302 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800223a:	f7ff fe95 	bl	8001f68 <HAL_GetTick>
 800223e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002240:	e021      	b.n	8002286 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d01d      	beq.n	8002286 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_ADC_PollForConversion+0x6c>
 8002250:	f7ff fe8a 	bl	8001f68 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d212      	bcs.n	8002286 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d00b      	beq.n	8002286 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f043 0204 	orr.w	r2, r3, #4
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e03d      	b.n	8002302 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b02      	cmp	r3, #2
 8002292:	d1d6      	bne.n	8002242 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0212 	mvn.w	r2, #18
 800229c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d123      	bne.n	8002300 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d11f      	bne.n	8002300 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d111      	bne.n	8002300 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x1c>
 800233c:	2302      	movs	r3, #2
 800233e:	e113      	b.n	8002568 <HAL_ADC_ConfigChannel+0x244>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b09      	cmp	r3, #9
 800234e:	d925      	bls.n	800239c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68d9      	ldr	r1, [r3, #12]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	3b1e      	subs	r3, #30
 8002366:	2207      	movs	r2, #7
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43da      	mvns	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	400a      	ands	r2, r1
 8002374:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68d9      	ldr	r1, [r3, #12]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	4618      	mov	r0, r3
 8002388:	4603      	mov	r3, r0
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4403      	add	r3, r0
 800238e:	3b1e      	subs	r3, #30
 8002390:	409a      	lsls	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	e022      	b.n	80023e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6919      	ldr	r1, [r3, #16]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	2207      	movs	r2, #7
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	400a      	ands	r2, r1
 80023be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6919      	ldr	r1, [r3, #16]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	4618      	mov	r0, r3
 80023d2:	4603      	mov	r3, r0
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4403      	add	r3, r0
 80023d8:	409a      	lsls	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d824      	bhi.n	8002434 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	3b05      	subs	r3, #5
 80023fc:	221f      	movs	r2, #31
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	400a      	ands	r2, r1
 800240a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	4618      	mov	r0, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	3b05      	subs	r3, #5
 8002426:	fa00 f203 	lsl.w	r2, r0, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	635a      	str	r2, [r3, #52]	; 0x34
 8002432:	e04c      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b0c      	cmp	r3, #12
 800243a:	d824      	bhi.n	8002486 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	3b23      	subs	r3, #35	; 0x23
 800244e:	221f      	movs	r2, #31
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43da      	mvns	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	400a      	ands	r2, r1
 800245c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b29b      	uxth	r3, r3
 800246a:	4618      	mov	r0, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	3b23      	subs	r3, #35	; 0x23
 8002478:	fa00 f203 	lsl.w	r2, r0, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
 8002484:	e023      	b.n	80024ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	3b41      	subs	r3, #65	; 0x41
 8002498:	221f      	movs	r2, #31
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	400a      	ands	r2, r1
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4618      	mov	r0, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	3b41      	subs	r3, #65	; 0x41
 80024c2:	fa00 f203 	lsl.w	r2, r0, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_ADC_ConfigChannel+0x250>)
 80024d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a28      	ldr	r2, [pc, #160]	; (8002578 <HAL_ADC_ConfigChannel+0x254>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d10f      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1d8>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b12      	cmp	r3, #18
 80024e2:	d10b      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <HAL_ADC_ConfigChannel+0x254>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d12b      	bne.n	800255e <HAL_ADC_ConfigChannel+0x23a>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_ADC_ConfigChannel+0x258>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <HAL_ADC_ConfigChannel+0x1f4>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b11      	cmp	r3, #17
 8002516:	d122      	bne.n	800255e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a11      	ldr	r2, [pc, #68]	; (800257c <HAL_ADC_ConfigChannel+0x258>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d111      	bne.n	800255e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_ADC_ConfigChannel+0x25c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a11      	ldr	r2, [pc, #68]	; (8002584 <HAL_ADC_ConfigChannel+0x260>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	0c9a      	lsrs	r2, r3, #18
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002550:	e002      	b.n	8002558 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3b01      	subs	r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f9      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40012300 	.word	0x40012300
 8002578:	40012000 	.word	0x40012000
 800257c:	10000012 	.word	0x10000012
 8002580:	20000008 	.word	0x20000008
 8002584:	431bde83 	.word	0x431bde83

08002588 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002590:	4b79      	ldr	r3, [pc, #484]	; (8002778 <ADC_Init+0x1f0>)
 8002592:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	021a      	lsls	r2, r3, #8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6899      	ldr	r1, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	4a58      	ldr	r2, [pc, #352]	; (800277c <ADC_Init+0x1f4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d022      	beq.n	8002666 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800262e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6899      	ldr	r1, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	e00f      	b.n	8002686 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002684:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0202 	bic.w	r2, r2, #2
 8002694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7e1b      	ldrb	r3, [r3, #24]
 80026a0:	005a      	lsls	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01b      	beq.n	80026ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6859      	ldr	r1, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	3b01      	subs	r3, #1
 80026e0:	035a      	lsls	r2, r3, #13
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	e007      	b.n	80026fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800270a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	3b01      	subs	r3, #1
 8002718:	051a      	lsls	r2, r3, #20
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002730:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6899      	ldr	r1, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800273e:	025a      	lsls	r2, r3, #9
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002756:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6899      	ldr	r1, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	029a      	lsls	r2, r3, #10
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40012300 	.word	0x40012300
 800277c:	0f000001 	.word	0x0f000001

08002780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800279c:	4013      	ands	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b2:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	60d3      	str	r3, [r2, #12]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	f003 0307 	and.w	r3, r3, #7
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b0:	d301      	bcc.n	80028b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00f      	b.n	80028d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <SysTick_Config+0x40>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028be:	210f      	movs	r1, #15
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f7ff ff8e 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <SysTick_Config+0x40>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <SysTick_Config+0x40>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff47 	bl	8002780 <__NVIC_SetPriorityGrouping>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800290c:	f7ff ff5c 	bl	80027c8 <__NVIC_GetPriorityGrouping>
 8002910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f7ff ff8e 	bl	8002838 <NVIC_EncodePriority>
 800291c:	4602      	mov	r2, r0
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff5d 	bl	80027e4 <__NVIC_SetPriority>
}
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ffb0 	bl	80028a0 <SysTick_Config>
 8002940:	4603      	mov	r3, r0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e06c      	b.n	8002a38 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002964:	2b00      	cmp	r3, #0
 8002966:	d106      	bne.n	8002976 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2223      	movs	r2, #35	; 0x23
 800296c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7fd feef 	bl	8000754 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_ETH_Init+0xf4>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <HAL_ETH_Init+0xf4>)
 8002980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <HAL_ETH_Init+0xf4>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002992:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <HAL_ETH_Init+0xf8>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a2b      	ldr	r2, [pc, #172]	; (8002a44 <HAL_ETH_Init+0xf8>)
 8002998:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800299c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800299e:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_ETH_Init+0xf8>)
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	4927      	ldr	r1, [pc, #156]	; (8002a44 <HAL_ETH_Init+0xf8>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_ETH_Init+0xf8>)
 80029ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029c8:	f7ff face 	bl	8001f68 <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029ce:	e011      	b.n	80029f4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80029d0:	f7ff faca 	bl	8001f68 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029de:	d909      	bls.n	80029f4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2204      	movs	r2, #4
 80029e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	22e0      	movs	r2, #224	; 0xe0
 80029ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e021      	b.n	8002a38 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1e4      	bne.n	80029d0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f958 	bl	8002cbc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f9ff 	bl	8002e10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa55 	bl	8002ec2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2100      	movs	r1, #0
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f9bd 	bl	8002da0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2210      	movs	r2, #16
 8002a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40013800 	.word	0x40013800

08002a48 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <ETH_SetMACConfig+0x15c>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	7c1b      	ldrb	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <ETH_SetMACConfig+0x28>
 8002a6a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a6e:	e000      	b.n	8002a72 <ETH_SetMACConfig+0x2a>
 8002a70:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	7c5b      	ldrb	r3, [r3, #17]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <ETH_SetMACConfig+0x38>
 8002a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a7e:	e000      	b.n	8002a82 <ETH_SetMACConfig+0x3a>
 8002a80:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a82:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	7fdb      	ldrb	r3, [r3, #31]
 8002a8e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a90:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	7f92      	ldrb	r2, [r2, #30]
 8002a9c:	2a00      	cmp	r2, #0
 8002a9e:	d102      	bne.n	8002aa6 <ETH_SetMACConfig+0x5e>
 8002aa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aa4:	e000      	b.n	8002aa8 <ETH_SetMACConfig+0x60>
 8002aa6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002aa8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	7f1b      	ldrb	r3, [r3, #28]
 8002aae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ab0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ab6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	791b      	ldrb	r3, [r3, #4]
 8002abc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002abe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ac6:	2a00      	cmp	r2, #0
 8002ac8:	d102      	bne.n	8002ad0 <ETH_SetMACConfig+0x88>
 8002aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ace:	e000      	b.n	8002ad2 <ETH_SetMACConfig+0x8a>
 8002ad0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ad2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	7bdb      	ldrb	r3, [r3, #15]
 8002ad8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ada:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ae0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ae8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002aea:	4313      	orrs	r3, r2
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7ff fa3c 	bl	8001f80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b2e:	2a00      	cmp	r2, #0
 8002b30:	d101      	bne.n	8002b36 <ETH_SetMACConfig+0xee>
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	e000      	b.n	8002b38 <ETH_SetMACConfig+0xf0>
 8002b36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002b46:	2a01      	cmp	r2, #1
 8002b48:	d101      	bne.n	8002b4e <ETH_SetMACConfig+0x106>
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	e000      	b.n	8002b50 <ETH_SetMACConfig+0x108>
 8002b4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b58:	2a01      	cmp	r2, #1
 8002b5a:	d101      	bne.n	8002b60 <ETH_SetMACConfig+0x118>
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	e000      	b.n	8002b62 <ETH_SetMACConfig+0x11a>
 8002b60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002b6a:	2a01      	cmp	r2, #1
 8002b6c:	d101      	bne.n	8002b72 <ETH_SetMACConfig+0x12a>
 8002b6e:	2202      	movs	r2, #2
 8002b70:	e000      	b.n	8002b74 <ETH_SetMACConfig+0x12c>
 8002b72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b74:	4313      	orrs	r3, r2
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f7ff f9f7 	bl	8001f80 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	619a      	str	r2, [r3, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	ff20810f 	.word	0xff20810f

08002ba8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <ETH_SetDMAConfig+0x110>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	7b1b      	ldrb	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <ETH_SetDMAConfig+0x2c>
 8002bce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bd2:	e000      	b.n	8002bd6 <ETH_SetDMAConfig+0x2e>
 8002bd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	7b5b      	ldrb	r3, [r3, #13]
 8002bda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bdc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	7f52      	ldrb	r2, [r2, #29]
 8002be2:	2a00      	cmp	r2, #0
 8002be4:	d102      	bne.n	8002bec <ETH_SetDMAConfig+0x44>
 8002be6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bea:	e000      	b.n	8002bee <ETH_SetDMAConfig+0x46>
 8002bec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	7b9b      	ldrb	r3, [r3, #14]
 8002bf4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bf6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bfc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7f1b      	ldrb	r3, [r3, #28]
 8002c02:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	7f9b      	ldrb	r3, [r3, #30]
 8002c0a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c0c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c1a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f7ff f99e 	bl	8001f80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	791b      	ldrb	r3, [r3, #4]
 8002c56:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c5c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c62:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c68:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c70:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c72:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c7a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c80:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c8e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f7ff f96f 	bl	8001f80 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002caa:	461a      	mov	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	f8de3f23 	.word	0xf8de3f23

08002cbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0a6      	sub	sp, #152	; 0x98
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d22:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff fe86 	bl	8002a48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d40:	2301      	movs	r3, #1
 8002d42:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d70:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d8c:	f107 0308 	add.w	r3, r7, #8
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ff08 	bl	8002ba8 <ETH_SetDMAConfig>
}
 8002d98:	bf00      	nop
 8002d9a:	3798      	adds	r7, #152	; 0x98
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3305      	adds	r3, #5
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	3204      	adds	r2, #4
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <ETH_MACAddressConfig+0x68>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3303      	adds	r3, #3
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	061a      	lsls	r2, r3, #24
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	041b      	lsls	r3, r3, #16
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3301      	adds	r3, #1
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	4313      	orrs	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	7812      	ldrb	r2, [r2, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <ETH_MACAddressConfig+0x6c>)
 8002df2:	4413      	add	r3, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	6013      	str	r3, [r2, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40028040 	.word	0x40028040
 8002e0c:	40028044 	.word	0x40028044

08002e10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e03e      	b.n	8002e9c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68d9      	ldr	r1, [r3, #12]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2200      	movs	r2, #0
 8002e46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	3206      	adds	r2, #6
 8002e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d80c      	bhi.n	8002e80 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68d9      	ldr	r1, [r3, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	e004      	b.n	8002e8a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d9bd      	bls.n	8002e1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb4:	611a      	str	r2, [r3, #16]
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	e046      	b.n	8002f5e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6919      	ldr	r1, [r3, #16]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2200      	movs	r2, #0
 8002eec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f0c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002f14:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	3212      	adds	r2, #18
 8002f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d80c      	bhi.n	8002f4e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6919      	ldr	r1, [r3, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	440b      	add	r3, r1
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
 8002f4c:	e004      	b.n	8002f58 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d9b5      	bls.n	8002ed0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f8e:	60da      	str	r2, [r3, #12]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	e177      	b.n	80032a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fb8:	2201      	movs	r2, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	f040 8166 	bne.w	80032a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d005      	beq.n	8002fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d130      	bne.n	8003050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003024:	2201      	movs	r2, #1
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 0201 	and.w	r2, r3, #1
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b03      	cmp	r3, #3
 800305a:	d017      	beq.n	800308c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	2203      	movs	r2, #3
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d123      	bne.n	80030e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	08da      	lsrs	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3208      	adds	r2, #8
 80030a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	220f      	movs	r2, #15
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	08da      	lsrs	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3208      	adds	r2, #8
 80030da:	69b9      	ldr	r1, [r7, #24]
 80030dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	2203      	movs	r2, #3
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0203 	and.w	r2, r3, #3
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80c0 	beq.w	80032a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	4b66      	ldr	r3, [pc, #408]	; (80032c0 <HAL_GPIO_Init+0x324>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a65      	ldr	r2, [pc, #404]	; (80032c0 <HAL_GPIO_Init+0x324>)
 800312c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b63      	ldr	r3, [pc, #396]	; (80032c0 <HAL_GPIO_Init+0x324>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800313e:	4a61      	ldr	r2, [pc, #388]	; (80032c4 <HAL_GPIO_Init+0x328>)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3302      	adds	r3, #2
 8003146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a58      	ldr	r2, [pc, #352]	; (80032c8 <HAL_GPIO_Init+0x32c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d037      	beq.n	80031da <HAL_GPIO_Init+0x23e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a57      	ldr	r2, [pc, #348]	; (80032cc <HAL_GPIO_Init+0x330>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d031      	beq.n	80031d6 <HAL_GPIO_Init+0x23a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a56      	ldr	r2, [pc, #344]	; (80032d0 <HAL_GPIO_Init+0x334>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02b      	beq.n	80031d2 <HAL_GPIO_Init+0x236>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a55      	ldr	r2, [pc, #340]	; (80032d4 <HAL_GPIO_Init+0x338>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d025      	beq.n	80031ce <HAL_GPIO_Init+0x232>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a54      	ldr	r2, [pc, #336]	; (80032d8 <HAL_GPIO_Init+0x33c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01f      	beq.n	80031ca <HAL_GPIO_Init+0x22e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a53      	ldr	r2, [pc, #332]	; (80032dc <HAL_GPIO_Init+0x340>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d019      	beq.n	80031c6 <HAL_GPIO_Init+0x22a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <HAL_GPIO_Init+0x344>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_GPIO_Init+0x226>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a51      	ldr	r2, [pc, #324]	; (80032e4 <HAL_GPIO_Init+0x348>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00d      	beq.n	80031be <HAL_GPIO_Init+0x222>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a50      	ldr	r2, [pc, #320]	; (80032e8 <HAL_GPIO_Init+0x34c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <HAL_GPIO_Init+0x21e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4f      	ldr	r2, [pc, #316]	; (80032ec <HAL_GPIO_Init+0x350>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_GPIO_Init+0x21a>
 80031b2:	2309      	movs	r3, #9
 80031b4:	e012      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031b6:	230a      	movs	r3, #10
 80031b8:	e010      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031ba:	2308      	movs	r3, #8
 80031bc:	e00e      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031be:	2307      	movs	r3, #7
 80031c0:	e00c      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031c2:	2306      	movs	r3, #6
 80031c4:	e00a      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031c6:	2305      	movs	r3, #5
 80031c8:	e008      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031ca:	2304      	movs	r3, #4
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031ce:	2303      	movs	r3, #3
 80031d0:	e004      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e002      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_GPIO_Init+0x240>
 80031da:	2300      	movs	r3, #0
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	f002 0203 	and.w	r2, r2, #3
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	4093      	lsls	r3, r2
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ec:	4935      	ldr	r1, [pc, #212]	; (80032c4 <HAL_GPIO_Init+0x328>)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fa:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <HAL_GPIO_Init+0x354>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800321e:	4a34      	ldr	r2, [pc, #208]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003248:	4a29      	ldr	r2, [pc, #164]	; (80032f0 <HAL_GPIO_Init+0x354>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800324e:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003272:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_GPIO_Init+0x354>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003278:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_GPIO_Init+0x354>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800329c:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <HAL_GPIO_Init+0x354>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3301      	adds	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	f67f ae84 	bls.w	8002fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40013800 	.word	0x40013800
 80032c8:	40020000 	.word	0x40020000
 80032cc:	40020400 	.word	0x40020400
 80032d0:	40020800 	.word	0x40020800
 80032d4:	40020c00 	.word	0x40020c00
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40021400 	.word	0x40021400
 80032e0:	40021800 	.word	0x40021800
 80032e4:	40021c00 	.word	0x40021c00
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40022400 	.word	0x40022400
 80032f0:	40013c00 	.word	0x40013c00

080032f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	e001      	b.n	8003316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003340:	e003      	b.n	800334a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	041a      	lsls	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	619a      	str	r2, [r3, #24]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e12b      	b.n	80035c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fb9c 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2224      	movs	r2, #36	; 0x24
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033bc:	f001 fa20 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 80033c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4a81      	ldr	r2, [pc, #516]	; (80035cc <HAL_I2C_Init+0x274>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d807      	bhi.n	80033dc <HAL_I2C_Init+0x84>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a80      	ldr	r2, [pc, #512]	; (80035d0 <HAL_I2C_Init+0x278>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	bf94      	ite	ls
 80033d4:	2301      	movls	r3, #1
 80033d6:	2300      	movhi	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e006      	b.n	80033ea <HAL_I2C_Init+0x92>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4a7d      	ldr	r2, [pc, #500]	; (80035d4 <HAL_I2C_Init+0x27c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	bf94      	ite	ls
 80033e4:	2301      	movls	r3, #1
 80033e6:	2300      	movhi	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e0e7      	b.n	80035c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a78      	ldr	r2, [pc, #480]	; (80035d8 <HAL_I2C_Init+0x280>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	0c9b      	lsrs	r3, r3, #18
 80033fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a6a      	ldr	r2, [pc, #424]	; (80035cc <HAL_I2C_Init+0x274>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d802      	bhi.n	800342c <HAL_I2C_Init+0xd4>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	3301      	adds	r3, #1
 800342a:	e009      	b.n	8003440 <HAL_I2C_Init+0xe8>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	4a69      	ldr	r2, [pc, #420]	; (80035dc <HAL_I2C_Init+0x284>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	099b      	lsrs	r3, r3, #6
 800343e:	3301      	adds	r3, #1
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	430b      	orrs	r3, r1
 8003446:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003452:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	495c      	ldr	r1, [pc, #368]	; (80035cc <HAL_I2C_Init+0x274>)
 800345c:	428b      	cmp	r3, r1
 800345e:	d819      	bhi.n	8003494 <HAL_I2C_Init+0x13c>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1e59      	subs	r1, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fbb1 f3f3 	udiv	r3, r1, r3
 800346e:	1c59      	adds	r1, r3, #1
 8003470:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003474:	400b      	ands	r3, r1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_I2C_Init+0x138>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1e59      	subs	r1, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fbb1 f3f3 	udiv	r3, r1, r3
 8003488:	3301      	adds	r3, #1
 800348a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348e:	e051      	b.n	8003534 <HAL_I2C_Init+0x1dc>
 8003490:	2304      	movs	r3, #4
 8003492:	e04f      	b.n	8003534 <HAL_I2C_Init+0x1dc>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d111      	bne.n	80034c0 <HAL_I2C_Init+0x168>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e58      	subs	r0, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	440b      	add	r3, r1
 80034aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ae:	3301      	adds	r3, #1
 80034b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e012      	b.n	80034e6 <HAL_I2C_Init+0x18e>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e58      	subs	r0, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	0099      	lsls	r1, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d6:	3301      	adds	r3, #1
 80034d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_I2C_Init+0x196>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e022      	b.n	8003534 <HAL_I2C_Init+0x1dc>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10e      	bne.n	8003514 <HAL_I2C_Init+0x1bc>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1e58      	subs	r0, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	440b      	add	r3, r1
 8003504:	fbb0 f3f3 	udiv	r3, r0, r3
 8003508:	3301      	adds	r3, #1
 800350a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003512:	e00f      	b.n	8003534 <HAL_I2C_Init+0x1dc>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1e58      	subs	r0, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	0099      	lsls	r1, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	fbb0 f3f3 	udiv	r3, r0, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	6809      	ldr	r1, [r1, #0]
 8003538:	4313      	orrs	r3, r2
 800353a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69da      	ldr	r2, [r3, #28]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003562:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6911      	ldr	r1, [r2, #16]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68d2      	ldr	r2, [r2, #12]
 800356e:	4311      	orrs	r1, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	430b      	orrs	r3, r1
 8003576:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	000186a0 	.word	0x000186a0
 80035d0:	001e847f 	.word	0x001e847f
 80035d4:	003d08ff 	.word	0x003d08ff
 80035d8:	431bde83 	.word	0x431bde83
 80035dc:	10624dd3 	.word	0x10624dd3

080035e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	461a      	mov	r2, r3
 80035ec:	460b      	mov	r3, r1
 80035ee:	817b      	strh	r3, [r7, #10]
 80035f0:	4613      	mov	r3, r2
 80035f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035f4:	f7fe fcb8 	bl	8001f68 <HAL_GetTick>
 80035f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b20      	cmp	r3, #32
 8003604:	f040 80e0 	bne.w	80037c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2319      	movs	r3, #25
 800360e:	2201      	movs	r2, #1
 8003610:	4970      	ldr	r1, [pc, #448]	; (80037d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f964 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
 8003620:	e0d3      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_I2C_Master_Transmit+0x50>
 800362c:	2302      	movs	r3, #2
 800362e:	e0cc      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d007      	beq.n	8003656 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003664:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2221      	movs	r2, #33	; 0x21
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2210      	movs	r2, #16
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	893a      	ldrh	r2, [r7, #8]
 8003686:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a50      	ldr	r2, [pc, #320]	; (80037d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003698:	8979      	ldrh	r1, [r7, #10]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f89c 	bl	80037dc <I2C_MasterRequestWrite>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e08d      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036c4:	e066      	b.n	8003794 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	6a39      	ldr	r1, [r7, #32]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f9de 	bl	8003a8c <I2C_WaitOnTXEFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d107      	bne.n	80036ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e06b      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	781a      	ldrb	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b04      	cmp	r3, #4
 800372e:	d11b      	bne.n	8003768 <HAL_I2C_Master_Transmit+0x188>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	2b00      	cmp	r3, #0
 8003736:	d017      	beq.n	8003768 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	6a39      	ldr	r1, [r7, #32]
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f9ce 	bl	8003b0e <I2C_WaitOnBTFFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2b04      	cmp	r3, #4
 800377e:	d107      	bne.n	8003790 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e01a      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	2b00      	cmp	r3, #0
 800379a:	d194      	bne.n	80036c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	00100002 	.word	0x00100002
 80037d8:	ffff0000 	.word	0xffff0000

080037dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	460b      	mov	r3, r1
 80037ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d006      	beq.n	8003806 <I2C_MasterRequestWrite+0x2a>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d003      	beq.n	8003806 <I2C_MasterRequestWrite+0x2a>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003804:	d108      	bne.n	8003818 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e00b      	b.n	8003830 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	2b12      	cmp	r3, #18
 800381e:	d107      	bne.n	8003830 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800382e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f84f 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003856:	d103      	bne.n	8003860 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800385e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e035      	b.n	80038d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800386c:	d108      	bne.n	8003880 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800386e:	897b      	ldrh	r3, [r7, #10]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	461a      	mov	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800387c:	611a      	str	r2, [r3, #16]
 800387e:	e01b      	b.n	80038b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003880:	897b      	ldrh	r3, [r7, #10]
 8003882:	11db      	asrs	r3, r3, #7
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f003 0306 	and.w	r3, r3, #6
 800388a:	b2db      	uxtb	r3, r3
 800388c:	f063 030f 	orn	r3, r3, #15
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <I2C_MasterRequestWrite+0xfc>)
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f875 	bl	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e010      	b.n	80038d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4907      	ldr	r1, [pc, #28]	; (80038dc <I2C_MasterRequestWrite+0x100>)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f865 	bl	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	00010008 	.word	0x00010008
 80038dc:	00010002 	.word	0x00010002

080038e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f0:	e025      	b.n	800393e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d021      	beq.n	800393e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fb35 	bl	8001f68 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d116      	bne.n	800393e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e023      	b.n	8003986 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10d      	bne.n	8003964 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4013      	ands	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	e00c      	b.n	800397e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	43da      	mvns	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4013      	ands	r3, r2
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf0c      	ite	eq
 8003976:	2301      	moveq	r3, #1
 8003978:	2300      	movne	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	429a      	cmp	r2, r3
 8003982:	d0b6      	beq.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800399c:	e051      	b.n	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ac:	d123      	bne.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f043 0204 	orr.w	r2, r3, #4
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e046      	b.n	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fc:	d021      	beq.n	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fe:	f7fe fab3 	bl	8001f68 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d116      	bne.n	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f043 0220 	orr.w	r2, r3, #32
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e020      	b.n	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d10c      	bne.n	8003a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	43da      	mvns	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4013      	ands	r3, r2
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bf14      	ite	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	2300      	moveq	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	e00b      	b.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	43da      	mvns	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4013      	ands	r3, r2
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf14      	ite	ne
 8003a78:	2301      	movne	r3, #1
 8003a7a:	2300      	moveq	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d18d      	bne.n	800399e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a98:	e02d      	b.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f878 	bl	8003b90 <I2C_IsAcknowledgeFailed>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e02d      	b.n	8003b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d021      	beq.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab2:	f7fe fa59 	bl	8001f68 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d116      	bne.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f043 0220 	orr.w	r2, r3, #32
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e007      	b.n	8003b06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b80      	cmp	r3, #128	; 0x80
 8003b02:	d1ca      	bne.n	8003a9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b1a:	e02d      	b.n	8003b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f837 	bl	8003b90 <I2C_IsAcknowledgeFailed>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e02d      	b.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d021      	beq.n	8003b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b34:	f7fe fa18 	bl	8001f68 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d302      	bcc.n	8003b4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e007      	b.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d1ca      	bne.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba6:	d11b      	bne.n	8003be0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f043 0204 	orr.w	r2, r3, #4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d129      	bne.n	8003c58 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0210 	bic.w	r2, r2, #16
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	e000      	b.n	8003c5a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003c58:	2302      	movs	r3, #2
  }
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b085      	sub	sp, #20
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d12a      	bne.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	; 0x24
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003ca0:	89fb      	ldrh	r3, [r7, #14]
 8003ca2:	f023 030f 	bic.w	r3, r3, #15
 8003ca6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	89fb      	ldrh	r3, [r7, #14]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	89fa      	ldrh	r2, [r7, #14]
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e000      	b.n	8003cd8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003cd6:	2302      	movs	r3, #2
  }
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce6:	b08f      	sub	sp, #60	; 0x3c
 8003ce8:	af0a      	add	r7, sp, #40	; 0x28
 8003cea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e10f      	b.n	8003f16 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7fe f83f 	bl	8001d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2203      	movs	r2, #3
 8003d1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f002 fbde 	bl	80064f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	687e      	ldr	r6, [r7, #4]
 8003d42:	466d      	mov	r5, sp
 8003d44:	f106 0410 	add.w	r4, r6, #16
 8003d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d54:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d58:	1d33      	adds	r3, r6, #4
 8003d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d5c:	6838      	ldr	r0, [r7, #0]
 8003d5e:	f002 fb69 	bl	8006434 <USB_CoreInit>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0d0      	b.n	8003f16 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f002 fbcc 	bl	8006518 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	e04a      	b.n	8003e1c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	333d      	adds	r3, #61	; 0x3d
 8003d96:	2201      	movs	r2, #1
 8003d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d9a:	7bfa      	ldrb	r2, [r7, #15]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	333c      	adds	r3, #60	; 0x3c
 8003daa:	7bfa      	ldrb	r2, [r7, #15]
 8003dac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dae:	7bfa      	ldrb	r2, [r7, #15]
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	b298      	uxth	r0, r3
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3344      	adds	r3, #68	; 0x44
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dc6:	7bfa      	ldrb	r2, [r7, #15]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3340      	adds	r3, #64	; 0x40
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dda:	7bfa      	ldrb	r2, [r7, #15]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	3348      	adds	r3, #72	; 0x48
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003dee:	7bfa      	ldrb	r2, [r7, #15]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	334c      	adds	r3, #76	; 0x4c
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e02:	7bfa      	ldrb	r2, [r7, #15]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3354      	adds	r3, #84	; 0x54
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
 8003e1c:	7bfa      	ldrb	r2, [r7, #15]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d3af      	bcc.n	8003d86 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	e044      	b.n	8003eb6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e42:	7bfa      	ldrb	r2, [r7, #15]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e6e:	7bfa      	ldrb	r2, [r7, #15]
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d3b5      	bcc.n	8003e2c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	687e      	ldr	r6, [r7, #4]
 8003ec8:	466d      	mov	r5, sp
 8003eca:	f106 0410 	add.w	r4, r6, #16
 8003ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eda:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ede:	1d33      	adds	r3, r6, #4
 8003ee0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ee2:	6838      	ldr	r0, [r7, #0]
 8003ee4:	f002 fb64 	bl	80065b0 <USB_DevInit>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e00d      	b.n	8003f16 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f002 fd2f 	bl	8006972 <USB_DevDisconnect>

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e267      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d075      	beq.n	800402a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3e:	4b88      	ldr	r3, [pc, #544]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d00c      	beq.n	8003f64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f4a:	4b85      	ldr	r3, [pc, #532]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d112      	bne.n	8003f7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f56:	4b82      	ldr	r3, [pc, #520]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f62:	d10b      	bne.n	8003f7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	4b7e      	ldr	r3, [pc, #504]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d05b      	beq.n	8004028 <HAL_RCC_OscConfig+0x108>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d157      	bne.n	8004028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e242      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d106      	bne.n	8003f94 <HAL_RCC_OscConfig+0x74>
 8003f86:	4b76      	ldr	r3, [pc, #472]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a75      	ldr	r2, [pc, #468]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e01d      	b.n	8003fd0 <HAL_RCC_OscConfig+0xb0>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x98>
 8003f9e:	4b70      	ldr	r3, [pc, #448]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a6f      	ldr	r2, [pc, #444]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	4b6d      	ldr	r3, [pc, #436]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a6c      	ldr	r2, [pc, #432]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e00b      	b.n	8003fd0 <HAL_RCC_OscConfig+0xb0>
 8003fb8:	4b69      	ldr	r3, [pc, #420]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a68      	ldr	r2, [pc, #416]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	4b66      	ldr	r3, [pc, #408]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a65      	ldr	r2, [pc, #404]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d013      	beq.n	8004000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd8:	f7fd ffc6 	bl	8001f68 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fd ffc2 	bl	8001f68 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	; 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e207      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	4b5b      	ldr	r3, [pc, #364]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0xc0>
 8003ffe:	e014      	b.n	800402a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fd ffb2 	bl	8001f68 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004008:	f7fd ffae 	bl	8001f68 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e1f3      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401a:	4b51      	ldr	r3, [pc, #324]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0xe8>
 8004026:	e000      	b.n	800402a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d063      	beq.n	80040fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004036:	4b4a      	ldr	r3, [pc, #296]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00b      	beq.n	800405a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004042:	4b47      	ldr	r3, [pc, #284]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800404a:	2b08      	cmp	r3, #8
 800404c:	d11c      	bne.n	8004088 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800404e:	4b44      	ldr	r3, [pc, #272]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d116      	bne.n	8004088 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405a:	4b41      	ldr	r3, [pc, #260]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_RCC_OscConfig+0x152>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d001      	beq.n	8004072 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e1c7      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004072:	4b3b      	ldr	r3, [pc, #236]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4937      	ldr	r1, [pc, #220]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	e03a      	b.n	80040fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d020      	beq.n	80040d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004090:	4b34      	ldr	r3, [pc, #208]	; (8004164 <HAL_RCC_OscConfig+0x244>)
 8004092:	2201      	movs	r2, #1
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004096:	f7fd ff67 	bl	8001f68 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800409e:	f7fd ff63 	bl	8001f68 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e1a8      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b0:	4b2b      	ldr	r3, [pc, #172]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040bc:	4b28      	ldr	r3, [pc, #160]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4925      	ldr	r1, [pc, #148]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	600b      	str	r3, [r1, #0]
 80040d0:	e015      	b.n	80040fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_RCC_OscConfig+0x244>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd ff46 	bl	8001f68 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e0:	f7fd ff42 	bl	8001f68 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e187      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d036      	beq.n	8004178 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d016      	beq.n	8004140 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004112:	4b15      	ldr	r3, [pc, #84]	; (8004168 <HAL_RCC_OscConfig+0x248>)
 8004114:	2201      	movs	r2, #1
 8004116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004118:	f7fd ff26 	bl	8001f68 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004120:	f7fd ff22 	bl	8001f68 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e167      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_OscConfig+0x240>)
 8004134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x200>
 800413e:	e01b      	b.n	8004178 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004140:	4b09      	ldr	r3, [pc, #36]	; (8004168 <HAL_RCC_OscConfig+0x248>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004146:	f7fd ff0f 	bl	8001f68 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800414c:	e00e      	b.n	800416c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414e:	f7fd ff0b 	bl	8001f68 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d907      	bls.n	800416c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e150      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
 8004160:	40023800 	.word	0x40023800
 8004164:	42470000 	.word	0x42470000
 8004168:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800416c:	4b88      	ldr	r3, [pc, #544]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 800416e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1ea      	bne.n	800414e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8097 	beq.w	80042b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004186:	2300      	movs	r3, #0
 8004188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800418a:	4b81      	ldr	r3, [pc, #516]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10f      	bne.n	80041b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	4b7d      	ldr	r3, [pc, #500]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	4a7c      	ldr	r2, [pc, #496]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 80041a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a4:	6413      	str	r3, [r2, #64]	; 0x40
 80041a6:	4b7a      	ldr	r3, [pc, #488]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b6:	4b77      	ldr	r3, [pc, #476]	; (8004394 <HAL_RCC_OscConfig+0x474>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d118      	bne.n	80041f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c2:	4b74      	ldr	r3, [pc, #464]	; (8004394 <HAL_RCC_OscConfig+0x474>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a73      	ldr	r2, [pc, #460]	; (8004394 <HAL_RCC_OscConfig+0x474>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ce:	f7fd fecb 	bl	8001f68 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d6:	f7fd fec7 	bl	8001f68 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e10c      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e8:	4b6a      	ldr	r3, [pc, #424]	; (8004394 <HAL_RCC_OscConfig+0x474>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d106      	bne.n	800420a <HAL_RCC_OscConfig+0x2ea>
 80041fc:	4b64      	ldr	r3, [pc, #400]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	4a63      	ldr	r2, [pc, #396]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	6713      	str	r3, [r2, #112]	; 0x70
 8004208:	e01c      	b.n	8004244 <HAL_RCC_OscConfig+0x324>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b05      	cmp	r3, #5
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0x30c>
 8004212:	4b5f      	ldr	r3, [pc, #380]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4a5e      	ldr	r2, [pc, #376]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 8004218:	f043 0304 	orr.w	r3, r3, #4
 800421c:	6713      	str	r3, [r2, #112]	; 0x70
 800421e:	4b5c      	ldr	r3, [pc, #368]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a5b      	ldr	r2, [pc, #364]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
 800422a:	e00b      	b.n	8004244 <HAL_RCC_OscConfig+0x324>
 800422c:	4b58      	ldr	r3, [pc, #352]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a57      	ldr	r2, [pc, #348]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	4b55      	ldr	r3, [pc, #340]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	4a54      	ldr	r2, [pc, #336]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 800423e:	f023 0304 	bic.w	r3, r3, #4
 8004242:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d015      	beq.n	8004278 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424c:	f7fd fe8c 	bl	8001f68 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004252:	e00a      	b.n	800426a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004254:	f7fd fe88 	bl	8001f68 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e0cb      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426a:	4b49      	ldr	r3, [pc, #292]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0ee      	beq.n	8004254 <HAL_RCC_OscConfig+0x334>
 8004276:	e014      	b.n	80042a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004278:	f7fd fe76 	bl	8001f68 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fd fe72 	bl	8001f68 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e0b5      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004296:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1ee      	bne.n	8004280 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d105      	bne.n	80042b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a8:	4b39      	ldr	r3, [pc, #228]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	4a38      	ldr	r2, [pc, #224]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 80042ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80a1 	beq.w	8004400 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042be:	4b34      	ldr	r3, [pc, #208]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d05c      	beq.n	8004384 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d141      	bne.n	8004356 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d2:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCC_OscConfig+0x478>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d8:	f7fd fe46 	bl	8001f68 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e0:	f7fd fe42 	bl	8001f68 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e087      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	4b27      	ldr	r3, [pc, #156]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	019b      	lsls	r3, r3, #6
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	3b01      	subs	r3, #1
 8004318:	041b      	lsls	r3, r3, #16
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	491b      	ldr	r1, [pc, #108]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004328:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <HAL_RCC_OscConfig+0x478>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432e:	f7fd fe1b 	bl	8001f68 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004336:	f7fd fe17 	bl	8001f68 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e05c      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x416>
 8004354:	e054      	b.n	8004400 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCC_OscConfig+0x478>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fd fe04 	bl	8001f68 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004364:	f7fd fe00 	bl	8001f68 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e045      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCC_OscConfig+0x470>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x444>
 8004382:	e03d      	b.n	8004400 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e038      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
 8004390:	40023800 	.word	0x40023800
 8004394:	40007000 	.word	0x40007000
 8004398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCC_OscConfig+0x4ec>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d028      	beq.n	80043fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d121      	bne.n	80043fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d11a      	bne.n	80043fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d111      	bne.n	80043fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	3b01      	subs	r3, #1
 80043e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d107      	bne.n	80043fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40023800 	.word	0x40023800

08004410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0cc      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004424:	4b68      	ldr	r3, [pc, #416]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d90c      	bls.n	800444c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4b65      	ldr	r3, [pc, #404]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443a:	4b63      	ldr	r3, [pc, #396]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d001      	beq.n	800444c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0b8      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d020      	beq.n	800449a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a58      	ldr	r2, [pc, #352]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800446e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4a52      	ldr	r2, [pc, #328]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	4b50      	ldr	r3, [pc, #320]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	494d      	ldr	r1, [pc, #308]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d044      	beq.n	8004530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b47      	ldr	r3, [pc, #284]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d119      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e07f      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d003      	beq.n	80044ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d107      	bne.n	80044de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ce:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e06f      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044de:	4b3b      	ldr	r3, [pc, #236]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e067      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ee:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4934      	ldr	r1, [pc, #208]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004500:	f7fd fd32 	bl	8001f68 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	e00a      	b.n	800451e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004508:	f7fd fd2e 	bl	8001f68 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e04f      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451e:	4b2b      	ldr	r3, [pc, #172]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 020c 	and.w	r2, r3, #12
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	429a      	cmp	r2, r3
 800452e:	d1eb      	bne.n	8004508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d20c      	bcs.n	8004558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b22      	ldr	r3, [pc, #136]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e032      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4916      	ldr	r1, [pc, #88]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	490e      	ldr	r1, [pc, #56]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004596:	f000 f821 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 800459a:	4602      	mov	r2, r0
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	490a      	ldr	r1, [pc, #40]	; (80045d0 <HAL_RCC_ClockConfig+0x1c0>)
 80045a8:	5ccb      	ldrb	r3, [r1, r3]
 80045aa:	fa22 f303 	lsr.w	r3, r2, r3
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1c8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd fc92 	bl	8001ee0 <HAL_InitTick>

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40023c00 	.word	0x40023c00
 80045cc:	40023800 	.word	0x40023800
 80045d0:	08007540 	.word	0x08007540
 80045d4:	20000008 	.word	0x20000008
 80045d8:	2000000c 	.word	0x2000000c

080045dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e0:	b094      	sub	sp, #80	; 0x50
 80045e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	647b      	str	r3, [r7, #68]	; 0x44
 80045e8:	2300      	movs	r3, #0
 80045ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ec:	2300      	movs	r3, #0
 80045ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f4:	4b79      	ldr	r3, [pc, #484]	; (80047dc <HAL_RCC_GetSysClockFreq+0x200>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d00d      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x40>
 8004600:	2b08      	cmp	r3, #8
 8004602:	f200 80e1 	bhi.w	80047c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x34>
 800460a:	2b04      	cmp	r3, #4
 800460c:	d003      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0x3a>
 800460e:	e0db      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4b73      	ldr	r3, [pc, #460]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004612:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004614:	e0db      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004616:	4b73      	ldr	r3, [pc, #460]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004618:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800461a:	e0d8      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800461c:	4b6f      	ldr	r3, [pc, #444]	; (80047dc <HAL_RCC_GetSysClockFreq+0x200>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004624:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004626:	4b6d      	ldr	r3, [pc, #436]	; (80047dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d063      	beq.n	80046fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004632:	4b6a      	ldr	r3, [pc, #424]	; (80047dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	2200      	movs	r2, #0
 800463a:	63bb      	str	r3, [r7, #56]	; 0x38
 800463c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004644:	633b      	str	r3, [r7, #48]	; 0x30
 8004646:	2300      	movs	r3, #0
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
 800464a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800464e:	4622      	mov	r2, r4
 8004650:	462b      	mov	r3, r5
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f04f 0100 	mov.w	r1, #0
 800465a:	0159      	lsls	r1, r3, #5
 800465c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004660:	0150      	lsls	r0, r2, #5
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4621      	mov	r1, r4
 8004668:	1a51      	subs	r1, r2, r1
 800466a:	6139      	str	r1, [r7, #16]
 800466c:	4629      	mov	r1, r5
 800466e:	eb63 0301 	sbc.w	r3, r3, r1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004680:	4659      	mov	r1, fp
 8004682:	018b      	lsls	r3, r1, #6
 8004684:	4651      	mov	r1, sl
 8004686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800468a:	4651      	mov	r1, sl
 800468c:	018a      	lsls	r2, r1, #6
 800468e:	4651      	mov	r1, sl
 8004690:	ebb2 0801 	subs.w	r8, r2, r1
 8004694:	4659      	mov	r1, fp
 8004696:	eb63 0901 	sbc.w	r9, r3, r1
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ae:	4690      	mov	r8, r2
 80046b0:	4699      	mov	r9, r3
 80046b2:	4623      	mov	r3, r4
 80046b4:	eb18 0303 	adds.w	r3, r8, r3
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	462b      	mov	r3, r5
 80046bc:	eb49 0303 	adc.w	r3, r9, r3
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046ce:	4629      	mov	r1, r5
 80046d0:	024b      	lsls	r3, r1, #9
 80046d2:	4621      	mov	r1, r4
 80046d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046d8:	4621      	mov	r1, r4
 80046da:	024a      	lsls	r2, r1, #9
 80046dc:	4610      	mov	r0, r2
 80046de:	4619      	mov	r1, r3
 80046e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e2:	2200      	movs	r2, #0
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ec:	f7fb fdd0 	bl	8000290 <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4613      	mov	r3, r2
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f8:	e058      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046fa:	4b38      	ldr	r3, [pc, #224]	; (80047dc <HAL_RCC_GetSysClockFreq+0x200>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	099b      	lsrs	r3, r3, #6
 8004700:	2200      	movs	r2, #0
 8004702:	4618      	mov	r0, r3
 8004704:	4611      	mov	r1, r2
 8004706:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800470a:	623b      	str	r3, [r7, #32]
 800470c:	2300      	movs	r3, #0
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
 8004710:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004714:	4642      	mov	r2, r8
 8004716:	464b      	mov	r3, r9
 8004718:	f04f 0000 	mov.w	r0, #0
 800471c:	f04f 0100 	mov.w	r1, #0
 8004720:	0159      	lsls	r1, r3, #5
 8004722:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004726:	0150      	lsls	r0, r2, #5
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4641      	mov	r1, r8
 800472e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004732:	4649      	mov	r1, r9
 8004734:	eb63 0b01 	sbc.w	fp, r3, r1
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004744:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004748:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800474c:	ebb2 040a 	subs.w	r4, r2, sl
 8004750:	eb63 050b 	sbc.w	r5, r3, fp
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	00eb      	lsls	r3, r5, #3
 800475e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004762:	00e2      	lsls	r2, r4, #3
 8004764:	4614      	mov	r4, r2
 8004766:	461d      	mov	r5, r3
 8004768:	4643      	mov	r3, r8
 800476a:	18e3      	adds	r3, r4, r3
 800476c:	603b      	str	r3, [r7, #0]
 800476e:	464b      	mov	r3, r9
 8004770:	eb45 0303 	adc.w	r3, r5, r3
 8004774:	607b      	str	r3, [r7, #4]
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004782:	4629      	mov	r1, r5
 8004784:	028b      	lsls	r3, r1, #10
 8004786:	4621      	mov	r1, r4
 8004788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800478c:	4621      	mov	r1, r4
 800478e:	028a      	lsls	r2, r1, #10
 8004790:	4610      	mov	r0, r2
 8004792:	4619      	mov	r1, r3
 8004794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004796:	2200      	movs	r2, #0
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	61fa      	str	r2, [r7, #28]
 800479c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a0:	f7fb fd76 	bl	8000290 <__aeabi_uldivmod>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4613      	mov	r3, r2
 80047aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <HAL_RCC_GetSysClockFreq+0x200>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	3301      	adds	r3, #1
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047c6:	e002      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3750      	adds	r7, #80	; 0x50
 80047d4:	46bd      	mov	sp, r7
 80047d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800
 80047e0:	00f42400 	.word	0x00f42400
 80047e4:	007a1200 	.word	0x007a1200

080047e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047ec:	4b03      	ldr	r3, [pc, #12]	; (80047fc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ee:	681b      	ldr	r3, [r3, #0]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000008 	.word	0x20000008

08004800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004804:	f7ff fff0 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	0a9b      	lsrs	r3, r3, #10
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4903      	ldr	r1, [pc, #12]	; (8004824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40023800 	.word	0x40023800
 8004824:	08007550 	.word	0x08007550

08004828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800482c:	f7ff ffdc 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8004830:	4602      	mov	r2, r0
 8004832:	4b05      	ldr	r3, [pc, #20]	; (8004848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	0b5b      	lsrs	r3, r3, #13
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	4903      	ldr	r1, [pc, #12]	; (800484c <HAL_RCC_GetPCLK2Freq+0x24>)
 800483e:	5ccb      	ldrb	r3, [r1, r3]
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40023800 	.word	0x40023800
 800484c:	08007550 	.word	0x08007550

08004850 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10b      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004874:	2b00      	cmp	r3, #0
 8004876:	d105      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004880:	2b00      	cmp	r3, #0
 8004882:	d075      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004884:	4b91      	ldr	r3, [pc, #580]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800488a:	f7fd fb6d 	bl	8001f68 <HAL_GetTick>
 800488e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004892:	f7fd fb69 	bl	8001f68 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e189      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a4:	4b8a      	ldr	r3, [pc, #552]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d009      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	019a      	lsls	r2, r3, #6
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	071b      	lsls	r3, r3, #28
 80048c8:	4981      	ldr	r1, [pc, #516]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01f      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048dc:	4b7c      	ldr	r3, [pc, #496]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e2:	0f1b      	lsrs	r3, r3, #28
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	019a      	lsls	r2, r3, #6
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	061b      	lsls	r3, r3, #24
 80048f6:	431a      	orrs	r2, r3
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	071b      	lsls	r3, r3, #28
 80048fc:	4974      	ldr	r1, [pc, #464]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004904:	4b72      	ldr	r3, [pc, #456]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800490a:	f023 021f 	bic.w	r2, r3, #31
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	3b01      	subs	r3, #1
 8004914:	496e      	ldr	r1, [pc, #440]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00d      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	019a      	lsls	r2, r3, #6
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	061b      	lsls	r3, r3, #24
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	071b      	lsls	r3, r3, #28
 800493c:	4964      	ldr	r1, [pc, #400]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004944:	4b61      	ldr	r3, [pc, #388]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800494a:	f7fd fb0d 	bl	8001f68 <HAL_GetTick>
 800494e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004952:	f7fd fb09 	bl	8001f68 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e129      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004964:	4b5a      	ldr	r3, [pc, #360]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004984:	2b00      	cmp	r3, #0
 8004986:	d079      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004988:	4b52      	ldr	r3, [pc, #328]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800498e:	f7fd faeb 	bl	8001f68 <HAL_GetTick>
 8004992:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004996:	f7fd fae7 	bl	8001f68 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e107      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049a8:	4b49      	ldr	r3, [pc, #292]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b4:	d0ef      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d020      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049c2:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	0f1b      	lsrs	r3, r3, #28
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	019a      	lsls	r2, r3, #6
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	061b      	lsls	r3, r3, #24
 80049dc:	431a      	orrs	r2, r3
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	071b      	lsls	r3, r3, #28
 80049e2:	493b      	ldr	r1, [pc, #236]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049ea:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	4934      	ldr	r1, [pc, #208]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01e      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a10:	4b2f      	ldr	r3, [pc, #188]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	0e1b      	lsrs	r3, r3, #24
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	019a      	lsls	r2, r3, #6
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	061b      	lsls	r3, r3, #24
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	071b      	lsls	r3, r3, #28
 8004a30:	4927      	ldr	r1, [pc, #156]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a38:	4b25      	ldr	r3, [pc, #148]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	4922      	ldr	r1, [pc, #136]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a4e:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a54:	f7fd fa88 	bl	8001f68 <HAL_GetTick>
 8004a58:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a5c:	f7fd fa84 	bl	8001f68 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e0a4      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a6e:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a7a:	d1ef      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 808b 	beq.w	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	4a0f      	ldr	r2, [pc, #60]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a98:	6413      	str	r3, [r2, #64]	; 0x40
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004aa6:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a0b      	ldr	r2, [pc, #44]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab2:	f7fd fa59 	bl	8001f68 <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ab8:	e010      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004aba:	f7fd fa55 	bl	8001f68 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d909      	bls.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e075      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004acc:	42470068 	.word	0x42470068
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	42470070 	.word	0x42470070
 8004ad8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004adc:	4b38      	ldr	r3, [pc, #224]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0e8      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ae8:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02f      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d028      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b06:	4b2f      	ldr	r3, [pc, #188]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b10:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b16:	4b2c      	ldr	r3, [pc, #176]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b1c:	4a29      	ldr	r2, [pc, #164]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b22:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d114      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7fd fa1b 	bl	8001f68 <HAL_GetTick>
 8004b32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b34:	e00a      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b36:	f7fd fa17 	bl	8001f68 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e035      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4c:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ee      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b64:	d10d      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004b66:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7a:	4912      	ldr	r1, [pc, #72]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]
 8004b80:	e005      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004b82:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	4a0f      	ldr	r2, [pc, #60]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b8c:	6093      	str	r3, [r2, #8]
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9a:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004bb4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	42470e40 	.word	0x42470e40
 8004bcc:	424711e0 	.word	0x424711e0

08004bd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e066      	b.n	8004cb4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	7f5b      	ldrb	r3, [r3, #29]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fc fe9a 	bl	8001930 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	22ca      	movs	r2, #202	; 0xca
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2253      	movs	r2, #83	; 0x53
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f9c1 	bl	8004f9a <RTC_EnterInitMode>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d12c      	bne.n	8004c7c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c34:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6899      	ldr	r1, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68d2      	ldr	r2, [r2, #12]
 8004c5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6919      	ldr	r1, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	041a      	lsls	r2, r3, #16
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9c8 	bl	8005008 <RTC_ExitInitMode>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d113      	bne.n	8004caa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	22ff      	movs	r2, #255	; 0xff
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	7f1b      	ldrb	r3, [r3, #28]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_RTC_SetTime+0x1c>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e087      	b.n	8004de8 <HAL_RTC_SetTime+0x12c>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d126      	bne.n	8004d38 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 f9a5 	bl	8005052 <RTC_ByteToBcd2>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f99e 	bl	8005052 <RTC_ByteToBcd2>
 8004d16:	4603      	mov	r3, r0
 8004d18:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d1a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	789b      	ldrb	r3, [r3, #2]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 f996 	bl	8005052 <RTC_ByteToBcd2>
 8004d26:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d28:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	78db      	ldrb	r3, [r3, #3]
 8004d30:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e018      	b.n	8004d6a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d58:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004d5e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	78db      	ldrb	r3, [r3, #3]
 8004d64:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	22ca      	movs	r2, #202	; 0xca
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2253      	movs	r2, #83	; 0x53
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f90d 	bl	8004f9a <RTC_EnterInitMode>
 8004d80:	4603      	mov	r3, r0
 8004d82:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d120      	bne.n	8004dcc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d94:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004da8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6899      	ldr	r1, [r3, #8]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f920 	bl	8005008 <RTC_ExitInitMode>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	771a      	strb	r2, [r3, #28]

  return status;
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd90      	pop	{r4, r7, pc}

08004df0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e22:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	0c1b      	lsrs	r3, r3, #16
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	0d9b      	lsrs	r3, r3, #22
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d11a      	bne.n	8004ea2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f90b 	bl	800508c <RTC_Bcd2ToByte>
 8004e76:	4603      	mov	r3, r0
 8004e78:	461a      	mov	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	785b      	ldrb	r3, [r3, #1]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f902 	bl	800508c <RTC_Bcd2ToByte>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	789b      	ldrb	r3, [r3, #2]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f8f9 	bl	800508c <RTC_Bcd2ToByte>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ec6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004eca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	0c1b      	lsrs	r3, r3, #16
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	0a1b      	lsrs	r3, r3, #8
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	0b5b      	lsrs	r3, r3, #13
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d11a      	bne.n	8004f40 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	78db      	ldrb	r3, [r3, #3]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f8bc 	bl	800508c <RTC_Bcd2ToByte>
 8004f14:	4603      	mov	r3, r0
 8004f16:	461a      	mov	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	785b      	ldrb	r3, [r3, #1]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 f8b3 	bl	800508c <RTC_Bcd2ToByte>
 8004f26:	4603      	mov	r3, r0
 8004f28:	461a      	mov	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	789b      	ldrb	r3, [r3, #2]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 f8aa 	bl	800508c <RTC_Bcd2ToByte>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f64:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f66:	f7fc ffff 	bl	8001f68 <HAL_GetTick>
 8004f6a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f6c:	e009      	b.n	8004f82 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f6e:	f7fc fffb 	bl	8001f68 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f7c:	d901      	bls.n	8004f82 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e007      	b.n	8004f92 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0ee      	beq.n	8004f6e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d122      	bne.n	8004ffe <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fc6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc8:	f7fc ffce 	bl	8001f68 <HAL_GetTick>
 8004fcc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004fce:	e00c      	b.n	8004fea <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fd0:	f7fc ffca 	bl	8001f68 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fde:	d904      	bls.n	8004fea <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <RTC_EnterInitMode+0x64>
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d1e8      	bne.n	8004fd0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005022:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10a      	bne.n	8005048 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff ff89 	bl	8004f4a <HAL_RTC_WaitForSynchro>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2204      	movs	r2, #4
 8005042:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	4603      	mov	r3, r0
 800505a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005060:	e005      	b.n	800506e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	3301      	adds	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	3b0a      	subs	r3, #10
 800506c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	2b09      	cmp	r3, #9
 8005072:	d8f6      	bhi.n	8005062 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	b2da      	uxtb	r2, r3
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	4313      	orrs	r3, r2
 800507e:	b2db      	uxtb	r3, r3
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	091b      	lsrs	r3, r3, #4
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	0092      	lsls	r2, r2, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	4413      	add	r3, r2
 80050b6:	b2db      	uxtb	r3, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e041      	b.n	800515a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fc fd5a 	bl	8001ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3304      	adds	r3, #4
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f000 fb48 	bl	8005798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e041      	b.n	80051f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f839 	bl	8005200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2202      	movs	r2, #2
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3304      	adds	r3, #4
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f000 faf9 	bl	8005798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <HAL_TIM_PWM_Start+0x24>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e022      	b.n	800527e <HAL_TIM_PWM_Start+0x6a>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b04      	cmp	r3, #4
 800523c:	d109      	bne.n	8005252 <HAL_TIM_PWM_Start+0x3e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	bf14      	ite	ne
 800524a:	2301      	movne	r3, #1
 800524c:	2300      	moveq	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	e015      	b.n	800527e <HAL_TIM_PWM_Start+0x6a>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b08      	cmp	r3, #8
 8005256:	d109      	bne.n	800526c <HAL_TIM_PWM_Start+0x58>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	bf14      	ite	ne
 8005264:	2301      	movne	r3, #1
 8005266:	2300      	moveq	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e008      	b.n	800527e <HAL_TIM_PWM_Start+0x6a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e07c      	b.n	8005380 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_TIM_PWM_Start+0x82>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005294:	e013      	b.n	80052be <HAL_TIM_PWM_Start+0xaa>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_PWM_Start+0x92>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a4:	e00b      	b.n	80052be <HAL_TIM_PWM_Start+0xaa>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_PWM_Start+0xa2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b4:	e003      	b.n	80052be <HAL_TIM_PWM_Start+0xaa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2201      	movs	r2, #1
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fd50 	bl	8005d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a2d      	ldr	r2, [pc, #180]	; (8005388 <HAL_TIM_PWM_Start+0x174>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <HAL_TIM_PWM_Start+0xcc>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a2c      	ldr	r2, [pc, #176]	; (800538c <HAL_TIM_PWM_Start+0x178>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d101      	bne.n	80052e4 <HAL_TIM_PWM_Start+0xd0>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <HAL_TIM_PWM_Start+0xd2>
 80052e4:	2300      	movs	r3, #0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a22      	ldr	r2, [pc, #136]	; (8005388 <HAL_TIM_PWM_Start+0x174>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d022      	beq.n	800534a <HAL_TIM_PWM_Start+0x136>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530c:	d01d      	beq.n	800534a <HAL_TIM_PWM_Start+0x136>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1f      	ldr	r2, [pc, #124]	; (8005390 <HAL_TIM_PWM_Start+0x17c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d018      	beq.n	800534a <HAL_TIM_PWM_Start+0x136>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1d      	ldr	r2, [pc, #116]	; (8005394 <HAL_TIM_PWM_Start+0x180>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <HAL_TIM_PWM_Start+0x136>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1c      	ldr	r2, [pc, #112]	; (8005398 <HAL_TIM_PWM_Start+0x184>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_TIM_PWM_Start+0x136>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a16      	ldr	r2, [pc, #88]	; (800538c <HAL_TIM_PWM_Start+0x178>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_TIM_PWM_Start+0x136>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a18      	ldr	r2, [pc, #96]	; (800539c <HAL_TIM_PWM_Start+0x188>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_TIM_PWM_Start+0x136>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <HAL_TIM_PWM_Start+0x18c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d111      	bne.n	800536e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b06      	cmp	r3, #6
 800535a:	d010      	beq.n	800537e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536c:	e007      	b.n	800537e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40010000 	.word	0x40010000
 800538c:	40010400 	.word	0x40010400
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800
 8005398:	40000c00 	.word	0x40000c00
 800539c:	40014000 	.word	0x40014000
 80053a0:	40001800 	.word	0x40001800

080053a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2200      	movs	r2, #0
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fcd8 	bl	8005d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a2e      	ldr	r2, [pc, #184]	; (800547c <HAL_TIM_PWM_Stop+0xd8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_TIM_PWM_Stop+0x2c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a2d      	ldr	r2, [pc, #180]	; (8005480 <HAL_TIM_PWM_Stop+0xdc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d101      	bne.n	80053d4 <HAL_TIM_PWM_Stop+0x30>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <HAL_TIM_PWM_Stop+0x32>
 80053d4:	2300      	movs	r3, #0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d017      	beq.n	800540a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6a1a      	ldr	r2, [r3, #32]
 80053e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10f      	bne.n	800540a <HAL_TIM_PWM_Stop+0x66>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6a1a      	ldr	r2, [r3, #32]
 80053f0:	f240 4344 	movw	r3, #1092	; 0x444
 80053f4:	4013      	ands	r3, r2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d107      	bne.n	800540a <HAL_TIM_PWM_Stop+0x66>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005408:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	f241 1311 	movw	r3, #4369	; 0x1111
 8005414:	4013      	ands	r3, r2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10f      	bne.n	800543a <HAL_TIM_PWM_Stop+0x96>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a1a      	ldr	r2, [r3, #32]
 8005420:	f240 4344 	movw	r3, #1092	; 0x444
 8005424:	4013      	ands	r3, r2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d107      	bne.n	800543a <HAL_TIM_PWM_Stop+0x96>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0201 	bic.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <HAL_TIM_PWM_Stop+0xa6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005448:	e013      	b.n	8005472 <HAL_TIM_PWM_Stop+0xce>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b04      	cmp	r3, #4
 800544e:	d104      	bne.n	800545a <HAL_TIM_PWM_Stop+0xb6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005458:	e00b      	b.n	8005472 <HAL_TIM_PWM_Stop+0xce>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d104      	bne.n	800546a <HAL_TIM_PWM_Stop+0xc6>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005468:	e003      	b.n	8005472 <HAL_TIM_PWM_Stop+0xce>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40010000 	.word	0x40010000
 8005480:	40010400 	.word	0x40010400

08005484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800549e:	2302      	movs	r3, #2
 80054a0:	e0ae      	b.n	8005600 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	f200 809f 	bhi.w	80055f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054ed 	.word	0x080054ed
 80054bc:	080055f1 	.word	0x080055f1
 80054c0:	080055f1 	.word	0x080055f1
 80054c4:	080055f1 	.word	0x080055f1
 80054c8:	0800552d 	.word	0x0800552d
 80054cc:	080055f1 	.word	0x080055f1
 80054d0:	080055f1 	.word	0x080055f1
 80054d4:	080055f1 	.word	0x080055f1
 80054d8:	0800556f 	.word	0x0800556f
 80054dc:	080055f1 	.word	0x080055f1
 80054e0:	080055f1 	.word	0x080055f1
 80054e4:	080055f1 	.word	0x080055f1
 80054e8:	080055af 	.word	0x080055af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f9f0 	bl	80058d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0208 	orr.w	r2, r2, #8
 8005506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0204 	bic.w	r2, r2, #4
 8005516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6999      	ldr	r1, [r3, #24]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	619a      	str	r2, [r3, #24]
      break;
 800552a:	e064      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fa40 	bl	80059b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	021a      	lsls	r2, r3, #8
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	619a      	str	r2, [r3, #24]
      break;
 800556c:	e043      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fa95 	bl	8005aa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0208 	orr.w	r2, r2, #8
 8005588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0204 	bic.w	r2, r2, #4
 8005598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69d9      	ldr	r1, [r3, #28]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	61da      	str	r2, [r3, #28]
      break;
 80055ac:	e023      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fae9 	bl	8005b8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	021a      	lsls	r2, r3, #8
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	61da      	str	r2, [r3, #28]
      break;
 80055ee:	e002      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
      break;
 80055f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_TIM_ConfigClockSource+0x1c>
 8005620:	2302      	movs	r3, #2
 8005622:	e0b4      	b.n	800578e <HAL_TIM_ConfigClockSource+0x186>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800564a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565c:	d03e      	beq.n	80056dc <HAL_TIM_ConfigClockSource+0xd4>
 800565e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005662:	f200 8087 	bhi.w	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 8005666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566a:	f000 8086 	beq.w	800577a <HAL_TIM_ConfigClockSource+0x172>
 800566e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005672:	d87f      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 8005674:	2b70      	cmp	r3, #112	; 0x70
 8005676:	d01a      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0xa6>
 8005678:	2b70      	cmp	r3, #112	; 0x70
 800567a:	d87b      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 800567c:	2b60      	cmp	r3, #96	; 0x60
 800567e:	d050      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x11a>
 8005680:	2b60      	cmp	r3, #96	; 0x60
 8005682:	d877      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 8005684:	2b50      	cmp	r3, #80	; 0x50
 8005686:	d03c      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0xfa>
 8005688:	2b50      	cmp	r3, #80	; 0x50
 800568a:	d873      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d058      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x13a>
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	d86f      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 8005694:	2b30      	cmp	r3, #48	; 0x30
 8005696:	d064      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x15a>
 8005698:	2b30      	cmp	r3, #48	; 0x30
 800569a:	d86b      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 800569c:	2b20      	cmp	r3, #32
 800569e:	d060      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x15a>
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d867      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d05c      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x15a>
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d05a      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x15a>
 80056ac:	e062      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6899      	ldr	r1, [r3, #8]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f000 fb35 	bl	8005d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	609a      	str	r2, [r3, #8]
      break;
 80056da:	e04f      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	6899      	ldr	r1, [r3, #8]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f000 fb1e 	bl	8005d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056fe:	609a      	str	r2, [r3, #8]
      break;
 8005700:	e03c      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6859      	ldr	r1, [r3, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	461a      	mov	r2, r3
 8005710:	f000 fa92 	bl	8005c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2150      	movs	r1, #80	; 0x50
 800571a:	4618      	mov	r0, r3
 800571c:	f000 faeb 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 8005720:	e02c      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6859      	ldr	r1, [r3, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	461a      	mov	r2, r3
 8005730:	f000 fab1 	bl	8005c96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2160      	movs	r1, #96	; 0x60
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fadb 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 8005740:	e01c      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6859      	ldr	r1, [r3, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	461a      	mov	r2, r3
 8005750:	f000 fa72 	bl	8005c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2140      	movs	r1, #64	; 0x40
 800575a:	4618      	mov	r0, r3
 800575c:	f000 facb 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 8005760:	e00c      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f000 fac2 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 8005772:	e003      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
      break;
 8005778:	e000      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800577a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a40      	ldr	r2, [pc, #256]	; (80058ac <TIM_Base_SetConfig+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b6:	d00f      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a3d      	ldr	r2, [pc, #244]	; (80058b0 <TIM_Base_SetConfig+0x118>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a3c      	ldr	r2, [pc, #240]	; (80058b4 <TIM_Base_SetConfig+0x11c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a3b      	ldr	r2, [pc, #236]	; (80058b8 <TIM_Base_SetConfig+0x120>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a3a      	ldr	r2, [pc, #232]	; (80058bc <TIM_Base_SetConfig+0x124>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2f      	ldr	r2, [pc, #188]	; (80058ac <TIM_Base_SetConfig+0x114>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d02b      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f8:	d027      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2c      	ldr	r2, [pc, #176]	; (80058b0 <TIM_Base_SetConfig+0x118>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d023      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2b      	ldr	r2, [pc, #172]	; (80058b4 <TIM_Base_SetConfig+0x11c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01f      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2a      	ldr	r2, [pc, #168]	; (80058b8 <TIM_Base_SetConfig+0x120>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01b      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a29      	ldr	r2, [pc, #164]	; (80058bc <TIM_Base_SetConfig+0x124>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d017      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a28      	ldr	r2, [pc, #160]	; (80058c0 <TIM_Base_SetConfig+0x128>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a27      	ldr	r2, [pc, #156]	; (80058c4 <TIM_Base_SetConfig+0x12c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00f      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a26      	ldr	r2, [pc, #152]	; (80058c8 <TIM_Base_SetConfig+0x130>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00b      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a25      	ldr	r2, [pc, #148]	; (80058cc <TIM_Base_SetConfig+0x134>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d007      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a24      	ldr	r2, [pc, #144]	; (80058d0 <TIM_Base_SetConfig+0x138>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a23      	ldr	r2, [pc, #140]	; (80058d4 <TIM_Base_SetConfig+0x13c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d108      	bne.n	800585c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a0a      	ldr	r2, [pc, #40]	; (80058ac <TIM_Base_SetConfig+0x114>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_Base_SetConfig+0xf8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a0c      	ldr	r2, [pc, #48]	; (80058bc <TIM_Base_SetConfig+0x124>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d103      	bne.n	8005898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	615a      	str	r2, [r3, #20]
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40010400 	.word	0x40010400
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40014400 	.word	0x40014400
 80058c8:	40014800 	.word	0x40014800
 80058cc:	40001800 	.word	0x40001800
 80058d0:	40001c00 	.word	0x40001c00
 80058d4:	40002000 	.word	0x40002000

080058d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 0302 	bic.w	r3, r3, #2
 8005920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a20      	ldr	r2, [pc, #128]	; (80059b0 <TIM_OC1_SetConfig+0xd8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC1_SetConfig+0x64>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <TIM_OC1_SetConfig+0xdc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d10c      	bne.n	8005956 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f023 0308 	bic.w	r3, r3, #8
 8005942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f023 0304 	bic.w	r3, r3, #4
 8005954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <TIM_OC1_SetConfig+0xd8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_OC1_SetConfig+0x8e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <TIM_OC1_SetConfig+0xdc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d111      	bne.n	800598a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800596c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	621a      	str	r2, [r3, #32]
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40010400 	.word	0x40010400

080059b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f023 0210 	bic.w	r2, r3, #16
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f023 0320 	bic.w	r3, r3, #32
 8005a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a22      	ldr	r2, [pc, #136]	; (8005a9c <TIM_OC2_SetConfig+0xe4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_OC2_SetConfig+0x68>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <TIM_OC2_SetConfig+0xe8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10d      	bne.n	8005a3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <TIM_OC2_SetConfig+0xe4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_OC2_SetConfig+0x94>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a16      	ldr	r2, [pc, #88]	; (8005aa0 <TIM_OC2_SetConfig+0xe8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d113      	bne.n	8005a74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a21      	ldr	r2, [pc, #132]	; (8005b84 <TIM_OC3_SetConfig+0xe0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_OC3_SetConfig+0x66>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a20      	ldr	r2, [pc, #128]	; (8005b88 <TIM_OC3_SetConfig+0xe4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10d      	bne.n	8005b26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a16      	ldr	r2, [pc, #88]	; (8005b84 <TIM_OC3_SetConfig+0xe0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_OC3_SetConfig+0x92>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <TIM_OC3_SetConfig+0xe4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d113      	bne.n	8005b5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	621a      	str	r2, [r3, #32]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40010400 	.word	0x40010400

08005b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	031b      	lsls	r3, r3, #12
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <TIM_OC4_SetConfig+0xa4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_OC4_SetConfig+0x68>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a11      	ldr	r2, [pc, #68]	; (8005c34 <TIM_OC4_SetConfig+0xa8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d109      	bne.n	8005c08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	019b      	lsls	r3, r3, #6
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40010400 	.word	0x40010400

08005c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0201 	bic.w	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 030a 	bic.w	r3, r3, #10
 8005c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b087      	sub	sp, #28
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f023 0210 	bic.w	r2, r3, #16
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	031b      	lsls	r3, r3, #12
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f043 0307 	orr.w	r3, r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	609a      	str	r2, [r3, #8]
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	021a      	lsls	r2, r3, #8
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	609a      	str	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2201      	movs	r2, #1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1a      	ldr	r2, [r3, #32]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	401a      	ands	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a1a      	ldr	r2, [r3, #32]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	431a      	orrs	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e05a      	b.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d022      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1c:	d01d      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1d      	ldr	r2, [pc, #116]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d018      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1b      	ldr	r2, [pc, #108]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1a      	ldr	r2, [pc, #104]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00e      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a18      	ldr	r2, [pc, #96]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d009      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d004      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a15      	ldr	r2, [pc, #84]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10c      	bne.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	40000c00 	.word	0x40000c00
 8005ea4:	40010400 	.word	0x40010400
 8005ea8:	40014000 	.word	0x40014000
 8005eac:	40001800 	.word	0x40001800

08005eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e03f      	b.n	8005f42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fb fee6 	bl	8001ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2224      	movs	r2, #36	; 0x24
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f829 	bl	8005f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695a      	ldr	r2, [r3, #20]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f50:	b0c0      	sub	sp, #256	; 0x100
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f68:	68d9      	ldr	r1, [r3, #12]
 8005f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	ea40 0301 	orr.w	r3, r0, r1
 8005f74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fa4:	f021 010c 	bic.w	r1, r1, #12
 8005fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc6:	6999      	ldr	r1, [r3, #24]
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	ea40 0301 	orr.w	r3, r0, r1
 8005fd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4b8f      	ldr	r3, [pc, #572]	; (8006218 <UART_SetConfig+0x2cc>)
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d005      	beq.n	8005fec <UART_SetConfig+0xa0>
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b8d      	ldr	r3, [pc, #564]	; (800621c <UART_SetConfig+0x2d0>)
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d104      	bne.n	8005ff6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fec:	f7fe fc1c 	bl	8004828 <HAL_RCC_GetPCLK2Freq>
 8005ff0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ff4:	e003      	b.n	8005ffe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ff6:	f7fe fc03 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 8005ffa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006008:	f040 810c 	bne.w	8006224 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800600c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006010:	2200      	movs	r2, #0
 8006012:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006016:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800601a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800601e:	4622      	mov	r2, r4
 8006020:	462b      	mov	r3, r5
 8006022:	1891      	adds	r1, r2, r2
 8006024:	65b9      	str	r1, [r7, #88]	; 0x58
 8006026:	415b      	adcs	r3, r3
 8006028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800602a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800602e:	4621      	mov	r1, r4
 8006030:	eb12 0801 	adds.w	r8, r2, r1
 8006034:	4629      	mov	r1, r5
 8006036:	eb43 0901 	adc.w	r9, r3, r1
 800603a:	f04f 0200 	mov.w	r2, #0
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800604a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800604e:	4690      	mov	r8, r2
 8006050:	4699      	mov	r9, r3
 8006052:	4623      	mov	r3, r4
 8006054:	eb18 0303 	adds.w	r3, r8, r3
 8006058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800605c:	462b      	mov	r3, r5
 800605e:	eb49 0303 	adc.w	r3, r9, r3
 8006062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006072:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800607a:	460b      	mov	r3, r1
 800607c:	18db      	adds	r3, r3, r3
 800607e:	653b      	str	r3, [r7, #80]	; 0x50
 8006080:	4613      	mov	r3, r2
 8006082:	eb42 0303 	adc.w	r3, r2, r3
 8006086:	657b      	str	r3, [r7, #84]	; 0x54
 8006088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800608c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006090:	f7fa f8fe 	bl	8000290 <__aeabi_uldivmod>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4b61      	ldr	r3, [pc, #388]	; (8006220 <UART_SetConfig+0x2d4>)
 800609a:	fba3 2302 	umull	r2, r3, r3, r2
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	011c      	lsls	r4, r3, #4
 80060a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	1891      	adds	r1, r2, r2
 80060ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80060bc:	415b      	adcs	r3, r3
 80060be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060c4:	4641      	mov	r1, r8
 80060c6:	eb12 0a01 	adds.w	sl, r2, r1
 80060ca:	4649      	mov	r1, r9
 80060cc:	eb43 0b01 	adc.w	fp, r3, r1
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060e4:	4692      	mov	sl, r2
 80060e6:	469b      	mov	fp, r3
 80060e8:	4643      	mov	r3, r8
 80060ea:	eb1a 0303 	adds.w	r3, sl, r3
 80060ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060f2:	464b      	mov	r3, r9
 80060f4:	eb4b 0303 	adc.w	r3, fp, r3
 80060f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006108:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800610c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006110:	460b      	mov	r3, r1
 8006112:	18db      	adds	r3, r3, r3
 8006114:	643b      	str	r3, [r7, #64]	; 0x40
 8006116:	4613      	mov	r3, r2
 8006118:	eb42 0303 	adc.w	r3, r2, r3
 800611c:	647b      	str	r3, [r7, #68]	; 0x44
 800611e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006122:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006126:	f7fa f8b3 	bl	8000290 <__aeabi_uldivmod>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4611      	mov	r1, r2
 8006130:	4b3b      	ldr	r3, [pc, #236]	; (8006220 <UART_SetConfig+0x2d4>)
 8006132:	fba3 2301 	umull	r2, r3, r3, r1
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	2264      	movs	r2, #100	; 0x64
 800613a:	fb02 f303 	mul.w	r3, r2, r3
 800613e:	1acb      	subs	r3, r1, r3
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006146:	4b36      	ldr	r3, [pc, #216]	; (8006220 <UART_SetConfig+0x2d4>)
 8006148:	fba3 2302 	umull	r2, r3, r3, r2
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006154:	441c      	add	r4, r3
 8006156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800615a:	2200      	movs	r2, #0
 800615c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006160:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006164:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006168:	4642      	mov	r2, r8
 800616a:	464b      	mov	r3, r9
 800616c:	1891      	adds	r1, r2, r2
 800616e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006170:	415b      	adcs	r3, r3
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006178:	4641      	mov	r1, r8
 800617a:	1851      	adds	r1, r2, r1
 800617c:	6339      	str	r1, [r7, #48]	; 0x30
 800617e:	4649      	mov	r1, r9
 8006180:	414b      	adcs	r3, r1
 8006182:	637b      	str	r3, [r7, #52]	; 0x34
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006190:	4659      	mov	r1, fp
 8006192:	00cb      	lsls	r3, r1, #3
 8006194:	4651      	mov	r1, sl
 8006196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800619a:	4651      	mov	r1, sl
 800619c:	00ca      	lsls	r2, r1, #3
 800619e:	4610      	mov	r0, r2
 80061a0:	4619      	mov	r1, r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	4642      	mov	r2, r8
 80061a6:	189b      	adds	r3, r3, r2
 80061a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ac:	464b      	mov	r3, r9
 80061ae:	460a      	mov	r2, r1
 80061b0:	eb42 0303 	adc.w	r3, r2, r3
 80061b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061cc:	460b      	mov	r3, r1
 80061ce:	18db      	adds	r3, r3, r3
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d2:	4613      	mov	r3, r2
 80061d4:	eb42 0303 	adc.w	r3, r2, r3
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061e2:	f7fa f855 	bl	8000290 <__aeabi_uldivmod>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <UART_SetConfig+0x2d4>)
 80061ec:	fba3 1302 	umull	r1, r3, r3, r2
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	2164      	movs	r1, #100	; 0x64
 80061f4:	fb01 f303 	mul.w	r3, r1, r3
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	3332      	adds	r3, #50	; 0x32
 80061fe:	4a08      	ldr	r2, [pc, #32]	; (8006220 <UART_SetConfig+0x2d4>)
 8006200:	fba2 2303 	umull	r2, r3, r2, r3
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	f003 0207 	and.w	r2, r3, #7
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4422      	add	r2, r4
 8006212:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006214:	e106      	b.n	8006424 <UART_SetConfig+0x4d8>
 8006216:	bf00      	nop
 8006218:	40011000 	.word	0x40011000
 800621c:	40011400 	.word	0x40011400
 8006220:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006228:	2200      	movs	r2, #0
 800622a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800622e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006232:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006236:	4642      	mov	r2, r8
 8006238:	464b      	mov	r3, r9
 800623a:	1891      	adds	r1, r2, r2
 800623c:	6239      	str	r1, [r7, #32]
 800623e:	415b      	adcs	r3, r3
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
 8006242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006246:	4641      	mov	r1, r8
 8006248:	1854      	adds	r4, r2, r1
 800624a:	4649      	mov	r1, r9
 800624c:	eb43 0501 	adc.w	r5, r3, r1
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	00eb      	lsls	r3, r5, #3
 800625a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800625e:	00e2      	lsls	r2, r4, #3
 8006260:	4614      	mov	r4, r2
 8006262:	461d      	mov	r5, r3
 8006264:	4643      	mov	r3, r8
 8006266:	18e3      	adds	r3, r4, r3
 8006268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800626c:	464b      	mov	r3, r9
 800626e:	eb45 0303 	adc.w	r3, r5, r3
 8006272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006282:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006292:	4629      	mov	r1, r5
 8006294:	008b      	lsls	r3, r1, #2
 8006296:	4621      	mov	r1, r4
 8006298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800629c:	4621      	mov	r1, r4
 800629e:	008a      	lsls	r2, r1, #2
 80062a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062a4:	f7f9 fff4 	bl	8000290 <__aeabi_uldivmod>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4b60      	ldr	r3, [pc, #384]	; (8006430 <UART_SetConfig+0x4e4>)
 80062ae:	fba3 2302 	umull	r2, r3, r3, r2
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	011c      	lsls	r4, r3, #4
 80062b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	1891      	adds	r1, r2, r2
 80062ce:	61b9      	str	r1, [r7, #24]
 80062d0:	415b      	adcs	r3, r3
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062d8:	4641      	mov	r1, r8
 80062da:	1851      	adds	r1, r2, r1
 80062dc:	6139      	str	r1, [r7, #16]
 80062de:	4649      	mov	r1, r9
 80062e0:	414b      	adcs	r3, r1
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062f0:	4659      	mov	r1, fp
 80062f2:	00cb      	lsls	r3, r1, #3
 80062f4:	4651      	mov	r1, sl
 80062f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fa:	4651      	mov	r1, sl
 80062fc:	00ca      	lsls	r2, r1, #3
 80062fe:	4610      	mov	r0, r2
 8006300:	4619      	mov	r1, r3
 8006302:	4603      	mov	r3, r0
 8006304:	4642      	mov	r2, r8
 8006306:	189b      	adds	r3, r3, r2
 8006308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800630c:	464b      	mov	r3, r9
 800630e:	460a      	mov	r2, r1
 8006310:	eb42 0303 	adc.w	r3, r2, r3
 8006314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	67bb      	str	r3, [r7, #120]	; 0x78
 8006322:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006330:	4649      	mov	r1, r9
 8006332:	008b      	lsls	r3, r1, #2
 8006334:	4641      	mov	r1, r8
 8006336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800633a:	4641      	mov	r1, r8
 800633c:	008a      	lsls	r2, r1, #2
 800633e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006342:	f7f9 ffa5 	bl	8000290 <__aeabi_uldivmod>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4611      	mov	r1, r2
 800634c:	4b38      	ldr	r3, [pc, #224]	; (8006430 <UART_SetConfig+0x4e4>)
 800634e:	fba3 2301 	umull	r2, r3, r3, r1
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	2264      	movs	r2, #100	; 0x64
 8006356:	fb02 f303 	mul.w	r3, r2, r3
 800635a:	1acb      	subs	r3, r1, r3
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	3332      	adds	r3, #50	; 0x32
 8006360:	4a33      	ldr	r2, [pc, #204]	; (8006430 <UART_SetConfig+0x4e4>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636c:	441c      	add	r4, r3
 800636e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006372:	2200      	movs	r2, #0
 8006374:	673b      	str	r3, [r7, #112]	; 0x70
 8006376:	677a      	str	r2, [r7, #116]	; 0x74
 8006378:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800637c:	4642      	mov	r2, r8
 800637e:	464b      	mov	r3, r9
 8006380:	1891      	adds	r1, r2, r2
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	415b      	adcs	r3, r3
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800638c:	4641      	mov	r1, r8
 800638e:	1851      	adds	r1, r2, r1
 8006390:	6039      	str	r1, [r7, #0]
 8006392:	4649      	mov	r1, r9
 8006394:	414b      	adcs	r3, r1
 8006396:	607b      	str	r3, [r7, #4]
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063a4:	4659      	mov	r1, fp
 80063a6:	00cb      	lsls	r3, r1, #3
 80063a8:	4651      	mov	r1, sl
 80063aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ae:	4651      	mov	r1, sl
 80063b0:	00ca      	lsls	r2, r1, #3
 80063b2:	4610      	mov	r0, r2
 80063b4:	4619      	mov	r1, r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	4642      	mov	r2, r8
 80063ba:	189b      	adds	r3, r3, r2
 80063bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80063be:	464b      	mov	r3, r9
 80063c0:	460a      	mov	r2, r1
 80063c2:	eb42 0303 	adc.w	r3, r2, r3
 80063c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	663b      	str	r3, [r7, #96]	; 0x60
 80063d2:	667a      	str	r2, [r7, #100]	; 0x64
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063e0:	4649      	mov	r1, r9
 80063e2:	008b      	lsls	r3, r1, #2
 80063e4:	4641      	mov	r1, r8
 80063e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ea:	4641      	mov	r1, r8
 80063ec:	008a      	lsls	r2, r1, #2
 80063ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063f2:	f7f9 ff4d 	bl	8000290 <__aeabi_uldivmod>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4b0d      	ldr	r3, [pc, #52]	; (8006430 <UART_SetConfig+0x4e4>)
 80063fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	2164      	movs	r1, #100	; 0x64
 8006404:	fb01 f303 	mul.w	r3, r1, r3
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	3332      	adds	r3, #50	; 0x32
 800640e:	4a08      	ldr	r2, [pc, #32]	; (8006430 <UART_SetConfig+0x4e4>)
 8006410:	fba2 2303 	umull	r2, r3, r2, r3
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f003 020f 	and.w	r2, r3, #15
 800641a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4422      	add	r2, r4
 8006422:	609a      	str	r2, [r3, #8]
}
 8006424:	bf00      	nop
 8006426:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800642a:	46bd      	mov	sp, r7
 800642c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006430:	51eb851f 	.word	0x51eb851f

08006434 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006434:	b084      	sub	sp, #16
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	f107 001c 	add.w	r0, r7, #28
 8006442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	2b01      	cmp	r3, #1
 800644a:	d122      	bne.n	8006492 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d105      	bne.n	8006486 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 faa2 	bl	80069d0 <USB_CoreReset>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
 8006490:	e01a      	b.n	80064c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa96 	bl	80069d0 <USB_CoreReset>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	639a      	str	r2, [r3, #56]	; 0x38
 80064ba:	e005      	b.n	80064c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10b      	bne.n	80064e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f043 0206 	orr.w	r2, r3, #6
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f043 0220 	orr.w	r2, r3, #32
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064f2:	b004      	add	sp, #16
 80064f4:	4770      	bx	lr

080064f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f023 0201 	bic.w	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d115      	bne.n	8006566 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006546:	2001      	movs	r0, #1
 8006548:	f7fb fd1a 	bl	8001f80 <HAL_Delay>
      ms++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3301      	adds	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fa2e 	bl	80069b4 <USB_GetMode>
 8006558:	4603      	mov	r3, r0
 800655a:	2b01      	cmp	r3, #1
 800655c:	d01e      	beq.n	800659c <USB_SetCurrentMode+0x84>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b31      	cmp	r3, #49	; 0x31
 8006562:	d9f0      	bls.n	8006546 <USB_SetCurrentMode+0x2e>
 8006564:	e01a      	b.n	800659c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d115      	bne.n	8006598 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006578:	2001      	movs	r0, #1
 800657a:	f7fb fd01 	bl	8001f80 <HAL_Delay>
      ms++;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3301      	adds	r3, #1
 8006582:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fa15 	bl	80069b4 <USB_GetMode>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <USB_SetCurrentMode+0x84>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b31      	cmp	r3, #49	; 0x31
 8006594:	d9f0      	bls.n	8006578 <USB_SetCurrentMode+0x60>
 8006596:	e001      	b.n	800659c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e005      	b.n	80065a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b32      	cmp	r3, #50	; 0x32
 80065a0:	d101      	bne.n	80065a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b0:	b084      	sub	sp, #16
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	e009      	b.n	80065e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	3340      	adds	r3, #64	; 0x40
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	2200      	movs	r2, #0
 80065dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	3301      	adds	r3, #1
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b0e      	cmp	r3, #14
 80065e8:	d9f2      	bls.n	80065d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11c      	bne.n	800662a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065fe:	f043 0302 	orr.w	r3, r3, #2
 8006602:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	639a      	str	r2, [r3, #56]	; 0x38
 8006628:	e00b      	b.n	8006642 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006648:	461a      	mov	r2, r3
 800664a:	2300      	movs	r3, #0
 800664c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006654:	4619      	mov	r1, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665c:	461a      	mov	r2, r3
 800665e:	680b      	ldr	r3, [r1, #0]
 8006660:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	2b01      	cmp	r3, #1
 8006666:	d10c      	bne.n	8006682 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800666e:	2100      	movs	r1, #0
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f965 	bl	8006940 <USB_SetDevSpeed>
 8006676:	e008      	b.n	800668a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006678:	2101      	movs	r1, #1
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f960 	bl	8006940 <USB_SetDevSpeed>
 8006680:	e003      	b.n	800668a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006682:	2103      	movs	r1, #3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f95b 	bl	8006940 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800668a:	2110      	movs	r1, #16
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f8f3 	bl	8006878 <USB_FlushTxFifo>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f91f 	bl	80068e0 <USB_FlushRxFifo>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	461a      	mov	r2, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066be:	461a      	mov	r2, r3
 80066c0:	2300      	movs	r3, #0
 80066c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ca:	461a      	mov	r2, r3
 80066cc:	2300      	movs	r3, #0
 80066ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066d0:	2300      	movs	r3, #0
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	e043      	b.n	800675e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ec:	d118      	bne.n	8006720 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006700:	461a      	mov	r2, r3
 8006702:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e013      	b.n	8006732 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006716:	461a      	mov	r2, r3
 8006718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	e008      	b.n	8006732 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	461a      	mov	r2, r3
 800672e:	2300      	movs	r3, #0
 8006730:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673e:	461a      	mov	r2, r3
 8006740:	2300      	movs	r3, #0
 8006742:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006750:	461a      	mov	r2, r3
 8006752:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006756:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	3301      	adds	r3, #1
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	429a      	cmp	r2, r3
 8006764:	d3b7      	bcc.n	80066d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006766:	2300      	movs	r3, #0
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	e043      	b.n	80067f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800677e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006782:	d118      	bne.n	80067b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	461a      	mov	r2, r3
 8006798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e013      	b.n	80067c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ac:	461a      	mov	r2, r3
 80067ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	e008      	b.n	80067c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	461a      	mov	r2, r3
 80067c4:	2300      	movs	r3, #0
 80067c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	461a      	mov	r2, r3
 80067d6:	2300      	movs	r3, #0
 80067d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	461a      	mov	r2, r3
 80067e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	3301      	adds	r3, #1
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d3b7      	bcc.n	800676c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800680a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800681c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f043 0210 	orr.w	r2, r3, #16
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <USB_DevInit+0x2c4>)
 8006836:	4313      	orrs	r3, r2
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800683c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	f043 0208 	orr.w	r2, r3, #8
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800684e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d107      	bne.n	8006864 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800685c:	f043 0304 	orr.w	r3, r3, #4
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006870:	b004      	add	sp, #16
 8006872:	4770      	bx	lr
 8006874:	803c3800 	.word	0x803c3800

08006878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a13      	ldr	r2, [pc, #76]	; (80068dc <USB_FlushTxFifo+0x64>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e01b      	b.n	80068d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	daf2      	bge.n	8006886 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	019b      	lsls	r3, r3, #6
 80068a8:	f043 0220 	orr.w	r2, r3, #32
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4a08      	ldr	r2, [pc, #32]	; (80068dc <USB_FlushTxFifo+0x64>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d901      	bls.n	80068c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e006      	b.n	80068d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d0f0      	beq.n	80068b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	00030d40 	.word	0x00030d40

080068e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a11      	ldr	r2, [pc, #68]	; (800693c <USB_FlushRxFifo+0x5c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d901      	bls.n	80068fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e018      	b.n	8006930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	daf2      	bge.n	80068ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2210      	movs	r2, #16
 800690e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4a08      	ldr	r2, [pc, #32]	; (800693c <USB_FlushRxFifo+0x5c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d901      	bls.n	8006922 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e006      	b.n	8006930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b10      	cmp	r3, #16
 800692c:	d0f0      	beq.n	8006910 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	00030d40 	.word	0x00030d40

08006940 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006960:	4313      	orrs	r3, r2
 8006962:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800698c:	f023 0303 	bic.w	r3, r3, #3
 8006990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069a0:	f043 0302 	orr.w	r3, r3, #2
 80069a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	f003 0301 	and.w	r3, r3, #1
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3301      	adds	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a13      	ldr	r2, [pc, #76]	; (8006a34 <USB_CoreReset+0x64>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e01b      	b.n	8006a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	daf2      	bge.n	80069dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f043 0201 	orr.w	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <USB_CoreReset+0x64>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d901      	bls.n	8006a18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e006      	b.n	8006a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d0f0      	beq.n	8006a06 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	00030d40 	.word	0x00030d40

08006a38 <siprintf>:
 8006a38:	b40e      	push	{r1, r2, r3}
 8006a3a:	b500      	push	{lr}
 8006a3c:	b09c      	sub	sp, #112	; 0x70
 8006a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a40:	9002      	str	r0, [sp, #8]
 8006a42:	9006      	str	r0, [sp, #24]
 8006a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a48:	4809      	ldr	r0, [pc, #36]	; (8006a70 <siprintf+0x38>)
 8006a4a:	9107      	str	r1, [sp, #28]
 8006a4c:	9104      	str	r1, [sp, #16]
 8006a4e:	4909      	ldr	r1, [pc, #36]	; (8006a74 <siprintf+0x3c>)
 8006a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a54:	9105      	str	r1, [sp, #20]
 8006a56:	6800      	ldr	r0, [r0, #0]
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	a902      	add	r1, sp, #8
 8006a5c:	f000 f992 	bl	8006d84 <_svfiprintf_r>
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	b01c      	add	sp, #112	; 0x70
 8006a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a6c:	b003      	add	sp, #12
 8006a6e:	4770      	bx	lr
 8006a70:	20000060 	.word	0x20000060
 8006a74:	ffff0208 	.word	0xffff0208

08006a78 <memset>:
 8006a78:	4402      	add	r2, r0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d100      	bne.n	8006a82 <memset+0xa>
 8006a80:	4770      	bx	lr
 8006a82:	f803 1b01 	strb.w	r1, [r3], #1
 8006a86:	e7f9      	b.n	8006a7c <memset+0x4>

08006a88 <__errno>:
 8006a88:	4b01      	ldr	r3, [pc, #4]	; (8006a90 <__errno+0x8>)
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	20000060 	.word	0x20000060

08006a94 <__libc_init_array>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	4d0d      	ldr	r5, [pc, #52]	; (8006acc <__libc_init_array+0x38>)
 8006a98:	4c0d      	ldr	r4, [pc, #52]	; (8006ad0 <__libc_init_array+0x3c>)
 8006a9a:	1b64      	subs	r4, r4, r5
 8006a9c:	10a4      	asrs	r4, r4, #2
 8006a9e:	2600      	movs	r6, #0
 8006aa0:	42a6      	cmp	r6, r4
 8006aa2:	d109      	bne.n	8006ab8 <__libc_init_array+0x24>
 8006aa4:	4d0b      	ldr	r5, [pc, #44]	; (8006ad4 <__libc_init_array+0x40>)
 8006aa6:	4c0c      	ldr	r4, [pc, #48]	; (8006ad8 <__libc_init_array+0x44>)
 8006aa8:	f000 fc6a 	bl	8007380 <_init>
 8006aac:	1b64      	subs	r4, r4, r5
 8006aae:	10a4      	asrs	r4, r4, #2
 8006ab0:	2600      	movs	r6, #0
 8006ab2:	42a6      	cmp	r6, r4
 8006ab4:	d105      	bne.n	8006ac2 <__libc_init_array+0x2e>
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}
 8006ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abc:	4798      	blx	r3
 8006abe:	3601      	adds	r6, #1
 8006ac0:	e7ee      	b.n	8006aa0 <__libc_init_array+0xc>
 8006ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac6:	4798      	blx	r3
 8006ac8:	3601      	adds	r6, #1
 8006aca:	e7f2      	b.n	8006ab2 <__libc_init_array+0x1e>
 8006acc:	08007594 	.word	0x08007594
 8006ad0:	08007594 	.word	0x08007594
 8006ad4:	08007594 	.word	0x08007594
 8006ad8:	08007598 	.word	0x08007598

08006adc <__retarget_lock_acquire_recursive>:
 8006adc:	4770      	bx	lr

08006ade <__retarget_lock_release_recursive>:
 8006ade:	4770      	bx	lr

08006ae0 <_free_r>:
 8006ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ae2:	2900      	cmp	r1, #0
 8006ae4:	d044      	beq.n	8006b70 <_free_r+0x90>
 8006ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aea:	9001      	str	r0, [sp, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f1a1 0404 	sub.w	r4, r1, #4
 8006af2:	bfb8      	it	lt
 8006af4:	18e4      	addlt	r4, r4, r3
 8006af6:	f000 f8df 	bl	8006cb8 <__malloc_lock>
 8006afa:	4a1e      	ldr	r2, [pc, #120]	; (8006b74 <_free_r+0x94>)
 8006afc:	9801      	ldr	r0, [sp, #4]
 8006afe:	6813      	ldr	r3, [r2, #0]
 8006b00:	b933      	cbnz	r3, 8006b10 <_free_r+0x30>
 8006b02:	6063      	str	r3, [r4, #4]
 8006b04:	6014      	str	r4, [r2, #0]
 8006b06:	b003      	add	sp, #12
 8006b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b0c:	f000 b8da 	b.w	8006cc4 <__malloc_unlock>
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d908      	bls.n	8006b26 <_free_r+0x46>
 8006b14:	6825      	ldr	r5, [r4, #0]
 8006b16:	1961      	adds	r1, r4, r5
 8006b18:	428b      	cmp	r3, r1
 8006b1a:	bf01      	itttt	eq
 8006b1c:	6819      	ldreq	r1, [r3, #0]
 8006b1e:	685b      	ldreq	r3, [r3, #4]
 8006b20:	1949      	addeq	r1, r1, r5
 8006b22:	6021      	streq	r1, [r4, #0]
 8006b24:	e7ed      	b.n	8006b02 <_free_r+0x22>
 8006b26:	461a      	mov	r2, r3
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	b10b      	cbz	r3, 8006b30 <_free_r+0x50>
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	d9fa      	bls.n	8006b26 <_free_r+0x46>
 8006b30:	6811      	ldr	r1, [r2, #0]
 8006b32:	1855      	adds	r5, r2, r1
 8006b34:	42a5      	cmp	r5, r4
 8006b36:	d10b      	bne.n	8006b50 <_free_r+0x70>
 8006b38:	6824      	ldr	r4, [r4, #0]
 8006b3a:	4421      	add	r1, r4
 8006b3c:	1854      	adds	r4, r2, r1
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	6011      	str	r1, [r2, #0]
 8006b42:	d1e0      	bne.n	8006b06 <_free_r+0x26>
 8006b44:	681c      	ldr	r4, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	6053      	str	r3, [r2, #4]
 8006b4a:	440c      	add	r4, r1
 8006b4c:	6014      	str	r4, [r2, #0]
 8006b4e:	e7da      	b.n	8006b06 <_free_r+0x26>
 8006b50:	d902      	bls.n	8006b58 <_free_r+0x78>
 8006b52:	230c      	movs	r3, #12
 8006b54:	6003      	str	r3, [r0, #0]
 8006b56:	e7d6      	b.n	8006b06 <_free_r+0x26>
 8006b58:	6825      	ldr	r5, [r4, #0]
 8006b5a:	1961      	adds	r1, r4, r5
 8006b5c:	428b      	cmp	r3, r1
 8006b5e:	bf04      	itt	eq
 8006b60:	6819      	ldreq	r1, [r3, #0]
 8006b62:	685b      	ldreq	r3, [r3, #4]
 8006b64:	6063      	str	r3, [r4, #4]
 8006b66:	bf04      	itt	eq
 8006b68:	1949      	addeq	r1, r1, r5
 8006b6a:	6021      	streq	r1, [r4, #0]
 8006b6c:	6054      	str	r4, [r2, #4]
 8006b6e:	e7ca      	b.n	8006b06 <_free_r+0x26>
 8006b70:	b003      	add	sp, #12
 8006b72:	bd30      	pop	{r4, r5, pc}
 8006b74:	20000b00 	.word	0x20000b00

08006b78 <sbrk_aligned>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4e0e      	ldr	r6, [pc, #56]	; (8006bb4 <sbrk_aligned+0x3c>)
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	6831      	ldr	r1, [r6, #0]
 8006b80:	4605      	mov	r5, r0
 8006b82:	b911      	cbnz	r1, 8006b8a <sbrk_aligned+0x12>
 8006b84:	f000 fba6 	bl	80072d4 <_sbrk_r>
 8006b88:	6030      	str	r0, [r6, #0]
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	f000 fba1 	bl	80072d4 <_sbrk_r>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	d00a      	beq.n	8006bac <sbrk_aligned+0x34>
 8006b96:	1cc4      	adds	r4, r0, #3
 8006b98:	f024 0403 	bic.w	r4, r4, #3
 8006b9c:	42a0      	cmp	r0, r4
 8006b9e:	d007      	beq.n	8006bb0 <sbrk_aligned+0x38>
 8006ba0:	1a21      	subs	r1, r4, r0
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 fb96 	bl	80072d4 <_sbrk_r>
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d101      	bne.n	8006bb0 <sbrk_aligned+0x38>
 8006bac:	f04f 34ff 	mov.w	r4, #4294967295
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}
 8006bb4:	20000b04 	.word	0x20000b04

08006bb8 <_malloc_r>:
 8006bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bbc:	1ccd      	adds	r5, r1, #3
 8006bbe:	f025 0503 	bic.w	r5, r5, #3
 8006bc2:	3508      	adds	r5, #8
 8006bc4:	2d0c      	cmp	r5, #12
 8006bc6:	bf38      	it	cc
 8006bc8:	250c      	movcc	r5, #12
 8006bca:	2d00      	cmp	r5, #0
 8006bcc:	4607      	mov	r7, r0
 8006bce:	db01      	blt.n	8006bd4 <_malloc_r+0x1c>
 8006bd0:	42a9      	cmp	r1, r5
 8006bd2:	d905      	bls.n	8006be0 <_malloc_r+0x28>
 8006bd4:	230c      	movs	r3, #12
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	2600      	movs	r6, #0
 8006bda:	4630      	mov	r0, r6
 8006bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006be0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006cb4 <_malloc_r+0xfc>
 8006be4:	f000 f868 	bl	8006cb8 <__malloc_lock>
 8006be8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bec:	461c      	mov	r4, r3
 8006bee:	bb5c      	cbnz	r4, 8006c48 <_malloc_r+0x90>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f7ff ffc0 	bl	8006b78 <sbrk_aligned>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	d155      	bne.n	8006caa <_malloc_r+0xf2>
 8006bfe:	f8d8 4000 	ldr.w	r4, [r8]
 8006c02:	4626      	mov	r6, r4
 8006c04:	2e00      	cmp	r6, #0
 8006c06:	d145      	bne.n	8006c94 <_malloc_r+0xdc>
 8006c08:	2c00      	cmp	r4, #0
 8006c0a:	d048      	beq.n	8006c9e <_malloc_r+0xe6>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4638      	mov	r0, r7
 8006c12:	eb04 0903 	add.w	r9, r4, r3
 8006c16:	f000 fb5d 	bl	80072d4 <_sbrk_r>
 8006c1a:	4581      	cmp	r9, r0
 8006c1c:	d13f      	bne.n	8006c9e <_malloc_r+0xe6>
 8006c1e:	6821      	ldr	r1, [r4, #0]
 8006c20:	1a6d      	subs	r5, r5, r1
 8006c22:	4629      	mov	r1, r5
 8006c24:	4638      	mov	r0, r7
 8006c26:	f7ff ffa7 	bl	8006b78 <sbrk_aligned>
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d037      	beq.n	8006c9e <_malloc_r+0xe6>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	442b      	add	r3, r5
 8006c32:	6023      	str	r3, [r4, #0]
 8006c34:	f8d8 3000 	ldr.w	r3, [r8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d038      	beq.n	8006cae <_malloc_r+0xf6>
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	42a2      	cmp	r2, r4
 8006c40:	d12b      	bne.n	8006c9a <_malloc_r+0xe2>
 8006c42:	2200      	movs	r2, #0
 8006c44:	605a      	str	r2, [r3, #4]
 8006c46:	e00f      	b.n	8006c68 <_malloc_r+0xb0>
 8006c48:	6822      	ldr	r2, [r4, #0]
 8006c4a:	1b52      	subs	r2, r2, r5
 8006c4c:	d41f      	bmi.n	8006c8e <_malloc_r+0xd6>
 8006c4e:	2a0b      	cmp	r2, #11
 8006c50:	d917      	bls.n	8006c82 <_malloc_r+0xca>
 8006c52:	1961      	adds	r1, r4, r5
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	6025      	str	r5, [r4, #0]
 8006c58:	bf18      	it	ne
 8006c5a:	6059      	strne	r1, [r3, #4]
 8006c5c:	6863      	ldr	r3, [r4, #4]
 8006c5e:	bf08      	it	eq
 8006c60:	f8c8 1000 	streq.w	r1, [r8]
 8006c64:	5162      	str	r2, [r4, r5]
 8006c66:	604b      	str	r3, [r1, #4]
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f104 060b 	add.w	r6, r4, #11
 8006c6e:	f000 f829 	bl	8006cc4 <__malloc_unlock>
 8006c72:	f026 0607 	bic.w	r6, r6, #7
 8006c76:	1d23      	adds	r3, r4, #4
 8006c78:	1af2      	subs	r2, r6, r3
 8006c7a:	d0ae      	beq.n	8006bda <_malloc_r+0x22>
 8006c7c:	1b9b      	subs	r3, r3, r6
 8006c7e:	50a3      	str	r3, [r4, r2]
 8006c80:	e7ab      	b.n	8006bda <_malloc_r+0x22>
 8006c82:	42a3      	cmp	r3, r4
 8006c84:	6862      	ldr	r2, [r4, #4]
 8006c86:	d1dd      	bne.n	8006c44 <_malloc_r+0x8c>
 8006c88:	f8c8 2000 	str.w	r2, [r8]
 8006c8c:	e7ec      	b.n	8006c68 <_malloc_r+0xb0>
 8006c8e:	4623      	mov	r3, r4
 8006c90:	6864      	ldr	r4, [r4, #4]
 8006c92:	e7ac      	b.n	8006bee <_malloc_r+0x36>
 8006c94:	4634      	mov	r4, r6
 8006c96:	6876      	ldr	r6, [r6, #4]
 8006c98:	e7b4      	b.n	8006c04 <_malloc_r+0x4c>
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	e7cc      	b.n	8006c38 <_malloc_r+0x80>
 8006c9e:	230c      	movs	r3, #12
 8006ca0:	603b      	str	r3, [r7, #0]
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	f000 f80e 	bl	8006cc4 <__malloc_unlock>
 8006ca8:	e797      	b.n	8006bda <_malloc_r+0x22>
 8006caa:	6025      	str	r5, [r4, #0]
 8006cac:	e7dc      	b.n	8006c68 <_malloc_r+0xb0>
 8006cae:	605b      	str	r3, [r3, #4]
 8006cb0:	deff      	udf	#255	; 0xff
 8006cb2:	bf00      	nop
 8006cb4:	20000b00 	.word	0x20000b00

08006cb8 <__malloc_lock>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	; (8006cc0 <__malloc_lock+0x8>)
 8006cba:	f7ff bf0f 	b.w	8006adc <__retarget_lock_acquire_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	20000afc 	.word	0x20000afc

08006cc4 <__malloc_unlock>:
 8006cc4:	4801      	ldr	r0, [pc, #4]	; (8006ccc <__malloc_unlock+0x8>)
 8006cc6:	f7ff bf0a 	b.w	8006ade <__retarget_lock_release_recursive>
 8006cca:	bf00      	nop
 8006ccc:	20000afc 	.word	0x20000afc

08006cd0 <__ssputs_r>:
 8006cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	688e      	ldr	r6, [r1, #8]
 8006cd6:	461f      	mov	r7, r3
 8006cd8:	42be      	cmp	r6, r7
 8006cda:	680b      	ldr	r3, [r1, #0]
 8006cdc:	4682      	mov	sl, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	4690      	mov	r8, r2
 8006ce2:	d82c      	bhi.n	8006d3e <__ssputs_r+0x6e>
 8006ce4:	898a      	ldrh	r2, [r1, #12]
 8006ce6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cea:	d026      	beq.n	8006d3a <__ssputs_r+0x6a>
 8006cec:	6965      	ldr	r5, [r4, #20]
 8006cee:	6909      	ldr	r1, [r1, #16]
 8006cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cf4:	eba3 0901 	sub.w	r9, r3, r1
 8006cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cfc:	1c7b      	adds	r3, r7, #1
 8006cfe:	444b      	add	r3, r9
 8006d00:	106d      	asrs	r5, r5, #1
 8006d02:	429d      	cmp	r5, r3
 8006d04:	bf38      	it	cc
 8006d06:	461d      	movcc	r5, r3
 8006d08:	0553      	lsls	r3, r2, #21
 8006d0a:	d527      	bpl.n	8006d5c <__ssputs_r+0x8c>
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	f7ff ff53 	bl	8006bb8 <_malloc_r>
 8006d12:	4606      	mov	r6, r0
 8006d14:	b360      	cbz	r0, 8006d70 <__ssputs_r+0xa0>
 8006d16:	6921      	ldr	r1, [r4, #16]
 8006d18:	464a      	mov	r2, r9
 8006d1a:	f000 faeb 	bl	80072f4 <memcpy>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	6126      	str	r6, [r4, #16]
 8006d2c:	6165      	str	r5, [r4, #20]
 8006d2e:	444e      	add	r6, r9
 8006d30:	eba5 0509 	sub.w	r5, r5, r9
 8006d34:	6026      	str	r6, [r4, #0]
 8006d36:	60a5      	str	r5, [r4, #8]
 8006d38:	463e      	mov	r6, r7
 8006d3a:	42be      	cmp	r6, r7
 8006d3c:	d900      	bls.n	8006d40 <__ssputs_r+0x70>
 8006d3e:	463e      	mov	r6, r7
 8006d40:	6820      	ldr	r0, [r4, #0]
 8006d42:	4632      	mov	r2, r6
 8006d44:	4641      	mov	r1, r8
 8006d46:	f000 faab 	bl	80072a0 <memmove>
 8006d4a:	68a3      	ldr	r3, [r4, #8]
 8006d4c:	1b9b      	subs	r3, r3, r6
 8006d4e:	60a3      	str	r3, [r4, #8]
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	4433      	add	r3, r6
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	2000      	movs	r0, #0
 8006d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5c:	462a      	mov	r2, r5
 8006d5e:	f000 fad7 	bl	8007310 <_realloc_r>
 8006d62:	4606      	mov	r6, r0
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d1e0      	bne.n	8006d2a <__ssputs_r+0x5a>
 8006d68:	6921      	ldr	r1, [r4, #16]
 8006d6a:	4650      	mov	r0, sl
 8006d6c:	f7ff feb8 	bl	8006ae0 <_free_r>
 8006d70:	230c      	movs	r3, #12
 8006d72:	f8ca 3000 	str.w	r3, [sl]
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d82:	e7e9      	b.n	8006d58 <__ssputs_r+0x88>

08006d84 <_svfiprintf_r>:
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	4698      	mov	r8, r3
 8006d8a:	898b      	ldrh	r3, [r1, #12]
 8006d8c:	061b      	lsls	r3, r3, #24
 8006d8e:	b09d      	sub	sp, #116	; 0x74
 8006d90:	4607      	mov	r7, r0
 8006d92:	460d      	mov	r5, r1
 8006d94:	4614      	mov	r4, r2
 8006d96:	d50e      	bpl.n	8006db6 <_svfiprintf_r+0x32>
 8006d98:	690b      	ldr	r3, [r1, #16]
 8006d9a:	b963      	cbnz	r3, 8006db6 <_svfiprintf_r+0x32>
 8006d9c:	2140      	movs	r1, #64	; 0x40
 8006d9e:	f7ff ff0b 	bl	8006bb8 <_malloc_r>
 8006da2:	6028      	str	r0, [r5, #0]
 8006da4:	6128      	str	r0, [r5, #16]
 8006da6:	b920      	cbnz	r0, 8006db2 <_svfiprintf_r+0x2e>
 8006da8:	230c      	movs	r3, #12
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	e0d0      	b.n	8006f54 <_svfiprintf_r+0x1d0>
 8006db2:	2340      	movs	r3, #64	; 0x40
 8006db4:	616b      	str	r3, [r5, #20]
 8006db6:	2300      	movs	r3, #0
 8006db8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dba:	2320      	movs	r3, #32
 8006dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dc4:	2330      	movs	r3, #48	; 0x30
 8006dc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f6c <_svfiprintf_r+0x1e8>
 8006dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dce:	f04f 0901 	mov.w	r9, #1
 8006dd2:	4623      	mov	r3, r4
 8006dd4:	469a      	mov	sl, r3
 8006dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dda:	b10a      	cbz	r2, 8006de0 <_svfiprintf_r+0x5c>
 8006ddc:	2a25      	cmp	r2, #37	; 0x25
 8006dde:	d1f9      	bne.n	8006dd4 <_svfiprintf_r+0x50>
 8006de0:	ebba 0b04 	subs.w	fp, sl, r4
 8006de4:	d00b      	beq.n	8006dfe <_svfiprintf_r+0x7a>
 8006de6:	465b      	mov	r3, fp
 8006de8:	4622      	mov	r2, r4
 8006dea:	4629      	mov	r1, r5
 8006dec:	4638      	mov	r0, r7
 8006dee:	f7ff ff6f 	bl	8006cd0 <__ssputs_r>
 8006df2:	3001      	adds	r0, #1
 8006df4:	f000 80a9 	beq.w	8006f4a <_svfiprintf_r+0x1c6>
 8006df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dfa:	445a      	add	r2, fp
 8006dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 80a1 	beq.w	8006f4a <_svfiprintf_r+0x1c6>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e12:	f10a 0a01 	add.w	sl, sl, #1
 8006e16:	9304      	str	r3, [sp, #16]
 8006e18:	9307      	str	r3, [sp, #28]
 8006e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8006e20:	4654      	mov	r4, sl
 8006e22:	2205      	movs	r2, #5
 8006e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e28:	4850      	ldr	r0, [pc, #320]	; (8006f6c <_svfiprintf_r+0x1e8>)
 8006e2a:	f7f9 f9e1 	bl	80001f0 <memchr>
 8006e2e:	9a04      	ldr	r2, [sp, #16]
 8006e30:	b9d8      	cbnz	r0, 8006e6a <_svfiprintf_r+0xe6>
 8006e32:	06d0      	lsls	r0, r2, #27
 8006e34:	bf44      	itt	mi
 8006e36:	2320      	movmi	r3, #32
 8006e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e3c:	0711      	lsls	r1, r2, #28
 8006e3e:	bf44      	itt	mi
 8006e40:	232b      	movmi	r3, #43	; 0x2b
 8006e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e46:	f89a 3000 	ldrb.w	r3, [sl]
 8006e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e4c:	d015      	beq.n	8006e7a <_svfiprintf_r+0xf6>
 8006e4e:	9a07      	ldr	r2, [sp, #28]
 8006e50:	4654      	mov	r4, sl
 8006e52:	2000      	movs	r0, #0
 8006e54:	f04f 0c0a 	mov.w	ip, #10
 8006e58:	4621      	mov	r1, r4
 8006e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e5e:	3b30      	subs	r3, #48	; 0x30
 8006e60:	2b09      	cmp	r3, #9
 8006e62:	d94d      	bls.n	8006f00 <_svfiprintf_r+0x17c>
 8006e64:	b1b0      	cbz	r0, 8006e94 <_svfiprintf_r+0x110>
 8006e66:	9207      	str	r2, [sp, #28]
 8006e68:	e014      	b.n	8006e94 <_svfiprintf_r+0x110>
 8006e6a:	eba0 0308 	sub.w	r3, r0, r8
 8006e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e72:	4313      	orrs	r3, r2
 8006e74:	9304      	str	r3, [sp, #16]
 8006e76:	46a2      	mov	sl, r4
 8006e78:	e7d2      	b.n	8006e20 <_svfiprintf_r+0x9c>
 8006e7a:	9b03      	ldr	r3, [sp, #12]
 8006e7c:	1d19      	adds	r1, r3, #4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	9103      	str	r1, [sp, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bfbb      	ittet	lt
 8006e86:	425b      	neglt	r3, r3
 8006e88:	f042 0202 	orrlt.w	r2, r2, #2
 8006e8c:	9307      	strge	r3, [sp, #28]
 8006e8e:	9307      	strlt	r3, [sp, #28]
 8006e90:	bfb8      	it	lt
 8006e92:	9204      	strlt	r2, [sp, #16]
 8006e94:	7823      	ldrb	r3, [r4, #0]
 8006e96:	2b2e      	cmp	r3, #46	; 0x2e
 8006e98:	d10c      	bne.n	8006eb4 <_svfiprintf_r+0x130>
 8006e9a:	7863      	ldrb	r3, [r4, #1]
 8006e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e9e:	d134      	bne.n	8006f0a <_svfiprintf_r+0x186>
 8006ea0:	9b03      	ldr	r3, [sp, #12]
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	9203      	str	r2, [sp, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bfb8      	it	lt
 8006eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eb0:	3402      	adds	r4, #2
 8006eb2:	9305      	str	r3, [sp, #20]
 8006eb4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006f7c <_svfiprintf_r+0x1f8>
 8006eb8:	7821      	ldrb	r1, [r4, #0]
 8006eba:	2203      	movs	r2, #3
 8006ebc:	4650      	mov	r0, sl
 8006ebe:	f7f9 f997 	bl	80001f0 <memchr>
 8006ec2:	b138      	cbz	r0, 8006ed4 <_svfiprintf_r+0x150>
 8006ec4:	9b04      	ldr	r3, [sp, #16]
 8006ec6:	eba0 000a 	sub.w	r0, r0, sl
 8006eca:	2240      	movs	r2, #64	; 0x40
 8006ecc:	4082      	lsls	r2, r0
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	3401      	adds	r4, #1
 8006ed2:	9304      	str	r3, [sp, #16]
 8006ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed8:	4825      	ldr	r0, [pc, #148]	; (8006f70 <_svfiprintf_r+0x1ec>)
 8006eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ede:	2206      	movs	r2, #6
 8006ee0:	f7f9 f986 	bl	80001f0 <memchr>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d038      	beq.n	8006f5a <_svfiprintf_r+0x1d6>
 8006ee8:	4b22      	ldr	r3, [pc, #136]	; (8006f74 <_svfiprintf_r+0x1f0>)
 8006eea:	bb1b      	cbnz	r3, 8006f34 <_svfiprintf_r+0x1b0>
 8006eec:	9b03      	ldr	r3, [sp, #12]
 8006eee:	3307      	adds	r3, #7
 8006ef0:	f023 0307 	bic.w	r3, r3, #7
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	9303      	str	r3, [sp, #12]
 8006ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efa:	4433      	add	r3, r6
 8006efc:	9309      	str	r3, [sp, #36]	; 0x24
 8006efe:	e768      	b.n	8006dd2 <_svfiprintf_r+0x4e>
 8006f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f04:	460c      	mov	r4, r1
 8006f06:	2001      	movs	r0, #1
 8006f08:	e7a6      	b.n	8006e58 <_svfiprintf_r+0xd4>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	3401      	adds	r4, #1
 8006f0e:	9305      	str	r3, [sp, #20]
 8006f10:	4619      	mov	r1, r3
 8006f12:	f04f 0c0a 	mov.w	ip, #10
 8006f16:	4620      	mov	r0, r4
 8006f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f1c:	3a30      	subs	r2, #48	; 0x30
 8006f1e:	2a09      	cmp	r2, #9
 8006f20:	d903      	bls.n	8006f2a <_svfiprintf_r+0x1a6>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0c6      	beq.n	8006eb4 <_svfiprintf_r+0x130>
 8006f26:	9105      	str	r1, [sp, #20]
 8006f28:	e7c4      	b.n	8006eb4 <_svfiprintf_r+0x130>
 8006f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f2e:	4604      	mov	r4, r0
 8006f30:	2301      	movs	r3, #1
 8006f32:	e7f0      	b.n	8006f16 <_svfiprintf_r+0x192>
 8006f34:	ab03      	add	r3, sp, #12
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	462a      	mov	r2, r5
 8006f3a:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <_svfiprintf_r+0x1f4>)
 8006f3c:	a904      	add	r1, sp, #16
 8006f3e:	4638      	mov	r0, r7
 8006f40:	f3af 8000 	nop.w
 8006f44:	1c42      	adds	r2, r0, #1
 8006f46:	4606      	mov	r6, r0
 8006f48:	d1d6      	bne.n	8006ef8 <_svfiprintf_r+0x174>
 8006f4a:	89ab      	ldrh	r3, [r5, #12]
 8006f4c:	065b      	lsls	r3, r3, #25
 8006f4e:	f53f af2d 	bmi.w	8006dac <_svfiprintf_r+0x28>
 8006f52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f54:	b01d      	add	sp, #116	; 0x74
 8006f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5a:	ab03      	add	r3, sp, #12
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	462a      	mov	r2, r5
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <_svfiprintf_r+0x1f4>)
 8006f62:	a904      	add	r1, sp, #16
 8006f64:	4638      	mov	r0, r7
 8006f66:	f000 f879 	bl	800705c <_printf_i>
 8006f6a:	e7eb      	b.n	8006f44 <_svfiprintf_r+0x1c0>
 8006f6c:	08007558 	.word	0x08007558
 8006f70:	08007562 	.word	0x08007562
 8006f74:	00000000 	.word	0x00000000
 8006f78:	08006cd1 	.word	0x08006cd1
 8006f7c:	0800755e 	.word	0x0800755e

08006f80 <_printf_common>:
 8006f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f84:	4616      	mov	r6, r2
 8006f86:	4699      	mov	r9, r3
 8006f88:	688a      	ldr	r2, [r1, #8]
 8006f8a:	690b      	ldr	r3, [r1, #16]
 8006f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f90:	4293      	cmp	r3, r2
 8006f92:	bfb8      	it	lt
 8006f94:	4613      	movlt	r3, r2
 8006f96:	6033      	str	r3, [r6, #0]
 8006f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f9c:	4607      	mov	r7, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	b10a      	cbz	r2, 8006fa6 <_printf_common+0x26>
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	6033      	str	r3, [r6, #0]
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	0699      	lsls	r1, r3, #26
 8006faa:	bf42      	ittt	mi
 8006fac:	6833      	ldrmi	r3, [r6, #0]
 8006fae:	3302      	addmi	r3, #2
 8006fb0:	6033      	strmi	r3, [r6, #0]
 8006fb2:	6825      	ldr	r5, [r4, #0]
 8006fb4:	f015 0506 	ands.w	r5, r5, #6
 8006fb8:	d106      	bne.n	8006fc8 <_printf_common+0x48>
 8006fba:	f104 0a19 	add.w	sl, r4, #25
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	6832      	ldr	r2, [r6, #0]
 8006fc2:	1a9b      	subs	r3, r3, r2
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dc26      	bgt.n	8007016 <_printf_common+0x96>
 8006fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fcc:	1e13      	subs	r3, r2, #0
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	bf18      	it	ne
 8006fd2:	2301      	movne	r3, #1
 8006fd4:	0692      	lsls	r2, r2, #26
 8006fd6:	d42b      	bmi.n	8007030 <_printf_common+0xb0>
 8006fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fdc:	4649      	mov	r1, r9
 8006fde:	4638      	mov	r0, r7
 8006fe0:	47c0      	blx	r8
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	d01e      	beq.n	8007024 <_printf_common+0xa4>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	6922      	ldr	r2, [r4, #16]
 8006fea:	f003 0306 	and.w	r3, r3, #6
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	bf02      	ittt	eq
 8006ff2:	68e5      	ldreq	r5, [r4, #12]
 8006ff4:	6833      	ldreq	r3, [r6, #0]
 8006ff6:	1aed      	subeq	r5, r5, r3
 8006ff8:	68a3      	ldr	r3, [r4, #8]
 8006ffa:	bf0c      	ite	eq
 8006ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007000:	2500      	movne	r5, #0
 8007002:	4293      	cmp	r3, r2
 8007004:	bfc4      	itt	gt
 8007006:	1a9b      	subgt	r3, r3, r2
 8007008:	18ed      	addgt	r5, r5, r3
 800700a:	2600      	movs	r6, #0
 800700c:	341a      	adds	r4, #26
 800700e:	42b5      	cmp	r5, r6
 8007010:	d11a      	bne.n	8007048 <_printf_common+0xc8>
 8007012:	2000      	movs	r0, #0
 8007014:	e008      	b.n	8007028 <_printf_common+0xa8>
 8007016:	2301      	movs	r3, #1
 8007018:	4652      	mov	r2, sl
 800701a:	4649      	mov	r1, r9
 800701c:	4638      	mov	r0, r7
 800701e:	47c0      	blx	r8
 8007020:	3001      	adds	r0, #1
 8007022:	d103      	bne.n	800702c <_printf_common+0xac>
 8007024:	f04f 30ff 	mov.w	r0, #4294967295
 8007028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702c:	3501      	adds	r5, #1
 800702e:	e7c6      	b.n	8006fbe <_printf_common+0x3e>
 8007030:	18e1      	adds	r1, r4, r3
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	2030      	movs	r0, #48	; 0x30
 8007036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800703a:	4422      	add	r2, r4
 800703c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007044:	3302      	adds	r3, #2
 8007046:	e7c7      	b.n	8006fd8 <_printf_common+0x58>
 8007048:	2301      	movs	r3, #1
 800704a:	4622      	mov	r2, r4
 800704c:	4649      	mov	r1, r9
 800704e:	4638      	mov	r0, r7
 8007050:	47c0      	blx	r8
 8007052:	3001      	adds	r0, #1
 8007054:	d0e6      	beq.n	8007024 <_printf_common+0xa4>
 8007056:	3601      	adds	r6, #1
 8007058:	e7d9      	b.n	800700e <_printf_common+0x8e>
	...

0800705c <_printf_i>:
 800705c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	7e0f      	ldrb	r7, [r1, #24]
 8007062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007064:	2f78      	cmp	r7, #120	; 0x78
 8007066:	4691      	mov	r9, r2
 8007068:	4680      	mov	r8, r0
 800706a:	460c      	mov	r4, r1
 800706c:	469a      	mov	sl, r3
 800706e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007072:	d807      	bhi.n	8007084 <_printf_i+0x28>
 8007074:	2f62      	cmp	r7, #98	; 0x62
 8007076:	d80a      	bhi.n	800708e <_printf_i+0x32>
 8007078:	2f00      	cmp	r7, #0
 800707a:	f000 80d4 	beq.w	8007226 <_printf_i+0x1ca>
 800707e:	2f58      	cmp	r7, #88	; 0x58
 8007080:	f000 80c0 	beq.w	8007204 <_printf_i+0x1a8>
 8007084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800708c:	e03a      	b.n	8007104 <_printf_i+0xa8>
 800708e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007092:	2b15      	cmp	r3, #21
 8007094:	d8f6      	bhi.n	8007084 <_printf_i+0x28>
 8007096:	a101      	add	r1, pc, #4	; (adr r1, 800709c <_printf_i+0x40>)
 8007098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800709c:	080070f5 	.word	0x080070f5
 80070a0:	08007109 	.word	0x08007109
 80070a4:	08007085 	.word	0x08007085
 80070a8:	08007085 	.word	0x08007085
 80070ac:	08007085 	.word	0x08007085
 80070b0:	08007085 	.word	0x08007085
 80070b4:	08007109 	.word	0x08007109
 80070b8:	08007085 	.word	0x08007085
 80070bc:	08007085 	.word	0x08007085
 80070c0:	08007085 	.word	0x08007085
 80070c4:	08007085 	.word	0x08007085
 80070c8:	0800720d 	.word	0x0800720d
 80070cc:	08007135 	.word	0x08007135
 80070d0:	080071c7 	.word	0x080071c7
 80070d4:	08007085 	.word	0x08007085
 80070d8:	08007085 	.word	0x08007085
 80070dc:	0800722f 	.word	0x0800722f
 80070e0:	08007085 	.word	0x08007085
 80070e4:	08007135 	.word	0x08007135
 80070e8:	08007085 	.word	0x08007085
 80070ec:	08007085 	.word	0x08007085
 80070f0:	080071cf 	.word	0x080071cf
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	1d1a      	adds	r2, r3, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	602a      	str	r2, [r5, #0]
 80070fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007104:	2301      	movs	r3, #1
 8007106:	e09f      	b.n	8007248 <_printf_i+0x1ec>
 8007108:	6820      	ldr	r0, [r4, #0]
 800710a:	682b      	ldr	r3, [r5, #0]
 800710c:	0607      	lsls	r7, r0, #24
 800710e:	f103 0104 	add.w	r1, r3, #4
 8007112:	6029      	str	r1, [r5, #0]
 8007114:	d501      	bpl.n	800711a <_printf_i+0xbe>
 8007116:	681e      	ldr	r6, [r3, #0]
 8007118:	e003      	b.n	8007122 <_printf_i+0xc6>
 800711a:	0646      	lsls	r6, r0, #25
 800711c:	d5fb      	bpl.n	8007116 <_printf_i+0xba>
 800711e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007122:	2e00      	cmp	r6, #0
 8007124:	da03      	bge.n	800712e <_printf_i+0xd2>
 8007126:	232d      	movs	r3, #45	; 0x2d
 8007128:	4276      	negs	r6, r6
 800712a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800712e:	485a      	ldr	r0, [pc, #360]	; (8007298 <_printf_i+0x23c>)
 8007130:	230a      	movs	r3, #10
 8007132:	e012      	b.n	800715a <_printf_i+0xfe>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	6820      	ldr	r0, [r4, #0]
 8007138:	1d19      	adds	r1, r3, #4
 800713a:	6029      	str	r1, [r5, #0]
 800713c:	0605      	lsls	r5, r0, #24
 800713e:	d501      	bpl.n	8007144 <_printf_i+0xe8>
 8007140:	681e      	ldr	r6, [r3, #0]
 8007142:	e002      	b.n	800714a <_printf_i+0xee>
 8007144:	0641      	lsls	r1, r0, #25
 8007146:	d5fb      	bpl.n	8007140 <_printf_i+0xe4>
 8007148:	881e      	ldrh	r6, [r3, #0]
 800714a:	4853      	ldr	r0, [pc, #332]	; (8007298 <_printf_i+0x23c>)
 800714c:	2f6f      	cmp	r7, #111	; 0x6f
 800714e:	bf0c      	ite	eq
 8007150:	2308      	moveq	r3, #8
 8007152:	230a      	movne	r3, #10
 8007154:	2100      	movs	r1, #0
 8007156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800715a:	6865      	ldr	r5, [r4, #4]
 800715c:	60a5      	str	r5, [r4, #8]
 800715e:	2d00      	cmp	r5, #0
 8007160:	bfa2      	ittt	ge
 8007162:	6821      	ldrge	r1, [r4, #0]
 8007164:	f021 0104 	bicge.w	r1, r1, #4
 8007168:	6021      	strge	r1, [r4, #0]
 800716a:	b90e      	cbnz	r6, 8007170 <_printf_i+0x114>
 800716c:	2d00      	cmp	r5, #0
 800716e:	d04b      	beq.n	8007208 <_printf_i+0x1ac>
 8007170:	4615      	mov	r5, r2
 8007172:	fbb6 f1f3 	udiv	r1, r6, r3
 8007176:	fb03 6711 	mls	r7, r3, r1, r6
 800717a:	5dc7      	ldrb	r7, [r0, r7]
 800717c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007180:	4637      	mov	r7, r6
 8007182:	42bb      	cmp	r3, r7
 8007184:	460e      	mov	r6, r1
 8007186:	d9f4      	bls.n	8007172 <_printf_i+0x116>
 8007188:	2b08      	cmp	r3, #8
 800718a:	d10b      	bne.n	80071a4 <_printf_i+0x148>
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	07de      	lsls	r6, r3, #31
 8007190:	d508      	bpl.n	80071a4 <_printf_i+0x148>
 8007192:	6923      	ldr	r3, [r4, #16]
 8007194:	6861      	ldr	r1, [r4, #4]
 8007196:	4299      	cmp	r1, r3
 8007198:	bfde      	ittt	le
 800719a:	2330      	movle	r3, #48	; 0x30
 800719c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071a4:	1b52      	subs	r2, r2, r5
 80071a6:	6122      	str	r2, [r4, #16]
 80071a8:	f8cd a000 	str.w	sl, [sp]
 80071ac:	464b      	mov	r3, r9
 80071ae:	aa03      	add	r2, sp, #12
 80071b0:	4621      	mov	r1, r4
 80071b2:	4640      	mov	r0, r8
 80071b4:	f7ff fee4 	bl	8006f80 <_printf_common>
 80071b8:	3001      	adds	r0, #1
 80071ba:	d14a      	bne.n	8007252 <_printf_i+0x1f6>
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	b004      	add	sp, #16
 80071c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	f043 0320 	orr.w	r3, r3, #32
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	4833      	ldr	r0, [pc, #204]	; (800729c <_printf_i+0x240>)
 80071d0:	2778      	movs	r7, #120	; 0x78
 80071d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	6829      	ldr	r1, [r5, #0]
 80071da:	061f      	lsls	r7, r3, #24
 80071dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80071e0:	d402      	bmi.n	80071e8 <_printf_i+0x18c>
 80071e2:	065f      	lsls	r7, r3, #25
 80071e4:	bf48      	it	mi
 80071e6:	b2b6      	uxthmi	r6, r6
 80071e8:	07df      	lsls	r7, r3, #31
 80071ea:	bf48      	it	mi
 80071ec:	f043 0320 	orrmi.w	r3, r3, #32
 80071f0:	6029      	str	r1, [r5, #0]
 80071f2:	bf48      	it	mi
 80071f4:	6023      	strmi	r3, [r4, #0]
 80071f6:	b91e      	cbnz	r6, 8007200 <_printf_i+0x1a4>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	f023 0320 	bic.w	r3, r3, #32
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	2310      	movs	r3, #16
 8007202:	e7a7      	b.n	8007154 <_printf_i+0xf8>
 8007204:	4824      	ldr	r0, [pc, #144]	; (8007298 <_printf_i+0x23c>)
 8007206:	e7e4      	b.n	80071d2 <_printf_i+0x176>
 8007208:	4615      	mov	r5, r2
 800720a:	e7bd      	b.n	8007188 <_printf_i+0x12c>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	6826      	ldr	r6, [r4, #0]
 8007210:	6961      	ldr	r1, [r4, #20]
 8007212:	1d18      	adds	r0, r3, #4
 8007214:	6028      	str	r0, [r5, #0]
 8007216:	0635      	lsls	r5, r6, #24
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	d501      	bpl.n	8007220 <_printf_i+0x1c4>
 800721c:	6019      	str	r1, [r3, #0]
 800721e:	e002      	b.n	8007226 <_printf_i+0x1ca>
 8007220:	0670      	lsls	r0, r6, #25
 8007222:	d5fb      	bpl.n	800721c <_printf_i+0x1c0>
 8007224:	8019      	strh	r1, [r3, #0]
 8007226:	2300      	movs	r3, #0
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	4615      	mov	r5, r2
 800722c:	e7bc      	b.n	80071a8 <_printf_i+0x14c>
 800722e:	682b      	ldr	r3, [r5, #0]
 8007230:	1d1a      	adds	r2, r3, #4
 8007232:	602a      	str	r2, [r5, #0]
 8007234:	681d      	ldr	r5, [r3, #0]
 8007236:	6862      	ldr	r2, [r4, #4]
 8007238:	2100      	movs	r1, #0
 800723a:	4628      	mov	r0, r5
 800723c:	f7f8 ffd8 	bl	80001f0 <memchr>
 8007240:	b108      	cbz	r0, 8007246 <_printf_i+0x1ea>
 8007242:	1b40      	subs	r0, r0, r5
 8007244:	6060      	str	r0, [r4, #4]
 8007246:	6863      	ldr	r3, [r4, #4]
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	2300      	movs	r3, #0
 800724c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007250:	e7aa      	b.n	80071a8 <_printf_i+0x14c>
 8007252:	6923      	ldr	r3, [r4, #16]
 8007254:	462a      	mov	r2, r5
 8007256:	4649      	mov	r1, r9
 8007258:	4640      	mov	r0, r8
 800725a:	47d0      	blx	sl
 800725c:	3001      	adds	r0, #1
 800725e:	d0ad      	beq.n	80071bc <_printf_i+0x160>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	079b      	lsls	r3, r3, #30
 8007264:	d413      	bmi.n	800728e <_printf_i+0x232>
 8007266:	68e0      	ldr	r0, [r4, #12]
 8007268:	9b03      	ldr	r3, [sp, #12]
 800726a:	4298      	cmp	r0, r3
 800726c:	bfb8      	it	lt
 800726e:	4618      	movlt	r0, r3
 8007270:	e7a6      	b.n	80071c0 <_printf_i+0x164>
 8007272:	2301      	movs	r3, #1
 8007274:	4632      	mov	r2, r6
 8007276:	4649      	mov	r1, r9
 8007278:	4640      	mov	r0, r8
 800727a:	47d0      	blx	sl
 800727c:	3001      	adds	r0, #1
 800727e:	d09d      	beq.n	80071bc <_printf_i+0x160>
 8007280:	3501      	adds	r5, #1
 8007282:	68e3      	ldr	r3, [r4, #12]
 8007284:	9903      	ldr	r1, [sp, #12]
 8007286:	1a5b      	subs	r3, r3, r1
 8007288:	42ab      	cmp	r3, r5
 800728a:	dcf2      	bgt.n	8007272 <_printf_i+0x216>
 800728c:	e7eb      	b.n	8007266 <_printf_i+0x20a>
 800728e:	2500      	movs	r5, #0
 8007290:	f104 0619 	add.w	r6, r4, #25
 8007294:	e7f5      	b.n	8007282 <_printf_i+0x226>
 8007296:	bf00      	nop
 8007298:	08007569 	.word	0x08007569
 800729c:	0800757a 	.word	0x0800757a

080072a0 <memmove>:
 80072a0:	4288      	cmp	r0, r1
 80072a2:	b510      	push	{r4, lr}
 80072a4:	eb01 0402 	add.w	r4, r1, r2
 80072a8:	d902      	bls.n	80072b0 <memmove+0x10>
 80072aa:	4284      	cmp	r4, r0
 80072ac:	4623      	mov	r3, r4
 80072ae:	d807      	bhi.n	80072c0 <memmove+0x20>
 80072b0:	1e43      	subs	r3, r0, #1
 80072b2:	42a1      	cmp	r1, r4
 80072b4:	d008      	beq.n	80072c8 <memmove+0x28>
 80072b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072be:	e7f8      	b.n	80072b2 <memmove+0x12>
 80072c0:	4402      	add	r2, r0
 80072c2:	4601      	mov	r1, r0
 80072c4:	428a      	cmp	r2, r1
 80072c6:	d100      	bne.n	80072ca <memmove+0x2a>
 80072c8:	bd10      	pop	{r4, pc}
 80072ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072d2:	e7f7      	b.n	80072c4 <memmove+0x24>

080072d4 <_sbrk_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4d06      	ldr	r5, [pc, #24]	; (80072f0 <_sbrk_r+0x1c>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	f7fa fba2 	bl	8001a28 <_sbrk>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_sbrk_r+0x1a>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_sbrk_r+0x1a>
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	20000af8 	.word	0x20000af8

080072f4 <memcpy>:
 80072f4:	440a      	add	r2, r1
 80072f6:	4291      	cmp	r1, r2
 80072f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072fc:	d100      	bne.n	8007300 <memcpy+0xc>
 80072fe:	4770      	bx	lr
 8007300:	b510      	push	{r4, lr}
 8007302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800730a:	4291      	cmp	r1, r2
 800730c:	d1f9      	bne.n	8007302 <memcpy+0xe>
 800730e:	bd10      	pop	{r4, pc}

08007310 <_realloc_r>:
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	4680      	mov	r8, r0
 8007316:	4614      	mov	r4, r2
 8007318:	460e      	mov	r6, r1
 800731a:	b921      	cbnz	r1, 8007326 <_realloc_r+0x16>
 800731c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	4611      	mov	r1, r2
 8007322:	f7ff bc49 	b.w	8006bb8 <_malloc_r>
 8007326:	b92a      	cbnz	r2, 8007334 <_realloc_r+0x24>
 8007328:	f7ff fbda 	bl	8006ae0 <_free_r>
 800732c:	4625      	mov	r5, r4
 800732e:	4628      	mov	r0, r5
 8007330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007334:	f000 f81b 	bl	800736e <_malloc_usable_size_r>
 8007338:	4284      	cmp	r4, r0
 800733a:	4607      	mov	r7, r0
 800733c:	d802      	bhi.n	8007344 <_realloc_r+0x34>
 800733e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007342:	d812      	bhi.n	800736a <_realloc_r+0x5a>
 8007344:	4621      	mov	r1, r4
 8007346:	4640      	mov	r0, r8
 8007348:	f7ff fc36 	bl	8006bb8 <_malloc_r>
 800734c:	4605      	mov	r5, r0
 800734e:	2800      	cmp	r0, #0
 8007350:	d0ed      	beq.n	800732e <_realloc_r+0x1e>
 8007352:	42bc      	cmp	r4, r7
 8007354:	4622      	mov	r2, r4
 8007356:	4631      	mov	r1, r6
 8007358:	bf28      	it	cs
 800735a:	463a      	movcs	r2, r7
 800735c:	f7ff ffca 	bl	80072f4 <memcpy>
 8007360:	4631      	mov	r1, r6
 8007362:	4640      	mov	r0, r8
 8007364:	f7ff fbbc 	bl	8006ae0 <_free_r>
 8007368:	e7e1      	b.n	800732e <_realloc_r+0x1e>
 800736a:	4635      	mov	r5, r6
 800736c:	e7df      	b.n	800732e <_realloc_r+0x1e>

0800736e <_malloc_usable_size_r>:
 800736e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007372:	1f18      	subs	r0, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	bfbc      	itt	lt
 8007378:	580b      	ldrlt	r3, [r1, r0]
 800737a:	18c0      	addlt	r0, r0, r3
 800737c:	4770      	bx	lr
	...

08007380 <_init>:
 8007380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007382:	bf00      	nop
 8007384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007386:	bc08      	pop	{r3}
 8007388:	469e      	mov	lr, r3
 800738a:	4770      	bx	lr

0800738c <_fini>:
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738e:	bf00      	nop
 8007390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007392:	bc08      	pop	{r3}
 8007394:	469e      	mov	lr, r3
 8007396:	4770      	bx	lr
