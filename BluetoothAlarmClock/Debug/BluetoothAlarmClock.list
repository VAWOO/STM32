
BluetoothAlarmClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009270  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009598  08009598  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009598  08009598  00019598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095a0  080095a0  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095a0  080095a0  000195a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095a4  080095a4  000195a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  080095a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202f8  2**0
                  CONTENTS
 10 .bss          00000b90  200002f8  200002f8  000202f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e88  20000e88  000202f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cf20  00000000  00000000  0002036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000046de  00000000  00000000  0003d28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001978  00000000  00000000  00041970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013cd  00000000  00000000  000432e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a428  00000000  00000000  000446b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022d16  00000000  00000000  0006eadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8707  00000000  00000000  000917f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006fa0  00000000  00000000  00189efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00190e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002f8 	.word	0x200002f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009408 	.word	0x08009408

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	08009408 	.word	0x08009408

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	463b      	mov	r3, r7
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005a0:	4a28      	ldr	r2, [pc, #160]	; (8000644 <MX_ADC1_Init+0xb8>)
 80005a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005b2:	4b23      	ldr	r3, [pc, #140]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c6:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005ce:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <MX_ADC1_Init+0xbc>)
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005da:	2202      	movs	r2, #2
 80005dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005ee:	f002 f8d9 	bl	80027a4 <HAL_ADC_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f8:	f001 fcd4 	bl	8001fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000600:	2301      	movs	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000604:	2304      	movs	r3, #4
 8000606:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <MX_ADC1_Init+0xb4>)
 800060e:	f002 fa3b 	bl	8002a88 <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000618:	f001 fcc4 	bl	8001fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800061c:	230a      	movs	r3, #10
 800061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0xb4>)
 800062a:	f002 fa2d 	bl	8002a88 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000634:	f001 fcb6 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000314 	.word	0x20000314
 8000644:	40012000 	.word	0x40012000
 8000648:	0f000001 	.word	0x0f000001

0800064c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a3c      	ldr	r2, [pc, #240]	; (800075c <HAL_ADC_MspInit+0x110>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d171      	bne.n	8000752 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b3b      	ldr	r3, [pc, #236]	; (8000760 <HAL_ADC_MspInit+0x114>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	4a3a      	ldr	r2, [pc, #232]	; (8000760 <HAL_ADC_MspInit+0x114>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6453      	str	r3, [r2, #68]	; 0x44
 800067e:	4b38      	ldr	r3, [pc, #224]	; (8000760 <HAL_ADC_MspInit+0x114>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b34      	ldr	r3, [pc, #208]	; (8000760 <HAL_ADC_MspInit+0x114>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a33      	ldr	r2, [pc, #204]	; (8000760 <HAL_ADC_MspInit+0x114>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b31      	ldr	r3, [pc, #196]	; (8000760 <HAL_ADC_MspInit+0x114>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <HAL_ADC_MspInit+0x114>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a2c      	ldr	r2, [pc, #176]	; (8000760 <HAL_ADC_MspInit+0x114>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <HAL_ADC_MspInit+0x114>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4823      	ldr	r0, [pc, #140]	; (8000764 <HAL_ADC_MspInit+0x118>)
 80006d6:	f003 fed7 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006da:	2308      	movs	r3, #8
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	481e      	ldr	r0, [pc, #120]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 80006ee:	f003 fecb 	bl	8004488 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <HAL_ADC_MspInit+0x120>)
 80006f4:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <HAL_ADC_MspInit+0x124>)
 80006f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <HAL_ADC_MspInit+0x120>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_ADC_MspInit+0x120>)
 800070c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000710:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000718:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_ADC_MspInit+0x120>)
 800071c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000720:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000728:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_ADC_MspInit+0x120>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000736:	480d      	ldr	r0, [pc, #52]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000738:	f002 fd68 	bl	800320c <HAL_DMA_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000742:	f001 fc2f 	bl	8001fa4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_ADC_MspInit+0x120>)
 800074a:	639a      	str	r2, [r3, #56]	; 0x38
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_ADC_MspInit+0x120>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	; 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40012000 	.word	0x40012000
 8000760:	40023800 	.word	0x40023800
 8000764:	40020800 	.word	0x40020800
 8000768:	40020000 	.word	0x40020000
 800076c:	2000035c 	.word	0x2000035c
 8000770:	40026410 	.word	0x40026410

08000774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_DMA_Init+0x3c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <MX_DMA_Init+0x3c>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_DMA_Init+0x3c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	2038      	movs	r0, #56	; 0x38
 800079c:	f002 fcff 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a0:	2038      	movs	r0, #56	; 0x38
 80007a2:	f002 fd18 	bl	80031d6 <HAL_NVIC_EnableIRQ>

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_ETH_Init+0x84>)
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <MX_ETH_Init+0x88>)
 80007bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_ETH_Init+0x8c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ETH_Init+0x8c>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ETH_Init+0x8c>)
 80007cc:	22e1      	movs	r2, #225	; 0xe1
 80007ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_ETH_Init+0x8c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ETH_Init+0x8c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_ETH_Init+0x8c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_ETH_Init+0x84>)
 80007e4:	4a16      	ldr	r2, [pc, #88]	; (8000840 <MX_ETH_Init+0x8c>)
 80007e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_ETH_Init+0x84>)
 80007ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_ETH_Init+0x84>)
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_ETH_Init+0x90>)
 80007f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_ETH_Init+0x84>)
 80007f8:	4a13      	ldr	r2, [pc, #76]	; (8000848 <MX_ETH_Init+0x94>)
 80007fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_ETH_Init+0x84>)
 80007fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000802:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_ETH_Init+0x84>)
 8000806:	f003 f903 	bl	8003a10 <HAL_ETH_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000810:	f001 fbc8 	bl	8001fa4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000814:	2238      	movs	r2, #56	; 0x38
 8000816:	2100      	movs	r1, #0
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_ETH_Init+0x98>)
 800081a:	f008 f971 	bl	8008b00 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_ETH_Init+0x98>)
 8000820:	2221      	movs	r2, #33	; 0x21
 8000822:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_ETH_Init+0x98>)
 8000826:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800082a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_ETH_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000534 	.word	0x20000534
 800083c:	40028000 	.word	0x40028000
 8000840:	200005e4 	.word	0x200005e4
 8000844:	2000045c 	.word	0x2000045c
 8000848:	200003bc 	.word	0x200003bc
 800084c:	200004fc 	.word	0x200004fc

08000850 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a55      	ldr	r2, [pc, #340]	; (80009c4 <HAL_ETH_MspInit+0x174>)
 800086e:	4293      	cmp	r3, r2
 8000870:	f040 80a4 	bne.w	80009bc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
 8000878:	4b53      	ldr	r3, [pc, #332]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4a52      	ldr	r2, [pc, #328]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 800087e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
 8000884:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800088c:	623b      	str	r3, [r7, #32]
 800088e:	6a3b      	ldr	r3, [r7, #32]
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	4b4c      	ldr	r3, [pc, #304]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a4b      	ldr	r2, [pc, #300]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 800089a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
 80008a0:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008a8:	61fb      	str	r3, [r7, #28]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	4b45      	ldr	r3, [pc, #276]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a44      	ldr	r2, [pc, #272]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	4a3d      	ldr	r2, [pc, #244]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6313      	str	r3, [r2, #48]	; 0x30
 80008d8:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a36      	ldr	r2, [pc, #216]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
 80008f4:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 800090a:	f043 0302 	orr.w	r3, r3, #2
 800090e:	6313      	str	r3, [r2, #48]	; 0x30
 8000910:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092a:	6313      	str	r3, [r2, #48]	; 0x30
 800092c:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000948:	230b      	movs	r3, #11
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	481e      	ldr	r0, [pc, #120]	; (80009cc <HAL_ETH_MspInit+0x17c>)
 8000954:	f003 fd98 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000958:	2386      	movs	r3, #134	; 0x86
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000968:	230b      	movs	r3, #11
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	4817      	ldr	r0, [pc, #92]	; (80009d0 <HAL_ETH_MspInit+0x180>)
 8000974:	f003 fd88 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098a:	230b      	movs	r3, #11
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	480f      	ldr	r0, [pc, #60]	; (80009d4 <HAL_ETH_MspInit+0x184>)
 8000996:	f003 fd77 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800099a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ac:	230b      	movs	r3, #11
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4808      	ldr	r0, [pc, #32]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80009b8:	f003 fd66 	bl	8004488 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009bc:	bf00      	nop
 80009be:	3738      	adds	r7, #56	; 0x38
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40028000 	.word	0x40028000
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40021800 	.word	0x40021800

080009dc <FLASH_Write>:
#include "flash.h"

HAL_StatusTypeDef FLASH_Write(uint32_t address, uint32_t *data, uint32_t size) {
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	75fb      	strb	r3, [r7, #23]

    HAL_FLASH_Unlock();
 80009ec:	f003 fb8c 	bl	8004108 <HAL_FLASH_Unlock>

    // Erase the required flash sectors
    FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 80009f0:	2102      	movs	r1, #2
 80009f2:	2007      	movs	r0, #7
 80009f4:	f003 fcfa 	bl	80043ec <FLASH_Erase_Sector>

    // Write the data to flash memory
    for (uint32_t i = 0; i < size; i++) {
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	e018      	b.n	8000a30 <FLASH_Write+0x54>
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data[i]);
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	4413      	add	r3, r2
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	461c      	mov	r4, r3
 8000a0c:	4615      	mov	r5, r2
 8000a0e:	4622      	mov	r2, r4
 8000a10:	462b      	mov	r3, r5
 8000a12:	68f9      	ldr	r1, [r7, #12]
 8000a14:	2002      	movs	r0, #2
 8000a16:	f003 fb23 	bl	8004060 <HAL_FLASH_Program>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	75fb      	strb	r3, [r7, #23]
        if (status != HAL_OK) {
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10a      	bne.n	8000a3a <FLASH_Write+0x5e>
            break;
        }
        address += 4; // Increment the address by 4 bytes for the next word
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3304      	adds	r3, #4
 8000a28:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < size; i++) {
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d3e2      	bcc.n	80009fe <FLASH_Write+0x22>
 8000a38:	e000      	b.n	8000a3c <FLASH_Write+0x60>
            break;
 8000a3a:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8000a3c:	f003 fb86 	bl	800414c <HAL_FLASH_Lock>

    return status;
 8000a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bdb0      	pop	{r4, r5, r7, pc}

08000a4a <FLASH_Read>:

HAL_StatusTypeDef FLASH_Read(uint32_t address, uint32_t *data, uint32_t size) {
 8000a4a:	b480      	push	{r7}
 8000a4c:	b087      	sub	sp, #28
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	74fb      	strb	r3, [r7, #19]

    // Read data from Flash memory
    for (uint32_t i = 0; i < size; i++) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	e00d      	b.n	8000a7c <FLASH_Read+0x32>
        data[i] = *(__IO uint32_t *)(address + i * 4); // Read data from Flash memory
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	009a      	lsls	r2, r3, #2
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	4413      	add	r3, r2
 8000a72:	680a      	ldr	r2, [r1, #0]
 8000a74:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3ed      	bcc.n	8000a60 <FLASH_Read+0x16>
    }

    return status;
 8000a84:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	4b52      	ldr	r3, [pc, #328]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a51      	ldr	r2, [pc, #324]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b4f      	ldr	r3, [pc, #316]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	4b4b      	ldr	r3, [pc, #300]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a4a      	ldr	r2, [pc, #296]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b48      	ldr	r3, [pc, #288]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b44      	ldr	r3, [pc, #272]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a43      	ldr	r2, [pc, #268]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a3c      	ldr	r2, [pc, #240]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a35      	ldr	r2, [pc, #212]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a2e      	ldr	r2, [pc, #184]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <MX_GPIO_Init+0x164>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b58:	4828      	ldr	r0, [pc, #160]	; (8000bfc <MX_GPIO_Init+0x168>)
 8000b5a:	f003 fe59 	bl	8004810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2140      	movs	r1, #64	; 0x40
 8000b62:	4827      	ldr	r0, [pc, #156]	; (8000c00 <MX_GPIO_Init+0x16c>)
 8000b64:	f003 fe54 	bl	8004810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b6e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4821      	ldr	r0, [pc, #132]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000b80:	f003 fc82 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Joystick_Pin;
 8000b84:	2308      	movs	r3, #8
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joystick_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	481b      	ldr	r0, [pc, #108]	; (8000c04 <MX_GPIO_Init+0x170>)
 8000b98:	f003 fc76 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b9c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4811      	ldr	r0, [pc, #68]	; (8000bfc <MX_GPIO_Init+0x168>)
 8000bb6:	f003 fc67 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bba:	2340      	movs	r3, #64	; 0x40
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <MX_GPIO_Init+0x16c>)
 8000bd2:	f003 fc59 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_GPIO_Init+0x16c>)
 8000bea:	f003 fc4d 	bl	8004488 <HAL_GPIO_Init>

}
 8000bee:	bf00      	nop
 8000bf0:	3730      	adds	r7, #48	; 0x30
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	40021800 	.word	0x40021800
 8000c04:	40020800 	.word	0x40020800

08000c08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <MX_I2C1_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <MX_I2C1_Init+0x7c>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c46:	f003 fe15 	bl	8004874 <HAL_I2C_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c50:	f001 f9a8 	bl	8001fa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4809      	ldr	r0, [pc, #36]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c58:	f004 fa57 	bl	800510a <HAL_I2CEx_ConfigAnalogFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c62:	f001 f99f 	bl	8001fa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_I2C1_Init+0x74>)
 8000c6a:	f004 fa8a 	bl	8005182 <HAL_I2CEx_ConfigDigitalFilter>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c74:	f001 f996 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200005ec 	.word	0x200005ec
 8000c80:	40005400 	.word	0x40005400
 8000c84:	000186a0 	.word	0x000186a0

08000c88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_I2C_MspInit+0x84>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d12c      	bne.n	8000d04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ccc:	2312      	movs	r3, #18
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480c      	ldr	r0, [pc, #48]	; (8000d14 <HAL_I2C_MspInit+0x8c>)
 8000ce4:	f003 fbd0 	bl	8004488 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400

08000d18 <LCD_SendInternal>:
//    }
//
//    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
//}

void LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	460b      	mov	r3, r1
 8000d24:	71bb      	strb	r3, [r7, #6]
 8000d26:	4613      	mov	r3, r2
 8000d28:	717b      	strb	r3, [r7, #5]
//        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
//        if(res == HAL_OK)
//            break;
//    }

    uint8_t up = data & 0xF0;
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	f023 030f 	bic.w	r3, r3, #15
 8000d30:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 8000d32:	79bb      	ldrb	r3, [r7, #6]
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	73bb      	strb	r3, [r7, #14]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	797b      	ldrb	r3, [r7, #5]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	f043 030c 	orr.w	r3, r3, #12
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	797b      	ldrb	r3, [r7, #5]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000d58:	7bba      	ldrb	r2, [r7, #14]
 8000d5a:	797b      	ldrb	r3, [r7, #5]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f043 030c 	orr.w	r3, r3, #12
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8000d68:	7bba      	ldrb	r2, [r7, #14]
 8000d6a:	797b      	ldrb	r3, [r7, #5]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	b299      	uxth	r1, r3
 8000d7c:	f107 0208 	add.w	r2, r7, #8
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2304      	movs	r3, #4
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <LCD_SendInternal+0x84>)
 8000d8a:	f003 feb7 	bl	8004afc <HAL_I2C_Master_Transmit>
    HAL_Delay(LCD_DELAY_MS);
 8000d8e:	2005      	movs	r0, #5
 8000d90:	f001 fce4 	bl	800275c <HAL_Delay>
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200005ec 	.word	0x200005ec

08000da0 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000db0:	79b9      	ldrb	r1, [r7, #6]
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2200      	movs	r2, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ffae 	bl	8000d18 <LCD_SendInternal>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(LCD_ADDR, data, PIN_RS);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	204e      	movs	r0, #78	; 0x4e
 8000dd6:	f7ff ff9f 	bl	8000d18 <LCD_SendInternal>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2130      	movs	r1, #48	; 0x30
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ffd5 	bl	8000da0 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ffd0 	bl	8000da0 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	210c      	movs	r1, #12
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ffcb 	bl	8000da0 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ffc6 	bl	8000da0 <LCD_SendCommand>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <LCD_SendString>:

void LCD_SendString(char *str) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    while(*str) {
 8000e24:	e007      	b.n	8000e36 <LCD_SendString+0x1a>
        LCD_SendData((uint8_t)(*str));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ffca 	bl	8000dc4 <LCD_SendData>
        str++;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3301      	adds	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
    while(*str) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f3      	bne.n	8000e26 <LCD_SendString+0xa>
    }
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <LCM1602_init>:

void LCM1602_init() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    LCD_Init(LCD_ADDR);
 8000e4c:	204e      	movs	r0, #78	; 0x4e
 8000e4e:	f7ff ffc8 	bl	8000de2 <LCD_Init>
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <lcd_put_cur>:

void lcd_put_cur(int row, int col){
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
    switch (row){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <lcd_put_cur+0x18>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d005      	beq.n	8000e78 <lcd_put_cur+0x22>
 8000e6c:	e009      	b.n	8000e82 <lcd_put_cur+0x2c>
        case 0:
            col |= 0x80;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e74:	603b      	str	r3, [r7, #0]
            break;
 8000e76:	e004      	b.n	8000e82 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e7e:	603b      	str	r3, [r7, #0]
            break;
 8000e80:	bf00      	nop
    }
    LCD_SendCommand(LCD_ADDR, col);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	204e      	movs	r0, #78	; 0x4e
 8000e8a:	f7ff ff89 	bl	8000da0 <LCD_SendCommand>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b090      	sub	sp, #64	; 0x40
 8000e9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f001 fbeb 	bl	8002678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 fda3 	bl	80019ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f7ff fdf5 	bl	8000a94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f7ff fc63 	bl	8000774 <MX_DMA_Init>
  MX_ETH_Init();
 8000eae:	f7ff fc81 	bl	80007b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000eb2:	f001 fa5b 	bl	800236c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000eb6:	f001 fa83 	bl	80023c0 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000eba:	f001 fb2b 	bl	8002514 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000ebe:	f7ff fb65 	bl	800058c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ec2:	f7ff fea1 	bl	8000c08 <MX_I2C1_Init>
  MX_RTC_Init();
 8000ec6:	f001 f873 	bl	8001fb0 <MX_RTC_Init>
  MX_TIM2_Init();
 8000eca:	f001 f981 	bl	80021d0 <MX_TIM2_Init>
  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ece:	f000 fdf9 	bl	8001ac4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  uint8_t toggle=0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  LCM1602_init();
 8000ed8:	f7ff ffb6 	bl	8000e48 <LCM1602_init>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000edc:	2200      	movs	r2, #0
 8000ede:	4997      	ldr	r1, [pc, #604]	; (800113c <main+0x2a4>)
 8000ee0:	4897      	ldr	r0, [pc, #604]	; (8001140 <main+0x2a8>)
 8000ee2:	f005 fa13 	bl	800630c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4996      	ldr	r1, [pc, #600]	; (8001144 <main+0x2ac>)
 8000eea:	4895      	ldr	r0, [pc, #596]	; (8001140 <main+0x2a8>)
 8000eec:	f005 fa6c 	bl	80063c8 <HAL_RTC_GetDate>

  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	4995      	ldr	r1, [pc, #596]	; (8001148 <main+0x2b0>)
 8000ef4:	4895      	ldr	r0, [pc, #596]	; (800114c <main+0x2b4>)
 8000ef6:	f001 fc99 	bl	800282c <HAL_ADC_Start_DMA>

  char customChar[] = {0x01, 0x03, 0x05, 0x09, 0x09, 0x0B, 0x1B, 0x18};
 8000efa:	4a95      	ldr	r2, [pc, #596]	; (8001150 <main+0x2b8>)
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f04:	e883 0003 	stmia.w	r3, {r0, r1}
  LCD_SendCommand(LCD_ADDR, 0x40);
 8000f08:	2140      	movs	r1, #64	; 0x40
 8000f0a:	204e      	movs	r0, #78	; 0x4e
 8000f0c:	f7ff ff48 	bl	8000da0 <LCD_SendCommand>
  for(int i=0; i<8; i++) LCD_SendData(customChar[i]);
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
 8000f14:	e00a      	b.n	8000f2c <main+0x94>
 8000f16:	f107 021c 	add.w	r2, r7, #28
 8000f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1c:	4413      	add	r3, r2
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff4f 	bl	8000dc4 <LCD_SendData>
 8000f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f28:	3301      	adds	r3, #1
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8000f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f2e:	2b07      	cmp	r3, #7
 8000f30:	ddf1      	ble.n	8000f16 <main+0x7e>

  uint32_t readRtcData[3];
  FLASH_Read(RTC_FLASH_ADDRESS, readRtcData, sizeof(readRtcData) / sizeof(readRtcData[0]));
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	2203      	movs	r2, #3
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4886      	ldr	r0, [pc, #536]	; (8001154 <main+0x2bc>)
 8000f3c:	f7ff fd85 	bl	8000a4a <FLASH_Read>
  sTime.Hours = readRtcData[0];
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b7d      	ldr	r3, [pc, #500]	; (800113c <main+0x2a4>)
 8000f46:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = readRtcData[1];
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b7b      	ldr	r3, [pc, #492]	; (800113c <main+0x2a4>)
 8000f4e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = readRtcData[2];
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b79      	ldr	r3, [pc, #484]	; (800113c <main+0x2a4>)
 8000f56:	709a      	strb	r2, [r3, #2]
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4978      	ldr	r1, [pc, #480]	; (800113c <main+0x2a4>)
 8000f5c:	4878      	ldr	r0, [pc, #480]	; (8001140 <main+0x2a8>)
 8000f5e:	f005 f93b 	bl	80061d8 <HAL_RTC_SetTime>

  HAL_UART_Receive_IT(&huart3, &pc_data, sizeof(pc_data));
 8000f62:	2201      	movs	r2, #1
 8000f64:	497c      	ldr	r1, [pc, #496]	; (8001158 <main+0x2c0>)
 8000f66:	487d      	ldr	r0, [pc, #500]	; (800115c <main+0x2c4>)
 8000f68:	f006 fb0f 	bl	800758a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_data, sizeof(bt_data));
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	497c      	ldr	r1, [pc, #496]	; (8001160 <main+0x2c8>)
 8000f70:	487c      	ldr	r0, [pc, #496]	; (8001164 <main+0x2cc>)
 8000f72:	f006 fb0a 	bl	800758a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // setting mode
	  if(mode==SETTING)
 8000f76:	4b7c      	ldr	r3, [pc, #496]	; (8001168 <main+0x2d0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f040 817e 	bne.w	800127c <main+0x3e4>
	  {
		  toggle^=1;
 8000f80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f84:	f083 0301 	eor.w	r3, r3, #1
 8000f88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		  lcd_put_cur(0,0);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff ff61 	bl	8000e56 <lcd_put_cur>
		  LCD_SendString("Setting Mode    ");
 8000f94:	4875      	ldr	r0, [pc, #468]	; (800116c <main+0x2d4>)
 8000f96:	f7ff ff41 	bl	8000e1c <LCD_SendString>

		  // read button
		  button = getButton();
 8000f9a:	f000 fdaf 	bl	8001afc <getButton>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b73      	ldr	r3, [pc, #460]	; (8001170 <main+0x2d8>)
 8000fa4:	701a      	strb	r2, [r3, #0]
		  move_cur_time(&sTime, button);
 8000fa6:	4b72      	ldr	r3, [pc, #456]	; (8001170 <main+0x2d8>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4863      	ldr	r0, [pc, #396]	; (800113c <main+0x2a4>)
 8000fae:	f000 fdcb 	bl	8001b48 <move_cur_time>

		  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4961      	ldr	r1, [pc, #388]	; (800113c <main+0x2a4>)
 8000fb6:	4862      	ldr	r0, [pc, #392]	; (8001140 <main+0x2a8>)
 8000fb8:	f005 f90e 	bl	80061d8 <HAL_RTC_SetTime>

		  // the part where it's big and blinking
		  if(toggle)
 8000fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d017      	beq.n	8000ff4 <main+0x15c>
		  {
			  sprintf(tmpTime,"%s %02d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000fc4:	4b5d      	ldr	r3, [pc, #372]	; (800113c <main+0x2a4>)
 8000fc6:	78db      	ldrb	r3, [r3, #3]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a68      	ldr	r2, [pc, #416]	; (8001174 <main+0x2dc>)
 8000fd2:	441a      	add	r2, r3
 8000fd4:	4b59      	ldr	r3, [pc, #356]	; (800113c <main+0x2a4>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	4b58      	ldr	r3, [pc, #352]	; (800113c <main+0x2a4>)
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4b56      	ldr	r3, [pc, #344]	; (800113c <main+0x2a4>)
 8000fe2:	789b      	ldrb	r3, [r3, #2]
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	9100      	str	r1, [sp, #0]
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4963      	ldr	r1, [pc, #396]	; (8001178 <main+0x2e0>)
 8000fec:	4863      	ldr	r0, [pc, #396]	; (800117c <main+0x2e4>)
 8000fee:	f007 fd67 	bl	8008ac0 <siprintf>
 8000ff2:	e11a      	b.n	800122a <main+0x392>
		  }
		  else
		  {
			  if(setmode==AMPM)
 8000ff4:	4b62      	ldr	r3, [pc, #392]	; (8001180 <main+0x2e8>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10e      	bne.n	800101a <main+0x182>
			  {
				  sprintf(tmpTime,"   %02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ffc:	4b4f      	ldr	r3, [pc, #316]	; (800113c <main+0x2a4>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b4e      	ldr	r3, [pc, #312]	; (800113c <main+0x2a4>)
 8001004:	785b      	ldrb	r3, [r3, #1]
 8001006:	4619      	mov	r1, r3
 8001008:	4b4c      	ldr	r3, [pc, #304]	; (800113c <main+0x2a4>)
 800100a:	789b      	ldrb	r3, [r3, #2]
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	460b      	mov	r3, r1
 8001010:	495c      	ldr	r1, [pc, #368]	; (8001184 <main+0x2ec>)
 8001012:	485a      	ldr	r0, [pc, #360]	; (800117c <main+0x2e4>)
 8001014:	f007 fd54 	bl	8008ac0 <siprintf>
 8001018:	e107      	b.n	800122a <main+0x392>
			  }
			  else if(setmode==HOUR_T)
 800101a:	4b59      	ldr	r3, [pc, #356]	; (8001180 <main+0x2e8>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d122      	bne.n	8001068 <main+0x1d0>
			  {
				  sprintf(tmpTime,"%s  %d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours%10, sTime.Minutes, sTime.Seconds);
 8001022:	4b46      	ldr	r3, [pc, #280]	; (800113c <main+0x2a4>)
 8001024:	78db      	ldrb	r3, [r3, #3]
 8001026:	461a      	mov	r2, r3
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	4a51      	ldr	r2, [pc, #324]	; (8001174 <main+0x2dc>)
 8001030:	1898      	adds	r0, r3, r2
 8001032:	4b42      	ldr	r3, [pc, #264]	; (800113c <main+0x2a4>)
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	4b54      	ldr	r3, [pc, #336]	; (8001188 <main+0x2f0>)
 8001038:	fba3 1302 	umull	r1, r3, r3, r2
 800103c:	08d9      	lsrs	r1, r3, #3
 800103e:	460b      	mov	r3, r1
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4619      	mov	r1, r3
 800104c:	4b3b      	ldr	r3, [pc, #236]	; (800113c <main+0x2a4>)
 800104e:	785b      	ldrb	r3, [r3, #1]
 8001050:	461a      	mov	r2, r3
 8001052:	4b3a      	ldr	r3, [pc, #232]	; (800113c <main+0x2a4>)
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	460b      	mov	r3, r1
 800105c:	4602      	mov	r2, r0
 800105e:	494b      	ldr	r1, [pc, #300]	; (800118c <main+0x2f4>)
 8001060:	4846      	ldr	r0, [pc, #280]	; (800117c <main+0x2e4>)
 8001062:	f007 fd2d 	bl	8008ac0 <siprintf>
 8001066:	e0e0      	b.n	800122a <main+0x392>
			  }
			  else if(setmode==HOUR_O)
 8001068:	4b45      	ldr	r3, [pc, #276]	; (8001180 <main+0x2e8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d11c      	bne.n	80010aa <main+0x212>
			  {
				  sprintf(tmpTime,"%s %d :%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours/10, sTime.Minutes, sTime.Seconds);
 8001070:	4b32      	ldr	r3, [pc, #200]	; (800113c <main+0x2a4>)
 8001072:	78db      	ldrb	r3, [r3, #3]
 8001074:	461a      	mov	r2, r3
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	4a3d      	ldr	r2, [pc, #244]	; (8001174 <main+0x2dc>)
 800107e:	441a      	add	r2, r3
 8001080:	4b2e      	ldr	r3, [pc, #184]	; (800113c <main+0x2a4>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4940      	ldr	r1, [pc, #256]	; (8001188 <main+0x2f0>)
 8001086:	fba1 1303 	umull	r1, r3, r1, r3
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <main+0x2a4>)
 8001092:	785b      	ldrb	r3, [r3, #1]
 8001094:	4619      	mov	r1, r3
 8001096:	4b29      	ldr	r3, [pc, #164]	; (800113c <main+0x2a4>)
 8001098:	789b      	ldrb	r3, [r3, #2]
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	9100      	str	r1, [sp, #0]
 800109e:	4603      	mov	r3, r0
 80010a0:	493b      	ldr	r1, [pc, #236]	; (8001190 <main+0x2f8>)
 80010a2:	4836      	ldr	r0, [pc, #216]	; (800117c <main+0x2e4>)
 80010a4:	f007 fd0c 	bl	8008ac0 <siprintf>
 80010a8:	e0bf      	b.n	800122a <main+0x392>
			  }
			  else if(setmode==MINUTE_T)
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <main+0x2e8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d122      	bne.n	80010f8 <main+0x260>
			  {
				  sprintf(tmpTime,"%s %02d: %d:%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes%10, sTime.Seconds);
 80010b2:	4b22      	ldr	r3, [pc, #136]	; (800113c <main+0x2a4>)
 80010b4:	78db      	ldrb	r3, [r3, #3]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	4a2d      	ldr	r2, [pc, #180]	; (8001174 <main+0x2dc>)
 80010c0:	1898      	adds	r0, r3, r2
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <main+0x2a4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461c      	mov	r4, r3
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <main+0x2a4>)
 80010ca:	785a      	ldrb	r2, [r3, #1]
 80010cc:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <main+0x2f0>)
 80010ce:	fba3 1302 	umull	r1, r3, r3, r2
 80010d2:	08d9      	lsrs	r1, r3, #3
 80010d4:	460b      	mov	r3, r1
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <main+0x2a4>)
 80010e4:	789b      	ldrb	r3, [r3, #2]
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	9200      	str	r2, [sp, #0]
 80010ea:	4623      	mov	r3, r4
 80010ec:	4602      	mov	r2, r0
 80010ee:	4929      	ldr	r1, [pc, #164]	; (8001194 <main+0x2fc>)
 80010f0:	4822      	ldr	r0, [pc, #136]	; (800117c <main+0x2e4>)
 80010f2:	f007 fce5 	bl	8008ac0 <siprintf>
 80010f6:	e098      	b.n	800122a <main+0x392>
			  }
			  else if(setmode==MINUTE_O)
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <main+0x2e8>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d14d      	bne.n	800119c <main+0x304>
			  {
				  sprintf(tmpTime,"%s %02d:%d :%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes/10, sTime.Seconds);
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <main+0x2a4>)
 8001102:	78db      	ldrb	r3, [r3, #3]
 8001104:	461a      	mov	r2, r3
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	4a19      	ldr	r2, [pc, #100]	; (8001174 <main+0x2dc>)
 800110e:	441a      	add	r2, r3
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <main+0x2a4>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <main+0x2a4>)
 8001118:	785b      	ldrb	r3, [r3, #1]
 800111a:	491b      	ldr	r1, [pc, #108]	; (8001188 <main+0x2f0>)
 800111c:	fba1 1303 	umull	r1, r3, r1, r3
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <main+0x2a4>)
 8001128:	789b      	ldrb	r3, [r3, #2]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	9100      	str	r1, [sp, #0]
 800112e:	4603      	mov	r3, r0
 8001130:	4919      	ldr	r1, [pc, #100]	; (8001198 <main+0x300>)
 8001132:	4812      	ldr	r0, [pc, #72]	; (800117c <main+0x2e4>)
 8001134:	f007 fcc4 	bl	8008ac0 <siprintf>
 8001138:	e077      	b.n	800122a <main+0x392>
 800113a:	bf00      	nop
 800113c:	20000640 	.word	0x20000640
 8001140:	2000071c 	.word	0x2000071c
 8001144:	20000654 	.word	0x20000654
 8001148:	20000700 	.word	0x20000700
 800114c:	20000314 	.word	0x20000314
 8001150:	0800953c 	.word	0x0800953c
 8001154:	08060000 	.word	0x08060000
 8001158:	20000718 	.word	0x20000718
 800115c:	20000788 	.word	0x20000788
 8001160:	20000719 	.word	0x20000719
 8001164:	200007cc 	.word	0x200007cc
 8001168:	20000670 	.word	0x20000670
 800116c:	08009420 	.word	0x08009420
 8001170:	200006f0 	.word	0x200006f0
 8001174:	20000000 	.word	0x20000000
 8001178:	08009434 	.word	0x08009434
 800117c:	20000674 	.word	0x20000674
 8001180:	20000671 	.word	0x20000671
 8001184:	08009448 	.word	0x08009448
 8001188:	cccccccd 	.word	0xcccccccd
 800118c:	0800945c 	.word	0x0800945c
 8001190:	08009470 	.word	0x08009470
 8001194:	08009484 	.word	0x08009484
 8001198:	08009498 	.word	0x08009498
			  }
			  else if(setmode==SECOND_T)
 800119c:	4b96      	ldr	r3, [pc, #600]	; (80013f8 <main+0x560>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d122      	bne.n	80011ea <main+0x352>
			  {
				  sprintf(tmpTime,"%s %02d:%02d: %d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds%10);
 80011a4:	4b95      	ldr	r3, [pc, #596]	; (80013fc <main+0x564>)
 80011a6:	78db      	ldrb	r3, [r3, #3]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	4a93      	ldr	r2, [pc, #588]	; (8001400 <main+0x568>)
 80011b2:	1898      	adds	r0, r3, r2
 80011b4:	4b91      	ldr	r3, [pc, #580]	; (80013fc <main+0x564>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461d      	mov	r5, r3
 80011ba:	4b90      	ldr	r3, [pc, #576]	; (80013fc <main+0x564>)
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	461c      	mov	r4, r3
 80011c0:	4b8e      	ldr	r3, [pc, #568]	; (80013fc <main+0x564>)
 80011c2:	789a      	ldrb	r2, [r3, #2]
 80011c4:	4b8f      	ldr	r3, [pc, #572]	; (8001404 <main+0x56c>)
 80011c6:	fba3 1302 	umull	r1, r3, r3, r2
 80011ca:	08d9      	lsrs	r1, r3, #3
 80011cc:	460b      	mov	r3, r1
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	9400      	str	r4, [sp, #0]
 80011dc:	462b      	mov	r3, r5
 80011de:	4602      	mov	r2, r0
 80011e0:	4989      	ldr	r1, [pc, #548]	; (8001408 <main+0x570>)
 80011e2:	488a      	ldr	r0, [pc, #552]	; (800140c <main+0x574>)
 80011e4:	f007 fc6c 	bl	8008ac0 <siprintf>
 80011e8:	e01f      	b.n	800122a <main+0x392>
			  }
			  else if(setmode==SECOND_O)
 80011ea:	4b83      	ldr	r3, [pc, #524]	; (80013f8 <main+0x560>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d11b      	bne.n	800122a <main+0x392>
			  {
				  sprintf(tmpTime,"%s %02d:%02d:%d ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds/10);
 80011f2:	4b82      	ldr	r3, [pc, #520]	; (80013fc <main+0x564>)
 80011f4:	78db      	ldrb	r3, [r3, #3]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	4a80      	ldr	r2, [pc, #512]	; (8001400 <main+0x568>)
 8001200:	441a      	add	r2, r3
 8001202:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <main+0x564>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461c      	mov	r4, r3
 8001208:	4b7c      	ldr	r3, [pc, #496]	; (80013fc <main+0x564>)
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	4618      	mov	r0, r3
 800120e:	4b7b      	ldr	r3, [pc, #492]	; (80013fc <main+0x564>)
 8001210:	789b      	ldrb	r3, [r3, #2]
 8001212:	497c      	ldr	r1, [pc, #496]	; (8001404 <main+0x56c>)
 8001214:	fba1 1303 	umull	r1, r3, r1, r3
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	9000      	str	r0, [sp, #0]
 8001220:	4623      	mov	r3, r4
 8001222:	497b      	ldr	r1, [pc, #492]	; (8001410 <main+0x578>)
 8001224:	4879      	ldr	r0, [pc, #484]	; (800140c <main+0x574>)
 8001226:	f007 fc4b 	bl	8008ac0 <siprintf>
			  }
		  }

		  lcd_put_cur(1,0);
 800122a:	2100      	movs	r1, #0
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff fe12 	bl	8000e56 <lcd_put_cur>
		  LCD_SendString(tmpTime);
 8001232:	4876      	ldr	r0, [pc, #472]	; (800140c <main+0x574>)
 8001234:	f7ff fdf2 	bl	8000e1c <LCD_SendString>

		  if(user_pressed_flag==1)
 8001238:	4b76      	ldr	r3, [pc, #472]	; (8001414 <main+0x57c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	f47f ae9a 	bne.w	8000f76 <main+0xde>
		  {
			  current_tick=HAL_GetTick();
 8001242:	f001 fa7f 	bl	8002744 <HAL_GetTick>
 8001246:	4603      	mov	r3, r0
 8001248:	4a73      	ldr	r2, [pc, #460]	; (8001418 <main+0x580>)
 800124a:	6013      	str	r3, [r2, #0]

			  if(current_tick-old_tick > 1)
 800124c:	4b72      	ldr	r3, [pc, #456]	; (8001418 <main+0x580>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b72      	ldr	r3, [pc, #456]	; (800141c <main+0x584>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b01      	cmp	r3, #1
 8001258:	f67f ae8d 	bls.w	8000f76 <main+0xde>
			  {
				  old_tick=current_tick;
 800125c:	4b6e      	ldr	r3, [pc, #440]	; (8001418 <main+0x580>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a6e      	ldr	r2, [pc, #440]	; (800141c <main+0x584>)
 8001262:	6013      	str	r3, [r2, #0]
				  user_pressed_flag=0;
 8001264:	4b6b      	ldr	r3, [pc, #428]	; (8001414 <main+0x57c>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
				  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800126a:	2200      	movs	r2, #0
 800126c:	4963      	ldr	r1, [pc, #396]	; (80013fc <main+0x564>)
 800126e:	486c      	ldr	r0, [pc, #432]	; (8001420 <main+0x588>)
 8001270:	f004 ffb2 	bl	80061d8 <HAL_RTC_SetTime>
				  mode=NORMAL;
 8001274:	4b6b      	ldr	r3, [pc, #428]	; (8001424 <main+0x58c>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e67c      	b.n	8000f76 <main+0xde>
			  }
		  }
	  }
	  // normal mode
	  else if(mode==NORMAL)
 800127c:	4b69      	ldr	r3, [pc, #420]	; (8001424 <main+0x58c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	f040 81a8 	bne.w	80015d6 <main+0x73e>
	  {
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001286:	2200      	movs	r2, #0
 8001288:	495c      	ldr	r1, [pc, #368]	; (80013fc <main+0x564>)
 800128a:	4865      	ldr	r0, [pc, #404]	; (8001420 <main+0x588>)
 800128c:	f005 f83e 	bl	800630c <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001290:	2200      	movs	r2, #0
 8001292:	4965      	ldr	r1, [pc, #404]	; (8001428 <main+0x590>)
 8001294:	4862      	ldr	r0, [pc, #392]	; (8001420 <main+0x588>)
 8001296:	f005 f897 	bl	80063c8 <HAL_RTC_GetDate>
		  sprintf(tmpTime,"%s %02d:%02d:%02d     ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 800129a:	4b58      	ldr	r3, [pc, #352]	; (80013fc <main+0x564>)
 800129c:	78db      	ldrb	r3, [r3, #3]
 800129e:	461a      	mov	r2, r3
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	4a56      	ldr	r2, [pc, #344]	; (8001400 <main+0x568>)
 80012a8:	441a      	add	r2, r3
 80012aa:	4b54      	ldr	r3, [pc, #336]	; (80013fc <main+0x564>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	4b52      	ldr	r3, [pc, #328]	; (80013fc <main+0x564>)
 80012b2:	785b      	ldrb	r3, [r3, #1]
 80012b4:	4619      	mov	r1, r3
 80012b6:	4b51      	ldr	r3, [pc, #324]	; (80013fc <main+0x564>)
 80012b8:	789b      	ldrb	r3, [r3, #2]
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	9100      	str	r1, [sp, #0]
 80012be:	4603      	mov	r3, r0
 80012c0:	495a      	ldr	r1, [pc, #360]	; (800142c <main+0x594>)
 80012c2:	4852      	ldr	r0, [pc, #328]	; (800140c <main+0x574>)
 80012c4:	f007 fbfc 	bl	8008ac0 <siprintf>
		  lcd_put_cur(0,0);
 80012c8:	2100      	movs	r1, #0
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fdc3 	bl	8000e56 <lcd_put_cur>
		  LCD_SendString("Choi Jin Woo    ");
 80012d0:	4857      	ldr	r0, [pc, #348]	; (8001430 <main+0x598>)
 80012d2:	f7ff fda3 	bl	8000e1c <LCD_SendString>
		  lcd_put_cur(1,0);
 80012d6:	2100      	movs	r1, #0
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff fdbc 	bl	8000e56 <lcd_put_cur>
		  LCD_SendString(tmpTime);
 80012de:	484b      	ldr	r0, [pc, #300]	; (800140c <main+0x574>)
 80012e0:	f7ff fd9c 	bl	8000e1c <LCD_SendString>


		  if(sTime.TimeFormat==aTime.TimeFormat && sTime.Hours==aTime.Hours && sTime.Minutes==aTime.Minutes && sTime.Seconds==aTime.Seconds)
 80012e4:	4b45      	ldr	r3, [pc, #276]	; (80013fc <main+0x564>)
 80012e6:	78da      	ldrb	r2, [r3, #3]
 80012e8:	4b52      	ldr	r3, [pc, #328]	; (8001434 <main+0x59c>)
 80012ea:	78db      	ldrb	r3, [r3, #3]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d114      	bne.n	800131a <main+0x482>
 80012f0:	4b42      	ldr	r3, [pc, #264]	; (80013fc <main+0x564>)
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <main+0x59c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10e      	bne.n	800131a <main+0x482>
 80012fc:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <main+0x564>)
 80012fe:	785a      	ldrb	r2, [r3, #1]
 8001300:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <main+0x59c>)
 8001302:	785b      	ldrb	r3, [r3, #1]
 8001304:	429a      	cmp	r2, r3
 8001306:	d108      	bne.n	800131a <main+0x482>
 8001308:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <main+0x564>)
 800130a:	789a      	ldrb	r2, [r3, #2]
 800130c:	4b49      	ldr	r3, [pc, #292]	; (8001434 <main+0x59c>)
 800130e:	789b      	ldrb	r3, [r3, #2]
 8001310:	429a      	cmp	r2, r3
 8001312:	d102      	bne.n	800131a <main+0x482>
		  {
			  alarm_on=1;
 8001314:	4b48      	ldr	r3, [pc, #288]	; (8001438 <main+0x5a0>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
		  }

		  if(alarm_on==1)
 800131a:	4b47      	ldr	r3, [pc, #284]	; (8001438 <main+0x5a0>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	f040 8119 	bne.w	8001556 <main+0x6be>
		  {
			  if (belltype == BUTTERFLY)
 8001324:	4b45      	ldr	r3, [pc, #276]	; (800143c <main+0x5a4>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d14a      	bne.n	80013c2 <main+0x52a>
			  {
				  toggle^=1;
 800132c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001330:	f083 0301 	eor.w	r3, r3, #1
 8001334:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				  if(toggle==1)
 8001338:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800133c:	2b01      	cmp	r3, #1
 800133e:	d104      	bne.n	800134a <main+0x4b2>
				  {
					  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001340:	2100      	movs	r1, #0
 8001342:	483f      	ldr	r0, [pc, #252]	; (8001440 <main+0x5a8>)
 8001344:	f005 fabc 	bl	80068c0 <HAL_TIM_PWM_Stop>
 8001348:	e105      	b.n	8001556 <main+0x6be>
				  }
				  else
				  {
					  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800134a:	2100      	movs	r1, #0
 800134c:	483c      	ldr	r0, [pc, #240]	; (8001440 <main+0x5a8>)
 800134e:	f005 f9ef 	bl	8006730 <HAL_TIM_PWM_Start>

					  for(int i=0; i < butterfly_length; i++)
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001356:	e026      	b.n	80013a6 <main+0x50e>
					  {
					  		  TIM2->ARR = butterfly[i];
 8001358:	4a3a      	ldr	r2, [pc, #232]	; (8001444 <main+0x5ac>)
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
					  		  TIM2->CCR1 = TIM2->ARR / 2;
 8001366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001370:	085b      	lsrs	r3, r3, #1
 8001372:	6353      	str	r3, [r2, #52]	; 0x34
					  		  HAL_Delay(500);
 8001374:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001378:	f001 f9f0 	bl	800275c <HAL_Delay>
					  		  TIM2->CCR1 = 0;
 800137c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001380:	2200      	movs	r2, #0
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
					  		  HAL_Delay(butterfly_interval[i]);
 8001384:	4a30      	ldr	r2, [pc, #192]	; (8001448 <main+0x5b0>)
 8001386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800138c:	4618      	mov	r0, r3
 800138e:	f001 f9e5 	bl	800275c <HAL_Delay>
					  		  TIM2->CCR1 = TIM2->ARR / 2;
 8001392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	6353      	str	r3, [r2, #52]	; 0x34
					  for(int i=0; i < butterfly_length; i++)
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	3301      	adds	r3, #1
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <main+0x5b4>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ae:	4293      	cmp	r3, r2
 80013b0:	dbd2      	blt.n	8001358 <main+0x4c0>
					  }

					  alarm_on=0;
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <main+0x5a0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
					  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80013b8:	2100      	movs	r1, #0
 80013ba:	4821      	ldr	r0, [pc, #132]	; (8001440 <main+0x5a8>)
 80013bc:	f005 fa80 	bl	80068c0 <HAL_TIM_PWM_Stop>
 80013c0:	e0c9      	b.n	8001556 <main+0x6be>
				  }
			  }
			  else if (belltype == LITTLESTAR)
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <main+0x5a4>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d177      	bne.n	80014ba <main+0x622>
			  {
				  toggle^=1;
 80013ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013ce:	f083 0301 	eor.w	r3, r3, #1
 80013d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				  if(toggle==1)
 80013d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d104      	bne.n	80013e8 <main+0x550>
				  {
					  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80013de:	2100      	movs	r1, #0
 80013e0:	4817      	ldr	r0, [pc, #92]	; (8001440 <main+0x5a8>)
 80013e2:	f005 fa6d 	bl	80068c0 <HAL_TIM_PWM_Stop>
 80013e6:	e0b6      	b.n	8001556 <main+0x6be>
				  }
				  else
				  {
					  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013e8:	2100      	movs	r1, #0
 80013ea:	4815      	ldr	r0, [pc, #84]	; (8001440 <main+0x5a8>)
 80013ec:	f005 f9a0 	bl	8006730 <HAL_TIM_PWM_Start>

					  for(int i=0; i < littlestar_length; i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f4:	e053      	b.n	800149e <main+0x606>
 80013f6:	bf00      	nop
 80013f8:	20000671 	.word	0x20000671
 80013fc:	20000640 	.word	0x20000640
 8001400:	20000000 	.word	0x20000000
 8001404:	cccccccd 	.word	0xcccccccd
 8001408:	080094ac 	.word	0x080094ac
 800140c:	20000674 	.word	0x20000674
 8001410:	080094c0 	.word	0x080094c0
 8001414:	200006f1 	.word	0x200006f1
 8001418:	200006f8 	.word	0x200006f8
 800141c:	200006f4 	.word	0x200006f4
 8001420:	2000071c 	.word	0x2000071c
 8001424:	20000670 	.word	0x20000670
 8001428:	20000654 	.word	0x20000654
 800142c:	080094d4 	.word	0x080094d4
 8001430:	080094ec 	.word	0x080094ec
 8001434:	20000658 	.word	0x20000658
 8001438:	200006fc 	.word	0x200006fc
 800143c:	200006d8 	.word	0x200006d8
 8001440:	20000740 	.word	0x20000740
 8001444:	20000048 	.word	0x20000048
 8001448:	200000b8 	.word	0x200000b8
 800144c:	20000126 	.word	0x20000126
					  {
					  		  TIM2->ARR = littlestar[i];
 8001450:	4a9b      	ldr	r2, [pc, #620]	; (80016c0 <main+0x828>)
 8001452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001454:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
					  		  TIM2->CCR1 = TIM2->ARR / 2;
 800145e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	6353      	str	r3, [r2, #52]	; 0x34
					  		  HAL_Delay(500);
 800146c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001470:	f001 f974 	bl	800275c <HAL_Delay>
					  		  TIM2->CCR1 = 0;
 8001474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001478:	2200      	movs	r2, #0
 800147a:	635a      	str	r2, [r3, #52]	; 0x34
					  		  HAL_Delay(littlestar_interval[i]);
 800147c:	4a91      	ldr	r2, [pc, #580]	; (80016c4 <main+0x82c>)
 800147e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001484:	4618      	mov	r0, r3
 8001486:	f001 f969 	bl	800275c <HAL_Delay>
					  		  TIM2->CCR1 = TIM2->ARR / 2;
 800148a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	6353      	str	r3, [r2, #52]	; 0x34
					  for(int i=0; i < littlestar_length; i++)
 8001498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149a:	3301      	adds	r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
 800149e:	4b8a      	ldr	r3, [pc, #552]	; (80016c8 <main+0x830>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	4293      	cmp	r3, r2
 80014a8:	dbd2      	blt.n	8001450 <main+0x5b8>
					  }

					  alarm_on=0;
 80014aa:	4b88      	ldr	r3, [pc, #544]	; (80016cc <main+0x834>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
					  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80014b0:	2100      	movs	r1, #0
 80014b2:	4887      	ldr	r0, [pc, #540]	; (80016d0 <main+0x838>)
 80014b4:	f005 fa04 	bl	80068c0 <HAL_TIM_PWM_Stop>
 80014b8:	e04d      	b.n	8001556 <main+0x6be>
				  }
			  }
			  else if (belltype == JINGLEBELLS)
 80014ba:	4b86      	ldr	r3, [pc, #536]	; (80016d4 <main+0x83c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d149      	bne.n	8001556 <main+0x6be>
			  {
				  toggle^=1;
 80014c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014c6:	f083 0301 	eor.w	r3, r3, #1
 80014ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				  if(toggle==1)
 80014ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d104      	bne.n	80014e0 <main+0x648>
				  {
					  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80014d6:	2100      	movs	r1, #0
 80014d8:	487d      	ldr	r0, [pc, #500]	; (80016d0 <main+0x838>)
 80014da:	f005 f9f1 	bl	80068c0 <HAL_TIM_PWM_Stop>
 80014de:	e03a      	b.n	8001556 <main+0x6be>
				  }
				  else
				  {
					  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014e0:	2100      	movs	r1, #0
 80014e2:	487b      	ldr	r0, [pc, #492]	; (80016d0 <main+0x838>)
 80014e4:	f005 f924 	bl	8006730 <HAL_TIM_PWM_Start>

					  for(int i=0; i < jinglebells_length; i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
 80014ec:	e026      	b.n	800153c <main+0x6a4>
					  {
					  		  TIM2->ARR = jinglebells[i];
 80014ee:	4a7a      	ldr	r2, [pc, #488]	; (80016d8 <main+0x840>)
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
					  		  TIM2->CCR1 = TIM2->ARR / 2;
 80014fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001506:	085b      	lsrs	r3, r3, #1
 8001508:	6353      	str	r3, [r2, #52]	; 0x34
					  		  HAL_Delay(500);
 800150a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150e:	f001 f925 	bl	800275c <HAL_Delay>
					  		  TIM2->CCR1 = 0;
 8001512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001516:	2200      	movs	r2, #0
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
					  		  HAL_Delay(jinglebells_interval[i]);
 800151a:	4a70      	ldr	r2, [pc, #448]	; (80016dc <main+0x844>)
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001522:	4618      	mov	r0, r3
 8001524:	f001 f91a 	bl	800275c <HAL_Delay>
					  		  TIM2->CCR1 = TIM2->ARR / 2;
 8001528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	6353      	str	r3, [r2, #52]	; 0x34
					  for(int i=0; i < jinglebells_length; i++)
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	3301      	adds	r3, #1
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
 800153c:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <main+0x848>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	4293      	cmp	r3, r2
 8001546:	dbd2      	blt.n	80014ee <main+0x656>
					  }

					  alarm_on=0;
 8001548:	4b60      	ldr	r3, [pc, #384]	; (80016cc <main+0x834>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
					  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800154e:	2100      	movs	r1, #0
 8001550:	485f      	ldr	r0, [pc, #380]	; (80016d0 <main+0x838>)
 8001552:	f005 f9b5 	bl	80068c0 <HAL_TIM_PWM_Stop>
				  }
			  }
		  }

		  if(user_pressed_flag==1)
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <main+0x84c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d120      	bne.n	80015a0 <main+0x708>
		  {
			  current_tick=HAL_GetTick();
 800155e:	f001 f8f1 	bl	8002744 <HAL_GetTick>
 8001562:	4603      	mov	r3, r0
 8001564:	4a60      	ldr	r2, [pc, #384]	; (80016e8 <main+0x850>)
 8001566:	6013      	str	r3, [r2, #0]

			  if(current_tick-old_tick > 2000)
 8001568:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <main+0x850>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <main+0x854>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001576:	d913      	bls.n	80015a0 <main+0x708>
			  {
				  old_tick=current_tick;
 8001578:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <main+0x850>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a5b      	ldr	r2, [pc, #364]	; (80016ec <main+0x854>)
 800157e:	6013      	str	r3, [r2, #0]
				  user_pressed_flag=0;
 8001580:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <main+0x84c>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
				  mode=ALARM;
 8001586:	4b5a      	ldr	r3, [pc, #360]	; (80016f0 <main+0x858>)
 8001588:	2202      	movs	r2, #2
 800158a:	701a      	strb	r2, [r3, #0]
				  HAL_RTC_GetTime(&hrtc, &aTime, RTC_FORMAT_BIN);
 800158c:	2200      	movs	r2, #0
 800158e:	4959      	ldr	r1, [pc, #356]	; (80016f4 <main+0x85c>)
 8001590:	4859      	ldr	r0, [pc, #356]	; (80016f8 <main+0x860>)
 8001592:	f004 febb 	bl	800630c <HAL_RTC_GetTime>
				  HAL_RTC_GetDate(&hrtc, &aDate, RTC_FORMAT_BIN);
 8001596:	2200      	movs	r2, #0
 8001598:	4958      	ldr	r1, [pc, #352]	; (80016fc <main+0x864>)
 800159a:	4857      	ldr	r0, [pc, #348]	; (80016f8 <main+0x860>)
 800159c:	f004 ff14 	bl	80063c8 <HAL_RTC_GetDate>
			  }
		  }

		  if(double_click==1)
 80015a0:	4b57      	ldr	r3, [pc, #348]	; (8001700 <main+0x868>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	f47f ace6 	bne.w	8000f76 <main+0xde>
		  {
			  uint32_t rtcData[3] = {sTime.Hours, sTime.Minutes, sTime.Seconds};
 80015aa:	4b56      	ldr	r3, [pc, #344]	; (8001704 <main+0x86c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	4b54      	ldr	r3, [pc, #336]	; (8001704 <main+0x86c>)
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <main+0x86c>)
 80015b8:	789b      	ldrb	r3, [r3, #2]
 80015ba:	60fb      	str	r3, [r7, #12]
			  FLASH_Write(RTC_FLASH_ADDRESS, rtcData, sizeof(rtcData) / sizeof(rtcData[0]));
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2203      	movs	r2, #3
 80015c0:	4619      	mov	r1, r3
 80015c2:	4851      	ldr	r0, [pc, #324]	; (8001708 <main+0x870>)
 80015c4:	f7ff fa0a 	bl	80009dc <FLASH_Write>

			  mode=BELL;
 80015c8:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <main+0x858>)
 80015ca:	2203      	movs	r2, #3
 80015cc:	701a      	strb	r2, [r3, #0]
			  double_click=0;
 80015ce:	4b4c      	ldr	r3, [pc, #304]	; (8001700 <main+0x868>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
 80015d4:	e4cf      	b.n	8000f76 <main+0xde>
		  }
	  }
	  // alarm mode
	  else if(mode==ALARM)
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <main+0x858>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	f040 8188 	bne.w	80018f0 <main+0xa58>
	  {
		  toggle^=1;
 80015e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015e4:	f083 0301 	eor.w	r3, r3, #1
 80015e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		  lcd_put_cur(0,0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff fc31 	bl	8000e56 <lcd_put_cur>
		  LCD_SendString("Alarm Mode      ");
 80015f4:	4845      	ldr	r0, [pc, #276]	; (800170c <main+0x874>)
 80015f6:	f7ff fc11 	bl	8000e1c <LCD_SendString>

		  button = getButton();
 80015fa:	f000 fa7f 	bl	8001afc <getButton>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	4b43      	ldr	r3, [pc, #268]	; (8001710 <main+0x878>)
 8001604:	701a      	strb	r2, [r3, #0]
		  move_cur_time(&aTime, button);
 8001606:	4b42      	ldr	r3, [pc, #264]	; (8001710 <main+0x878>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4619      	mov	r1, r3
 800160c:	4839      	ldr	r0, [pc, #228]	; (80016f4 <main+0x85c>)
 800160e:	f000 fa9b 	bl	8001b48 <move_cur_time>

		  if(toggle)
 8001612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001616:	2b00      	cmp	r3, #0
 8001618:	d017      	beq.n	800164a <main+0x7b2>
		  {
			  sprintf(tmpTime,"%s %02d:%02d:%02d", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes, aTime.Seconds);
 800161a:	4b36      	ldr	r3, [pc, #216]	; (80016f4 <main+0x85c>)
 800161c:	78db      	ldrb	r3, [r3, #3]
 800161e:	461a      	mov	r2, r3
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	4a3b      	ldr	r2, [pc, #236]	; (8001714 <main+0x87c>)
 8001628:	441a      	add	r2, r3
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <main+0x85c>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <main+0x85c>)
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	4619      	mov	r1, r3
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <main+0x85c>)
 8001638:	789b      	ldrb	r3, [r3, #2]
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	9100      	str	r1, [sp, #0]
 800163e:	4603      	mov	r3, r0
 8001640:	4935      	ldr	r1, [pc, #212]	; (8001718 <main+0x880>)
 8001642:	4836      	ldr	r0, [pc, #216]	; (800171c <main+0x884>)
 8001644:	f007 fa3c 	bl	8008ac0 <siprintf>
 8001648:	e122      	b.n	8001890 <main+0x9f8>
		  }
		  else
		  {
			  if(setmode==AMPM)
 800164a:	4b35      	ldr	r3, [pc, #212]	; (8001720 <main+0x888>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10e      	bne.n	8001670 <main+0x7d8>
			  {
				  sprintf(tmpTime,"   %02d:%02d:%02d", aTime.Hours, aTime.Minutes, aTime.Seconds);
 8001652:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <main+0x85c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <main+0x85c>)
 800165a:	785b      	ldrb	r3, [r3, #1]
 800165c:	4619      	mov	r1, r3
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <main+0x85c>)
 8001660:	789b      	ldrb	r3, [r3, #2]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	460b      	mov	r3, r1
 8001666:	492f      	ldr	r1, [pc, #188]	; (8001724 <main+0x88c>)
 8001668:	482c      	ldr	r0, [pc, #176]	; (800171c <main+0x884>)
 800166a:	f007 fa29 	bl	8008ac0 <siprintf>
 800166e:	e10f      	b.n	8001890 <main+0x9f8>
			  }
			  else if(setmode==HOUR_T)
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <main+0x888>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d15b      	bne.n	8001730 <main+0x898>
			  {
				  sprintf(tmpTime,"%s  %d:%02d:%02d", ampm[aTime.TimeFormat], aTime.Hours%10, aTime.Minutes, aTime.Seconds);
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <main+0x85c>)
 800167a:	78db      	ldrb	r3, [r3, #3]
 800167c:	461a      	mov	r2, r3
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	4a23      	ldr	r2, [pc, #140]	; (8001714 <main+0x87c>)
 8001686:	1898      	adds	r0, r3, r2
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <main+0x85c>)
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <main+0x890>)
 800168e:	fba3 1302 	umull	r1, r3, r3, r2
 8001692:	08d9      	lsrs	r1, r3, #3
 8001694:	460b      	mov	r3, r1
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <main+0x85c>)
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <main+0x85c>)
 80016aa:	789b      	ldrb	r3, [r3, #2]
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	9200      	str	r2, [sp, #0]
 80016b0:	460b      	mov	r3, r1
 80016b2:	4602      	mov	r2, r0
 80016b4:	491d      	ldr	r1, [pc, #116]	; (800172c <main+0x894>)
 80016b6:	4819      	ldr	r0, [pc, #100]	; (800171c <main+0x884>)
 80016b8:	f007 fa02 	bl	8008ac0 <siprintf>
 80016bc:	e0e8      	b.n	8001890 <main+0x9f8>
 80016be:	bf00      	nop
 80016c0:	20000128 	.word	0x20000128
 80016c4:	2000017c 	.word	0x2000017c
 80016c8:	200001d0 	.word	0x200001d0
 80016cc:	200006fc 	.word	0x200006fc
 80016d0:	20000740 	.word	0x20000740
 80016d4:	200006d8 	.word	0x200006d8
 80016d8:	200001d4 	.word	0x200001d4
 80016dc:	20000238 	.word	0x20000238
 80016e0:	2000029a 	.word	0x2000029a
 80016e4:	200006f1 	.word	0x200006f1
 80016e8:	200006f8 	.word	0x200006f8
 80016ec:	200006f4 	.word	0x200006f4
 80016f0:	20000670 	.word	0x20000670
 80016f4:	20000658 	.word	0x20000658
 80016f8:	2000071c 	.word	0x2000071c
 80016fc:	2000066c 	.word	0x2000066c
 8001700:	20000708 	.word	0x20000708
 8001704:	20000640 	.word	0x20000640
 8001708:	08060000 	.word	0x08060000
 800170c:	08009500 	.word	0x08009500
 8001710:	200006f0 	.word	0x200006f0
 8001714:	20000000 	.word	0x20000000
 8001718:	08009434 	.word	0x08009434
 800171c:	20000674 	.word	0x20000674
 8001720:	20000671 	.word	0x20000671
 8001724:	08009448 	.word	0x08009448
 8001728:	cccccccd 	.word	0xcccccccd
 800172c:	0800945c 	.word	0x0800945c
			  }
			  else if(setmode==HOUR_O)
 8001730:	4b98      	ldr	r3, [pc, #608]	; (8001994 <main+0xafc>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d11c      	bne.n	8001772 <main+0x8da>
			  {
				  sprintf(tmpTime,"%s %d :%02d:%02d", ampm[aTime.TimeFormat], aTime.Hours/10, aTime.Minutes, aTime.Seconds);
 8001738:	4b97      	ldr	r3, [pc, #604]	; (8001998 <main+0xb00>)
 800173a:	78db      	ldrb	r3, [r3, #3]
 800173c:	461a      	mov	r2, r3
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	4a95      	ldr	r2, [pc, #596]	; (800199c <main+0xb04>)
 8001746:	441a      	add	r2, r3
 8001748:	4b93      	ldr	r3, [pc, #588]	; (8001998 <main+0xb00>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4994      	ldr	r1, [pc, #592]	; (80019a0 <main+0xb08>)
 800174e:	fba1 1303 	umull	r1, r3, r1, r3
 8001752:	08db      	lsrs	r3, r3, #3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	4b8f      	ldr	r3, [pc, #572]	; (8001998 <main+0xb00>)
 800175a:	785b      	ldrb	r3, [r3, #1]
 800175c:	4619      	mov	r1, r3
 800175e:	4b8e      	ldr	r3, [pc, #568]	; (8001998 <main+0xb00>)
 8001760:	789b      	ldrb	r3, [r3, #2]
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	9100      	str	r1, [sp, #0]
 8001766:	4603      	mov	r3, r0
 8001768:	498e      	ldr	r1, [pc, #568]	; (80019a4 <main+0xb0c>)
 800176a:	488f      	ldr	r0, [pc, #572]	; (80019a8 <main+0xb10>)
 800176c:	f007 f9a8 	bl	8008ac0 <siprintf>
 8001770:	e08e      	b.n	8001890 <main+0x9f8>
			  }
			  else if(setmode==MINUTE_T)
 8001772:	4b88      	ldr	r3, [pc, #544]	; (8001994 <main+0xafc>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d122      	bne.n	80017c0 <main+0x928>
			  {
				  sprintf(tmpTime,"%s %02d: %d:%02d", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes%10, aTime.Seconds);
 800177a:	4b87      	ldr	r3, [pc, #540]	; (8001998 <main+0xb00>)
 800177c:	78db      	ldrb	r3, [r3, #3]
 800177e:	461a      	mov	r2, r3
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	4a85      	ldr	r2, [pc, #532]	; (800199c <main+0xb04>)
 8001788:	1898      	adds	r0, r3, r2
 800178a:	4b83      	ldr	r3, [pc, #524]	; (8001998 <main+0xb00>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461c      	mov	r4, r3
 8001790:	4b81      	ldr	r3, [pc, #516]	; (8001998 <main+0xb00>)
 8001792:	785a      	ldrb	r2, [r3, #1]
 8001794:	4b82      	ldr	r3, [pc, #520]	; (80019a0 <main+0xb08>)
 8001796:	fba3 1302 	umull	r1, r3, r3, r2
 800179a:	08d9      	lsrs	r1, r3, #3
 800179c:	460b      	mov	r3, r1
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b7b      	ldr	r3, [pc, #492]	; (8001998 <main+0xb00>)
 80017ac:	789b      	ldrb	r3, [r3, #2]
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	9200      	str	r2, [sp, #0]
 80017b2:	4623      	mov	r3, r4
 80017b4:	4602      	mov	r2, r0
 80017b6:	497d      	ldr	r1, [pc, #500]	; (80019ac <main+0xb14>)
 80017b8:	487b      	ldr	r0, [pc, #492]	; (80019a8 <main+0xb10>)
 80017ba:	f007 f981 	bl	8008ac0 <siprintf>
 80017be:	e067      	b.n	8001890 <main+0x9f8>
			  }
			  else if(setmode==MINUTE_O)
 80017c0:	4b74      	ldr	r3, [pc, #464]	; (8001994 <main+0xafc>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d11c      	bne.n	8001802 <main+0x96a>
			  {
				  sprintf(tmpTime,"%s %02d:%d :%02d", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes/10, aTime.Seconds);
 80017c8:	4b73      	ldr	r3, [pc, #460]	; (8001998 <main+0xb00>)
 80017ca:	78db      	ldrb	r3, [r3, #3]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	4a71      	ldr	r2, [pc, #452]	; (800199c <main+0xb04>)
 80017d6:	441a      	add	r2, r3
 80017d8:	4b6f      	ldr	r3, [pc, #444]	; (8001998 <main+0xb00>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	4b6e      	ldr	r3, [pc, #440]	; (8001998 <main+0xb00>)
 80017e0:	785b      	ldrb	r3, [r3, #1]
 80017e2:	496f      	ldr	r1, [pc, #444]	; (80019a0 <main+0xb08>)
 80017e4:	fba1 1303 	umull	r1, r3, r1, r3
 80017e8:	08db      	lsrs	r3, r3, #3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4619      	mov	r1, r3
 80017ee:	4b6a      	ldr	r3, [pc, #424]	; (8001998 <main+0xb00>)
 80017f0:	789b      	ldrb	r3, [r3, #2]
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	9100      	str	r1, [sp, #0]
 80017f6:	4603      	mov	r3, r0
 80017f8:	496d      	ldr	r1, [pc, #436]	; (80019b0 <main+0xb18>)
 80017fa:	486b      	ldr	r0, [pc, #428]	; (80019a8 <main+0xb10>)
 80017fc:	f007 f960 	bl	8008ac0 <siprintf>
 8001800:	e046      	b.n	8001890 <main+0x9f8>
			  }
			  else if(setmode==SECOND_T)
 8001802:	4b64      	ldr	r3, [pc, #400]	; (8001994 <main+0xafc>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d122      	bne.n	8001850 <main+0x9b8>
			  {
				  sprintf(tmpTime,"%s %02d:%02d: %d", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes, aTime.Seconds%10);
 800180a:	4b63      	ldr	r3, [pc, #396]	; (8001998 <main+0xb00>)
 800180c:	78db      	ldrb	r3, [r3, #3]
 800180e:	461a      	mov	r2, r3
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	4a61      	ldr	r2, [pc, #388]	; (800199c <main+0xb04>)
 8001818:	1898      	adds	r0, r3, r2
 800181a:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <main+0xb00>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461d      	mov	r5, r3
 8001820:	4b5d      	ldr	r3, [pc, #372]	; (8001998 <main+0xb00>)
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	461c      	mov	r4, r3
 8001826:	4b5c      	ldr	r3, [pc, #368]	; (8001998 <main+0xb00>)
 8001828:	789a      	ldrb	r2, [r3, #2]
 800182a:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <main+0xb08>)
 800182c:	fba3 1302 	umull	r1, r3, r3, r2
 8001830:	08d9      	lsrs	r1, r3, #3
 8001832:	460b      	mov	r3, r1
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	9400      	str	r4, [sp, #0]
 8001842:	462b      	mov	r3, r5
 8001844:	4602      	mov	r2, r0
 8001846:	495b      	ldr	r1, [pc, #364]	; (80019b4 <main+0xb1c>)
 8001848:	4857      	ldr	r0, [pc, #348]	; (80019a8 <main+0xb10>)
 800184a:	f007 f939 	bl	8008ac0 <siprintf>
 800184e:	e01f      	b.n	8001890 <main+0x9f8>
			  }
			  else if(setmode==SECOND_O)
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <main+0xafc>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b06      	cmp	r3, #6
 8001856:	d11b      	bne.n	8001890 <main+0x9f8>
			  {
				  sprintf(tmpTime,"%s %02d:%02d:%d", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes, aTime.Seconds/10);
 8001858:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <main+0xb00>)
 800185a:	78db      	ldrb	r3, [r3, #3]
 800185c:	461a      	mov	r2, r3
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	4a4d      	ldr	r2, [pc, #308]	; (800199c <main+0xb04>)
 8001866:	441a      	add	r2, r3
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <main+0xb00>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461c      	mov	r4, r3
 800186e:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <main+0xb00>)
 8001870:	785b      	ldrb	r3, [r3, #1]
 8001872:	4618      	mov	r0, r3
 8001874:	4b48      	ldr	r3, [pc, #288]	; (8001998 <main+0xb00>)
 8001876:	789b      	ldrb	r3, [r3, #2]
 8001878:	4949      	ldr	r1, [pc, #292]	; (80019a0 <main+0xb08>)
 800187a:	fba1 1303 	umull	r1, r3, r1, r3
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	9000      	str	r0, [sp, #0]
 8001886:	4623      	mov	r3, r4
 8001888:	494b      	ldr	r1, [pc, #300]	; (80019b8 <main+0xb20>)
 800188a:	4847      	ldr	r0, [pc, #284]	; (80019a8 <main+0xb10>)
 800188c:	f007 f918 	bl	8008ac0 <siprintf>
			  }
		  }

		  lcd_put_cur(1,0);
 8001890:	2100      	movs	r1, #0
 8001892:	2001      	movs	r0, #1
 8001894:	f7ff fadf 	bl	8000e56 <lcd_put_cur>
		  LCD_SendString(tmpTime);
 8001898:	4843      	ldr	r0, [pc, #268]	; (80019a8 <main+0xb10>)
 800189a:	f7ff fabf 	bl	8000e1c <LCD_SendString>
		  lcd_put_cur(1, 14);
 800189e:	210e      	movs	r1, #14
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7ff fad8 	bl	8000e56 <lcd_put_cur>
		  LCD_SendData(0);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff fa8c 	bl	8000dc4 <LCD_SendData>

		  if(user_pressed_flag==1)
 80018ac:	4b43      	ldr	r3, [pc, #268]	; (80019bc <main+0xb24>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	f47f ab60 	bne.w	8000f76 <main+0xde>
		  {
			  current_tick=HAL_GetTick();
 80018b6:	f000 ff45 	bl	8002744 <HAL_GetTick>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <main+0xb28>)
 80018be:	6013      	str	r3, [r2, #0]

			  if(current_tick-old_tick > 1)
 80018c0:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <main+0xb28>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <main+0xb2c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	f67f ab53 	bls.w	8000f76 <main+0xde>
			  {
				  old_tick=current_tick;
 80018d0:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <main+0xb28>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a3b      	ldr	r2, [pc, #236]	; (80019c4 <main+0xb2c>)
 80018d6:	6013      	str	r3, [r2, #0]
				  user_pressed_flag=0;
 80018d8:	4b38      	ldr	r3, [pc, #224]	; (80019bc <main+0xb24>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
				  pulled_chk = -1;
 80018de:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <main+0xb30>)
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	601a      	str	r2, [r3, #0]
				  mode=NORMAL;
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <main+0xb34>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	f7ff bb43 	b.w	8000f76 <main+0xde>
			  }
		  }
	  }
	  else if (mode == BELL)
 80018f0:	4b36      	ldr	r3, [pc, #216]	; (80019cc <main+0xb34>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	f47f ab3e 	bne.w	8000f76 <main+0xde>
	  {
		  lcd_put_cur(0, 0);
 80018fa:	2100      	movs	r1, #0
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff faaa 	bl	8000e56 <lcd_put_cur>
		  LCD_SendString("Select Bell     ");
 8001902:	4833      	ldr	r0, [pc, #204]	; (80019d0 <main+0xb38>)
 8001904:	f7ff fa8a 	bl	8000e1c <LCD_SendString>

		  button = getButton();
 8001908:	f000 f8f8 	bl	8001afc <getButton>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <main+0xb3c>)
 8001912:	701a      	strb	r2, [r3, #0]
		  move_cur_bell(button);
 8001914:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <main+0xb3c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fa61 	bl	8001de0 <move_cur_bell>

		  sprintf(tmp_bell_name, "%s", bell_name[belltype]);
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <main+0xb40>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4a2b      	ldr	r2, [pc, #172]	; (80019dc <main+0xb44>)
 800192e:	4413      	add	r3, r2
 8001930:	461a      	mov	r2, r3
 8001932:	492b      	ldr	r1, [pc, #172]	; (80019e0 <main+0xb48>)
 8001934:	482b      	ldr	r0, [pc, #172]	; (80019e4 <main+0xb4c>)
 8001936:	f007 f8c3 	bl	8008ac0 <siprintf>

		  lcd_put_cur(1, 0);
 800193a:	2100      	movs	r1, #0
 800193c:	2001      	movs	r0, #1
 800193e:	f7ff fa8a 	bl	8000e56 <lcd_put_cur>
		  LCD_SendString(tmp_bell_name);
 8001942:	4828      	ldr	r0, [pc, #160]	; (80019e4 <main+0xb4c>)
 8001944:	f7ff fa6a 	bl	8000e1c <LCD_SendString>

		  if (user_pressed_flag == 1)
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <main+0xb24>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	f47f ab12 	bne.w	8000f76 <main+0xde>
		  {
			  current_tick = HAL_GetTick();
 8001952:	f000 fef7 	bl	8002744 <HAL_GetTick>
 8001956:	4603      	mov	r3, r0
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <main+0xb28>)
 800195a:	6013      	str	r3, [r2, #0]
			  if (current_tick - old_tick > 1)
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <main+0xb28>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <main+0xb2c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	f67f ab05 	bls.w	8000f76 <main+0xde>
			  {
				  old_tick = current_tick;
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <main+0xb28>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <main+0xb2c>)
 8001972:	6013      	str	r3, [r2, #0]
				  user_pressed_flag = 0;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <main+0xb24>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
				  interval = 0;
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <main+0xb50>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
				  pulled_chk = -1;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <main+0xb30>)
 8001982:	f04f 32ff 	mov.w	r2, #4294967295
 8001986:	601a      	str	r2, [r3, #0]
				  mode = NORMAL;
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <main+0xb34>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
	  if(mode==SETTING)
 800198e:	f7ff baf2 	b.w	8000f76 <main+0xde>
 8001992:	bf00      	nop
 8001994:	20000671 	.word	0x20000671
 8001998:	20000658 	.word	0x20000658
 800199c:	20000000 	.word	0x20000000
 80019a0:	cccccccd 	.word	0xcccccccd
 80019a4:	08009470 	.word	0x08009470
 80019a8:	20000674 	.word	0x20000674
 80019ac:	08009484 	.word	0x08009484
 80019b0:	08009498 	.word	0x08009498
 80019b4:	080094ac 	.word	0x080094ac
 80019b8:	08009514 	.word	0x08009514
 80019bc:	200006f1 	.word	0x200006f1
 80019c0:	200006f8 	.word	0x200006f8
 80019c4:	200006f4 	.word	0x200006f4
 80019c8:	20000044 	.word	0x20000044
 80019cc:	20000670 	.word	0x20000670
 80019d0:	08009524 	.word	0x08009524
 80019d4:	200006f0 	.word	0x200006f0
 80019d8:	200006d8 	.word	0x200006d8
 80019dc:	20000008 	.word	0x20000008
 80019e0:	08009538 	.word	0x08009538
 80019e4:	200006dc 	.word	0x200006dc
 80019e8:	2000070c 	.word	0x2000070c

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b094      	sub	sp, #80	; 0x50
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	2230      	movs	r2, #48	; 0x30
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f007 f880 	bl	8008b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	4b29      	ldr	r3, [pc, #164]	; (8001abc <SystemClock_Config+0xd0>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	4a28      	ldr	r2, [pc, #160]	; (8001abc <SystemClock_Config+0xd0>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a20:	4b26      	ldr	r3, [pc, #152]	; (8001abc <SystemClock_Config+0xd0>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <SystemClock_Config+0xd4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <SystemClock_Config+0xd4>)
 8001a36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <SystemClock_Config+0xd4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001a48:	2305      	movs	r3, #5
 8001a4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a52:	2301      	movs	r3, #1
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a56:	2302      	movs	r3, #2
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a60:	2304      	movs	r3, #4
 8001a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a64:	23a8      	movs	r3, #168	; 0xa8
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 fce1 	bl	800543c <HAL_RCC_OscConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a80:	f000 fa90 	bl	8001fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a84:	230f      	movs	r3, #15
 8001a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 ff42 	bl	800592c <HAL_RCC_ClockConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001aae:	f000 fa79 	bl	8001fa4 <Error_Handler>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3750      	adds	r7, #80	; 0x50
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	2047      	movs	r0, #71	; 0x47
 8001ace:	f001 fb66 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ad2:	2047      	movs	r0, #71	; 0x47
 8001ad4:	f001 fb7f 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	2027      	movs	r0, #39	; 0x27
 8001ade:	f001 fb5e 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ae2:	2027      	movs	r0, #39	; 0x27
 8001ae4:	f001 fb77 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	2028      	movs	r0, #40	; 0x28
 8001aee:	f001 fb56 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001af2:	2028      	movs	r0, #40	; 0x28
 8001af4:	f001 fb6f 	bl	80031d6 <HAL_NVIC_EnableIRQ>
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <getButton>:

/* USER CODE BEGIN 4 */
_Direction getButton()
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
	if(XY[0] < 300)
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <getButton+0x48>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b08:	d201      	bcs.n	8001b0e <getButton+0x12>
		return RIGHT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e015      	b.n	8001b3a <getButton+0x3e>
	else if(XY[0] > 4000)
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <getButton+0x48>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b16:	d901      	bls.n	8001b1c <getButton+0x20>
		return LEFT;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	e00e      	b.n	8001b3a <getButton+0x3e>
	else if(XY[1] > 4000)
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <getButton+0x48>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b24:	d901      	bls.n	8001b2a <getButton+0x2e>
		return UP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e007      	b.n	8001b3a <getButton+0x3e>
	else if(XY[1] < 300)
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <getButton+0x48>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b32:	d201      	bcs.n	8001b38 <getButton+0x3c>
		return DOWN;
 8001b34:	2302      	movs	r3, #2
 8001b36:	e000      	b.n	8001b3a <getButton+0x3e>
	else
	{
		return NONE;
 8001b38:	2300      	movs	r3, #0
	}
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000700 	.word	0x20000700

08001b48 <move_cur_time>:

void move_cur_time(RTC_TimeTypeDef *Time, _Direction direction)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
	switch(direction)
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	f200 813b 	bhi.w	8001dd2 <move_cur_time+0x28a>
 8001b5c:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <move_cur_time+0x1c>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001dbd 	.word	0x08001dbd
 8001b68:	08001baf 	.word	0x08001baf
 8001b6c:	08001cbd 	.word	0x08001cbd
 8001b70:	08001b79 	.word	0x08001b79
 8001b74:	08001b97 	.word	0x08001b97
	{
	case RIGHT:
		setmode++;
 8001b78:	4b92      	ldr	r3, [pc, #584]	; (8001dc4 <move_cur_time+0x27c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	4b90      	ldr	r3, [pc, #576]	; (8001dc4 <move_cur_time+0x27c>)
 8001b82:	701a      	strb	r2, [r3, #0]
		if(setmode > SECOND_O) setmode = SECOND_O;
 8001b84:	4b8f      	ldr	r3, [pc, #572]	; (8001dc4 <move_cur_time+0x27c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b06      	cmp	r3, #6
 8001b8a:	f240 8119 	bls.w	8001dc0 <move_cur_time+0x278>
 8001b8e:	4b8d      	ldr	r3, [pc, #564]	; (8001dc4 <move_cur_time+0x27c>)
 8001b90:	2206      	movs	r2, #6
 8001b92:	701a      	strb	r2, [r3, #0]
		break;
 8001b94:	e114      	b.n	8001dc0 <move_cur_time+0x278>
	case LEFT:
		if(setmode > AMPM) setmode--;
 8001b96:	4b8b      	ldr	r3, [pc, #556]	; (8001dc4 <move_cur_time+0x27c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8114 	beq.w	8001dc8 <move_cur_time+0x280>
 8001ba0:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <move_cur_time+0x27c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b86      	ldr	r3, [pc, #536]	; (8001dc4 <move_cur_time+0x27c>)
 8001baa:	701a      	strb	r2, [r3, #0]
		break;
 8001bac:	e10c      	b.n	8001dc8 <move_cur_time+0x280>
	case UP:
		if(setmode==AMPM)
 8001bae:	4b85      	ldr	r3, [pc, #532]	; (8001dc4 <move_cur_time+0x27c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <move_cur_time+0x7e>
		{
			Time->TimeFormat ^= 1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	78db      	ldrb	r3, [r3, #3]
 8001bba:	f083 0301 	eor.w	r3, r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	70da      	strb	r2, [r3, #3]
		else if(setmode==SECOND_O)
		{
			Time->Seconds++;
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
		}
		break;
 8001bc4:	e102      	b.n	8001dcc <move_cur_time+0x284>
		else if(setmode==HOUR_T)
 8001bc6:	4b7f      	ldr	r3, [pc, #508]	; (8001dc4 <move_cur_time+0x27c>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d112      	bne.n	8001bf4 <move_cur_time+0xac>
			Time->Hours+=10;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	330a      	adds	r3, #10
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d004      	beq.n	8001bec <move_cur_time+0xa4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	f240 80f0 	bls.w	8001dcc <move_cur_time+0x284>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
		break;
 8001bf2:	e0eb      	b.n	8001dcc <move_cur_time+0x284>
		else if(setmode==HOUR_O)
 8001bf4:	4b73      	ldr	r3, [pc, #460]	; (8001dc4 <move_cur_time+0x27c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d112      	bne.n	8001c22 <move_cur_time+0xda>
			Time->Hours++;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <move_cur_time+0xd2>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	f240 80d9 	bls.w	8001dcc <move_cur_time+0x284>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
		break;
 8001c20:	e0d4      	b.n	8001dcc <move_cur_time+0x284>
		else if(setmode==MINUTE_T)
 8001c22:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <move_cur_time+0x27c>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d10e      	bne.n	8001c48 <move_cur_time+0x100>
			Time->Minutes+=10;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	785b      	ldrb	r3, [r3, #1]
 8001c2e:	330a      	adds	r3, #10
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 0;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	2b3b      	cmp	r3, #59	; 0x3b
 8001c3c:	f240 80c6 	bls.w	8001dcc <move_cur_time+0x284>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	705a      	strb	r2, [r3, #1]
		break;
 8001c46:	e0c1      	b.n	8001dcc <move_cur_time+0x284>
		else if(setmode==MINUTE_O)
 8001c48:	4b5e      	ldr	r3, [pc, #376]	; (8001dc4 <move_cur_time+0x27c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d10e      	bne.n	8001c6e <move_cur_time+0x126>
			Time->Minutes++;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	3301      	adds	r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 0;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	785b      	ldrb	r3, [r3, #1]
 8001c60:	2b3b      	cmp	r3, #59	; 0x3b
 8001c62:	f240 80b3 	bls.w	8001dcc <move_cur_time+0x284>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	705a      	strb	r2, [r3, #1]
		break;
 8001c6c:	e0ae      	b.n	8001dcc <move_cur_time+0x284>
		else if(setmode==SECOND_T)
 8001c6e:	4b55      	ldr	r3, [pc, #340]	; (8001dc4 <move_cur_time+0x27c>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d10e      	bne.n	8001c94 <move_cur_time+0x14c>
			Time->Seconds+=10;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	789b      	ldrb	r3, [r3, #2]
 8001c7a:	330a      	adds	r3, #10
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	789b      	ldrb	r3, [r3, #2]
 8001c86:	2b3b      	cmp	r3, #59	; 0x3b
 8001c88:	f240 80a0 	bls.w	8001dcc <move_cur_time+0x284>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	709a      	strb	r2, [r3, #2]
		break;
 8001c92:	e09b      	b.n	8001dcc <move_cur_time+0x284>
		else if(setmode==SECOND_O)
 8001c94:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <move_cur_time+0x27c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	f040 8097 	bne.w	8001dcc <move_cur_time+0x284>
			Time->Seconds++;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	789b      	ldrb	r3, [r3, #2]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	789b      	ldrb	r3, [r3, #2]
 8001cae:	2b3b      	cmp	r3, #59	; 0x3b
 8001cb0:	f240 808c 	bls.w	8001dcc <move_cur_time+0x284>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	709a      	strb	r2, [r3, #2]
		break;
 8001cba:	e087      	b.n	8001dcc <move_cur_time+0x284>
	case DOWN:
		if(setmode==AMPM)
 8001cbc:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <move_cur_time+0x27c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d107      	bne.n	8001cd4 <move_cur_time+0x18c>
		{
			Time->TimeFormat ^= 1;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	78db      	ldrb	r3, [r3, #3]
 8001cc8:	f083 0301 	eor.w	r3, r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	70da      	strb	r2, [r3, #3]
		else if(setmode==SECOND_O)
		{
			Time->Seconds--;
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
		}
		break;
 8001cd2:	e07d      	b.n	8001dd0 <move_cur_time+0x288>
		else if(setmode==HOUR_T)
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <move_cur_time+0x27c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d111      	bne.n	8001d00 <move_cur_time+0x1b8>
			Time->Hours-=10;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	3b0a      	subs	r3, #10
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 12;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <move_cur_time+0x1b0>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b0c      	cmp	r3, #12
 8001cf6:	d96b      	bls.n	8001dd0 <move_cur_time+0x288>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	701a      	strb	r2, [r3, #0]
		break;
 8001cfe:	e067      	b.n	8001dd0 <move_cur_time+0x288>
		else if(setmode==HOUR_O)
 8001d00:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <move_cur_time+0x27c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d111      	bne.n	8001d2c <move_cur_time+0x1e4>
			Time->Hours--;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 12;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <move_cur_time+0x1dc>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d955      	bls.n	8001dd0 <move_cur_time+0x288>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	220c      	movs	r2, #12
 8001d28:	701a      	strb	r2, [r3, #0]
		break;
 8001d2a:	e051      	b.n	8001dd0 <move_cur_time+0x288>
		else if(setmode==MINUTE_T)
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <move_cur_time+0x27c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d10d      	bne.n	8001d50 <move_cur_time+0x208>
			Time->Minutes-=10;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	3b0a      	subs	r3, #10
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 59;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	785b      	ldrb	r3, [r3, #1]
 8001d44:	2b3b      	cmp	r3, #59	; 0x3b
 8001d46:	d943      	bls.n	8001dd0 <move_cur_time+0x288>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	223b      	movs	r2, #59	; 0x3b
 8001d4c:	705a      	strb	r2, [r3, #1]
		break;
 8001d4e:	e03f      	b.n	8001dd0 <move_cur_time+0x288>
		else if(setmode==MINUTE_O)
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <move_cur_time+0x27c>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d10d      	bne.n	8001d74 <move_cur_time+0x22c>
			Time->Minutes--;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	785b      	ldrb	r3, [r3, #1]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 59;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	2b3b      	cmp	r3, #59	; 0x3b
 8001d6a:	d931      	bls.n	8001dd0 <move_cur_time+0x288>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	223b      	movs	r2, #59	; 0x3b
 8001d70:	705a      	strb	r2, [r3, #1]
		break;
 8001d72:	e02d      	b.n	8001dd0 <move_cur_time+0x288>
		else if(setmode==SECOND_T)
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <move_cur_time+0x27c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d10d      	bne.n	8001d98 <move_cur_time+0x250>
			Time->Seconds-=10;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	789b      	ldrb	r3, [r3, #2]
 8001d80:	3b0a      	subs	r3, #10
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	789b      	ldrb	r3, [r3, #2]
 8001d8c:	2b3b      	cmp	r3, #59	; 0x3b
 8001d8e:	d91f      	bls.n	8001dd0 <move_cur_time+0x288>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	223b      	movs	r2, #59	; 0x3b
 8001d94:	709a      	strb	r2, [r3, #2]
		break;
 8001d96:	e01b      	b.n	8001dd0 <move_cur_time+0x288>
		else if(setmode==SECOND_O)
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <move_cur_time+0x27c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b06      	cmp	r3, #6
 8001d9e:	d117      	bne.n	8001dd0 <move_cur_time+0x288>
			Time->Seconds--;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	789b      	ldrb	r3, [r3, #2]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	789b      	ldrb	r3, [r3, #2]
 8001db0:	2b3b      	cmp	r3, #59	; 0x3b
 8001db2:	d90d      	bls.n	8001dd0 <move_cur_time+0x288>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	223b      	movs	r2, #59	; 0x3b
 8001db8:	709a      	strb	r2, [r3, #2]
		break;
 8001dba:	e009      	b.n	8001dd0 <move_cur_time+0x288>
	case NONE:
		break;
 8001dbc:	bf00      	nop
 8001dbe:	e008      	b.n	8001dd2 <move_cur_time+0x28a>
		break;
 8001dc0:	bf00      	nop
 8001dc2:	e006      	b.n	8001dd2 <move_cur_time+0x28a>
 8001dc4:	20000671 	.word	0x20000671
		break;
 8001dc8:	bf00      	nop
 8001dca:	e002      	b.n	8001dd2 <move_cur_time+0x28a>
		break;
 8001dcc:	bf00      	nop
 8001dce:	e000      	b.n	8001dd2 <move_cur_time+0x28a>
		break;
 8001dd0:	bf00      	nop
	}
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <move_cur_bell>:

void move_cur_bell(_Direction direction)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	switch(direction)
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d82c      	bhi.n	8001e4a <move_cur_bell+0x6a>
 8001df0:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <move_cur_bell+0x18>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e49 	.word	0x08001e49
 8001dfc:	08001e0d 	.word	0x08001e0d
 8001e00:	08001e2b 	.word	0x08001e2b
 8001e04:	08001e49 	.word	0x08001e49
 8001e08:	08001e49 	.word	0x08001e49
	case LEFT:
		break;
	case NONE:
		break;
	case UP:
		if(belltype < 2) belltype++;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <move_cur_bell+0x78>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d806      	bhi.n	8001e22 <move_cur_bell+0x42>
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <move_cur_bell+0x78>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <move_cur_bell+0x78>)
 8001e1e:	701a      	strb	r2, [r3, #0]
		else belltype=0;
		break;
 8001e20:	e013      	b.n	8001e4a <move_cur_bell+0x6a>
		else belltype=0;
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <move_cur_bell+0x78>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
		break;
 8001e28:	e00f      	b.n	8001e4a <move_cur_bell+0x6a>
	case DOWN:
		if(belltype > 0) belltype--;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <move_cur_bell+0x78>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d006      	beq.n	8001e40 <move_cur_bell+0x60>
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <move_cur_bell+0x78>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <move_cur_bell+0x78>)
 8001e3c:	701a      	strb	r2, [r3, #0]
		else belltype=2;
		break;
 8001e3e:	e004      	b.n	8001e4a <move_cur_bell+0x6a>
		else belltype=2;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <move_cur_bell+0x78>)
 8001e42:	2202      	movs	r2, #2
 8001e44:	701a      	strb	r2, [r3, #0]
		break;
 8001e46:	e000      	b.n	8001e4a <move_cur_bell+0x6a>
		break;
 8001e48:	bf00      	nop
	}
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	200006d8 	.word	0x200006d8

08001e5c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e6c:	d14c      	bne.n	8001f08 <HAL_GPIO_EXTI_Callback+0xac>
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8001e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e72:	4827      	ldr	r0, [pc, #156]	; (8001f10 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001e74:	f002 fcb4 	bl	80047e0 <HAL_GPIO_ReadPin>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d020      	beq.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x64>
		{
			user_pulled_flag = 0;
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
			user_pressed_flag = 1;
 8001e84:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
			old_tick=HAL_GetTick();
 8001e8a:	f000 fc5b 	bl	8002744 <HAL_GetTick>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e92:	6013      	str	r3, [r2, #0]
			current_tick=HAL_GetTick();
 8001e94:	f000 fc56 	bl	8002744 <HAL_GetTick>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e9c:	6013      	str	r3, [r2, #0]

			if (mode == NORMAL)
 8001e9e:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d130      	bne.n	8001f08 <HAL_GPIO_EXTI_Callback+0xac>
			{
				interval_chk[0] = HAL_GetTick();
 8001ea6:	f000 fc4d 	bl	8002744 <HAL_GetTick>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001eae:	6013      	str	r3, [r2, #0]

				interval = interval_chk[0] - interval_chk[1];
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001ebc:	6013      	str	r3, [r2, #0]
					double_click = 1;
				}
			}
		}
	}
}
 8001ebe:	e023      	b.n	8001f08 <HAL_GPIO_EXTI_Callback+0xac>
			user_pulled_flag = 1;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
			user_pressed_flag = 0;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
			if (mode == NORMAL)
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d119      	bne.n	8001f08 <HAL_GPIO_EXTI_Callback+0xac>
				interval_chk[1] = HAL_GetTick();
 8001ed4:	f000 fc36 	bl	8002744 <HAL_GetTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001edc:	6053      	str	r3, [r2, #4]
				pulled_chk++;
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001ee6:	6013      	str	r3, [r2, #0]
				if(interval > 0 && interval < 300 && pulled_chk > 1)
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00b      	beq.n	8001f08 <HAL_GPIO_EXTI_Callback+0xac>
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ef8:	d206      	bcs.n	8001f08 <HAL_GPIO_EXTI_Callback+0xac>
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	dd02      	ble.n	8001f08 <HAL_GPIO_EXTI_Callback+0xac>
					double_click = 1;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40020800 	.word	0x40020800
 8001f14:	200006f2 	.word	0x200006f2
 8001f18:	200006f1 	.word	0x200006f1
 8001f1c:	200006f4 	.word	0x200006f4
 8001f20:	200006f8 	.word	0x200006f8
 8001f24:	20000670 	.word	0x20000670
 8001f28:	20000710 	.word	0x20000710
 8001f2c:	2000070c 	.word	0x2000070c
 8001f30:	20000044 	.word	0x20000044
 8001f34:	20000708 	.word	0x20000708

08001f38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_UART_RxCpltCallback+0x54>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10b      	bne.n	8001f62 <HAL_UART_RxCpltCallback+0x2a>
	{
		HAL_UART_Transmit(&huart6, &pc_data, sizeof(pc_data), 10);
 8001f4a:	230a      	movs	r3, #10
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4910      	ldr	r1, [pc, #64]	; (8001f90 <HAL_UART_RxCpltCallback+0x58>)
 8001f50:	4810      	ldr	r0, [pc, #64]	; (8001f94 <HAL_UART_RxCpltCallback+0x5c>)
 8001f52:	f005 fa88 	bl	8007466 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, &pc_data, sizeof(pc_data));
 8001f56:	2201      	movs	r2, #1
 8001f58:	490d      	ldr	r1, [pc, #52]	; (8001f90 <HAL_UART_RxCpltCallback+0x58>)
 8001f5a:	480f      	ldr	r0, [pc, #60]	; (8001f98 <HAL_UART_RxCpltCallback+0x60>)
 8001f5c:	f005 fb15 	bl	800758a <HAL_UART_Receive_IT>
	else if(huart->Instance==USART6)
	{
		HAL_UART_Transmit(&huart3, &bt_data, sizeof(bt_data), 10);
		HAL_UART_Receive_IT(&huart6, &bt_data, sizeof(bt_data));
	}
}
 8001f60:	e00f      	b.n	8001f82 <HAL_UART_RxCpltCallback+0x4a>
	else if(huart->Instance==USART6)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <HAL_UART_RxCpltCallback+0x64>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d10a      	bne.n	8001f82 <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Transmit(&huart3, &bt_data, sizeof(bt_data), 10);
 8001f6c:	230a      	movs	r3, #10
 8001f6e:	2201      	movs	r2, #1
 8001f70:	490b      	ldr	r1, [pc, #44]	; (8001fa0 <HAL_UART_RxCpltCallback+0x68>)
 8001f72:	4809      	ldr	r0, [pc, #36]	; (8001f98 <HAL_UART_RxCpltCallback+0x60>)
 8001f74:	f005 fa77 	bl	8007466 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart6, &bt_data, sizeof(bt_data));
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4909      	ldr	r1, [pc, #36]	; (8001fa0 <HAL_UART_RxCpltCallback+0x68>)
 8001f7c:	4805      	ldr	r0, [pc, #20]	; (8001f94 <HAL_UART_RxCpltCallback+0x5c>)
 8001f7e:	f005 fb04 	bl	800758a <HAL_UART_Receive_IT>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40004800 	.word	0x40004800
 8001f90:	20000718 	.word	0x20000718
 8001f94:	200007cc 	.word	0x200007cc
 8001f98:	20000788 	.word	0x20000788
 8001f9c:	40011400 	.word	0x40011400
 8001fa0:	20000719 	.word	0x20000719

08001fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa8:	b672      	cpsid	i
}
 8001faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fac:	e7fe      	b.n	8001fac <Error_Handler+0x8>
	...

08001fb0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_RTC_Init+0x44>)
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <MX_RTC_Init+0x48>)
 8001fb8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_RTC_Init+0x44>)
 8001fbc:	2240      	movs	r2, #64	; 0x40
 8001fbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MX_RTC_Init+0x44>)
 8001fc2:	227f      	movs	r2, #127	; 0x7f
 8001fc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <MX_RTC_Init+0x44>)
 8001fc8:	22ff      	movs	r2, #255	; 0xff
 8001fca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_RTC_Init+0x44>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <MX_RTC_Init+0x44>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_RTC_Init+0x44>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fde:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <MX_RTC_Init+0x44>)
 8001fe0:	f004 f884 	bl	80060ec <HAL_RTC_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001fea:	f7ff ffdb 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000071c 	.word	0x2000071c
 8001ff8:	40002800 	.word	0x40002800

08001ffc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	; 0x38
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002004:	f107 0308 	add.w	r3, r7, #8
 8002008:	2230      	movs	r2, #48	; 0x30
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f006 fd77 	bl	8008b00 <memset>
  if(rtcHandle->Instance==RTC)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_RTC_MspInit+0x4c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d111      	bne.n	8002040 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800201c:	2320      	movs	r3, #32
 800201e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fe9e 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002036:	f7ff ffb5 	bl	8001fa4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_RTC_MspInit+0x50>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002040:	bf00      	nop
 8002042:	3738      	adds	r7, #56	; 0x38
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40002800 	.word	0x40002800
 800204c:	42470e3c 	.word	0x42470e3c

08002050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_MspInit+0x4c>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_MspInit+0x4c>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_MspInit+0x4c>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_MspInit+0x4c>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <HAL_MspInit+0x4c>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_MspInit+0x4c>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <NMI_Handler+0x4>

080020a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <HardFault_Handler+0x4>

080020ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <MemManage_Handler+0x4>

080020b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <BusFault_Handler+0x4>

080020b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <UsageFault_Handler+0x4>

080020be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ec:	f000 fb16 	bl	800271c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <USART3_IRQHandler+0x10>)
 80020fa:	f005 fa77 	bl	80075ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000788 	.word	0x20000788

08002108 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800210c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002110:	f002 fb98 	bl	8004844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}

08002118 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <DMA2_Stream0_IRQHandler+0x10>)
 800211e:	f001 fa0d 	bl	800353c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000035c 	.word	0x2000035c

0800212c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <USART6_IRQHandler+0x10>)
 8002132:	f005 fa5b 	bl	80075ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200007cc 	.word	0x200007cc

08002140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <_sbrk+0x5c>)
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <_sbrk+0x60>)
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <_sbrk+0x64>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <_sbrk+0x64>)
 800215e:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <_sbrk+0x68>)
 8002160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	429a      	cmp	r2, r3
 800216e:	d207      	bcs.n	8002180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002170:	f006 fcce 	bl	8008b10 <__errno>
 8002174:	4603      	mov	r3, r0
 8002176:	220c      	movs	r2, #12
 8002178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	e009      	b.n	8002194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <_sbrk+0x64>)
 8002190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002192:	68fb      	ldr	r3, [r7, #12]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20030000 	.word	0x20030000
 80021a0:	00000400 	.word	0x00000400
 80021a4:	2000073c 	.word	0x2000073c
 80021a8:	20000e88 	.word	0x20000e88

080021ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <SystemInit+0x20>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <SystemInit+0x20>)
 80021b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08e      	sub	sp, #56	; 0x38
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e4:	f107 0320 	add.w	r3, r7, #32
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
 80021fc:	615a      	str	r2, [r3, #20]
 80021fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002200:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <MX_TIM2_Init+0xe8>)
 8002202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002206:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <MX_TIM2_Init+0xe8>)
 800220a:	22b3      	movs	r2, #179	; 0xb3
 800220c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <MX_TIM2_Init+0xe8>)
 8002210:	2210      	movs	r2, #16
 8002212:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <MX_TIM2_Init+0xe8>)
 8002216:	f240 32e7 	movw	r2, #999	; 0x3e7
 800221a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221c:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <MX_TIM2_Init+0xe8>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <MX_TIM2_Init+0xe8>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002228:	4823      	ldr	r0, [pc, #140]	; (80022b8 <MX_TIM2_Init+0xe8>)
 800222a:	f004 f9d9 	bl	80065e0 <HAL_TIM_Base_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002234:	f7ff feb6 	bl	8001fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800223e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002242:	4619      	mov	r1, r3
 8002244:	481c      	ldr	r0, [pc, #112]	; (80022b8 <MX_TIM2_Init+0xe8>)
 8002246:	f004 fc6d 	bl	8006b24 <HAL_TIM_ConfigClockSource>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002250:	f7ff fea8 	bl	8001fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002254:	4818      	ldr	r0, [pc, #96]	; (80022b8 <MX_TIM2_Init+0xe8>)
 8002256:	f004 fa12 	bl	800667e <HAL_TIM_PWM_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002260:	f7ff fea0 	bl	8001fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800226c:	f107 0320 	add.w	r3, r7, #32
 8002270:	4619      	mov	r1, r3
 8002272:	4811      	ldr	r0, [pc, #68]	; (80022b8 <MX_TIM2_Init+0xe8>)
 8002274:	f005 f82e 	bl	80072d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800227e:	f7ff fe91 	bl	8001fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002282:	2360      	movs	r3, #96	; 0x60
 8002284:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	4807      	ldr	r0, [pc, #28]	; (80022b8 <MX_TIM2_Init+0xe8>)
 800229a:	f004 fb81 	bl	80069a0 <HAL_TIM_PWM_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80022a4:	f7ff fe7e 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022a8:	4803      	ldr	r0, [pc, #12]	; (80022b8 <MX_TIM2_Init+0xe8>)
 80022aa:	f000 f827 	bl	80022fc <HAL_TIM_MspPostInit>

}
 80022ae:	bf00      	nop
 80022b0:	3738      	adds	r7, #56	; 0x38
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000740 	.word	0x20000740

080022bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022cc:	d10d      	bne.n	80022ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_TIM_Base_MspInit+0x3c>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_TIM_Base_MspInit+0x3c>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_TIM_Base_MspInit+0x3c>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231c:	d11d      	bne.n	800235a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_TIM_MspPostInit+0x68>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a0f      	ldr	r2, [pc, #60]	; (8002364 <HAL_TIM_MspPostInit+0x68>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_TIM_MspPostInit+0x68>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800233a:	2320      	movs	r3, #32
 800233c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800234a:	2301      	movs	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	4619      	mov	r1, r3
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <HAL_TIM_MspPostInit+0x6c>)
 8002356:	f002 f897 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800235a:	bf00      	nop
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800
 8002368:	40020000 	.word	0x40020000

0800236c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_USART3_UART_Init+0x4c>)
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <MX_USART3_UART_Init+0x50>)
 8002374:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <MX_USART3_UART_Init+0x4c>)
 8002378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800237c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_USART3_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_USART3_UART_Init+0x4c>)
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_USART3_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_USART3_UART_Init+0x4c>)
 8002392:	220c      	movs	r2, #12
 8002394:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <MX_USART3_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_USART3_UART_Init+0x4c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_USART3_UART_Init+0x4c>)
 80023a4:	f005 f812 	bl	80073cc <HAL_UART_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023ae:	f7ff fdf9 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000788 	.word	0x20000788
 80023bc:	40004800 	.word	0x40004800

080023c0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <MX_USART6_UART_Init+0x4c>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <MX_USART6_UART_Init+0x50>)
 80023c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <MX_USART6_UART_Init+0x4c>)
 80023cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_USART6_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <MX_USART6_UART_Init+0x4c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <MX_USART6_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <MX_USART6_UART_Init+0x4c>)
 80023e6:	220c      	movs	r2, #12
 80023e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <MX_USART6_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <MX_USART6_UART_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_USART6_UART_Init+0x4c>)
 80023f8:	f004 ffe8 	bl	80073cc <HAL_UART_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002402:	f7ff fdcf 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200007cc 	.word	0x200007cc
 8002410:	40011400 	.word	0x40011400

08002414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08c      	sub	sp, #48	; 0x30
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a33      	ldr	r2, [pc, #204]	; (8002500 <HAL_UART_MspInit+0xec>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d12d      	bne.n	8002492 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	4b32      	ldr	r3, [pc, #200]	; (8002504 <HAL_UART_MspInit+0xf0>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a31      	ldr	r2, [pc, #196]	; (8002504 <HAL_UART_MspInit+0xf0>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <HAL_UART_MspInit+0xf0>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_UART_MspInit+0xf0>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a2a      	ldr	r2, [pc, #168]	; (8002504 <HAL_UART_MspInit+0xf0>)
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b28      	ldr	r3, [pc, #160]	; (8002504 <HAL_UART_MspInit+0xf0>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800246e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002480:	2307      	movs	r3, #7
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	4619      	mov	r1, r3
 800248a:	481f      	ldr	r0, [pc, #124]	; (8002508 <HAL_UART_MspInit+0xf4>)
 800248c:	f001 fffc 	bl	8004488 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002490:	e031      	b.n	80024f6 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART6)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_UART_MspInit+0xf8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d12c      	bne.n	80024f6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	4a17      	ldr	r2, [pc, #92]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024a6:	f043 0320 	orr.w	r3, r3, #32
 80024aa:	6453      	str	r3, [r2, #68]	; 0x44
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	4a10      	ldr	r2, [pc, #64]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c6:	6313      	str	r3, [r2, #48]	; 0x30
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80024d4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024e6:	2308      	movs	r3, #8
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ea:	f107 031c 	add.w	r3, r7, #28
 80024ee:	4619      	mov	r1, r3
 80024f0:	4807      	ldr	r0, [pc, #28]	; (8002510 <HAL_UART_MspInit+0xfc>)
 80024f2:	f001 ffc9 	bl	8004488 <HAL_GPIO_Init>
}
 80024f6:	bf00      	nop
 80024f8:	3730      	adds	r7, #48	; 0x30
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40004800 	.word	0x40004800
 8002504:	40023800 	.word	0x40023800
 8002508:	40020c00 	.word	0x40020c00
 800250c:	40011400 	.word	0x40011400
 8002510:	40021800 	.word	0x40021800

08002514 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800251e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002522:	2204      	movs	r2, #4
 8002524:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002528:	2202      	movs	r2, #2
 800252a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002534:	2202      	movs	r2, #2
 8002536:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800253a:	2201      	movs	r2, #1
 800253c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800254c:	2201      	movs	r2, #1
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002558:	f002 fe52 	bl	8005200 <HAL_PCD_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002562:	f7ff fd1f 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000810 	.word	0x20000810

08002570 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002590:	d13f      	bne.n	8002612 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_PCD_MspInit+0xac>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a20      	ldr	r2, [pc, #128]	; (800261c <HAL_PCD_MspInit+0xac>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_PCD_MspInit+0xac>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80025ae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80025b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025c0:	230a      	movs	r3, #10
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	4815      	ldr	r0, [pc, #84]	; (8002620 <HAL_PCD_MspInit+0xb0>)
 80025cc:	f001 ff5c 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80025d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	480e      	ldr	r0, [pc, #56]	; (8002620 <HAL_PCD_MspInit+0xb0>)
 80025e6:	f001 ff4f 	bl	8004488 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_PCD_MspInit+0xac>)
 80025ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ee:	4a0b      	ldr	r2, [pc, #44]	; (800261c <HAL_PCD_MspInit+0xac>)
 80025f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f4:	6353      	str	r3, [r2, #52]	; 0x34
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_PCD_MspInit+0xac>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_PCD_MspInit+0xac>)
 8002600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002604:	6453      	str	r3, [r2, #68]	; 0x44
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_PCD_MspInit+0xac>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40020000 	.word	0x40020000

08002624 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 

  ldr   sp, =_estack       /* set stack pointer */
 8002624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800265c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002628:	480d      	ldr	r0, [pc, #52]	; (8002660 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800262a:	490e      	ldr	r1, [pc, #56]	; (8002664 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800262c:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002630:	e002      	b.n	8002638 <LoopCopyDataInit>

08002632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002636:	3304      	adds	r3, #4

08002638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800263c:	d3f9      	bcc.n	8002632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002640:	4c0b      	ldr	r4, [pc, #44]	; (8002670 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002644:	e001      	b.n	800264a <LoopFillZerobss>

08002646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002648:	3204      	adds	r2, #4

0800264a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800264c:	d3fb      	bcc.n	8002646 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800264e:	f7ff fdad 	bl	80021ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002652:	f006 fa63 	bl	8008b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002656:	f7fe fc1f 	bl	8000e98 <main>
  bx  lr    
 800265a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800265c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002664:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8002668:	080095a8 	.word	0x080095a8
  ldr r2, =_sbss
 800266c:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8002670:	20000e88 	.word	0x20000e88

08002674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <ADC_IRQHandler>
	...

08002678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <HAL_Init+0x40>)
 8002682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <HAL_Init+0x40>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_Init+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <HAL_Init+0x40>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f000 fd71 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f000 f808 	bl	80026bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ac:	f7ff fcd0 	bl	8002050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023c00 	.word	0x40023c00

080026bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_InitTick+0x54>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_InitTick+0x58>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fd89 	bl	80031f2 <HAL_SYSTICK_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00e      	b.n	8002708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d80a      	bhi.n	8002706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f000 fd51 	bl	800319e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026fc:	4a06      	ldr	r2, [pc, #24]	; (8002718 <HAL_InitTick+0x5c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	2000029c 	.word	0x2000029c
 8002714:	200002a4 	.word	0x200002a4
 8002718:	200002a0 	.word	0x200002a0

0800271c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	200002a4 	.word	0x200002a4
 8002740:	20000d1c 	.word	0x20000d1c

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000d1c 	.word	0x20000d1c

0800275c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d005      	beq.n	8002782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_Delay+0x44>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002782:	bf00      	nop
 8002784:	f7ff ffde 	bl	8002744 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f7      	bhi.n	8002784 <HAL_Delay+0x28>
  {
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200002a4 	.word	0x200002a4

080027a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e033      	b.n	8002822 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fd ff42 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d118      	bne.n	8002814 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027ea:	f023 0302 	bic.w	r3, r3, #2
 80027ee:	f043 0202 	orr.w	r2, r3, #2
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa78 	bl	8002cec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
 8002812:	e001      	b.n	8002818 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADC_Start_DMA+0x1e>
 8002846:	2302      	movs	r3, #2
 8002848:	e0e9      	b.n	8002a1e <HAL_ADC_Start_DMA+0x1f2>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d018      	beq.n	8002892 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002870:	4b6d      	ldr	r3, [pc, #436]	; (8002a28 <HAL_ADC_Start_DMA+0x1fc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a6d      	ldr	r2, [pc, #436]	; (8002a2c <HAL_ADC_Start_DMA+0x200>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0c9a      	lsrs	r2, r3, #18
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002884:	e002      	b.n	800288c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	3b01      	subs	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a0:	d107      	bne.n	80028b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	f040 80a1 	bne.w	8002a04 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002900:	d106      	bne.n	8002910 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f023 0206 	bic.w	r2, r3, #6
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
 800290e:	e002      	b.n	8002916 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800291e:	4b44      	ldr	r3, [pc, #272]	; (8002a30 <HAL_ADC_Start_DMA+0x204>)
 8002920:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	4a43      	ldr	r2, [pc, #268]	; (8002a34 <HAL_ADC_Start_DMA+0x208>)
 8002928:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	4a42      	ldr	r2, [pc, #264]	; (8002a38 <HAL_ADC_Start_DMA+0x20c>)
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	4a41      	ldr	r2, [pc, #260]	; (8002a3c <HAL_ADC_Start_DMA+0x210>)
 8002938:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002942:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002952:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002962:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	334c      	adds	r3, #76	; 0x4c
 800296e:	4619      	mov	r1, r3
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f000 fcf8 	bl	8003368 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	2b00      	cmp	r3, #0
 8002982:	d12a      	bne.n	80029da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2d      	ldr	r2, [pc, #180]	; (8002a40 <HAL_ADC_Start_DMA+0x214>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d015      	beq.n	80029ba <HAL_ADC_Start_DMA+0x18e>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2c      	ldr	r2, [pc, #176]	; (8002a44 <HAL_ADC_Start_DMA+0x218>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d105      	bne.n	80029a4 <HAL_ADC_Start_DMA+0x178>
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <HAL_ADC_Start_DMA+0x204>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <HAL_ADC_Start_DMA+0x21c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d136      	bne.n	8002a1c <HAL_ADC_Start_DMA+0x1f0>
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_ADC_Start_DMA+0x204>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d130      	bne.n	8002a1c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d129      	bne.n	8002a1c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	e020      	b.n	8002a1c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a18      	ldr	r2, [pc, #96]	; (8002a40 <HAL_ADC_Start_DMA+0x214>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d11b      	bne.n	8002a1c <HAL_ADC_Start_DMA+0x1f0>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d114      	bne.n	8002a1c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	e00b      	b.n	8002a1c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0210 	orr.w	r2, r3, #16
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	2000029c 	.word	0x2000029c
 8002a2c:	431bde83 	.word	0x431bde83
 8002a30:	40012300 	.word	0x40012300
 8002a34:	08002ee5 	.word	0x08002ee5
 8002a38:	08002f9f 	.word	0x08002f9f
 8002a3c:	08002fbb 	.word	0x08002fbb
 8002a40:	40012000 	.word	0x40012000
 8002a44:	40012100 	.word	0x40012100
 8002a48:	40012200 	.word	0x40012200

08002a4c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1c>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e113      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x244>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d925      	bls.n	8002b00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68d9      	ldr	r1, [r3, #12]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b1e      	subs	r3, #30
 8002aca:	2207      	movs	r2, #7
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68d9      	ldr	r1, [r3, #12]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	4603      	mov	r3, r0
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4403      	add	r3, r0
 8002af2:	3b1e      	subs	r3, #30
 8002af4:	409a      	lsls	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	e022      	b.n	8002b46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6919      	ldr	r1, [r3, #16]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	2207      	movs	r2, #7
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	400a      	ands	r2, r1
 8002b22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6919      	ldr	r1, [r3, #16]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4403      	add	r3, r0
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d824      	bhi.n	8002b98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b05      	subs	r3, #5
 8002b60:	221f      	movs	r2, #31
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	3b05      	subs	r3, #5
 8002b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	635a      	str	r2, [r3, #52]	; 0x34
 8002b96:	e04c      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	d824      	bhi.n	8002bea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	3b23      	subs	r3, #35	; 0x23
 8002bb2:	221f      	movs	r2, #31
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	3b23      	subs	r3, #35	; 0x23
 8002bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
 8002be8:	e023      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b41      	subs	r3, #65	; 0x41
 8002bfc:	221f      	movs	r2, #31
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	400a      	ands	r2, r1
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3b41      	subs	r3, #65	; 0x41
 8002c26:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_ADC_ConfigChannel+0x250>)
 8002c34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a28      	ldr	r2, [pc, #160]	; (8002cdc <HAL_ADC_ConfigChannel+0x254>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d10f      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x1d8>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b12      	cmp	r3, #18
 8002c46:	d10b      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <HAL_ADC_ConfigChannel+0x254>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d12b      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x23a>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <HAL_ADC_ConfigChannel+0x258>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d003      	beq.n	8002c7c <HAL_ADC_ConfigChannel+0x1f4>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b11      	cmp	r3, #17
 8002c7a:	d122      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <HAL_ADC_ConfigChannel+0x258>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d111      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_ADC_ConfigChannel+0x25c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a11      	ldr	r2, [pc, #68]	; (8002ce8 <HAL_ADC_ConfigChannel+0x260>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	0c9a      	lsrs	r2, r3, #18
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cb4:	e002      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f9      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40012300 	.word	0x40012300
 8002cdc:	40012000 	.word	0x40012000
 8002ce0:	10000012 	.word	0x10000012
 8002ce4:	2000029c 	.word	0x2000029c
 8002ce8:	431bde83 	.word	0x431bde83

08002cec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cf4:	4b79      	ldr	r3, [pc, #484]	; (8002edc <ADC_Init+0x1f0>)
 8002cf6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	021a      	lsls	r2, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6899      	ldr	r1, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	4a58      	ldr	r2, [pc, #352]	; (8002ee0 <ADC_Init+0x1f4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d022      	beq.n	8002dca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	e00f      	b.n	8002dea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002de8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0202 	bic.w	r2, r2, #2
 8002df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7e1b      	ldrb	r3, [r3, #24]
 8002e04:	005a      	lsls	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01b      	beq.n	8002e50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	3b01      	subs	r3, #1
 8002e44:	035a      	lsls	r2, r3, #13
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	e007      	b.n	8002e60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	051a      	lsls	r2, r3, #20
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6899      	ldr	r1, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ea2:	025a      	lsls	r2, r3, #9
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	029a      	lsls	r2, r3, #10
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	40012300 	.word	0x40012300
 8002ee0:	0f000001 	.word	0x0f000001

08002ee4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d13c      	bne.n	8002f78 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d12b      	bne.n	8002f70 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d127      	bne.n	8002f70 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d119      	bne.n	8002f70 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0220 	bic.w	r2, r2, #32
 8002f4a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f043 0201 	orr.w	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f7ff fd6b 	bl	8002a4c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f76:	e00e      	b.n	8002f96 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff fd75 	bl	8002a74 <HAL_ADC_ErrorCallback>
}
 8002f8a:	e004      	b.n	8002f96 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff fd57 	bl	8002a60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2240      	movs	r2, #64	; 0x40
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f043 0204 	orr.w	r2, r3, #4
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff fd4a 	bl	8002a74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003154:	d301      	bcc.n	800315a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <SysTick_Config+0x40>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003162:	210f      	movs	r1, #15
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f7ff ff8e 	bl	8003088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <SysTick_Config+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <SysTick_Config+0x40>)
 8003174:	2207      	movs	r2, #7
 8003176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000e010 	.word	0xe000e010

08003188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff29 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff3e 	bl	8003030 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff8e 	bl	80030dc <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5d 	bl	8003088 <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff31 	bl	800304c <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa2 	bl	8003144 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff fa94 	bl	8002744 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e099      	b.n	800335c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003248:	e00f      	b.n	800326a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800324a:	f7ff fa7b 	bl	8002744 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b05      	cmp	r3, #5
 8003256:	d908      	bls.n	800326a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2203      	movs	r2, #3
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e078      	b.n	800335c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e8      	bne.n	800324a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4b38      	ldr	r3, [pc, #224]	; (8003364 <HAL_DMA_Init+0x158>)
 8003284:	4013      	ands	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003296:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d107      	bne.n	80032d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	4313      	orrs	r3, r2
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f023 0307 	bic.w	r3, r3, #7
 80032ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d117      	bne.n	800332e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00e      	beq.n	800332e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fb01 	bl	8003918 <DMA_CheckFifoParam>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2240      	movs	r2, #64	; 0x40
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800332a:	2301      	movs	r3, #1
 800332c:	e016      	b.n	800335c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fab8 	bl	80038ac <DMA_CalcBaseAndBitshift>
 800333c:	4603      	mov	r3, r0
 800333e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	223f      	movs	r2, #63	; 0x3f
 8003346:	409a      	lsls	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	f010803f 	.word	0xf010803f

08003368 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_DMA_Start_IT+0x26>
 800338a:	2302      	movs	r3, #2
 800338c:	e040      	b.n	8003410 <HAL_DMA_Start_IT+0xa8>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d12f      	bne.n	8003402 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fa4a 	bl	8003850 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	223f      	movs	r2, #63	; 0x3f
 80033c2:	409a      	lsls	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0216 	orr.w	r2, r2, #22
 80033d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0208 	orr.w	r2, r2, #8
 80033ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	e005      	b.n	800340e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800340a:	2302      	movs	r3, #2
 800340c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800340e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003426:	f7ff f98d 	bl	8002744 <HAL_GetTick>
 800342a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d008      	beq.n	800344a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e052      	b.n	80034f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0216 	bic.w	r2, r2, #22
 8003458:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003468:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <HAL_DMA_Abort+0x62>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0208 	bic.w	r2, r2, #8
 8003488:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800349a:	e013      	b.n	80034c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800349c:	f7ff f952 	bl	8002744 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b05      	cmp	r3, #5
 80034a8:	d90c      	bls.n	80034c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2203      	movs	r2, #3
 80034b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e015      	b.n	80034f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e4      	bne.n	800349c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d6:	223f      	movs	r2, #63	; 0x3f
 80034d8:	409a      	lsls	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d004      	beq.n	8003516 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e00c      	b.n	8003530 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2205      	movs	r2, #5
 800351a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003548:	4b8e      	ldr	r3, [pc, #568]	; (8003784 <HAL_DMA_IRQHandler+0x248>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a8e      	ldr	r2, [pc, #568]	; (8003788 <HAL_DMA_IRQHandler+0x24c>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	0a9b      	lsrs	r3, r3, #10
 8003554:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	2208      	movs	r2, #8
 8003568:	409a      	lsls	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01a      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0204 	bic.w	r2, r2, #4
 800358e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	2208      	movs	r2, #8
 8003596:	409a      	lsls	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	2201      	movs	r2, #1
 80035ae:	409a      	lsls	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d012      	beq.n	80035de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2201      	movs	r2, #1
 80035cc:	409a      	lsls	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	f043 0202 	orr.w	r2, r3, #2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	2204      	movs	r2, #4
 80035e4:	409a      	lsls	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	2204      	movs	r2, #4
 8003602:	409a      	lsls	r2, r3
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	f043 0204 	orr.w	r2, r3, #4
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003618:	2210      	movs	r2, #16
 800361a:	409a      	lsls	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d043      	beq.n	80036ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d03c      	beq.n	80036ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	2210      	movs	r2, #16
 8003638:	409a      	lsls	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d018      	beq.n	800367e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d108      	bne.n	800366c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d024      	beq.n	80036ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
 800366a:	e01f      	b.n	80036ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
 800367c:	e016      	b.n	80036ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d107      	bne.n	800369c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0208 	bic.w	r2, r2, #8
 800369a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	2220      	movs	r2, #32
 80036b2:	409a      	lsls	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 808f 	beq.w	80037dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8087 	beq.w	80037dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	2220      	movs	r2, #32
 80036d4:	409a      	lsls	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d136      	bne.n	8003754 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0216 	bic.w	r2, r2, #22
 80036f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003704:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_DMA_IRQHandler+0x1da>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0208 	bic.w	r2, r2, #8
 8003724:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	223f      	movs	r2, #63	; 0x3f
 800372c:	409a      	lsls	r2, r3
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003746:	2b00      	cmp	r3, #0
 8003748:	d07e      	beq.n	8003848 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
        }
        return;
 8003752:	e079      	b.n	8003848 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01d      	beq.n	800379e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10d      	bne.n	800378c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	2b00      	cmp	r3, #0
 8003776:	d031      	beq.n	80037dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
 8003780:	e02c      	b.n	80037dc <HAL_DMA_IRQHandler+0x2a0>
 8003782:	bf00      	nop
 8003784:	2000029c 	.word	0x2000029c
 8003788:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d023      	beq.n	80037dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
 800379c:	e01e      	b.n	80037dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10f      	bne.n	80037cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0210 	bic.w	r2, r2, #16
 80037ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d032      	beq.n	800384a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d022      	beq.n	8003836 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2205      	movs	r2, #5
 80037f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	3301      	adds	r3, #1
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	429a      	cmp	r2, r3
 8003812:	d307      	bcc.n	8003824 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f2      	bne.n	8003808 <HAL_DMA_IRQHandler+0x2cc>
 8003822:	e000      	b.n	8003826 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003824:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
 8003846:	e000      	b.n	800384a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003848:	bf00      	nop
    }
  }
}
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800386c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d108      	bne.n	8003890 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800388e:	e007      	b.n	80038a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	60da      	str	r2, [r3, #12]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	3b10      	subs	r3, #16
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <DMA_CalcBaseAndBitshift+0x64>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038c6:	4a13      	ldr	r2, [pc, #76]	; (8003914 <DMA_CalcBaseAndBitshift+0x68>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d909      	bls.n	80038ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	1d1a      	adds	r2, r3, #4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	659a      	str	r2, [r3, #88]	; 0x58
 80038ec:	e007      	b.n	80038fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038f6:	f023 0303 	bic.w	r3, r3, #3
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	aaaaaaab 	.word	0xaaaaaaab
 8003914:	0800955c 	.word	0x0800955c

08003918 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11f      	bne.n	8003972 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d856      	bhi.n	80039e6 <DMA_CheckFifoParam+0xce>
 8003938:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <DMA_CheckFifoParam+0x28>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003951 	.word	0x08003951
 8003944:	08003963 	.word	0x08003963
 8003948:	08003951 	.word	0x08003951
 800394c:	080039e7 	.word	0x080039e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d046      	beq.n	80039ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003960:	e043      	b.n	80039ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800396a:	d140      	bne.n	80039ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003970:	e03d      	b.n	80039ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397a:	d121      	bne.n	80039c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b03      	cmp	r3, #3
 8003980:	d837      	bhi.n	80039f2 <DMA_CheckFifoParam+0xda>
 8003982:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <DMA_CheckFifoParam+0x70>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	08003999 	.word	0x08003999
 800398c:	0800399f 	.word	0x0800399f
 8003990:	08003999 	.word	0x08003999
 8003994:	080039b1 	.word	0x080039b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      break;
 800399c:	e030      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d025      	beq.n	80039f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ae:	e022      	b.n	80039f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039b8:	d11f      	bne.n	80039fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039be:	e01c      	b.n	80039fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d903      	bls.n	80039ce <DMA_CheckFifoParam+0xb6>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d003      	beq.n	80039d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039cc:	e018      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
      break;
 80039d2:	e015      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00e      	beq.n	80039fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e00b      	b.n	80039fe <DMA_CheckFifoParam+0xe6>
      break;
 80039e6:	bf00      	nop
 80039e8:	e00a      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;
 80039ea:	bf00      	nop
 80039ec:	e008      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;
 80039ee:	bf00      	nop
 80039f0:	e006      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;
 80039f2:	bf00      	nop
 80039f4:	e004      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;
 80039f6:	bf00      	nop
 80039f8:	e002      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;   
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <DMA_CheckFifoParam+0xe8>
      break;
 80039fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop

08003a10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e06c      	b.n	8003afc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2223      	movs	r2, #35	; 0x23
 8003a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7fc ff0b 	bl	8000850 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <HAL_ETH_Init+0xf4>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	4a30      	ldr	r2, [pc, #192]	; (8003b04 <HAL_ETH_Init+0xf4>)
 8003a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a48:	6453      	str	r3, [r2, #68]	; 0x44
 8003a4a:	4b2e      	ldr	r3, [pc, #184]	; (8003b04 <HAL_ETH_Init+0xf4>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a56:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <HAL_ETH_Init+0xf8>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4a2b      	ldr	r2, [pc, #172]	; (8003b08 <HAL_ETH_Init+0xf8>)
 8003a5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a60:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003a62:	4b29      	ldr	r3, [pc, #164]	; (8003b08 <HAL_ETH_Init+0xf8>)
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4927      	ldr	r1, [pc, #156]	; (8003b08 <HAL_ETH_Init+0xf8>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003a70:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <HAL_ETH_Init+0xf8>)
 8003a72:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a8c:	f7fe fe5a 	bl	8002744 <HAL_GetTick>
 8003a90:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a92:	e011      	b.n	8003ab8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a94:	f7fe fe56 	bl	8002744 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003aa2:	d909      	bls.n	8003ab8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	22e0      	movs	r2, #224	; 0xe0
 8003ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e021      	b.n	8003afc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e4      	bne.n	8003a94 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f958 	bl	8003d80 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f9ff 	bl	8003ed4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fa55 	bl	8003f86 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f9bd 	bl	8003e64 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2210      	movs	r2, #16
 8003af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40013800 	.word	0x40013800

08003b0c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4b51      	ldr	r3, [pc, #324]	; (8003c68 <ETH_SetMACConfig+0x15c>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	7c1b      	ldrb	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <ETH_SetMACConfig+0x28>
 8003b2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b32:	e000      	b.n	8003b36 <ETH_SetMACConfig+0x2a>
 8003b34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	7c5b      	ldrb	r3, [r3, #17]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <ETH_SetMACConfig+0x38>
 8003b3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b42:	e000      	b.n	8003b46 <ETH_SetMACConfig+0x3a>
 8003b44:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b46:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	7fdb      	ldrb	r3, [r3, #31]
 8003b52:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003b54:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	7f92      	ldrb	r2, [r2, #30]
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	d102      	bne.n	8003b6a <ETH_SetMACConfig+0x5e>
 8003b64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b68:	e000      	b.n	8003b6c <ETH_SetMACConfig+0x60>
 8003b6a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003b6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	7f1b      	ldrb	r3, [r3, #28]
 8003b72:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b74:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	791b      	ldrb	r3, [r3, #4]
 8003b80:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003b82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b8a:	2a00      	cmp	r2, #0
 8003b8c:	d102      	bne.n	8003b94 <ETH_SetMACConfig+0x88>
 8003b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b92:	e000      	b.n	8003b96 <ETH_SetMACConfig+0x8a>
 8003b94:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	7bdb      	ldrb	r3, [r3, #15]
 8003b9c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b9e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ba4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	f7fe fdc8 	bl	800275c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003be2:	4013      	ands	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003bf2:	2a00      	cmp	r2, #0
 8003bf4:	d101      	bne.n	8003bfa <ETH_SetMACConfig+0xee>
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	e000      	b.n	8003bfc <ETH_SetMACConfig+0xf0>
 8003bfa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bfc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003c0a:	2a01      	cmp	r2, #1
 8003c0c:	d101      	bne.n	8003c12 <ETH_SetMACConfig+0x106>
 8003c0e:	2208      	movs	r2, #8
 8003c10:	e000      	b.n	8003c14 <ETH_SetMACConfig+0x108>
 8003c12:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003c14:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003c1c:	2a01      	cmp	r2, #1
 8003c1e:	d101      	bne.n	8003c24 <ETH_SetMACConfig+0x118>
 8003c20:	2204      	movs	r2, #4
 8003c22:	e000      	b.n	8003c26 <ETH_SetMACConfig+0x11a>
 8003c24:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003c2e:	2a01      	cmp	r2, #1
 8003c30:	d101      	bne.n	8003c36 <ETH_SetMACConfig+0x12a>
 8003c32:	2202      	movs	r2, #2
 8003c34:	e000      	b.n	8003c38 <ETH_SetMACConfig+0x12c>
 8003c36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7fe fd83 	bl	800275c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	619a      	str	r2, [r3, #24]
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	ff20810f 	.word	0xff20810f

08003c6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4b3d      	ldr	r3, [pc, #244]	; (8003d7c <ETH_SetDMAConfig+0x110>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	7b1b      	ldrb	r3, [r3, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <ETH_SetDMAConfig+0x2c>
 8003c92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c96:	e000      	b.n	8003c9a <ETH_SetDMAConfig+0x2e>
 8003c98:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	7b5b      	ldrb	r3, [r3, #13]
 8003c9e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ca0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	7f52      	ldrb	r2, [r2, #29]
 8003ca6:	2a00      	cmp	r2, #0
 8003ca8:	d102      	bne.n	8003cb0 <ETH_SetDMAConfig+0x44>
 8003caa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cae:	e000      	b.n	8003cb2 <ETH_SetDMAConfig+0x46>
 8003cb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cb2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	7b9b      	ldrb	r3, [r3, #14]
 8003cb8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003cba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003cc0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	7f1b      	ldrb	r3, [r3, #28]
 8003cc6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003cc8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	7f9b      	ldrb	r3, [r3, #30]
 8003cce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003cd0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003cd6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cde:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d02:	2001      	movs	r0, #1
 8003d04:	f7fe fd2a 	bl	800275c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d10:	461a      	mov	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	791b      	ldrb	r3, [r3, #4]
 8003d1a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d20:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003d26:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d2c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d34:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003d36:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d3e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d44:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d52:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d60:	2001      	movs	r0, #1
 8003d62:	f7fe fcfb 	bl	800275c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6013      	str	r3, [r2, #0]
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	f8de3f23 	.word	0xf8de3f23

08003d80 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b0a6      	sub	sp, #152	; 0x98
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003d94:	2300      	movs	r3, #0
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003de2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003de6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003de8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003df4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fe86 	bl	8003b0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003e00:	2301      	movs	r3, #1
 8003e02:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003e22:	2300      	movs	r3, #0
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e34:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e3a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e50:	f107 0308 	add.w	r3, r7, #8
 8003e54:	4619      	mov	r1, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ff08 	bl	8003c6c <ETH_SetDMAConfig>
}
 8003e5c:	bf00      	nop
 8003e5e:	3798      	adds	r7, #152	; 0x98
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3305      	adds	r3, #5
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	3204      	adds	r2, #4
 8003e7c:	7812      	ldrb	r2, [r2, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <ETH_MACAddressConfig+0x68>)
 8003e86:	4413      	add	r3, r2
 8003e88:	461a      	mov	r2, r3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3303      	adds	r3, #3
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	061a      	lsls	r2, r3, #24
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3302      	adds	r3, #2
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	7812      	ldrb	r2, [r2, #0]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <ETH_MACAddressConfig+0x6c>)
 8003eb6:	4413      	add	r3, r2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	6013      	str	r3, [r2, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40028040 	.word	0x40028040
 8003ed0:	40028044 	.word	0x40028044

08003ed4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e03e      	b.n	8003f60 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68d9      	ldr	r1, [r3, #12]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	3206      	adds	r2, #6
 8003f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d80c      	bhi.n	8003f44 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68d9      	ldr	r1, [r3, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	440b      	add	r3, r1
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	e004      	b.n	8003f4e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d9bd      	bls.n	8003ee2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f78:	611a      	str	r2, [r3, #16]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e046      	b.n	8004022 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6919      	ldr	r1, [r3, #16]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	440b      	add	r3, r1
 8003fa4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003fd0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003fd8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	3212      	adds	r2, #18
 8003fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d80c      	bhi.n	8004012 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6919      	ldr	r1, [r3, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	440b      	add	r3, r1
 800400a:	461a      	mov	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	60da      	str	r2, [r3, #12]
 8004010:	e004      	b.n	800401c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3301      	adds	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b03      	cmp	r3, #3
 8004026:	d9b5      	bls.n	8003f94 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004052:	60da      	str	r2, [r3, #12]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004072:	4b23      	ldr	r3, [pc, #140]	; (8004100 <HAL_FLASH_Program+0xa0>)
 8004074:	7e1b      	ldrb	r3, [r3, #24]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_FLASH_Program+0x1e>
 800407a:	2302      	movs	r3, #2
 800407c:	e03b      	b.n	80040f6 <HAL_FLASH_Program+0x96>
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <HAL_FLASH_Program+0xa0>)
 8004080:	2201      	movs	r2, #1
 8004082:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004084:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004088:	f000 f870 	bl	800416c <FLASH_WaitForLastOperation>
 800408c:	4603      	mov	r3, r0
 800408e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d12b      	bne.n	80040ee <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d105      	bne.n	80040a8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800409c:	783b      	ldrb	r3, [r7, #0]
 800409e:	4619      	mov	r1, r3
 80040a0:	68b8      	ldr	r0, [r7, #8]
 80040a2:	f000 f91b 	bl	80042dc <FLASH_Program_Byte>
 80040a6:	e016      	b.n	80040d6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d105      	bne.n	80040ba <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80040ae:	883b      	ldrh	r3, [r7, #0]
 80040b0:	4619      	mov	r1, r3
 80040b2:	68b8      	ldr	r0, [r7, #8]
 80040b4:	f000 f8ee 	bl	8004294 <FLASH_Program_HalfWord>
 80040b8:	e00d      	b.n	80040d6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d105      	bne.n	80040cc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	68b8      	ldr	r0, [r7, #8]
 80040c6:	f000 f8c3 	bl	8004250 <FLASH_Program_Word>
 80040ca:	e004      	b.n	80040d6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80040cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040d0:	68b8      	ldr	r0, [r7, #8]
 80040d2:	f000 f88b 	bl	80041ec <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040da:	f000 f847 	bl	800416c <FLASH_WaitForLastOperation>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80040e2:	4b08      	ldr	r3, [pc, #32]	; (8004104 <HAL_FLASH_Program+0xa4>)
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	4a07      	ldr	r2, [pc, #28]	; (8004104 <HAL_FLASH_Program+0xa4>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80040ee:	4b04      	ldr	r3, [pc, #16]	; (8004100 <HAL_FLASH_Program+0xa0>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000d20 	.word	0x20000d20
 8004104:	40023c00 	.word	0x40023c00

08004108 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004112:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_FLASH_Unlock+0x38>)
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	da0b      	bge.n	8004132 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_FLASH_Unlock+0x38>)
 800411c:	4a09      	ldr	r2, [pc, #36]	; (8004144 <HAL_FLASH_Unlock+0x3c>)
 800411e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004120:	4b07      	ldr	r3, [pc, #28]	; (8004140 <HAL_FLASH_Unlock+0x38>)
 8004122:	4a09      	ldr	r2, [pc, #36]	; (8004148 <HAL_FLASH_Unlock+0x40>)
 8004124:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_FLASH_Unlock+0x38>)
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	da01      	bge.n	8004132 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004132:	79fb      	ldrb	r3, [r7, #7]
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	40023c00 	.word	0x40023c00
 8004144:	45670123 	.word	0x45670123
 8004148:	cdef89ab 	.word	0xcdef89ab

0800414c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_FLASH_Lock+0x1c>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	4a04      	ldr	r2, [pc, #16]	; (8004168 <HAL_FLASH_Lock+0x1c>)
 8004156:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800415a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40023c00 	.word	0x40023c00

0800416c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004178:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <FLASH_WaitForLastOperation+0x78>)
 800417a:	2200      	movs	r2, #0
 800417c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800417e:	f7fe fae1 	bl	8002744 <HAL_GetTick>
 8004182:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004184:	e010      	b.n	80041a8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d00c      	beq.n	80041a8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <FLASH_WaitForLastOperation+0x38>
 8004194:	f7fe fad6 	bl	8002744 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d201      	bcs.n	80041a8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e019      	b.n	80041dc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <FLASH_WaitForLastOperation+0x7c>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e8      	bne.n	8004186 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <FLASH_WaitForLastOperation+0x7c>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <FLASH_WaitForLastOperation+0x7c>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80041c6:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <FLASH_WaitForLastOperation+0x7c>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80041d2:	f000 f8a5 	bl	8004320 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
  
}  
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000d20 	.word	0x20000d20
 80041e8:	40023c00 	.word	0x40023c00

080041ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80041f8:	4b14      	ldr	r3, [pc, #80]	; (800424c <FLASH_Program_DoubleWord+0x60>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	4a13      	ldr	r2, [pc, #76]	; (800424c <FLASH_Program_DoubleWord+0x60>)
 80041fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004202:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <FLASH_Program_DoubleWord+0x60>)
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	4a10      	ldr	r2, [pc, #64]	; (800424c <FLASH_Program_DoubleWord+0x60>)
 800420a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800420e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004210:	4b0e      	ldr	r3, [pc, #56]	; (800424c <FLASH_Program_DoubleWord+0x60>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <FLASH_Program_DoubleWord+0x60>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004222:	f3bf 8f6f 	isb	sy
}
 8004226:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004228:	e9d7 0100 	ldrd	r0, r1, [r7]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	000a      	movs	r2, r1
 8004236:	2300      	movs	r3, #0
 8004238:	68f9      	ldr	r1, [r7, #12]
 800423a:	3104      	adds	r1, #4
 800423c:	4613      	mov	r3, r2
 800423e:	600b      	str	r3, [r1, #0]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40023c00 	.word	0x40023c00

08004250 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800425a:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <FLASH_Program_Word+0x40>)
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	4a0c      	ldr	r2, [pc, #48]	; (8004290 <FLASH_Program_Word+0x40>)
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004264:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <FLASH_Program_Word+0x40>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <FLASH_Program_Word+0x40>)
 800426c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004270:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <FLASH_Program_Word+0x40>)
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	4a06      	ldr	r2, [pc, #24]	; (8004290 <FLASH_Program_Word+0x40>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	601a      	str	r2, [r3, #0]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40023c00 	.word	0x40023c00

08004294 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <FLASH_Program_HalfWord+0x44>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <FLASH_Program_HalfWord+0x44>)
 80042a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <FLASH_Program_HalfWord+0x44>)
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <FLASH_Program_HalfWord+0x44>)
 80042b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <FLASH_Program_HalfWord+0x44>)
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	4a06      	ldr	r2, [pc, #24]	; (80042d8 <FLASH_Program_HalfWord+0x44>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	801a      	strh	r2, [r3, #0]
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40023c00 	.word	0x40023c00

080042dc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <FLASH_Program_Byte+0x40>)
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	4a0b      	ldr	r2, [pc, #44]	; (800431c <FLASH_Program_Byte+0x40>)
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <FLASH_Program_Byte+0x40>)
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <FLASH_Program_Byte+0x40>)
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80042fc:	4b07      	ldr	r3, [pc, #28]	; (800431c <FLASH_Program_Byte+0x40>)
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4a06      	ldr	r2, [pc, #24]	; (800431c <FLASH_Program_Byte+0x40>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	701a      	strb	r2, [r3, #0]
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40023c00 	.word	0x40023c00

08004320 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004324:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004330:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f043 0310 	orr.w	r3, r3, #16
 8004338:	4a2b      	ldr	r2, [pc, #172]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 800433a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800433c:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 800433e:	2210      	movs	r2, #16
 8004340:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004342:	4b28      	ldr	r3, [pc, #160]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800434e:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f043 0308 	orr.w	r3, r3, #8
 8004356:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 8004358:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800435a:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 800435c:	2220      	movs	r2, #32
 800435e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004360:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800436c:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 8004376:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 800437a:	2240      	movs	r2, #64	; 0x40
 800437c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800437e:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f043 0302 	orr.w	r3, r3, #2
 8004392:	4a15      	ldr	r2, [pc, #84]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 8004394:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 8004398:	2280      	movs	r2, #128	; 0x80
 800439a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	4a0d      	ldr	r2, [pc, #52]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 80043b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 80043b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ba:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f043 0320 	orr.w	r3, r3, #32
 80043d0:	4a05      	ldr	r2, [pc, #20]	; (80043e8 <FLASH_SetErrorCode+0xc8>)
 80043d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <FLASH_SetErrorCode+0xc4>)
 80043d6:	2202      	movs	r2, #2
 80043d8:	60da      	str	r2, [r3, #12]
  }
}
 80043da:	bf00      	nop
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40023c00 	.word	0x40023c00
 80043e8:	20000d20 	.word	0x20000d20

080043ec <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e010      	b.n	800442a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d103      	bne.n	8004416 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800440e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e009      	b.n	800442a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d103      	bne.n	8004424 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800441c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e002      	b.n	800442a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004424:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004428:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b0b      	cmp	r3, #11
 800442e:	d902      	bls.n	8004436 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <FLASH_Erase_Sector+0x98>)
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	4a12      	ldr	r2, [pc, #72]	; (8004484 <FLASH_Erase_Sector+0x98>)
 800443c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004440:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004442:	4b10      	ldr	r3, [pc, #64]	; (8004484 <FLASH_Erase_Sector+0x98>)
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	490f      	ldr	r1, [pc, #60]	; (8004484 <FLASH_Erase_Sector+0x98>)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <FLASH_Erase_Sector+0x98>)
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	4a0c      	ldr	r2, [pc, #48]	; (8004484 <FLASH_Erase_Sector+0x98>)
 8004454:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004458:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <FLASH_Erase_Sector+0x98>)
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	4313      	orrs	r3, r2
 8004464:	4a07      	ldr	r2, [pc, #28]	; (8004484 <FLASH_Erase_Sector+0x98>)
 8004466:	f043 0302 	orr.w	r3, r3, #2
 800446a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <FLASH_Erase_Sector+0x98>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <FLASH_Erase_Sector+0x98>)
 8004472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004476:	6113      	str	r3, [r2, #16]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40023c00 	.word	0x40023c00

08004488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800449a:	2300      	movs	r3, #0
 800449c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	e177      	b.n	8004794 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044a4:	2201      	movs	r2, #1
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	429a      	cmp	r2, r3
 80044be:	f040 8166 	bne.w	800478e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d005      	beq.n	80044da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d130      	bne.n	800453c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	2203      	movs	r2, #3
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4013      	ands	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004510:	2201      	movs	r2, #1
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	43db      	mvns	r3, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	f003 0201 	and.w	r2, r3, #1
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b03      	cmp	r3, #3
 8004546:	d017      	beq.n	8004578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d123      	bne.n	80045cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	08da      	lsrs	r2, r3, #3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3208      	adds	r2, #8
 800458c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	220f      	movs	r2, #15
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	08da      	lsrs	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3208      	adds	r2, #8
 80045c6:	69b9      	ldr	r1, [r7, #24]
 80045c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	2203      	movs	r2, #3
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 0203 	and.w	r2, r3, #3
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80c0 	beq.w	800478e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	4b66      	ldr	r3, [pc, #408]	; (80047ac <HAL_GPIO_Init+0x324>)
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	4a65      	ldr	r2, [pc, #404]	; (80047ac <HAL_GPIO_Init+0x324>)
 8004618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800461c:	6453      	str	r3, [r2, #68]	; 0x44
 800461e:	4b63      	ldr	r3, [pc, #396]	; (80047ac <HAL_GPIO_Init+0x324>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800462a:	4a61      	ldr	r2, [pc, #388]	; (80047b0 <HAL_GPIO_Init+0x328>)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	3302      	adds	r3, #2
 8004632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	220f      	movs	r2, #15
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a58      	ldr	r2, [pc, #352]	; (80047b4 <HAL_GPIO_Init+0x32c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d037      	beq.n	80046c6 <HAL_GPIO_Init+0x23e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a57      	ldr	r2, [pc, #348]	; (80047b8 <HAL_GPIO_Init+0x330>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d031      	beq.n	80046c2 <HAL_GPIO_Init+0x23a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a56      	ldr	r2, [pc, #344]	; (80047bc <HAL_GPIO_Init+0x334>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d02b      	beq.n	80046be <HAL_GPIO_Init+0x236>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a55      	ldr	r2, [pc, #340]	; (80047c0 <HAL_GPIO_Init+0x338>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d025      	beq.n	80046ba <HAL_GPIO_Init+0x232>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a54      	ldr	r2, [pc, #336]	; (80047c4 <HAL_GPIO_Init+0x33c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <HAL_GPIO_Init+0x22e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a53      	ldr	r2, [pc, #332]	; (80047c8 <HAL_GPIO_Init+0x340>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d019      	beq.n	80046b2 <HAL_GPIO_Init+0x22a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a52      	ldr	r2, [pc, #328]	; (80047cc <HAL_GPIO_Init+0x344>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_GPIO_Init+0x226>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a51      	ldr	r2, [pc, #324]	; (80047d0 <HAL_GPIO_Init+0x348>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_GPIO_Init+0x222>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a50      	ldr	r2, [pc, #320]	; (80047d4 <HAL_GPIO_Init+0x34c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x21e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4f      	ldr	r2, [pc, #316]	; (80047d8 <HAL_GPIO_Init+0x350>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_GPIO_Init+0x21a>
 800469e:	2309      	movs	r3, #9
 80046a0:	e012      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046a2:	230a      	movs	r3, #10
 80046a4:	e010      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046a6:	2308      	movs	r3, #8
 80046a8:	e00e      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046aa:	2307      	movs	r3, #7
 80046ac:	e00c      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046ae:	2306      	movs	r3, #6
 80046b0:	e00a      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046b2:	2305      	movs	r3, #5
 80046b4:	e008      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046b6:	2304      	movs	r3, #4
 80046b8:	e006      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046ba:	2303      	movs	r3, #3
 80046bc:	e004      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046be:	2302      	movs	r3, #2
 80046c0:	e002      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046c6:	2300      	movs	r3, #0
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	f002 0203 	and.w	r2, r2, #3
 80046ce:	0092      	lsls	r2, r2, #2
 80046d0:	4093      	lsls	r3, r2
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046d8:	4935      	ldr	r1, [pc, #212]	; (80047b0 <HAL_GPIO_Init+0x328>)
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	089b      	lsrs	r3, r3, #2
 80046de:	3302      	adds	r3, #2
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046e6:	4b3d      	ldr	r3, [pc, #244]	; (80047dc <HAL_GPIO_Init+0x354>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800470a:	4a34      	ldr	r2, [pc, #208]	; (80047dc <HAL_GPIO_Init+0x354>)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004710:	4b32      	ldr	r3, [pc, #200]	; (80047dc <HAL_GPIO_Init+0x354>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004734:	4a29      	ldr	r2, [pc, #164]	; (80047dc <HAL_GPIO_Init+0x354>)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800473a:	4b28      	ldr	r3, [pc, #160]	; (80047dc <HAL_GPIO_Init+0x354>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800475e:	4a1f      	ldr	r2, [pc, #124]	; (80047dc <HAL_GPIO_Init+0x354>)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <HAL_GPIO_Init+0x354>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004788:	4a14      	ldr	r2, [pc, #80]	; (80047dc <HAL_GPIO_Init+0x354>)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b0f      	cmp	r3, #15
 8004798:	f67f ae84 	bls.w	80044a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	3724      	adds	r7, #36	; 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40013800 	.word	0x40013800
 80047b4:	40020000 	.word	0x40020000
 80047b8:	40020400 	.word	0x40020400
 80047bc:	40020800 	.word	0x40020800
 80047c0:	40020c00 	.word	0x40020c00
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40021400 	.word	0x40021400
 80047cc:	40021800 	.word	0x40021800
 80047d0:	40021c00 	.word	0x40021c00
 80047d4:	40022000 	.word	0x40022000
 80047d8:	40022400 	.word	0x40022400
 80047dc:	40013c00 	.word	0x40013c00

080047e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	887b      	ldrh	r3, [r7, #2]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
 80047fc:	e001      	b.n	8004802 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047fe:	2300      	movs	r3, #0
 8004800:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004802:	7bfb      	ldrb	r3, [r7, #15]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	807b      	strh	r3, [r7, #2]
 800481c:	4613      	mov	r3, r2
 800481e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004820:	787b      	ldrb	r3, [r7, #1]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004826:	887a      	ldrh	r2, [r7, #2]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800482c:	e003      	b.n	8004836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800482e:	887b      	ldrh	r3, [r7, #2]
 8004830:	041a      	lsls	r2, r3, #16
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	619a      	str	r2, [r3, #24]
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800484e:	4b08      	ldr	r3, [pc, #32]	; (8004870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d006      	beq.n	8004868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800485a:	4a05      	ldr	r2, [pc, #20]	; (8004870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fd fafa 	bl	8001e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40013c00 	.word	0x40013c00

08004874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e12b      	b.n	8004ade <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fc f9f4 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2224      	movs	r2, #36	; 0x24
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0201 	bic.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048d8:	f001 fa20 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 80048dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4a81      	ldr	r2, [pc, #516]	; (8004ae8 <HAL_I2C_Init+0x274>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d807      	bhi.n	80048f8 <HAL_I2C_Init+0x84>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4a80      	ldr	r2, [pc, #512]	; (8004aec <HAL_I2C_Init+0x278>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	bf94      	ite	ls
 80048f0:	2301      	movls	r3, #1
 80048f2:	2300      	movhi	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e006      	b.n	8004906 <HAL_I2C_Init+0x92>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a7d      	ldr	r2, [pc, #500]	; (8004af0 <HAL_I2C_Init+0x27c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	bf94      	ite	ls
 8004900:	2301      	movls	r3, #1
 8004902:	2300      	movhi	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e0e7      	b.n	8004ade <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4a78      	ldr	r2, [pc, #480]	; (8004af4 <HAL_I2C_Init+0x280>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	0c9b      	lsrs	r3, r3, #18
 8004918:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4a6a      	ldr	r2, [pc, #424]	; (8004ae8 <HAL_I2C_Init+0x274>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d802      	bhi.n	8004948 <HAL_I2C_Init+0xd4>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	3301      	adds	r3, #1
 8004946:	e009      	b.n	800495c <HAL_I2C_Init+0xe8>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	4a69      	ldr	r2, [pc, #420]	; (8004af8 <HAL_I2C_Init+0x284>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	099b      	lsrs	r3, r3, #6
 800495a:	3301      	adds	r3, #1
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	430b      	orrs	r3, r1
 8004962:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800496e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	495c      	ldr	r1, [pc, #368]	; (8004ae8 <HAL_I2C_Init+0x274>)
 8004978:	428b      	cmp	r3, r1
 800497a:	d819      	bhi.n	80049b0 <HAL_I2C_Init+0x13c>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1e59      	subs	r1, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	fbb1 f3f3 	udiv	r3, r1, r3
 800498a:	1c59      	adds	r1, r3, #1
 800498c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004990:	400b      	ands	r3, r1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <HAL_I2C_Init+0x138>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1e59      	subs	r1, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80049a4:	3301      	adds	r3, #1
 80049a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049aa:	e051      	b.n	8004a50 <HAL_I2C_Init+0x1dc>
 80049ac:	2304      	movs	r3, #4
 80049ae:	e04f      	b.n	8004a50 <HAL_I2C_Init+0x1dc>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d111      	bne.n	80049dc <HAL_I2C_Init+0x168>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1e58      	subs	r0, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	440b      	add	r3, r1
 80049c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ca:	3301      	adds	r3, #1
 80049cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e012      	b.n	8004a02 <HAL_I2C_Init+0x18e>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	1e58      	subs	r0, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6859      	ldr	r1, [r3, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	0099      	lsls	r1, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f2:	3301      	adds	r3, #1
 80049f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_I2C_Init+0x196>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e022      	b.n	8004a50 <HAL_I2C_Init+0x1dc>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10e      	bne.n	8004a30 <HAL_I2C_Init+0x1bc>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1e58      	subs	r0, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6859      	ldr	r1, [r3, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	440b      	add	r3, r1
 8004a20:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a24:	3301      	adds	r3, #1
 8004a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2e:	e00f      	b.n	8004a50 <HAL_I2C_Init+0x1dc>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1e58      	subs	r0, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	0099      	lsls	r1, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a46:	3301      	adds	r3, #1
 8004a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	6809      	ldr	r1, [r1, #0]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69da      	ldr	r2, [r3, #28]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6911      	ldr	r1, [r2, #16]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68d2      	ldr	r2, [r2, #12]
 8004a8a:	4311      	orrs	r1, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	000186a0 	.word	0x000186a0
 8004aec:	001e847f 	.word	0x001e847f
 8004af0:	003d08ff 	.word	0x003d08ff
 8004af4:	431bde83 	.word	0x431bde83
 8004af8:	10624dd3 	.word	0x10624dd3

08004afc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	461a      	mov	r2, r3
 8004b08:	460b      	mov	r3, r1
 8004b0a:	817b      	strh	r3, [r7, #10]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b10:	f7fd fe18 	bl	8002744 <HAL_GetTick>
 8004b14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	f040 80e0 	bne.w	8004ce4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	2319      	movs	r3, #25
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4970      	ldr	r1, [pc, #448]	; (8004cf0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f964 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e0d3      	b.n	8004ce6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_I2C_Master_Transmit+0x50>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e0cc      	b.n	8004ce6 <HAL_I2C_Master_Transmit+0x1ea>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d007      	beq.n	8004b72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0201 	orr.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2221      	movs	r2, #33	; 0x21
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	893a      	ldrh	r2, [r7, #8]
 8004ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a50      	ldr	r2, [pc, #320]	; (8004cf4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004bb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bb4:	8979      	ldrh	r1, [r7, #10]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f89c 	bl	8004cf8 <I2C_MasterRequestWrite>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e08d      	b.n	8004ce6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004be0:	e066      	b.n	8004cb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	6a39      	ldr	r1, [r7, #32]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f9de 	bl	8004fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00d      	beq.n	8004c0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d107      	bne.n	8004c0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e06b      	b.n	8004ce6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d11b      	bne.n	8004c84 <HAL_I2C_Master_Transmit+0x188>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d017      	beq.n	8004c84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	781a      	ldrb	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	6a39      	ldr	r1, [r7, #32]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f9ce 	bl	800502a <I2C_WaitOnBTFFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00d      	beq.n	8004cb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d107      	bne.n	8004cac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004caa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e01a      	b.n	8004ce6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d194      	bne.n	8004be2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e000      	b.n	8004ce6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ce4:	2302      	movs	r3, #2
  }
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	00100002 	.word	0x00100002
 8004cf4:	ffff0000 	.word	0xffff0000

08004cf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	607a      	str	r2, [r7, #4]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	460b      	mov	r3, r1
 8004d06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d006      	beq.n	8004d22 <I2C_MasterRequestWrite+0x2a>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d003      	beq.n	8004d22 <I2C_MasterRequestWrite+0x2a>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d20:	d108      	bne.n	8004d34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e00b      	b.n	8004d4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	2b12      	cmp	r3, #18
 8004d3a:	d107      	bne.n	8004d4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f84f 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d72:	d103      	bne.n	8004d7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e035      	b.n	8004dec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d88:	d108      	bne.n	8004d9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d8a:	897b      	ldrh	r3, [r7, #10]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d98:	611a      	str	r2, [r3, #16]
 8004d9a:	e01b      	b.n	8004dd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d9c:	897b      	ldrh	r3, [r7, #10]
 8004d9e:	11db      	asrs	r3, r3, #7
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 0306 	and.w	r3, r3, #6
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f063 030f 	orn	r3, r3, #15
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	490e      	ldr	r1, [pc, #56]	; (8004df4 <I2C_MasterRequestWrite+0xfc>)
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f875 	bl	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e010      	b.n	8004dec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dca:	897b      	ldrh	r3, [r7, #10]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4907      	ldr	r1, [pc, #28]	; (8004df8 <I2C_MasterRequestWrite+0x100>)
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f865 	bl	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	00010008 	.word	0x00010008
 8004df8:	00010002 	.word	0x00010002

08004dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e0c:	e025      	b.n	8004e5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d021      	beq.n	8004e5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e16:	f7fd fc95 	bl	8002744 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d116      	bne.n	8004e5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f043 0220 	orr.w	r2, r3, #32
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e023      	b.n	8004ea2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d10d      	bne.n	8004e80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bf0c      	ite	eq
 8004e76:	2301      	moveq	r3, #1
 8004e78:	2300      	movne	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	e00c      	b.n	8004e9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	43da      	mvns	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf0c      	ite	eq
 8004e92:	2301      	moveq	r3, #1
 8004e94:	2300      	movne	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d0b6      	beq.n	8004e0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
 8004eb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eb8:	e051      	b.n	8004f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec8:	d123      	bne.n	8004f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ee2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f043 0204 	orr.w	r2, r3, #4
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e046      	b.n	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d021      	beq.n	8004f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1a:	f7fd fc13 	bl	8002744 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d116      	bne.n	8004f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e020      	b.n	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	0c1b      	lsrs	r3, r3, #16
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d10c      	bne.n	8004f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	43da      	mvns	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4013      	ands	r3, r2
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bf14      	ite	ne
 8004f7a:	2301      	movne	r3, #1
 8004f7c:	2300      	moveq	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	e00b      	b.n	8004f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	43da      	mvns	r2, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bf14      	ite	ne
 8004f94:	2301      	movne	r3, #1
 8004f96:	2300      	moveq	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d18d      	bne.n	8004eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fb4:	e02d      	b.n	8005012 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f878 	bl	80050ac <I2C_IsAcknowledgeFailed>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e02d      	b.n	8005022 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d021      	beq.n	8005012 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fce:	f7fd fbb9 	bl	8002744 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d302      	bcc.n	8004fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d116      	bne.n	8005012 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f043 0220 	orr.w	r2, r3, #32
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e007      	b.n	8005022 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501c:	2b80      	cmp	r3, #128	; 0x80
 800501e:	d1ca      	bne.n	8004fb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005036:	e02d      	b.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f837 	bl	80050ac <I2C_IsAcknowledgeFailed>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e02d      	b.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d021      	beq.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005050:	f7fd fb78 	bl	8002744 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	d302      	bcc.n	8005066 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d116      	bne.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e007      	b.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d1ca      	bne.n	8005038 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c2:	d11b      	bne.n	80050fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	f043 0204 	orr.w	r2, r3, #4
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b20      	cmp	r3, #32
 800511e:	d129      	bne.n	8005174 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2224      	movs	r2, #36	; 0x24
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0210 	bic.w	r2, r2, #16
 8005146:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e000      	b.n	8005176 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005174:	2302      	movs	r3, #2
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b20      	cmp	r3, #32
 800519a:	d12a      	bne.n	80051f2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2224      	movs	r2, #36	; 0x24
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0201 	bic.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80051bc:	89fb      	ldrh	r3, [r7, #14]
 80051be:	f023 030f 	bic.w	r3, r3, #15
 80051c2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	89fb      	ldrh	r3, [r7, #14]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	89fa      	ldrh	r2, [r7, #14]
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005202:	b08f      	sub	sp, #60	; 0x3c
 8005204:	af0a      	add	r7, sp, #40	; 0x28
 8005206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e10f      	b.n	8005432 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d106      	bne.n	8005232 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7fd f99f 	bl	8002570 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2203      	movs	r2, #3
 8005236:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d102      	bne.n	800524c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f003 f994 	bl	800857e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	687e      	ldr	r6, [r7, #4]
 800525e:	466d      	mov	r5, sp
 8005260:	f106 0410 	add.w	r4, r6, #16
 8005264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800526a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800526c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005270:	e885 0003 	stmia.w	r5, {r0, r1}
 8005274:	1d33      	adds	r3, r6, #4
 8005276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005278:	6838      	ldr	r0, [r7, #0]
 800527a:	f003 f91f 	bl	80084bc <USB_CoreInit>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0d0      	b.n	8005432 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2100      	movs	r1, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f003 f982 	bl	80085a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]
 80052a0:	e04a      	b.n	8005338 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	333d      	adds	r3, #61	; 0x3d
 80052b2:	2201      	movs	r2, #1
 80052b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	333c      	adds	r3, #60	; 0x3c
 80052c6:	7bfa      	ldrb	r2, [r7, #15]
 80052c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052ca:	7bfa      	ldrb	r2, [r7, #15]
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	b298      	uxth	r0, r3
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	3344      	adds	r3, #68	; 0x44
 80052de:	4602      	mov	r2, r0
 80052e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052e2:	7bfa      	ldrb	r2, [r7, #15]
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	3340      	adds	r3, #64	; 0x40
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	3348      	adds	r3, #72	; 0x48
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800530a:	7bfa      	ldrb	r2, [r7, #15]
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	334c      	adds	r3, #76	; 0x4c
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3354      	adds	r3, #84	; 0x54
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	3301      	adds	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
 8005338:	7bfa      	ldrb	r2, [r7, #15]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	429a      	cmp	r2, r3
 8005340:	d3af      	bcc.n	80052a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
 8005346:	e044      	b.n	80053d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005348:	7bfa      	ldrb	r2, [r7, #15]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800535e:	7bfa      	ldrb	r2, [r7, #15]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005370:	7bfa      	ldrb	r2, [r7, #15]
 8005372:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005374:	7bfa      	ldrb	r2, [r7, #15]
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800538a:	7bfa      	ldrb	r2, [r7, #15]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053a0:	7bfa      	ldrb	r2, [r7, #15]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053b6:	7bfa      	ldrb	r2, [r7, #15]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	3301      	adds	r3, #1
 80053d0:	73fb      	strb	r3, [r7, #15]
 80053d2:	7bfa      	ldrb	r2, [r7, #15]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d3b5      	bcc.n	8005348 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	687e      	ldr	r6, [r7, #4]
 80053e4:	466d      	mov	r5, sp
 80053e6:	f106 0410 	add.w	r4, r6, #16
 80053ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80053fa:	1d33      	adds	r3, r6, #4
 80053fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053fe:	6838      	ldr	r0, [r7, #0]
 8005400:	f003 f91a 	bl	8008638 <USB_DevInit>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2202      	movs	r2, #2
 800540e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e00d      	b.n	8005432 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f003 fae5 	bl	80089fa <USB_DevDisconnect>

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800543c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e267      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d075      	beq.n	8005546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800545a:	4b88      	ldr	r3, [pc, #544]	; (800567c <HAL_RCC_OscConfig+0x240>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b04      	cmp	r3, #4
 8005464:	d00c      	beq.n	8005480 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005466:	4b85      	ldr	r3, [pc, #532]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800546e:	2b08      	cmp	r3, #8
 8005470:	d112      	bne.n	8005498 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005472:	4b82      	ldr	r3, [pc, #520]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800547a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800547e:	d10b      	bne.n	8005498 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005480:	4b7e      	ldr	r3, [pc, #504]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d05b      	beq.n	8005544 <HAL_RCC_OscConfig+0x108>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d157      	bne.n	8005544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e242      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d106      	bne.n	80054b0 <HAL_RCC_OscConfig+0x74>
 80054a2:	4b76      	ldr	r3, [pc, #472]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a75      	ldr	r2, [pc, #468]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e01d      	b.n	80054ec <HAL_RCC_OscConfig+0xb0>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x98>
 80054ba:	4b70      	ldr	r3, [pc, #448]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a6f      	ldr	r2, [pc, #444]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b6d      	ldr	r3, [pc, #436]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a6c      	ldr	r2, [pc, #432]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e00b      	b.n	80054ec <HAL_RCC_OscConfig+0xb0>
 80054d4:	4b69      	ldr	r3, [pc, #420]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a68      	ldr	r2, [pc, #416]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	4b66      	ldr	r3, [pc, #408]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a65      	ldr	r2, [pc, #404]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80054e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d013      	beq.n	800551c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f7fd f926 	bl	8002744 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054fc:	f7fd f922 	bl	8002744 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b64      	cmp	r3, #100	; 0x64
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e207      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550e:	4b5b      	ldr	r3, [pc, #364]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0xc0>
 800551a:	e014      	b.n	8005546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fd f912 	bl	8002744 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005524:	f7fd f90e 	bl	8002744 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	; 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e1f3      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005536:	4b51      	ldr	r3, [pc, #324]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0xe8>
 8005542:	e000      	b.n	8005546 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d063      	beq.n	800561a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005552:	4b4a      	ldr	r3, [pc, #296]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800555e:	4b47      	ldr	r3, [pc, #284]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005566:	2b08      	cmp	r3, #8
 8005568:	d11c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800556a:	4b44      	ldr	r3, [pc, #272]	; (800567c <HAL_RCC_OscConfig+0x240>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d116      	bne.n	80055a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005576:	4b41      	ldr	r3, [pc, #260]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_RCC_OscConfig+0x152>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d001      	beq.n	800558e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e1c7      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558e:	4b3b      	ldr	r3, [pc, #236]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4937      	ldr	r1, [pc, #220]	; (800567c <HAL_RCC_OscConfig+0x240>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a2:	e03a      	b.n	800561a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d020      	beq.n	80055ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ac:	4b34      	ldr	r3, [pc, #208]	; (8005680 <HAL_RCC_OscConfig+0x244>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fd f8c7 	bl	8002744 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ba:	f7fd f8c3 	bl	8002744 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e1a8      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055cc:	4b2b      	ldr	r3, [pc, #172]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d8:	4b28      	ldr	r3, [pc, #160]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4925      	ldr	r1, [pc, #148]	; (800567c <HAL_RCC_OscConfig+0x240>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]
 80055ec:	e015      	b.n	800561a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ee:	4b24      	ldr	r3, [pc, #144]	; (8005680 <HAL_RCC_OscConfig+0x244>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fd f8a6 	bl	8002744 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055fc:	f7fd f8a2 	bl	8002744 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e187      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560e:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d036      	beq.n	8005694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562e:	4b15      	ldr	r3, [pc, #84]	; (8005684 <HAL_RCC_OscConfig+0x248>)
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fd f886 	bl	8002744 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800563c:	f7fd f882 	bl	8002744 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e167      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564e:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_RCC_OscConfig+0x240>)
 8005650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x200>
 800565a:	e01b      	b.n	8005694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565c:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_RCC_OscConfig+0x248>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005662:	f7fd f86f 	bl	8002744 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005668:	e00e      	b.n	8005688 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800566a:	f7fd f86b 	bl	8002744 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d907      	bls.n	8005688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e150      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
 800567c:	40023800 	.word	0x40023800
 8005680:	42470000 	.word	0x42470000
 8005684:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005688:	4b88      	ldr	r3, [pc, #544]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800568a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ea      	bne.n	800566a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8097 	beq.w	80057d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056a2:	2300      	movs	r3, #0
 80056a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a6:	4b81      	ldr	r3, [pc, #516]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10f      	bne.n	80056d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	4b7d      	ldr	r3, [pc, #500]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	4a7c      	ldr	r2, [pc, #496]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80056bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c0:	6413      	str	r3, [r2, #64]	; 0x40
 80056c2:	4b7a      	ldr	r3, [pc, #488]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ce:	2301      	movs	r3, #1
 80056d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d2:	4b77      	ldr	r3, [pc, #476]	; (80058b0 <HAL_RCC_OscConfig+0x474>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d118      	bne.n	8005710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056de:	4b74      	ldr	r3, [pc, #464]	; (80058b0 <HAL_RCC_OscConfig+0x474>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a73      	ldr	r2, [pc, #460]	; (80058b0 <HAL_RCC_OscConfig+0x474>)
 80056e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ea:	f7fd f82b 	bl	8002744 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f2:	f7fd f827 	bl	8002744 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e10c      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005704:	4b6a      	ldr	r3, [pc, #424]	; (80058b0 <HAL_RCC_OscConfig+0x474>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d106      	bne.n	8005726 <HAL_RCC_OscConfig+0x2ea>
 8005718:	4b64      	ldr	r3, [pc, #400]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	4a63      	ldr	r2, [pc, #396]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	6713      	str	r3, [r2, #112]	; 0x70
 8005724:	e01c      	b.n	8005760 <HAL_RCC_OscConfig+0x324>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b05      	cmp	r3, #5
 800572c:	d10c      	bne.n	8005748 <HAL_RCC_OscConfig+0x30c>
 800572e:	4b5f      	ldr	r3, [pc, #380]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	4a5e      	ldr	r2, [pc, #376]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005734:	f043 0304 	orr.w	r3, r3, #4
 8005738:	6713      	str	r3, [r2, #112]	; 0x70
 800573a:	4b5c      	ldr	r3, [pc, #368]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573e:	4a5b      	ldr	r2, [pc, #364]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	6713      	str	r3, [r2, #112]	; 0x70
 8005746:	e00b      	b.n	8005760 <HAL_RCC_OscConfig+0x324>
 8005748:	4b58      	ldr	r3, [pc, #352]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	4a57      	ldr	r2, [pc, #348]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	6713      	str	r3, [r2, #112]	; 0x70
 8005754:	4b55      	ldr	r3, [pc, #340]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	4a54      	ldr	r2, [pc, #336]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 800575a:	f023 0304 	bic.w	r3, r3, #4
 800575e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d015      	beq.n	8005794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fc ffec 	bl	8002744 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576e:	e00a      	b.n	8005786 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005770:	f7fc ffe8 	bl	8002744 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	; 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e0cb      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005786:	4b49      	ldr	r3, [pc, #292]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0ee      	beq.n	8005770 <HAL_RCC_OscConfig+0x334>
 8005792:	e014      	b.n	80057be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005794:	f7fc ffd6 	bl	8002744 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800579a:	e00a      	b.n	80057b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800579c:	f7fc ffd2 	bl	8002744 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e0b5      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b2:	4b3e      	ldr	r3, [pc, #248]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1ee      	bne.n	800579c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057be:	7dfb      	ldrb	r3, [r7, #23]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d105      	bne.n	80057d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c4:	4b39      	ldr	r3, [pc, #228]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	4a38      	ldr	r2, [pc, #224]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80057ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80a1 	beq.w	800591c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057da:	4b34      	ldr	r3, [pc, #208]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d05c      	beq.n	80058a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d141      	bne.n	8005872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ee:	4b31      	ldr	r3, [pc, #196]	; (80058b4 <HAL_RCC_OscConfig+0x478>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7fc ffa6 	bl	8002744 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fc:	f7fc ffa2 	bl	8002744 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e087      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580e:	4b27      	ldr	r3, [pc, #156]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69da      	ldr	r2, [r3, #28]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	019b      	lsls	r3, r3, #6
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	3b01      	subs	r3, #1
 8005834:	041b      	lsls	r3, r3, #16
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	061b      	lsls	r3, r3, #24
 800583e:	491b      	ldr	r1, [pc, #108]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005840:	4313      	orrs	r3, r2
 8005842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005844:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <HAL_RCC_OscConfig+0x478>)
 8005846:	2201      	movs	r2, #1
 8005848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584a:	f7fc ff7b 	bl	8002744 <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005852:	f7fc ff77 	bl	8002744 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e05c      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005864:	4b11      	ldr	r3, [pc, #68]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f0      	beq.n	8005852 <HAL_RCC_OscConfig+0x416>
 8005870:	e054      	b.n	800591c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <HAL_RCC_OscConfig+0x478>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005878:	f7fc ff64 	bl	8002744 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005880:	f7fc ff60 	bl	8002744 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e045      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005892:	4b06      	ldr	r3, [pc, #24]	; (80058ac <HAL_RCC_OscConfig+0x470>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x444>
 800589e:	e03d      	b.n	800591c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d107      	bne.n	80058b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e038      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
 80058ac:	40023800 	.word	0x40023800
 80058b0:	40007000 	.word	0x40007000
 80058b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058b8:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <HAL_RCC_OscConfig+0x4ec>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d028      	beq.n	8005918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d121      	bne.n	8005918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058de:	429a      	cmp	r2, r3
 80058e0:	d11a      	bne.n	8005918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058e8:	4013      	ands	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d111      	bne.n	8005918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	3b01      	subs	r3, #1
 8005902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005904:	429a      	cmp	r2, r3
 8005906:	d107      	bne.n	8005918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005914:	429a      	cmp	r2, r3
 8005916:	d001      	beq.n	800591c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40023800 	.word	0x40023800

0800592c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0cc      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005940:	4b68      	ldr	r3, [pc, #416]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d90c      	bls.n	8005968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594e:	4b65      	ldr	r3, [pc, #404]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005956:	4b63      	ldr	r3, [pc, #396]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d001      	beq.n	8005968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0b8      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d020      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005980:	4b59      	ldr	r3, [pc, #356]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4a58      	ldr	r2, [pc, #352]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800598a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005998:	4b53      	ldr	r3, [pc, #332]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4a52      	ldr	r2, [pc, #328]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a4:	4b50      	ldr	r3, [pc, #320]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	494d      	ldr	r1, [pc, #308]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d044      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d107      	bne.n	80059da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ca:	4b47      	ldr	r3, [pc, #284]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d119      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e07f      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d003      	beq.n	80059ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d107      	bne.n	80059fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ea:	4b3f      	ldr	r3, [pc, #252]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e06f      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fa:	4b3b      	ldr	r3, [pc, #236]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e067      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a0a:	4b37      	ldr	r3, [pc, #220]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f023 0203 	bic.w	r2, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4934      	ldr	r1, [pc, #208]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a1c:	f7fc fe92 	bl	8002744 <HAL_GetTick>
 8005a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a22:	e00a      	b.n	8005a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a24:	f7fc fe8e 	bl	8002744 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e04f      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 020c 	and.w	r2, r3, #12
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d1eb      	bne.n	8005a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d20c      	bcs.n	8005a74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b22      	ldr	r3, [pc, #136]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a62:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e032      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a80:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4916      	ldr	r1, [pc, #88]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a9e:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	490e      	ldr	r1, [pc, #56]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ab2:	f000 f821 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	091b      	lsrs	r3, r3, #4
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	490a      	ldr	r1, [pc, #40]	; (8005aec <HAL_RCC_ClockConfig+0x1c0>)
 8005ac4:	5ccb      	ldrb	r3, [r1, r3]
 8005ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aca:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <HAL_RCC_ClockConfig+0x1c4>)
 8005acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fc fdf2 	bl	80026bc <HAL_InitTick>

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40023c00 	.word	0x40023c00
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	08009544 	.word	0x08009544
 8005af0:	2000029c 	.word	0x2000029c
 8005af4:	200002a0 	.word	0x200002a0

08005af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005afc:	b094      	sub	sp, #80	; 0x50
 8005afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	647b      	str	r3, [r7, #68]	; 0x44
 8005b04:	2300      	movs	r3, #0
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b08:	2300      	movs	r3, #0
 8005b0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b10:	4b79      	ldr	r3, [pc, #484]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 030c 	and.w	r3, r3, #12
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d00d      	beq.n	8005b38 <HAL_RCC_GetSysClockFreq+0x40>
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	f200 80e1 	bhi.w	8005ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_RCC_GetSysClockFreq+0x34>
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d003      	beq.n	8005b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b2a:	e0db      	b.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b2c:	4b73      	ldr	r3, [pc, #460]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8005b2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b30:	e0db      	b.n	8005cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b32:	4b73      	ldr	r3, [pc, #460]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b36:	e0d8      	b.n	8005cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b38:	4b6f      	ldr	r3, [pc, #444]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b42:	4b6d      	ldr	r3, [pc, #436]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d063      	beq.n	8005c16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b4e:	4b6a      	ldr	r3, [pc, #424]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	099b      	lsrs	r3, r3, #6
 8005b54:	2200      	movs	r2, #0
 8005b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b60:	633b      	str	r3, [r7, #48]	; 0x30
 8005b62:	2300      	movs	r3, #0
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
 8005b66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	462b      	mov	r3, r5
 8005b6e:	f04f 0000 	mov.w	r0, #0
 8005b72:	f04f 0100 	mov.w	r1, #0
 8005b76:	0159      	lsls	r1, r3, #5
 8005b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b7c:	0150      	lsls	r0, r2, #5
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4621      	mov	r1, r4
 8005b84:	1a51      	subs	r1, r2, r1
 8005b86:	6139      	str	r1, [r7, #16]
 8005b88:	4629      	mov	r1, r5
 8005b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b9c:	4659      	mov	r1, fp
 8005b9e:	018b      	lsls	r3, r1, #6
 8005ba0:	4651      	mov	r1, sl
 8005ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ba6:	4651      	mov	r1, sl
 8005ba8:	018a      	lsls	r2, r1, #6
 8005baa:	4651      	mov	r1, sl
 8005bac:	ebb2 0801 	subs.w	r8, r2, r1
 8005bb0:	4659      	mov	r1, fp
 8005bb2:	eb63 0901 	sbc.w	r9, r3, r1
 8005bb6:	f04f 0200 	mov.w	r2, #0
 8005bba:	f04f 0300 	mov.w	r3, #0
 8005bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bca:	4690      	mov	r8, r2
 8005bcc:	4699      	mov	r9, r3
 8005bce:	4623      	mov	r3, r4
 8005bd0:	eb18 0303 	adds.w	r3, r8, r3
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	462b      	mov	r3, r5
 8005bd8:	eb49 0303 	adc.w	r3, r9, r3
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bea:	4629      	mov	r1, r5
 8005bec:	024b      	lsls	r3, r1, #9
 8005bee:	4621      	mov	r1, r4
 8005bf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	024a      	lsls	r2, r1, #9
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bfe:	2200      	movs	r2, #0
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c08:	f7fa fb42 	bl	8000290 <__aeabi_uldivmod>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4613      	mov	r3, r2
 8005c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c14:	e058      	b.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c16:	4b38      	ldr	r3, [pc, #224]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	099b      	lsrs	r3, r3, #6
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	4618      	mov	r0, r3
 8005c20:	4611      	mov	r1, r2
 8005c22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c26:	623b      	str	r3, [r7, #32]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c30:	4642      	mov	r2, r8
 8005c32:	464b      	mov	r3, r9
 8005c34:	f04f 0000 	mov.w	r0, #0
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	0159      	lsls	r1, r3, #5
 8005c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c42:	0150      	lsls	r0, r2, #5
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4641      	mov	r1, r8
 8005c4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c4e:	4649      	mov	r1, r9
 8005c50:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c68:	ebb2 040a 	subs.w	r4, r2, sl
 8005c6c:	eb63 050b 	sbc.w	r5, r3, fp
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	00eb      	lsls	r3, r5, #3
 8005c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c7e:	00e2      	lsls	r2, r4, #3
 8005c80:	4614      	mov	r4, r2
 8005c82:	461d      	mov	r5, r3
 8005c84:	4643      	mov	r3, r8
 8005c86:	18e3      	adds	r3, r4, r3
 8005c88:	603b      	str	r3, [r7, #0]
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	eb45 0303 	adc.w	r3, r5, r3
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	f04f 0300 	mov.w	r3, #0
 8005c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	028b      	lsls	r3, r1, #10
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ca8:	4621      	mov	r1, r4
 8005caa:	028a      	lsls	r2, r1, #10
 8005cac:	4610      	mov	r0, r2
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	61fa      	str	r2, [r7, #28]
 8005cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cbc:	f7fa fae8 	bl	8000290 <__aeabi_uldivmod>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	0c1b      	lsrs	r3, r3, #16
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005cd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ce2:	e002      	b.n	8005cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8005ce6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3750      	adds	r7, #80	; 0x50
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	00f42400 	.word	0x00f42400
 8005d00:	007a1200 	.word	0x007a1200

08005d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d08:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	2000029c 	.word	0x2000029c

08005d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d20:	f7ff fff0 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d24:	4602      	mov	r2, r0
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	0a9b      	lsrs	r3, r3, #10
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	4903      	ldr	r1, [pc, #12]	; (8005d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d32:	5ccb      	ldrb	r3, [r1, r3]
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	08009554 	.word	0x08009554

08005d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d48:	f7ff ffdc 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	0b5b      	lsrs	r3, r3, #13
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4903      	ldr	r1, [pc, #12]	; (8005d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40023800 	.word	0x40023800
 8005d68:	08009554 	.word	0x08009554

08005d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10b      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d105      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d075      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005da0:	4b91      	ldr	r3, [pc, #580]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005da6:	f7fc fccd 	bl	8002744 <HAL_GetTick>
 8005daa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dae:	f7fc fcc9 	bl	8002744 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e189      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dc0:	4b8a      	ldr	r3, [pc, #552]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1f0      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d009      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	019a      	lsls	r2, r3, #6
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	071b      	lsls	r3, r3, #28
 8005de4:	4981      	ldr	r1, [pc, #516]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01f      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005df8:	4b7c      	ldr	r3, [pc, #496]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfe:	0f1b      	lsrs	r3, r3, #28
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	019a      	lsls	r2, r3, #6
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	061b      	lsls	r3, r3, #24
 8005e12:	431a      	orrs	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	071b      	lsls	r3, r3, #28
 8005e18:	4974      	ldr	r1, [pc, #464]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e20:	4b72      	ldr	r3, [pc, #456]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e26:	f023 021f 	bic.w	r2, r3, #31
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	496e      	ldr	r1, [pc, #440]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00d      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	019a      	lsls	r2, r3, #6
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	061b      	lsls	r3, r3, #24
 8005e50:	431a      	orrs	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	071b      	lsls	r3, r3, #28
 8005e58:	4964      	ldr	r1, [pc, #400]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e60:	4b61      	ldr	r3, [pc, #388]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e66:	f7fc fc6d 	bl	8002744 <HAL_GetTick>
 8005e6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e6e:	f7fc fc69 	bl	8002744 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e129      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e80:	4b5a      	ldr	r3, [pc, #360]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d079      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ea4:	4b52      	ldr	r3, [pc, #328]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eaa:	f7fc fc4b 	bl	8002744 <HAL_GetTick>
 8005eae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005eb2:	f7fc fc47 	bl	8002744 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e107      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ec4:	4b49      	ldr	r3, [pc, #292]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed0:	d0ef      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d020      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ede:	4b43      	ldr	r3, [pc, #268]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	0f1b      	lsrs	r3, r3, #28
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	019a      	lsls	r2, r3, #6
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	061b      	lsls	r3, r3, #24
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	071b      	lsls	r3, r3, #28
 8005efe:	493b      	ldr	r1, [pc, #236]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f06:	4b39      	ldr	r3, [pc, #228]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	4934      	ldr	r1, [pc, #208]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01e      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f2c:	4b2f      	ldr	r3, [pc, #188]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f32:	0e1b      	lsrs	r3, r3, #24
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	019a      	lsls	r2, r3, #6
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	061b      	lsls	r3, r3, #24
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	071b      	lsls	r3, r3, #28
 8005f4c:	4927      	ldr	r1, [pc, #156]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f54:	4b25      	ldr	r3, [pc, #148]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	4922      	ldr	r1, [pc, #136]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f6a:	4b21      	ldr	r3, [pc, #132]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f70:	f7fc fbe8 	bl	8002744 <HAL_GetTick>
 8005f74:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f78:	f7fc fbe4 	bl	8002744 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e0a4      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f8a:	4b18      	ldr	r3, [pc, #96]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f96:	d1ef      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 808b 	beq.w	80060bc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	4b10      	ldr	r3, [pc, #64]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	4a0f      	ldr	r2, [pc, #60]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a0b      	ldr	r2, [pc, #44]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fcc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fce:	f7fc fbb9 	bl	8002744 <HAL_GetTick>
 8005fd2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fd4:	e010      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005fd6:	f7fc fbb5 	bl	8002744 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d909      	bls.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e075      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005fe8:	42470068 	.word	0x42470068
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	42470070 	.word	0x42470070
 8005ff4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ff8:	4b38      	ldr	r3, [pc, #224]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0e8      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006004:	4b36      	ldr	r3, [pc, #216]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d02f      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	429a      	cmp	r2, r3
 8006020:	d028      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006022:	4b2f      	ldr	r3, [pc, #188]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800602a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800602c:	4b2d      	ldr	r3, [pc, #180]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800602e:	2201      	movs	r2, #1
 8006030:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006032:	4b2c      	ldr	r3, [pc, #176]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006038:	4a29      	ldr	r2, [pc, #164]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800603e:	4b28      	ldr	r3, [pc, #160]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b01      	cmp	r3, #1
 8006048:	d114      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800604a:	f7fc fb7b 	bl	8002744 <HAL_GetTick>
 800604e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006050:	e00a      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006052:	f7fc fb77 	bl	8002744 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006060:	4293      	cmp	r3, r2
 8006062:	d901      	bls.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e035      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006068:	4b1d      	ldr	r3, [pc, #116]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800606a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0ee      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006080:	d10d      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006082:	4b17      	ldr	r3, [pc, #92]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006096:	4912      	ldr	r1, [pc, #72]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006098:	4313      	orrs	r3, r2
 800609a:	608b      	str	r3, [r1, #8]
 800609c:	e005      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800609e:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	4a0f      	ldr	r2, [pc, #60]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060a8:	6093      	str	r3, [r2, #8]
 80060aa:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b6:	490a      	ldr	r1, [pc, #40]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80060ce:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80060d0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40007000 	.word	0x40007000
 80060e0:	40023800 	.word	0x40023800
 80060e4:	42470e40 	.word	0x42470e40
 80060e8:	424711e0 	.word	0x424711e0

080060ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e066      	b.n	80061d0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	7f5b      	ldrb	r3, [r3, #29]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d105      	bne.n	8006118 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fb ff72 	bl	8001ffc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	22ca      	movs	r2, #202	; 0xca
 8006124:	625a      	str	r2, [r3, #36]	; 0x24
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2253      	movs	r2, #83	; 0x53
 800612c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9c1 	bl	80064b6 <RTC_EnterInitMode>
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d12c      	bne.n	8006198 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800614c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006150:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6899      	ldr	r1, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	68d2      	ldr	r2, [r2, #12]
 8006178:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6919      	ldr	r1, [r3, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	041a      	lsls	r2, r3, #16
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9c8 	bl	8006524 <RTC_ExitInitMode>
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d113      	bne.n	80061c6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	22ff      	movs	r2, #255	; 0xff
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061d8:	b590      	push	{r4, r7, lr}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	7f1b      	ldrb	r3, [r3, #28]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_RTC_SetTime+0x1c>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e087      	b.n	8006304 <HAL_RTC_SetTime+0x12c>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2202      	movs	r2, #2
 80061fe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d126      	bne.n	8006254 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2200      	movs	r2, #0
 8006218:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 f9a5 	bl	800656e <RTC_ByteToBcd2>
 8006224:	4603      	mov	r3, r0
 8006226:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	4618      	mov	r0, r3
 800622e:	f000 f99e 	bl	800656e <RTC_ByteToBcd2>
 8006232:	4603      	mov	r3, r0
 8006234:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006236:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	789b      	ldrb	r3, [r3, #2]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 f996 	bl	800656e <RTC_ByteToBcd2>
 8006242:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006244:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	78db      	ldrb	r3, [r3, #3]
 800624c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e018      	b.n	8006286 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2200      	movs	r2, #0
 8006266:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	785b      	ldrb	r3, [r3, #1]
 8006272:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006274:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800627a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	78db      	ldrb	r3, [r3, #3]
 8006280:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	22ca      	movs	r2, #202	; 0xca
 800628c:	625a      	str	r2, [r3, #36]	; 0x24
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2253      	movs	r2, #83	; 0x53
 8006294:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 f90d 	bl	80064b6 <RTC_EnterInitMode>
 800629c:	4603      	mov	r3, r0
 800629e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80062a0:	7cfb      	ldrb	r3, [r7, #19]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d120      	bne.n	80062e8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80062b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80062b4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6899      	ldr	r1, [r3, #8]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f920 	bl	8006524 <RTC_ExitInitMode>
 80062e4:	4603      	mov	r3, r0
 80062e6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	22ff      	movs	r2, #255	; 0xff
 80062fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	771a      	strb	r2, [r3, #28]

  return status;
 8006302:	7cfb      	ldrb	r3, [r7, #19]
}
 8006304:	4618      	mov	r0, r3
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	bd90      	pop	{r4, r7, pc}

0800630c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800633e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006342:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	0c1b      	lsrs	r3, r3, #16
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	0a1b      	lsrs	r3, r3, #8
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	b2db      	uxtb	r3, r3
 8006368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800636c:	b2da      	uxtb	r2, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	0d9b      	lsrs	r3, r3, #22
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	b2da      	uxtb	r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d11a      	bne.n	80063be <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	4618      	mov	r0, r3
 800638e:	f000 f90b 	bl	80065a8 <RTC_Bcd2ToByte>
 8006392:	4603      	mov	r3, r0
 8006394:	461a      	mov	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 f902 	bl	80065a8 <RTC_Bcd2ToByte>
 80063a4:	4603      	mov	r3, r0
 80063a6:	461a      	mov	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	789b      	ldrb	r3, [r3, #2]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 f8f9 	bl	80065a8 <RTC_Bcd2ToByte>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	0c1b      	lsrs	r3, r3, #16
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	0a1b      	lsrs	r3, r3, #8
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800640a:	b2da      	uxtb	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	0b5b      	lsrs	r3, r3, #13
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	b2da      	uxtb	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d11a      	bne.n	800645c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	78db      	ldrb	r3, [r3, #3]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 f8bc 	bl	80065a8 <RTC_Bcd2ToByte>
 8006430:	4603      	mov	r3, r0
 8006432:	461a      	mov	r2, r3
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f8b3 	bl	80065a8 <RTC_Bcd2ToByte>
 8006442:	4603      	mov	r3, r0
 8006444:	461a      	mov	r2, r3
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	789b      	ldrb	r3, [r3, #2]
 800644e:	4618      	mov	r0, r3
 8006450:	f000 f8aa 	bl	80065a8 <RTC_Bcd2ToByte>
 8006454:	4603      	mov	r3, r0
 8006456:	461a      	mov	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006480:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006482:	f7fc f95f 	bl	8002744 <HAL_GetTick>
 8006486:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006488:	e009      	b.n	800649e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800648a:	f7fc f95b 	bl	8002744 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006498:	d901      	bls.n	800649e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e007      	b.n	80064ae <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0ee      	beq.n	800648a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d122      	bne.n	800651a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064e4:	f7fc f92e 	bl	8002744 <HAL_GetTick>
 80064e8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80064ea:	e00c      	b.n	8006506 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064ec:	f7fc f92a 	bl	8002744 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064fa:	d904      	bls.n	8006506 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2204      	movs	r2, #4
 8006500:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d102      	bne.n	800651a <RTC_EnterInitMode+0x64>
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d1e8      	bne.n	80064ec <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800651a:	7bfb      	ldrb	r3, [r7, #15]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800653e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff ff89 	bl	8006466 <HAL_RTC_WaitForSynchro>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2204      	movs	r2, #4
 800655e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	4603      	mov	r3, r0
 8006576:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800657c:	e005      	b.n	800658a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	3301      	adds	r3, #1
 8006582:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006584:	79fb      	ldrb	r3, [r7, #7]
 8006586:	3b0a      	subs	r3, #10
 8006588:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	2b09      	cmp	r3, #9
 800658e:	d8f6      	bhi.n	800657e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	b2da      	uxtb	r2, r3
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	4313      	orrs	r3, r2
 800659a:	b2db      	uxtb	r3, r3
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4603      	mov	r3, r0
 80065b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	091b      	lsrs	r3, r3, #4
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	0092      	lsls	r2, r2, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	4413      	add	r3, r2
 80065d2:	b2db      	uxtb	r3, r3
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e041      	b.n	8006676 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fb fe58 	bl	80022bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f000 fb48 	bl	8006cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e041      	b.n	8006714 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d106      	bne.n	80066aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f839 	bl	800671c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3304      	adds	r3, #4
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f000 faf9 	bl	8006cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <HAL_TIM_PWM_Start+0x24>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b01      	cmp	r3, #1
 800674a:	bf14      	ite	ne
 800674c:	2301      	movne	r3, #1
 800674e:	2300      	moveq	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	e022      	b.n	800679a <HAL_TIM_PWM_Start+0x6a>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b04      	cmp	r3, #4
 8006758:	d109      	bne.n	800676e <HAL_TIM_PWM_Start+0x3e>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b01      	cmp	r3, #1
 8006764:	bf14      	ite	ne
 8006766:	2301      	movne	r3, #1
 8006768:	2300      	moveq	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	e015      	b.n	800679a <HAL_TIM_PWM_Start+0x6a>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b08      	cmp	r3, #8
 8006772:	d109      	bne.n	8006788 <HAL_TIM_PWM_Start+0x58>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b01      	cmp	r3, #1
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	e008      	b.n	800679a <HAL_TIM_PWM_Start+0x6a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b01      	cmp	r3, #1
 8006792:	bf14      	ite	ne
 8006794:	2301      	movne	r3, #1
 8006796:	2300      	moveq	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e07c      	b.n	800689c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d104      	bne.n	80067b2 <HAL_TIM_PWM_Start+0x82>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b0:	e013      	b.n	80067da <HAL_TIM_PWM_Start+0xaa>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d104      	bne.n	80067c2 <HAL_TIM_PWM_Start+0x92>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c0:	e00b      	b.n	80067da <HAL_TIM_PWM_Start+0xaa>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d104      	bne.n	80067d2 <HAL_TIM_PWM_Start+0xa2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067d0:	e003      	b.n	80067da <HAL_TIM_PWM_Start+0xaa>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2201      	movs	r2, #1
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fd50 	bl	8007288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a2d      	ldr	r2, [pc, #180]	; (80068a4 <HAL_TIM_PWM_Start+0x174>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_TIM_PWM_Start+0xcc>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a2c      	ldr	r2, [pc, #176]	; (80068a8 <HAL_TIM_PWM_Start+0x178>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d101      	bne.n	8006800 <HAL_TIM_PWM_Start+0xd0>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <HAL_TIM_PWM_Start+0xd2>
 8006800:	2300      	movs	r3, #0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006814:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a22      	ldr	r2, [pc, #136]	; (80068a4 <HAL_TIM_PWM_Start+0x174>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d022      	beq.n	8006866 <HAL_TIM_PWM_Start+0x136>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006828:	d01d      	beq.n	8006866 <HAL_TIM_PWM_Start+0x136>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a1f      	ldr	r2, [pc, #124]	; (80068ac <HAL_TIM_PWM_Start+0x17c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d018      	beq.n	8006866 <HAL_TIM_PWM_Start+0x136>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1d      	ldr	r2, [pc, #116]	; (80068b0 <HAL_TIM_PWM_Start+0x180>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <HAL_TIM_PWM_Start+0x136>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1c      	ldr	r2, [pc, #112]	; (80068b4 <HAL_TIM_PWM_Start+0x184>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00e      	beq.n	8006866 <HAL_TIM_PWM_Start+0x136>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <HAL_TIM_PWM_Start+0x178>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d009      	beq.n	8006866 <HAL_TIM_PWM_Start+0x136>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a18      	ldr	r2, [pc, #96]	; (80068b8 <HAL_TIM_PWM_Start+0x188>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d004      	beq.n	8006866 <HAL_TIM_PWM_Start+0x136>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a16      	ldr	r2, [pc, #88]	; (80068bc <HAL_TIM_PWM_Start+0x18c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d111      	bne.n	800688a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b06      	cmp	r3, #6
 8006876:	d010      	beq.n	800689a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006888:	e007      	b.n	800689a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	40010000 	.word	0x40010000
 80068a8:	40010400 	.word	0x40010400
 80068ac:	40000400 	.word	0x40000400
 80068b0:	40000800 	.word	0x40000800
 80068b4:	40000c00 	.word	0x40000c00
 80068b8:	40014000 	.word	0x40014000
 80068bc:	40001800 	.word	0x40001800

080068c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2200      	movs	r2, #0
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fcd8 	bl	8007288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a2e      	ldr	r2, [pc, #184]	; (8006998 <HAL_TIM_PWM_Stop+0xd8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d004      	beq.n	80068ec <HAL_TIM_PWM_Stop+0x2c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a2d      	ldr	r2, [pc, #180]	; (800699c <HAL_TIM_PWM_Stop+0xdc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d101      	bne.n	80068f0 <HAL_TIM_PWM_Stop+0x30>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <HAL_TIM_PWM_Stop+0x32>
 80068f0:	2300      	movs	r3, #0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d017      	beq.n	8006926 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6a1a      	ldr	r2, [r3, #32]
 80068fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006900:	4013      	ands	r3, r2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10f      	bne.n	8006926 <HAL_TIM_PWM_Stop+0x66>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6a1a      	ldr	r2, [r3, #32]
 800690c:	f240 4344 	movw	r3, #1092	; 0x444
 8006910:	4013      	ands	r3, r2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d107      	bne.n	8006926 <HAL_TIM_PWM_Stop+0x66>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006924:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6a1a      	ldr	r2, [r3, #32]
 800692c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006930:	4013      	ands	r3, r2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10f      	bne.n	8006956 <HAL_TIM_PWM_Stop+0x96>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	f240 4344 	movw	r3, #1092	; 0x444
 8006940:	4013      	ands	r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d107      	bne.n	8006956 <HAL_TIM_PWM_Stop+0x96>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <HAL_TIM_PWM_Stop+0xa6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006964:	e013      	b.n	800698e <HAL_TIM_PWM_Stop+0xce>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b04      	cmp	r3, #4
 800696a:	d104      	bne.n	8006976 <HAL_TIM_PWM_Stop+0xb6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006974:	e00b      	b.n	800698e <HAL_TIM_PWM_Stop+0xce>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b08      	cmp	r3, #8
 800697a:	d104      	bne.n	8006986 <HAL_TIM_PWM_Stop+0xc6>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006984:	e003      	b.n	800698e <HAL_TIM_PWM_Stop+0xce>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	40010000 	.word	0x40010000
 800699c:	40010400 	.word	0x40010400

080069a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e0ae      	b.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b0c      	cmp	r3, #12
 80069ca:	f200 809f 	bhi.w	8006b0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	08006a09 	.word	0x08006a09
 80069d8:	08006b0d 	.word	0x08006b0d
 80069dc:	08006b0d 	.word	0x08006b0d
 80069e0:	08006b0d 	.word	0x08006b0d
 80069e4:	08006a49 	.word	0x08006a49
 80069e8:	08006b0d 	.word	0x08006b0d
 80069ec:	08006b0d 	.word	0x08006b0d
 80069f0:	08006b0d 	.word	0x08006b0d
 80069f4:	08006a8b 	.word	0x08006a8b
 80069f8:	08006b0d 	.word	0x08006b0d
 80069fc:	08006b0d 	.word	0x08006b0d
 8006a00:	08006b0d 	.word	0x08006b0d
 8006a04:	08006acb 	.word	0x08006acb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68b9      	ldr	r1, [r7, #8]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f9f0 	bl	8006df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0208 	orr.w	r2, r2, #8
 8006a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0204 	bic.w	r2, r2, #4
 8006a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6999      	ldr	r1, [r3, #24]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	619a      	str	r2, [r3, #24]
      break;
 8006a46:	e064      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fa40 	bl	8006ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6999      	ldr	r1, [r3, #24]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	021a      	lsls	r2, r3, #8
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	619a      	str	r2, [r3, #24]
      break;
 8006a88:	e043      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68b9      	ldr	r1, [r7, #8]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fa95 	bl	8006fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69da      	ldr	r2, [r3, #28]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f042 0208 	orr.w	r2, r2, #8
 8006aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0204 	bic.w	r2, r2, #4
 8006ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69d9      	ldr	r1, [r3, #28]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	61da      	str	r2, [r3, #28]
      break;
 8006ac8:	e023      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fae9 	bl	80070a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69d9      	ldr	r1, [r3, #28]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	021a      	lsls	r2, r3, #8
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	61da      	str	r2, [r3, #28]
      break;
 8006b0a:	e002      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIM_ConfigClockSource+0x1c>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e0b4      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x186>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b78:	d03e      	beq.n	8006bf8 <HAL_TIM_ConfigClockSource+0xd4>
 8006b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7e:	f200 8087 	bhi.w	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b86:	f000 8086 	beq.w	8006c96 <HAL_TIM_ConfigClockSource+0x172>
 8006b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8e:	d87f      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006b90:	2b70      	cmp	r3, #112	; 0x70
 8006b92:	d01a      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0xa6>
 8006b94:	2b70      	cmp	r3, #112	; 0x70
 8006b96:	d87b      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006b98:	2b60      	cmp	r3, #96	; 0x60
 8006b9a:	d050      	beq.n	8006c3e <HAL_TIM_ConfigClockSource+0x11a>
 8006b9c:	2b60      	cmp	r3, #96	; 0x60
 8006b9e:	d877      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba0:	2b50      	cmp	r3, #80	; 0x50
 8006ba2:	d03c      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0xfa>
 8006ba4:	2b50      	cmp	r3, #80	; 0x50
 8006ba6:	d873      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba8:	2b40      	cmp	r3, #64	; 0x40
 8006baa:	d058      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x13a>
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d86f      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb0:	2b30      	cmp	r3, #48	; 0x30
 8006bb2:	d064      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bb4:	2b30      	cmp	r3, #48	; 0x30
 8006bb6:	d86b      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d060      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d867      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d05c      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d05a      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bc8:	e062      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6899      	ldr	r1, [r3, #8]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f000 fb35 	bl	8007248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	609a      	str	r2, [r3, #8]
      break;
 8006bf6:	e04f      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	6899      	ldr	r1, [r3, #8]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f000 fb1e 	bl	8007248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c1a:	609a      	str	r2, [r3, #8]
      break;
 8006c1c:	e03c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6859      	ldr	r1, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f000 fa92 	bl	8007154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2150      	movs	r1, #80	; 0x50
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 faeb 	bl	8007212 <TIM_ITRx_SetConfig>
      break;
 8006c3c:	e02c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	6859      	ldr	r1, [r3, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f000 fab1 	bl	80071b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2160      	movs	r1, #96	; 0x60
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fadb 	bl	8007212 <TIM_ITRx_SetConfig>
      break;
 8006c5c:	e01c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f000 fa72 	bl	8007154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2140      	movs	r1, #64	; 0x40
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 facb 	bl	8007212 <TIM_ITRx_SetConfig>
      break;
 8006c7c:	e00c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f000 fac2 	bl	8007212 <TIM_ITRx_SetConfig>
      break;
 8006c8e:	e003      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
      break;
 8006c94:	e000      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a40      	ldr	r2, [pc, #256]	; (8006dc8 <TIM_Base_SetConfig+0x114>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d013      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd2:	d00f      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a3d      	ldr	r2, [pc, #244]	; (8006dcc <TIM_Base_SetConfig+0x118>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00b      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a3c      	ldr	r2, [pc, #240]	; (8006dd0 <TIM_Base_SetConfig+0x11c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d007      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a3b      	ldr	r2, [pc, #236]	; (8006dd4 <TIM_Base_SetConfig+0x120>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d003      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a3a      	ldr	r2, [pc, #232]	; (8006dd8 <TIM_Base_SetConfig+0x124>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d108      	bne.n	8006d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a2f      	ldr	r2, [pc, #188]	; (8006dc8 <TIM_Base_SetConfig+0x114>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d02b      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d14:	d027      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a2c      	ldr	r2, [pc, #176]	; (8006dcc <TIM_Base_SetConfig+0x118>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d023      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a2b      	ldr	r2, [pc, #172]	; (8006dd0 <TIM_Base_SetConfig+0x11c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d01f      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2a      	ldr	r2, [pc, #168]	; (8006dd4 <TIM_Base_SetConfig+0x120>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d01b      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a29      	ldr	r2, [pc, #164]	; (8006dd8 <TIM_Base_SetConfig+0x124>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d017      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a28      	ldr	r2, [pc, #160]	; (8006ddc <TIM_Base_SetConfig+0x128>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d013      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a27      	ldr	r2, [pc, #156]	; (8006de0 <TIM_Base_SetConfig+0x12c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00f      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a26      	ldr	r2, [pc, #152]	; (8006de4 <TIM_Base_SetConfig+0x130>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00b      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a25      	ldr	r2, [pc, #148]	; (8006de8 <TIM_Base_SetConfig+0x134>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d007      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a24      	ldr	r2, [pc, #144]	; (8006dec <TIM_Base_SetConfig+0x138>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a23      	ldr	r2, [pc, #140]	; (8006df0 <TIM_Base_SetConfig+0x13c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d108      	bne.n	8006d78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <TIM_Base_SetConfig+0x114>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d003      	beq.n	8006dac <TIM_Base_SetConfig+0xf8>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a0c      	ldr	r2, [pc, #48]	; (8006dd8 <TIM_Base_SetConfig+0x124>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d103      	bne.n	8006db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	615a      	str	r2, [r3, #20]
}
 8006dba:	bf00      	nop
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40010000 	.word	0x40010000
 8006dcc:	40000400 	.word	0x40000400
 8006dd0:	40000800 	.word	0x40000800
 8006dd4:	40000c00 	.word	0x40000c00
 8006dd8:	40010400 	.word	0x40010400
 8006ddc:	40014000 	.word	0x40014000
 8006de0:	40014400 	.word	0x40014400
 8006de4:	40014800 	.word	0x40014800
 8006de8:	40001800 	.word	0x40001800
 8006dec:	40001c00 	.word	0x40001c00
 8006df0:	40002000 	.word	0x40002000

08006df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f023 0201 	bic.w	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0303 	bic.w	r3, r3, #3
 8006e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f023 0302 	bic.w	r3, r3, #2
 8006e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a20      	ldr	r2, [pc, #128]	; (8006ecc <TIM_OC1_SetConfig+0xd8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_OC1_SetConfig+0x64>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a1f      	ldr	r2, [pc, #124]	; (8006ed0 <TIM_OC1_SetConfig+0xdc>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d10c      	bne.n	8006e72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f023 0308 	bic.w	r3, r3, #8
 8006e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f023 0304 	bic.w	r3, r3, #4
 8006e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a15      	ldr	r2, [pc, #84]	; (8006ecc <TIM_OC1_SetConfig+0xd8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d003      	beq.n	8006e82 <TIM_OC1_SetConfig+0x8e>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a14      	ldr	r2, [pc, #80]	; (8006ed0 <TIM_OC1_SetConfig+0xdc>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d111      	bne.n	8006ea6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	621a      	str	r2, [r3, #32]
}
 8006ec0:	bf00      	nop
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	40010000 	.word	0x40010000
 8006ed0:	40010400 	.word	0x40010400

08006ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	f023 0210 	bic.w	r2, r3, #16
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	021b      	lsls	r3, r3, #8
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f023 0320 	bic.w	r3, r3, #32
 8006f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a22      	ldr	r2, [pc, #136]	; (8006fb8 <TIM_OC2_SetConfig+0xe4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_OC2_SetConfig+0x68>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a21      	ldr	r2, [pc, #132]	; (8006fbc <TIM_OC2_SetConfig+0xe8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d10d      	bne.n	8006f58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a17      	ldr	r2, [pc, #92]	; (8006fb8 <TIM_OC2_SetConfig+0xe4>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <TIM_OC2_SetConfig+0x94>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a16      	ldr	r2, [pc, #88]	; (8006fbc <TIM_OC2_SetConfig+0xe8>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d113      	bne.n	8006f90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	bf00      	nop
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	40010000 	.word	0x40010000
 8006fbc:	40010400 	.word	0x40010400

08006fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0303 	bic.w	r3, r3, #3
 8006ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a21      	ldr	r2, [pc, #132]	; (80070a0 <TIM_OC3_SetConfig+0xe0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d003      	beq.n	8007026 <TIM_OC3_SetConfig+0x66>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a20      	ldr	r2, [pc, #128]	; (80070a4 <TIM_OC3_SetConfig+0xe4>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d10d      	bne.n	8007042 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800702c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a16      	ldr	r2, [pc, #88]	; (80070a0 <TIM_OC3_SetConfig+0xe0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d003      	beq.n	8007052 <TIM_OC3_SetConfig+0x92>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a15      	ldr	r2, [pc, #84]	; (80070a4 <TIM_OC3_SetConfig+0xe4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d113      	bne.n	800707a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	621a      	str	r2, [r3, #32]
}
 8007094:	bf00      	nop
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	40010000 	.word	0x40010000
 80070a4:	40010400 	.word	0x40010400

080070a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	031b      	lsls	r3, r3, #12
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a12      	ldr	r2, [pc, #72]	; (800714c <TIM_OC4_SetConfig+0xa4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d003      	beq.n	8007110 <TIM_OC4_SetConfig+0x68>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a11      	ldr	r2, [pc, #68]	; (8007150 <TIM_OC4_SetConfig+0xa8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d109      	bne.n	8007124 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	019b      	lsls	r3, r3, #6
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	621a      	str	r2, [r3, #32]
}
 800713e:	bf00      	nop
 8007140:	371c      	adds	r7, #28
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40010000 	.word	0x40010000
 8007150:	40010400 	.word	0x40010400

08007154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	f023 0201 	bic.w	r2, r3, #1
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800717e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	4313      	orrs	r3, r2
 8007188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f023 030a 	bic.w	r3, r3, #10
 8007190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	621a      	str	r2, [r3, #32]
}
 80071a6:	bf00      	nop
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b087      	sub	sp, #28
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	f023 0210 	bic.w	r2, r3, #16
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	031b      	lsls	r3, r3, #12
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	621a      	str	r2, [r3, #32]
}
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007212:	b480      	push	{r7}
 8007214:	b085      	sub	sp, #20
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4313      	orrs	r3, r2
 8007230:	f043 0307 	orr.w	r3, r3, #7
 8007234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	609a      	str	r2, [r3, #8]
}
 800723c:	bf00      	nop
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	021a      	lsls	r2, r3, #8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	431a      	orrs	r2, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	4313      	orrs	r3, r2
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	609a      	str	r2, [r3, #8]
}
 800727c:	bf00      	nop
 800727e:	371c      	adds	r7, #28
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	2201      	movs	r2, #1
 800729c:	fa02 f303 	lsl.w	r3, r2, r3
 80072a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a1a      	ldr	r2, [r3, #32]
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	43db      	mvns	r3, r3
 80072aa:	401a      	ands	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a1a      	ldr	r2, [r3, #32]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f003 031f 	and.w	r3, r3, #31
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	fa01 f303 	lsl.w	r3, r1, r3
 80072c0:	431a      	orrs	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	621a      	str	r2, [r3, #32]
}
 80072c6:	bf00      	nop
 80072c8:	371c      	adds	r7, #28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
	...

080072d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e05a      	b.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a21      	ldr	r2, [pc, #132]	; (80073b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d022      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007338:	d01d      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a1d      	ldr	r2, [pc, #116]	; (80073b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d018      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1b      	ldr	r2, [pc, #108]	; (80073b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d013      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1a      	ldr	r2, [pc, #104]	; (80073bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00e      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a18      	ldr	r2, [pc, #96]	; (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d009      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a17      	ldr	r2, [pc, #92]	; (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d004      	beq.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d10c      	bne.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800737c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	4313      	orrs	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	40010000 	.word	0x40010000
 80073b4:	40000400 	.word	0x40000400
 80073b8:	40000800 	.word	0x40000800
 80073bc:	40000c00 	.word	0x40000c00
 80073c0:	40010400 	.word	0x40010400
 80073c4:	40014000 	.word	0x40014000
 80073c8:	40001800 	.word	0x40001800

080073cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e03f      	b.n	800745e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d106      	bne.n	80073f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7fb f80e 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2224      	movs	r2, #36	; 0x24
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800740e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fddf 	bl	8007fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691a      	ldr	r2, [r3, #16]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695a      	ldr	r2, [r3, #20]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007434:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007444:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b08a      	sub	sp, #40	; 0x28
 800746a:	af02      	add	r7, sp, #8
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	603b      	str	r3, [r7, #0]
 8007472:	4613      	mov	r3, r2
 8007474:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b20      	cmp	r3, #32
 8007484:	d17c      	bne.n	8007580 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <HAL_UART_Transmit+0x2c>
 800748c:	88fb      	ldrh	r3, [r7, #6]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e075      	b.n	8007582 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_UART_Transmit+0x3e>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e06e      	b.n	8007582 <HAL_UART_Transmit+0x11c>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2221      	movs	r2, #33	; 0x21
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ba:	f7fb f943 	bl	8002744 <HAL_GetTick>
 80074be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	88fa      	ldrh	r2, [r7, #6]
 80074c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	88fa      	ldrh	r2, [r7, #6]
 80074ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d4:	d108      	bne.n	80074e8 <HAL_UART_Transmit+0x82>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d104      	bne.n	80074e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	e003      	b.n	80074f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074f8:	e02a      	b.n	8007550 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2200      	movs	r2, #0
 8007502:	2180      	movs	r1, #128	; 0x80
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fb1f 	bl	8007b48 <UART_WaitOnFlagUntilTimeout>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e036      	b.n	8007582 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007528:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	3302      	adds	r3, #2
 800752e:	61bb      	str	r3, [r7, #24]
 8007530:	e007      	b.n	8007542 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	781a      	ldrb	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	3301      	adds	r3, #1
 8007540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1cf      	bne.n	80074fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2200      	movs	r2, #0
 8007562:	2140      	movs	r1, #64	; 0x40
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 faef 	bl	8007b48 <UART_WaitOnFlagUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e006      	b.n	8007582 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	e000      	b.n	8007582 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007580:	2302      	movs	r3, #2
  }
}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	4613      	mov	r3, r2
 8007596:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b20      	cmp	r3, #32
 80075a2:	d11d      	bne.n	80075e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <HAL_UART_Receive_IT+0x26>
 80075aa:	88fb      	ldrh	r3, [r7, #6]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e016      	b.n	80075e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_UART_Receive_IT+0x38>
 80075be:	2302      	movs	r3, #2
 80075c0:	e00f      	b.n	80075e2 <HAL_UART_Receive_IT+0x58>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80075d0:	88fb      	ldrh	r3, [r7, #6]
 80075d2:	461a      	mov	r2, r3
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fb24 	bl	8007c24 <UART_Start_Receive_IT>
 80075dc:	4603      	mov	r3, r0
 80075de:	e000      	b.n	80075e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80075e0:	2302      	movs	r3, #2
  }
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b0ba      	sub	sp, #232	; 0xe8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007612:	2300      	movs	r3, #0
 8007614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007618:	2300      	movs	r3, #0
 800761a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800761e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800762a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10f      	bne.n	8007652 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <HAL_UART_IRQHandler+0x66>
 800763e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fc07 	bl	8007e5e <UART_Receive_IT>
      return;
 8007650:	e256      	b.n	8007b00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80de 	beq.w	8007818 <HAL_UART_IRQHandler+0x22c>
 800765c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800766c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 80d1 	beq.w	8007818 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00b      	beq.n	800769a <HAL_UART_IRQHandler+0xae>
 8007682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768a:	2b00      	cmp	r3, #0
 800768c:	d005      	beq.n	800769a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f043 0201 	orr.w	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800769a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00b      	beq.n	80076be <HAL_UART_IRQHandler+0xd2>
 80076a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	f043 0202 	orr.w	r2, r3, #2
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00b      	beq.n	80076e2 <HAL_UART_IRQHandler+0xf6>
 80076ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d005      	beq.n	80076e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	f043 0204 	orr.w	r2, r3, #4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e6:	f003 0308 	and.w	r3, r3, #8
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d011      	beq.n	8007712 <HAL_UART_IRQHandler+0x126>
 80076ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	f043 0208 	orr.w	r2, r3, #8
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 81ed 	beq.w	8007af6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800771c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007720:	f003 0320 	and.w	r3, r3, #32
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <HAL_UART_IRQHandler+0x14e>
 8007728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fb92 	bl	8007e5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007744:	2b40      	cmp	r3, #64	; 0x40
 8007746:	bf0c      	ite	eq
 8007748:	2301      	moveq	r3, #1
 800774a:	2300      	movne	r3, #0
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <HAL_UART_IRQHandler+0x17a>
 800775e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007762:	2b00      	cmp	r3, #0
 8007764:	d04f      	beq.n	8007806 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fa9a 	bl	8007ca0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007776:	2b40      	cmp	r3, #64	; 0x40
 8007778:	d141      	bne.n	80077fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3314      	adds	r3, #20
 8007780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007788:	e853 3f00 	ldrex	r3, [r3]
 800778c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3314      	adds	r3, #20
 80077a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1d9      	bne.n	800777a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d013      	beq.n	80077f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	4a7d      	ldr	r2, [pc, #500]	; (80079c8 <HAL_UART_IRQHandler+0x3dc>)
 80077d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fb fe8c 	bl	80034f8 <HAL_DMA_Abort_IT>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d016      	beq.n	8007814 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f4:	e00e      	b.n	8007814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f990 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077fc:	e00a      	b.n	8007814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f98c 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007804:	e006      	b.n	8007814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f988 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007812:	e170      	b.n	8007af6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007814:	bf00      	nop
    return;
 8007816:	e16e      	b.n	8007af6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	2b01      	cmp	r3, #1
 800781e:	f040 814a 	bne.w	8007ab6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007826:	f003 0310 	and.w	r3, r3, #16
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 8143 	beq.w	8007ab6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007834:	f003 0310 	and.w	r3, r3, #16
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 813c 	beq.w	8007ab6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800783e:	2300      	movs	r3, #0
 8007840:	60bb      	str	r3, [r7, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60bb      	str	r3, [r7, #8]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	60bb      	str	r3, [r7, #8]
 8007852:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	f040 80b4 	bne.w	80079cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007870:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 8140 	beq.w	8007afa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800787e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007882:	429a      	cmp	r2, r3
 8007884:	f080 8139 	bcs.w	8007afa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800788e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789a:	f000 8088 	beq.w	80079ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	330c      	adds	r3, #12
 80078a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	330c      	adds	r3, #12
 80078c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1d9      	bne.n	800789e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3314      	adds	r3, #20
 80078f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078fc:	f023 0301 	bic.w	r3, r3, #1
 8007900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3314      	adds	r3, #20
 800790a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800790e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007912:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007916:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e1      	bne.n	80078ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3314      	adds	r3, #20
 800792c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800793c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3314      	adds	r3, #20
 8007946:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800794a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800794c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007950:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e3      	bne.n	8007926 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800797c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800797e:	f023 0310 	bic.w	r3, r3, #16
 8007982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	330c      	adds	r3, #12
 800798c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007990:	65ba      	str	r2, [r7, #88]	; 0x58
 8007992:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007996:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800799e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e3      	bne.n	800796c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fb fd35 	bl	8003418 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f8b6 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079c4:	e099      	b.n	8007afa <HAL_UART_IRQHandler+0x50e>
 80079c6:	bf00      	nop
 80079c8:	08007d67 	.word	0x08007d67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 808b 	beq.w	8007afe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 8086 	beq.w	8007afe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	330c      	adds	r3, #12
 8007a12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a16:	647a      	str	r2, [r7, #68]	; 0x44
 8007a18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e3      	bne.n	80079f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3314      	adds	r3, #20
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	623b      	str	r3, [r7, #32]
   return(result);
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	f023 0301 	bic.w	r3, r3, #1
 8007a40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3314      	adds	r3, #20
 8007a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a4e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e3      	bne.n	8007a2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	330c      	adds	r3, #12
 8007a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 0310 	bic.w	r3, r3, #16
 8007a86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a94:	61fa      	str	r2, [r7, #28]
 8007a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	69b9      	ldr	r1, [r7, #24]
 8007a9a:	69fa      	ldr	r2, [r7, #28]
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e3      	bne.n	8007a70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f83e 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ab4:	e023      	b.n	8007afe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x4ea>
 8007ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f95d 	bl	8007d8e <UART_Transmit_IT>
    return;
 8007ad4:	e014      	b.n	8007b00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00e      	beq.n	8007b00 <HAL_UART_IRQHandler+0x514>
 8007ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d008      	beq.n	8007b00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f99d 	bl	8007e2e <UART_EndTransmit_IT>
    return;
 8007af4:	e004      	b.n	8007b00 <HAL_UART_IRQHandler+0x514>
    return;
 8007af6:	bf00      	nop
 8007af8:	e002      	b.n	8007b00 <HAL_UART_IRQHandler+0x514>
      return;
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <HAL_UART_IRQHandler+0x514>
      return;
 8007afe:	bf00      	nop
  }
}
 8007b00:	37e8      	adds	r7, #232	; 0xe8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop

08007b08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b090      	sub	sp, #64	; 0x40
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b58:	e050      	b.n	8007bfc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b60:	d04c      	beq.n	8007bfc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b68:	f7fa fdec 	bl	8002744 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d241      	bcs.n	8007bfc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	330c      	adds	r3, #12
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	330c      	adds	r3, #12
 8007b96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b98:	637a      	str	r2, [r7, #52]	; 0x34
 8007b9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e5      	bne.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3314      	adds	r3, #20
 8007bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	613b      	str	r3, [r7, #16]
   return(result);
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f023 0301 	bic.w	r3, r3, #1
 8007bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3314      	adds	r3, #20
 8007bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bcc:	623a      	str	r2, [r7, #32]
 8007bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	69f9      	ldr	r1, [r7, #28]
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e5      	bne.n	8007bac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e00f      	b.n	8007c1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4013      	ands	r3, r2
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2301      	moveq	r3, #1
 8007c0e:	2300      	movne	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d09f      	beq.n	8007b5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3740      	adds	r7, #64	; 0x40
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	88fa      	ldrh	r2, [r7, #6]
 8007c3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	88fa      	ldrh	r2, [r7, #6]
 8007c42:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2222      	movs	r2, #34	; 0x22
 8007c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	695a      	ldr	r2, [r3, #20]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f042 0201 	orr.w	r2, r2, #1
 8007c80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f042 0220 	orr.w	r2, r2, #32
 8007c90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b095      	sub	sp, #84	; 0x54
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	330c      	adds	r3, #12
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cc8:	643a      	str	r2, [r7, #64]	; 0x40
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e5      	bne.n	8007ca8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3314      	adds	r3, #20
 8007ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	f023 0301 	bic.w	r3, r3, #1
 8007cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3314      	adds	r3, #20
 8007cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e5      	bne.n	8007cdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d119      	bne.n	8007d4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f023 0310 	bic.w	r3, r3, #16
 8007d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	330c      	adds	r3, #12
 8007d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d38:	61ba      	str	r2, [r7, #24]
 8007d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	6979      	ldr	r1, [r7, #20]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	613b      	str	r3, [r7, #16]
   return(result);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e5      	bne.n	8007d18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d5a:	bf00      	nop
 8007d5c:	3754      	adds	r7, #84	; 0x54
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff fecb 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d86:	bf00      	nop
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b21      	cmp	r3, #33	; 0x21
 8007da0:	d13e      	bne.n	8007e20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007daa:	d114      	bne.n	8007dd6 <UART_Transmit_IT+0x48>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d110      	bne.n	8007dd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	1c9a      	adds	r2, r3, #2
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	621a      	str	r2, [r3, #32]
 8007dd4:	e008      	b.n	8007de8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	1c59      	adds	r1, r3, #1
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6211      	str	r1, [r2, #32]
 8007de0:	781a      	ldrb	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	4619      	mov	r1, r3
 8007df6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10f      	bne.n	8007e1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e000      	b.n	8007e22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e20:	2302      	movs	r3, #2
  }
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68da      	ldr	r2, [r3, #12]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fe5a 	bl	8007b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b08c      	sub	sp, #48	; 0x30
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b22      	cmp	r3, #34	; 0x22
 8007e70:	f040 80ab 	bne.w	8007fca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7c:	d117      	bne.n	8007eae <UART_Receive_IT+0x50>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d113      	bne.n	8007eae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	1c9a      	adds	r2, r3, #2
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8007eac:	e026      	b.n	8007efc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec0:	d007      	beq.n	8007ed2 <UART_Receive_IT+0x74>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10a      	bne.n	8007ee0 <UART_Receive_IT+0x82>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e008      	b.n	8007ef2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d15a      	bne.n	8007fc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0220 	bic.w	r2, r2, #32
 8007f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695a      	ldr	r2, [r3, #20]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0201 	bic.w	r2, r2, #1
 8007f3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d135      	bne.n	8007fbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	330c      	adds	r3, #12
 8007f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	613b      	str	r3, [r7, #16]
   return(result);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f023 0310 	bic.w	r3, r3, #16
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	330c      	adds	r3, #12
 8007f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f76:	623a      	str	r2, [r7, #32]
 8007f78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	69f9      	ldr	r1, [r7, #28]
 8007f7c:	6a3a      	ldr	r2, [r7, #32]
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e5      	bne.n	8007f56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0310 	and.w	r3, r3, #16
 8007f94:	2b10      	cmp	r3, #16
 8007f96:	d10a      	bne.n	8007fae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff fdbb 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
 8007fba:	e002      	b.n	8007fc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7f9 ffbb 	bl	8001f38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e002      	b.n	8007fcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e000      	b.n	8007fcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007fca:	2302      	movs	r3, #2
  }
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3730      	adds	r7, #48	; 0x30
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fd8:	b0c0      	sub	sp, #256	; 0x100
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff0:	68d9      	ldr	r1, [r3, #12]
 8007ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	ea40 0301 	orr.w	r3, r0, r1
 8007ffc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	431a      	orrs	r2, r3
 800800c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	431a      	orrs	r2, r3
 8008014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	4313      	orrs	r3, r2
 800801c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800802c:	f021 010c 	bic.w	r1, r1, #12
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800803a:	430b      	orrs	r3, r1
 800803c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800803e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800804a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804e:	6999      	ldr	r1, [r3, #24]
 8008050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	ea40 0301 	orr.w	r3, r0, r1
 800805a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800805c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b8f      	ldr	r3, [pc, #572]	; (80082a0 <UART_SetConfig+0x2cc>)
 8008064:	429a      	cmp	r2, r3
 8008066:	d005      	beq.n	8008074 <UART_SetConfig+0xa0>
 8008068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	4b8d      	ldr	r3, [pc, #564]	; (80082a4 <UART_SetConfig+0x2d0>)
 8008070:	429a      	cmp	r2, r3
 8008072:	d104      	bne.n	800807e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008074:	f7fd fe66 	bl	8005d44 <HAL_RCC_GetPCLK2Freq>
 8008078:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800807c:	e003      	b.n	8008086 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800807e:	f7fd fe4d 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 8008082:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008090:	f040 810c 	bne.w	80082ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008098:	2200      	movs	r2, #0
 800809a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800809e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80080a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80080a6:	4622      	mov	r2, r4
 80080a8:	462b      	mov	r3, r5
 80080aa:	1891      	adds	r1, r2, r2
 80080ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80080ae:	415b      	adcs	r3, r3
 80080b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080b6:	4621      	mov	r1, r4
 80080b8:	eb12 0801 	adds.w	r8, r2, r1
 80080bc:	4629      	mov	r1, r5
 80080be:	eb43 0901 	adc.w	r9, r3, r1
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080d6:	4690      	mov	r8, r2
 80080d8:	4699      	mov	r9, r3
 80080da:	4623      	mov	r3, r4
 80080dc:	eb18 0303 	adds.w	r3, r8, r3
 80080e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080e4:	462b      	mov	r3, r5
 80080e6:	eb49 0303 	adc.w	r3, r9, r3
 80080ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80080fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008102:	460b      	mov	r3, r1
 8008104:	18db      	adds	r3, r3, r3
 8008106:	653b      	str	r3, [r7, #80]	; 0x50
 8008108:	4613      	mov	r3, r2
 800810a:	eb42 0303 	adc.w	r3, r2, r3
 800810e:	657b      	str	r3, [r7, #84]	; 0x54
 8008110:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008114:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008118:	f7f8 f8ba 	bl	8000290 <__aeabi_uldivmod>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4b61      	ldr	r3, [pc, #388]	; (80082a8 <UART_SetConfig+0x2d4>)
 8008122:	fba3 2302 	umull	r2, r3, r3, r2
 8008126:	095b      	lsrs	r3, r3, #5
 8008128:	011c      	lsls	r4, r3, #4
 800812a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800812e:	2200      	movs	r2, #0
 8008130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008134:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008138:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800813c:	4642      	mov	r2, r8
 800813e:	464b      	mov	r3, r9
 8008140:	1891      	adds	r1, r2, r2
 8008142:	64b9      	str	r1, [r7, #72]	; 0x48
 8008144:	415b      	adcs	r3, r3
 8008146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008148:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800814c:	4641      	mov	r1, r8
 800814e:	eb12 0a01 	adds.w	sl, r2, r1
 8008152:	4649      	mov	r1, r9
 8008154:	eb43 0b01 	adc.w	fp, r3, r1
 8008158:	f04f 0200 	mov.w	r2, #0
 800815c:	f04f 0300 	mov.w	r3, #0
 8008160:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008164:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008168:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800816c:	4692      	mov	sl, r2
 800816e:	469b      	mov	fp, r3
 8008170:	4643      	mov	r3, r8
 8008172:	eb1a 0303 	adds.w	r3, sl, r3
 8008176:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800817a:	464b      	mov	r3, r9
 800817c:	eb4b 0303 	adc.w	r3, fp, r3
 8008180:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008190:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008194:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008198:	460b      	mov	r3, r1
 800819a:	18db      	adds	r3, r3, r3
 800819c:	643b      	str	r3, [r7, #64]	; 0x40
 800819e:	4613      	mov	r3, r2
 80081a0:	eb42 0303 	adc.w	r3, r2, r3
 80081a4:	647b      	str	r3, [r7, #68]	; 0x44
 80081a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80081ae:	f7f8 f86f 	bl	8000290 <__aeabi_uldivmod>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4611      	mov	r1, r2
 80081b8:	4b3b      	ldr	r3, [pc, #236]	; (80082a8 <UART_SetConfig+0x2d4>)
 80081ba:	fba3 2301 	umull	r2, r3, r3, r1
 80081be:	095b      	lsrs	r3, r3, #5
 80081c0:	2264      	movs	r2, #100	; 0x64
 80081c2:	fb02 f303 	mul.w	r3, r2, r3
 80081c6:	1acb      	subs	r3, r1, r3
 80081c8:	00db      	lsls	r3, r3, #3
 80081ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80081ce:	4b36      	ldr	r3, [pc, #216]	; (80082a8 <UART_SetConfig+0x2d4>)
 80081d0:	fba3 2302 	umull	r2, r3, r3, r2
 80081d4:	095b      	lsrs	r3, r3, #5
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081dc:	441c      	add	r4, r3
 80081de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80081ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80081f0:	4642      	mov	r2, r8
 80081f2:	464b      	mov	r3, r9
 80081f4:	1891      	adds	r1, r2, r2
 80081f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80081f8:	415b      	adcs	r3, r3
 80081fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008200:	4641      	mov	r1, r8
 8008202:	1851      	adds	r1, r2, r1
 8008204:	6339      	str	r1, [r7, #48]	; 0x30
 8008206:	4649      	mov	r1, r9
 8008208:	414b      	adcs	r3, r1
 800820a:	637b      	str	r3, [r7, #52]	; 0x34
 800820c:	f04f 0200 	mov.w	r2, #0
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008218:	4659      	mov	r1, fp
 800821a:	00cb      	lsls	r3, r1, #3
 800821c:	4651      	mov	r1, sl
 800821e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008222:	4651      	mov	r1, sl
 8008224:	00ca      	lsls	r2, r1, #3
 8008226:	4610      	mov	r0, r2
 8008228:	4619      	mov	r1, r3
 800822a:	4603      	mov	r3, r0
 800822c:	4642      	mov	r2, r8
 800822e:	189b      	adds	r3, r3, r2
 8008230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008234:	464b      	mov	r3, r9
 8008236:	460a      	mov	r2, r1
 8008238:	eb42 0303 	adc.w	r3, r2, r3
 800823c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800824c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008250:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008254:	460b      	mov	r3, r1
 8008256:	18db      	adds	r3, r3, r3
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
 800825a:	4613      	mov	r3, r2
 800825c:	eb42 0303 	adc.w	r3, r2, r3
 8008260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008262:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008266:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800826a:	f7f8 f811 	bl	8000290 <__aeabi_uldivmod>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4b0d      	ldr	r3, [pc, #52]	; (80082a8 <UART_SetConfig+0x2d4>)
 8008274:	fba3 1302 	umull	r1, r3, r3, r2
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	2164      	movs	r1, #100	; 0x64
 800827c:	fb01 f303 	mul.w	r3, r1, r3
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	3332      	adds	r3, #50	; 0x32
 8008286:	4a08      	ldr	r2, [pc, #32]	; (80082a8 <UART_SetConfig+0x2d4>)
 8008288:	fba2 2303 	umull	r2, r3, r2, r3
 800828c:	095b      	lsrs	r3, r3, #5
 800828e:	f003 0207 	and.w	r2, r3, #7
 8008292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4422      	add	r2, r4
 800829a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800829c:	e106      	b.n	80084ac <UART_SetConfig+0x4d8>
 800829e:	bf00      	nop
 80082a0:	40011000 	.word	0x40011000
 80082a4:	40011400 	.word	0x40011400
 80082a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082b0:	2200      	movs	r2, #0
 80082b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80082ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80082be:	4642      	mov	r2, r8
 80082c0:	464b      	mov	r3, r9
 80082c2:	1891      	adds	r1, r2, r2
 80082c4:	6239      	str	r1, [r7, #32]
 80082c6:	415b      	adcs	r3, r3
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
 80082ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082ce:	4641      	mov	r1, r8
 80082d0:	1854      	adds	r4, r2, r1
 80082d2:	4649      	mov	r1, r9
 80082d4:	eb43 0501 	adc.w	r5, r3, r1
 80082d8:	f04f 0200 	mov.w	r2, #0
 80082dc:	f04f 0300 	mov.w	r3, #0
 80082e0:	00eb      	lsls	r3, r5, #3
 80082e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082e6:	00e2      	lsls	r2, r4, #3
 80082e8:	4614      	mov	r4, r2
 80082ea:	461d      	mov	r5, r3
 80082ec:	4643      	mov	r3, r8
 80082ee:	18e3      	adds	r3, r4, r3
 80082f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80082f4:	464b      	mov	r3, r9
 80082f6:	eb45 0303 	adc.w	r3, r5, r3
 80082fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800830a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800830e:	f04f 0200 	mov.w	r2, #0
 8008312:	f04f 0300 	mov.w	r3, #0
 8008316:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800831a:	4629      	mov	r1, r5
 800831c:	008b      	lsls	r3, r1, #2
 800831e:	4621      	mov	r1, r4
 8008320:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008324:	4621      	mov	r1, r4
 8008326:	008a      	lsls	r2, r1, #2
 8008328:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800832c:	f7f7 ffb0 	bl	8000290 <__aeabi_uldivmod>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4b60      	ldr	r3, [pc, #384]	; (80084b8 <UART_SetConfig+0x4e4>)
 8008336:	fba3 2302 	umull	r2, r3, r3, r2
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	011c      	lsls	r4, r3, #4
 800833e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008342:	2200      	movs	r2, #0
 8008344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008348:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800834c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008350:	4642      	mov	r2, r8
 8008352:	464b      	mov	r3, r9
 8008354:	1891      	adds	r1, r2, r2
 8008356:	61b9      	str	r1, [r7, #24]
 8008358:	415b      	adcs	r3, r3
 800835a:	61fb      	str	r3, [r7, #28]
 800835c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008360:	4641      	mov	r1, r8
 8008362:	1851      	adds	r1, r2, r1
 8008364:	6139      	str	r1, [r7, #16]
 8008366:	4649      	mov	r1, r9
 8008368:	414b      	adcs	r3, r1
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	f04f 0200 	mov.w	r2, #0
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008378:	4659      	mov	r1, fp
 800837a:	00cb      	lsls	r3, r1, #3
 800837c:	4651      	mov	r1, sl
 800837e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008382:	4651      	mov	r1, sl
 8008384:	00ca      	lsls	r2, r1, #3
 8008386:	4610      	mov	r0, r2
 8008388:	4619      	mov	r1, r3
 800838a:	4603      	mov	r3, r0
 800838c:	4642      	mov	r2, r8
 800838e:	189b      	adds	r3, r3, r2
 8008390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008394:	464b      	mov	r3, r9
 8008396:	460a      	mov	r2, r1
 8008398:	eb42 0303 	adc.w	r3, r2, r3
 800839c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80083aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80083ac:	f04f 0200 	mov.w	r2, #0
 80083b0:	f04f 0300 	mov.w	r3, #0
 80083b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80083b8:	4649      	mov	r1, r9
 80083ba:	008b      	lsls	r3, r1, #2
 80083bc:	4641      	mov	r1, r8
 80083be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083c2:	4641      	mov	r1, r8
 80083c4:	008a      	lsls	r2, r1, #2
 80083c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80083ca:	f7f7 ff61 	bl	8000290 <__aeabi_uldivmod>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4611      	mov	r1, r2
 80083d4:	4b38      	ldr	r3, [pc, #224]	; (80084b8 <UART_SetConfig+0x4e4>)
 80083d6:	fba3 2301 	umull	r2, r3, r3, r1
 80083da:	095b      	lsrs	r3, r3, #5
 80083dc:	2264      	movs	r2, #100	; 0x64
 80083de:	fb02 f303 	mul.w	r3, r2, r3
 80083e2:	1acb      	subs	r3, r1, r3
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	3332      	adds	r3, #50	; 0x32
 80083e8:	4a33      	ldr	r2, [pc, #204]	; (80084b8 <UART_SetConfig+0x4e4>)
 80083ea:	fba2 2303 	umull	r2, r3, r2, r3
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083f4:	441c      	add	r4, r3
 80083f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083fa:	2200      	movs	r2, #0
 80083fc:	673b      	str	r3, [r7, #112]	; 0x70
 80083fe:	677a      	str	r2, [r7, #116]	; 0x74
 8008400:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008404:	4642      	mov	r2, r8
 8008406:	464b      	mov	r3, r9
 8008408:	1891      	adds	r1, r2, r2
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	415b      	adcs	r3, r3
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008414:	4641      	mov	r1, r8
 8008416:	1851      	adds	r1, r2, r1
 8008418:	6039      	str	r1, [r7, #0]
 800841a:	4649      	mov	r1, r9
 800841c:	414b      	adcs	r3, r1
 800841e:	607b      	str	r3, [r7, #4]
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	f04f 0300 	mov.w	r3, #0
 8008428:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800842c:	4659      	mov	r1, fp
 800842e:	00cb      	lsls	r3, r1, #3
 8008430:	4651      	mov	r1, sl
 8008432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008436:	4651      	mov	r1, sl
 8008438:	00ca      	lsls	r2, r1, #3
 800843a:	4610      	mov	r0, r2
 800843c:	4619      	mov	r1, r3
 800843e:	4603      	mov	r3, r0
 8008440:	4642      	mov	r2, r8
 8008442:	189b      	adds	r3, r3, r2
 8008444:	66bb      	str	r3, [r7, #104]	; 0x68
 8008446:	464b      	mov	r3, r9
 8008448:	460a      	mov	r2, r1
 800844a:	eb42 0303 	adc.w	r3, r2, r3
 800844e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	663b      	str	r3, [r7, #96]	; 0x60
 800845a:	667a      	str	r2, [r7, #100]	; 0x64
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008468:	4649      	mov	r1, r9
 800846a:	008b      	lsls	r3, r1, #2
 800846c:	4641      	mov	r1, r8
 800846e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008472:	4641      	mov	r1, r8
 8008474:	008a      	lsls	r2, r1, #2
 8008476:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800847a:	f7f7 ff09 	bl	8000290 <__aeabi_uldivmod>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <UART_SetConfig+0x4e4>)
 8008484:	fba3 1302 	umull	r1, r3, r3, r2
 8008488:	095b      	lsrs	r3, r3, #5
 800848a:	2164      	movs	r1, #100	; 0x64
 800848c:	fb01 f303 	mul.w	r3, r1, r3
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	011b      	lsls	r3, r3, #4
 8008494:	3332      	adds	r3, #50	; 0x32
 8008496:	4a08      	ldr	r2, [pc, #32]	; (80084b8 <UART_SetConfig+0x4e4>)
 8008498:	fba2 2303 	umull	r2, r3, r2, r3
 800849c:	095b      	lsrs	r3, r3, #5
 800849e:	f003 020f 	and.w	r2, r3, #15
 80084a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4422      	add	r2, r4
 80084aa:	609a      	str	r2, [r3, #8]
}
 80084ac:	bf00      	nop
 80084ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80084b2:	46bd      	mov	sp, r7
 80084b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084b8:	51eb851f 	.word	0x51eb851f

080084bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084bc:	b084      	sub	sp, #16
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	f107 001c 	add.w	r0, r7, #28
 80084ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d122      	bne.n	800851a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80084e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d105      	bne.n	800850e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 faa2 	bl	8008a58 <USB_CoreReset>
 8008514:	4603      	mov	r3, r0
 8008516:	73fb      	strb	r3, [r7, #15]
 8008518:	e01a      	b.n	8008550 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fa96 	bl	8008a58 <USB_CoreReset>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008532:	2b00      	cmp	r3, #0
 8008534:	d106      	bne.n	8008544 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	639a      	str	r2, [r3, #56]	; 0x38
 8008542:	e005      	b.n	8008550 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	2b01      	cmp	r3, #1
 8008554:	d10b      	bne.n	800856e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f043 0206 	orr.w	r2, r3, #6
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f043 0220 	orr.w	r2, r3, #32
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800857a:	b004      	add	sp, #16
 800857c:	4770      	bx	lr

0800857e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f023 0201 	bic.w	r2, r3, #1
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d115      	bne.n	80085ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80085ce:	2001      	movs	r0, #1
 80085d0:	f7fa f8c4 	bl	800275c <HAL_Delay>
      ms++;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	3301      	adds	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fa2e 	bl	8008a3c <USB_GetMode>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d01e      	beq.n	8008624 <USB_SetCurrentMode+0x84>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b31      	cmp	r3, #49	; 0x31
 80085ea:	d9f0      	bls.n	80085ce <USB_SetCurrentMode+0x2e>
 80085ec:	e01a      	b.n	8008624 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80085ee:	78fb      	ldrb	r3, [r7, #3]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d115      	bne.n	8008620 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008600:	2001      	movs	r0, #1
 8008602:	f7fa f8ab 	bl	800275c <HAL_Delay>
      ms++;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3301      	adds	r3, #1
 800860a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fa15 	bl	8008a3c <USB_GetMode>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <USB_SetCurrentMode+0x84>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b31      	cmp	r3, #49	; 0x31
 800861c:	d9f0      	bls.n	8008600 <USB_SetCurrentMode+0x60>
 800861e:	e001      	b.n	8008624 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e005      	b.n	8008630 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b32      	cmp	r3, #50	; 0x32
 8008628:	d101      	bne.n	800862e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e000      	b.n	8008630 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008638:	b084      	sub	sp, #16
 800863a:	b580      	push	{r7, lr}
 800863c:	b086      	sub	sp, #24
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008652:	2300      	movs	r3, #0
 8008654:	613b      	str	r3, [r7, #16]
 8008656:	e009      	b.n	800866c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	3340      	adds	r3, #64	; 0x40
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	2200      	movs	r2, #0
 8008664:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	3301      	adds	r3, #1
 800866a:	613b      	str	r3, [r7, #16]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2b0e      	cmp	r3, #14
 8008670:	d9f2      	bls.n	8008658 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11c      	bne.n	80086b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008686:	f043 0302 	orr.w	r3, r3, #2
 800868a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
 80086b0:	e00b      	b.n	80086ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086d0:	461a      	mov	r2, r3
 80086d2:	2300      	movs	r3, #0
 80086d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086dc:	4619      	mov	r1, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e4:	461a      	mov	r2, r3
 80086e6:	680b      	ldr	r3, [r1, #0]
 80086e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d10c      	bne.n	800870a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80086f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d104      	bne.n	8008700 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80086f6:	2100      	movs	r1, #0
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f965 	bl	80089c8 <USB_SetDevSpeed>
 80086fe:	e008      	b.n	8008712 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008700:	2101      	movs	r1, #1
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f960 	bl	80089c8 <USB_SetDevSpeed>
 8008708:	e003      	b.n	8008712 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800870a:	2103      	movs	r1, #3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f95b 	bl	80089c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008712:	2110      	movs	r1, #16
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f8f3 	bl	8008900 <USB_FlushTxFifo>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f91f 	bl	8008968 <USB_FlushRxFifo>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873a:	461a      	mov	r2, r3
 800873c:	2300      	movs	r3, #0
 800873e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008746:	461a      	mov	r2, r3
 8008748:	2300      	movs	r3, #0
 800874a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008752:	461a      	mov	r2, r3
 8008754:	2300      	movs	r3, #0
 8008756:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008758:	2300      	movs	r3, #0
 800875a:	613b      	str	r3, [r7, #16]
 800875c:	e043      	b.n	80087e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	4413      	add	r3, r2
 8008766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008774:	d118      	bne.n	80087a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10a      	bne.n	8008792 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008788:	461a      	mov	r2, r3
 800878a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800878e:	6013      	str	r3, [r2, #0]
 8008790:	e013      	b.n	80087ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	4413      	add	r3, r2
 800879a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879e:	461a      	mov	r2, r3
 80087a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	e008      	b.n	80087ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b4:	461a      	mov	r2, r3
 80087b6:	2300      	movs	r3, #0
 80087b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c6:	461a      	mov	r2, r3
 80087c8:	2300      	movs	r3, #0
 80087ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d8:	461a      	mov	r2, r3
 80087da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	3301      	adds	r3, #1
 80087e4:	613b      	str	r3, [r7, #16]
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d3b7      	bcc.n	800875e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087ee:	2300      	movs	r3, #0
 80087f0:	613b      	str	r3, [r7, #16]
 80087f2:	e043      	b.n	800887c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800880a:	d118      	bne.n	800883e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881e:	461a      	mov	r2, r3
 8008820:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	e013      	b.n	8008850 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008834:	461a      	mov	r2, r3
 8008836:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	e008      	b.n	8008850 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884a:	461a      	mov	r2, r3
 800884c:	2300      	movs	r3, #0
 800884e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885c:	461a      	mov	r2, r3
 800885e:	2300      	movs	r3, #0
 8008860:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886e:	461a      	mov	r2, r3
 8008870:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008874:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	3301      	adds	r3, #1
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	429a      	cmp	r2, r3
 8008882:	d3b7      	bcc.n	80087f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008896:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80088a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d105      	bne.n	80088b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	f043 0210 	orr.w	r2, r3, #16
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	699a      	ldr	r2, [r3, #24]
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <USB_DevInit+0x2c4>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80088c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d005      	beq.n	80088d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f043 0208 	orr.w	r2, r3, #8
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80088d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d107      	bne.n	80088ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088e4:	f043 0304 	orr.w	r3, r3, #4
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088f8:	b004      	add	sp, #16
 80088fa:	4770      	bx	lr
 80088fc:	803c3800 	.word	0x803c3800

08008900 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3301      	adds	r3, #1
 8008912:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4a13      	ldr	r2, [pc, #76]	; (8008964 <USB_FlushTxFifo+0x64>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d901      	bls.n	8008920 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e01b      	b.n	8008958 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	daf2      	bge.n	800890e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	019b      	lsls	r3, r3, #6
 8008930:	f043 0220 	orr.w	r2, r3, #32
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3301      	adds	r3, #1
 800893c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4a08      	ldr	r2, [pc, #32]	; (8008964 <USB_FlushTxFifo+0x64>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d901      	bls.n	800894a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e006      	b.n	8008958 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	2b20      	cmp	r3, #32
 8008954:	d0f0      	beq.n	8008938 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	00030d40 	.word	0x00030d40

08008968 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3301      	adds	r3, #1
 8008978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	4a11      	ldr	r2, [pc, #68]	; (80089c4 <USB_FlushRxFifo+0x5c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d901      	bls.n	8008986 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e018      	b.n	80089b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	daf2      	bge.n	8008974 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2210      	movs	r2, #16
 8008996:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3301      	adds	r3, #1
 800899c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4a08      	ldr	r2, [pc, #32]	; (80089c4 <USB_FlushRxFifo+0x5c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d901      	bls.n	80089aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e006      	b.n	80089b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	f003 0310 	and.w	r3, r3, #16
 80089b2:	2b10      	cmp	r3, #16
 80089b4:	d0f0      	beq.n	8008998 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	00030d40 	.word	0x00030d40

080089c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	68f9      	ldr	r1, [r7, #12]
 80089e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089e8:	4313      	orrs	r3, r2
 80089ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b085      	sub	sp, #20
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a14:	f023 0303 	bic.w	r3, r3, #3
 8008a18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a28:	f043 0302 	orr.w	r3, r3, #2
 8008a2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	f003 0301 	and.w	r3, r3, #1
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a60:	2300      	movs	r3, #0
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3301      	adds	r3, #1
 8008a68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	4a13      	ldr	r2, [pc, #76]	; (8008abc <USB_CoreReset+0x64>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d901      	bls.n	8008a76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e01b      	b.n	8008aae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	daf2      	bge.n	8008a64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f043 0201 	orr.w	r2, r3, #1
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3301      	adds	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4a09      	ldr	r2, [pc, #36]	; (8008abc <USB_CoreReset+0x64>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d901      	bls.n	8008aa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e006      	b.n	8008aae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d0f0      	beq.n	8008a8e <USB_CoreReset+0x36>

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	00030d40 	.word	0x00030d40

08008ac0 <siprintf>:
 8008ac0:	b40e      	push	{r1, r2, r3}
 8008ac2:	b500      	push	{lr}
 8008ac4:	b09c      	sub	sp, #112	; 0x70
 8008ac6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ac8:	9002      	str	r0, [sp, #8]
 8008aca:	9006      	str	r0, [sp, #24]
 8008acc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ad0:	4809      	ldr	r0, [pc, #36]	; (8008af8 <siprintf+0x38>)
 8008ad2:	9107      	str	r1, [sp, #28]
 8008ad4:	9104      	str	r1, [sp, #16]
 8008ad6:	4909      	ldr	r1, [pc, #36]	; (8008afc <siprintf+0x3c>)
 8008ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008adc:	9105      	str	r1, [sp, #20]
 8008ade:	6800      	ldr	r0, [r0, #0]
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	a902      	add	r1, sp, #8
 8008ae4:	f000 f992 	bl	8008e0c <_svfiprintf_r>
 8008ae8:	9b02      	ldr	r3, [sp, #8]
 8008aea:	2200      	movs	r2, #0
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	b01c      	add	sp, #112	; 0x70
 8008af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008af4:	b003      	add	sp, #12
 8008af6:	4770      	bx	lr
 8008af8:	200002f4 	.word	0x200002f4
 8008afc:	ffff0208 	.word	0xffff0208

08008b00 <memset>:
 8008b00:	4402      	add	r2, r0
 8008b02:	4603      	mov	r3, r0
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d100      	bne.n	8008b0a <memset+0xa>
 8008b08:	4770      	bx	lr
 8008b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0e:	e7f9      	b.n	8008b04 <memset+0x4>

08008b10 <__errno>:
 8008b10:	4b01      	ldr	r3, [pc, #4]	; (8008b18 <__errno+0x8>)
 8008b12:	6818      	ldr	r0, [r3, #0]
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	200002f4 	.word	0x200002f4

08008b1c <__libc_init_array>:
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	4d0d      	ldr	r5, [pc, #52]	; (8008b54 <__libc_init_array+0x38>)
 8008b20:	4c0d      	ldr	r4, [pc, #52]	; (8008b58 <__libc_init_array+0x3c>)
 8008b22:	1b64      	subs	r4, r4, r5
 8008b24:	10a4      	asrs	r4, r4, #2
 8008b26:	2600      	movs	r6, #0
 8008b28:	42a6      	cmp	r6, r4
 8008b2a:	d109      	bne.n	8008b40 <__libc_init_array+0x24>
 8008b2c:	4d0b      	ldr	r5, [pc, #44]	; (8008b5c <__libc_init_array+0x40>)
 8008b2e:	4c0c      	ldr	r4, [pc, #48]	; (8008b60 <__libc_init_array+0x44>)
 8008b30:	f000 fc6a 	bl	8009408 <_init>
 8008b34:	1b64      	subs	r4, r4, r5
 8008b36:	10a4      	asrs	r4, r4, #2
 8008b38:	2600      	movs	r6, #0
 8008b3a:	42a6      	cmp	r6, r4
 8008b3c:	d105      	bne.n	8008b4a <__libc_init_array+0x2e>
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}
 8008b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b44:	4798      	blx	r3
 8008b46:	3601      	adds	r6, #1
 8008b48:	e7ee      	b.n	8008b28 <__libc_init_array+0xc>
 8008b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b4e:	4798      	blx	r3
 8008b50:	3601      	adds	r6, #1
 8008b52:	e7f2      	b.n	8008b3a <__libc_init_array+0x1e>
 8008b54:	080095a0 	.word	0x080095a0
 8008b58:	080095a0 	.word	0x080095a0
 8008b5c:	080095a0 	.word	0x080095a0
 8008b60:	080095a4 	.word	0x080095a4

08008b64 <__retarget_lock_acquire_recursive>:
 8008b64:	4770      	bx	lr

08008b66 <__retarget_lock_release_recursive>:
 8008b66:	4770      	bx	lr

08008b68 <_free_r>:
 8008b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b6a:	2900      	cmp	r1, #0
 8008b6c:	d044      	beq.n	8008bf8 <_free_r+0x90>
 8008b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b72:	9001      	str	r0, [sp, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f1a1 0404 	sub.w	r4, r1, #4
 8008b7a:	bfb8      	it	lt
 8008b7c:	18e4      	addlt	r4, r4, r3
 8008b7e:	f000 f8df 	bl	8008d40 <__malloc_lock>
 8008b82:	4a1e      	ldr	r2, [pc, #120]	; (8008bfc <_free_r+0x94>)
 8008b84:	9801      	ldr	r0, [sp, #4]
 8008b86:	6813      	ldr	r3, [r2, #0]
 8008b88:	b933      	cbnz	r3, 8008b98 <_free_r+0x30>
 8008b8a:	6063      	str	r3, [r4, #4]
 8008b8c:	6014      	str	r4, [r2, #0]
 8008b8e:	b003      	add	sp, #12
 8008b90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b94:	f000 b8da 	b.w	8008d4c <__malloc_unlock>
 8008b98:	42a3      	cmp	r3, r4
 8008b9a:	d908      	bls.n	8008bae <_free_r+0x46>
 8008b9c:	6825      	ldr	r5, [r4, #0]
 8008b9e:	1961      	adds	r1, r4, r5
 8008ba0:	428b      	cmp	r3, r1
 8008ba2:	bf01      	itttt	eq
 8008ba4:	6819      	ldreq	r1, [r3, #0]
 8008ba6:	685b      	ldreq	r3, [r3, #4]
 8008ba8:	1949      	addeq	r1, r1, r5
 8008baa:	6021      	streq	r1, [r4, #0]
 8008bac:	e7ed      	b.n	8008b8a <_free_r+0x22>
 8008bae:	461a      	mov	r2, r3
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	b10b      	cbz	r3, 8008bb8 <_free_r+0x50>
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	d9fa      	bls.n	8008bae <_free_r+0x46>
 8008bb8:	6811      	ldr	r1, [r2, #0]
 8008bba:	1855      	adds	r5, r2, r1
 8008bbc:	42a5      	cmp	r5, r4
 8008bbe:	d10b      	bne.n	8008bd8 <_free_r+0x70>
 8008bc0:	6824      	ldr	r4, [r4, #0]
 8008bc2:	4421      	add	r1, r4
 8008bc4:	1854      	adds	r4, r2, r1
 8008bc6:	42a3      	cmp	r3, r4
 8008bc8:	6011      	str	r1, [r2, #0]
 8008bca:	d1e0      	bne.n	8008b8e <_free_r+0x26>
 8008bcc:	681c      	ldr	r4, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	6053      	str	r3, [r2, #4]
 8008bd2:	440c      	add	r4, r1
 8008bd4:	6014      	str	r4, [r2, #0]
 8008bd6:	e7da      	b.n	8008b8e <_free_r+0x26>
 8008bd8:	d902      	bls.n	8008be0 <_free_r+0x78>
 8008bda:	230c      	movs	r3, #12
 8008bdc:	6003      	str	r3, [r0, #0]
 8008bde:	e7d6      	b.n	8008b8e <_free_r+0x26>
 8008be0:	6825      	ldr	r5, [r4, #0]
 8008be2:	1961      	adds	r1, r4, r5
 8008be4:	428b      	cmp	r3, r1
 8008be6:	bf04      	itt	eq
 8008be8:	6819      	ldreq	r1, [r3, #0]
 8008bea:	685b      	ldreq	r3, [r3, #4]
 8008bec:	6063      	str	r3, [r4, #4]
 8008bee:	bf04      	itt	eq
 8008bf0:	1949      	addeq	r1, r1, r5
 8008bf2:	6021      	streq	r1, [r4, #0]
 8008bf4:	6054      	str	r4, [r2, #4]
 8008bf6:	e7ca      	b.n	8008b8e <_free_r+0x26>
 8008bf8:	b003      	add	sp, #12
 8008bfa:	bd30      	pop	{r4, r5, pc}
 8008bfc:	20000e80 	.word	0x20000e80

08008c00 <sbrk_aligned>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4e0e      	ldr	r6, [pc, #56]	; (8008c3c <sbrk_aligned+0x3c>)
 8008c04:	460c      	mov	r4, r1
 8008c06:	6831      	ldr	r1, [r6, #0]
 8008c08:	4605      	mov	r5, r0
 8008c0a:	b911      	cbnz	r1, 8008c12 <sbrk_aligned+0x12>
 8008c0c:	f000 fba6 	bl	800935c <_sbrk_r>
 8008c10:	6030      	str	r0, [r6, #0]
 8008c12:	4621      	mov	r1, r4
 8008c14:	4628      	mov	r0, r5
 8008c16:	f000 fba1 	bl	800935c <_sbrk_r>
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	d00a      	beq.n	8008c34 <sbrk_aligned+0x34>
 8008c1e:	1cc4      	adds	r4, r0, #3
 8008c20:	f024 0403 	bic.w	r4, r4, #3
 8008c24:	42a0      	cmp	r0, r4
 8008c26:	d007      	beq.n	8008c38 <sbrk_aligned+0x38>
 8008c28:	1a21      	subs	r1, r4, r0
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f000 fb96 	bl	800935c <_sbrk_r>
 8008c30:	3001      	adds	r0, #1
 8008c32:	d101      	bne.n	8008c38 <sbrk_aligned+0x38>
 8008c34:	f04f 34ff 	mov.w	r4, #4294967295
 8008c38:	4620      	mov	r0, r4
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	20000e84 	.word	0x20000e84

08008c40 <_malloc_r>:
 8008c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c44:	1ccd      	adds	r5, r1, #3
 8008c46:	f025 0503 	bic.w	r5, r5, #3
 8008c4a:	3508      	adds	r5, #8
 8008c4c:	2d0c      	cmp	r5, #12
 8008c4e:	bf38      	it	cc
 8008c50:	250c      	movcc	r5, #12
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	4607      	mov	r7, r0
 8008c56:	db01      	blt.n	8008c5c <_malloc_r+0x1c>
 8008c58:	42a9      	cmp	r1, r5
 8008c5a:	d905      	bls.n	8008c68 <_malloc_r+0x28>
 8008c5c:	230c      	movs	r3, #12
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	2600      	movs	r6, #0
 8008c62:	4630      	mov	r0, r6
 8008c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d3c <_malloc_r+0xfc>
 8008c6c:	f000 f868 	bl	8008d40 <__malloc_lock>
 8008c70:	f8d8 3000 	ldr.w	r3, [r8]
 8008c74:	461c      	mov	r4, r3
 8008c76:	bb5c      	cbnz	r4, 8008cd0 <_malloc_r+0x90>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	f7ff ffc0 	bl	8008c00 <sbrk_aligned>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	4604      	mov	r4, r0
 8008c84:	d155      	bne.n	8008d32 <_malloc_r+0xf2>
 8008c86:	f8d8 4000 	ldr.w	r4, [r8]
 8008c8a:	4626      	mov	r6, r4
 8008c8c:	2e00      	cmp	r6, #0
 8008c8e:	d145      	bne.n	8008d1c <_malloc_r+0xdc>
 8008c90:	2c00      	cmp	r4, #0
 8008c92:	d048      	beq.n	8008d26 <_malloc_r+0xe6>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	4631      	mov	r1, r6
 8008c98:	4638      	mov	r0, r7
 8008c9a:	eb04 0903 	add.w	r9, r4, r3
 8008c9e:	f000 fb5d 	bl	800935c <_sbrk_r>
 8008ca2:	4581      	cmp	r9, r0
 8008ca4:	d13f      	bne.n	8008d26 <_malloc_r+0xe6>
 8008ca6:	6821      	ldr	r1, [r4, #0]
 8008ca8:	1a6d      	subs	r5, r5, r1
 8008caa:	4629      	mov	r1, r5
 8008cac:	4638      	mov	r0, r7
 8008cae:	f7ff ffa7 	bl	8008c00 <sbrk_aligned>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d037      	beq.n	8008d26 <_malloc_r+0xe6>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	442b      	add	r3, r5
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d038      	beq.n	8008d36 <_malloc_r+0xf6>
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	42a2      	cmp	r2, r4
 8008cc8:	d12b      	bne.n	8008d22 <_malloc_r+0xe2>
 8008cca:	2200      	movs	r2, #0
 8008ccc:	605a      	str	r2, [r3, #4]
 8008cce:	e00f      	b.n	8008cf0 <_malloc_r+0xb0>
 8008cd0:	6822      	ldr	r2, [r4, #0]
 8008cd2:	1b52      	subs	r2, r2, r5
 8008cd4:	d41f      	bmi.n	8008d16 <_malloc_r+0xd6>
 8008cd6:	2a0b      	cmp	r2, #11
 8008cd8:	d917      	bls.n	8008d0a <_malloc_r+0xca>
 8008cda:	1961      	adds	r1, r4, r5
 8008cdc:	42a3      	cmp	r3, r4
 8008cde:	6025      	str	r5, [r4, #0]
 8008ce0:	bf18      	it	ne
 8008ce2:	6059      	strne	r1, [r3, #4]
 8008ce4:	6863      	ldr	r3, [r4, #4]
 8008ce6:	bf08      	it	eq
 8008ce8:	f8c8 1000 	streq.w	r1, [r8]
 8008cec:	5162      	str	r2, [r4, r5]
 8008cee:	604b      	str	r3, [r1, #4]
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	f104 060b 	add.w	r6, r4, #11
 8008cf6:	f000 f829 	bl	8008d4c <__malloc_unlock>
 8008cfa:	f026 0607 	bic.w	r6, r6, #7
 8008cfe:	1d23      	adds	r3, r4, #4
 8008d00:	1af2      	subs	r2, r6, r3
 8008d02:	d0ae      	beq.n	8008c62 <_malloc_r+0x22>
 8008d04:	1b9b      	subs	r3, r3, r6
 8008d06:	50a3      	str	r3, [r4, r2]
 8008d08:	e7ab      	b.n	8008c62 <_malloc_r+0x22>
 8008d0a:	42a3      	cmp	r3, r4
 8008d0c:	6862      	ldr	r2, [r4, #4]
 8008d0e:	d1dd      	bne.n	8008ccc <_malloc_r+0x8c>
 8008d10:	f8c8 2000 	str.w	r2, [r8]
 8008d14:	e7ec      	b.n	8008cf0 <_malloc_r+0xb0>
 8008d16:	4623      	mov	r3, r4
 8008d18:	6864      	ldr	r4, [r4, #4]
 8008d1a:	e7ac      	b.n	8008c76 <_malloc_r+0x36>
 8008d1c:	4634      	mov	r4, r6
 8008d1e:	6876      	ldr	r6, [r6, #4]
 8008d20:	e7b4      	b.n	8008c8c <_malloc_r+0x4c>
 8008d22:	4613      	mov	r3, r2
 8008d24:	e7cc      	b.n	8008cc0 <_malloc_r+0x80>
 8008d26:	230c      	movs	r3, #12
 8008d28:	603b      	str	r3, [r7, #0]
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	f000 f80e 	bl	8008d4c <__malloc_unlock>
 8008d30:	e797      	b.n	8008c62 <_malloc_r+0x22>
 8008d32:	6025      	str	r5, [r4, #0]
 8008d34:	e7dc      	b.n	8008cf0 <_malloc_r+0xb0>
 8008d36:	605b      	str	r3, [r3, #4]
 8008d38:	deff      	udf	#255	; 0xff
 8008d3a:	bf00      	nop
 8008d3c:	20000e80 	.word	0x20000e80

08008d40 <__malloc_lock>:
 8008d40:	4801      	ldr	r0, [pc, #4]	; (8008d48 <__malloc_lock+0x8>)
 8008d42:	f7ff bf0f 	b.w	8008b64 <__retarget_lock_acquire_recursive>
 8008d46:	bf00      	nop
 8008d48:	20000e7c 	.word	0x20000e7c

08008d4c <__malloc_unlock>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__malloc_unlock+0x8>)
 8008d4e:	f7ff bf0a 	b.w	8008b66 <__retarget_lock_release_recursive>
 8008d52:	bf00      	nop
 8008d54:	20000e7c 	.word	0x20000e7c

08008d58 <__ssputs_r>:
 8008d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d5c:	688e      	ldr	r6, [r1, #8]
 8008d5e:	461f      	mov	r7, r3
 8008d60:	42be      	cmp	r6, r7
 8008d62:	680b      	ldr	r3, [r1, #0]
 8008d64:	4682      	mov	sl, r0
 8008d66:	460c      	mov	r4, r1
 8008d68:	4690      	mov	r8, r2
 8008d6a:	d82c      	bhi.n	8008dc6 <__ssputs_r+0x6e>
 8008d6c:	898a      	ldrh	r2, [r1, #12]
 8008d6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d72:	d026      	beq.n	8008dc2 <__ssputs_r+0x6a>
 8008d74:	6965      	ldr	r5, [r4, #20]
 8008d76:	6909      	ldr	r1, [r1, #16]
 8008d78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d7c:	eba3 0901 	sub.w	r9, r3, r1
 8008d80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d84:	1c7b      	adds	r3, r7, #1
 8008d86:	444b      	add	r3, r9
 8008d88:	106d      	asrs	r5, r5, #1
 8008d8a:	429d      	cmp	r5, r3
 8008d8c:	bf38      	it	cc
 8008d8e:	461d      	movcc	r5, r3
 8008d90:	0553      	lsls	r3, r2, #21
 8008d92:	d527      	bpl.n	8008de4 <__ssputs_r+0x8c>
 8008d94:	4629      	mov	r1, r5
 8008d96:	f7ff ff53 	bl	8008c40 <_malloc_r>
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	b360      	cbz	r0, 8008df8 <__ssputs_r+0xa0>
 8008d9e:	6921      	ldr	r1, [r4, #16]
 8008da0:	464a      	mov	r2, r9
 8008da2:	f000 faeb 	bl	800937c <memcpy>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db0:	81a3      	strh	r3, [r4, #12]
 8008db2:	6126      	str	r6, [r4, #16]
 8008db4:	6165      	str	r5, [r4, #20]
 8008db6:	444e      	add	r6, r9
 8008db8:	eba5 0509 	sub.w	r5, r5, r9
 8008dbc:	6026      	str	r6, [r4, #0]
 8008dbe:	60a5      	str	r5, [r4, #8]
 8008dc0:	463e      	mov	r6, r7
 8008dc2:	42be      	cmp	r6, r7
 8008dc4:	d900      	bls.n	8008dc8 <__ssputs_r+0x70>
 8008dc6:	463e      	mov	r6, r7
 8008dc8:	6820      	ldr	r0, [r4, #0]
 8008dca:	4632      	mov	r2, r6
 8008dcc:	4641      	mov	r1, r8
 8008dce:	f000 faab 	bl	8009328 <memmove>
 8008dd2:	68a3      	ldr	r3, [r4, #8]
 8008dd4:	1b9b      	subs	r3, r3, r6
 8008dd6:	60a3      	str	r3, [r4, #8]
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	4433      	add	r3, r6
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	2000      	movs	r0, #0
 8008de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de4:	462a      	mov	r2, r5
 8008de6:	f000 fad7 	bl	8009398 <_realloc_r>
 8008dea:	4606      	mov	r6, r0
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d1e0      	bne.n	8008db2 <__ssputs_r+0x5a>
 8008df0:	6921      	ldr	r1, [r4, #16]
 8008df2:	4650      	mov	r0, sl
 8008df4:	f7ff feb8 	bl	8008b68 <_free_r>
 8008df8:	230c      	movs	r3, #12
 8008dfa:	f8ca 3000 	str.w	r3, [sl]
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e04:	81a3      	strh	r3, [r4, #12]
 8008e06:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0a:	e7e9      	b.n	8008de0 <__ssputs_r+0x88>

08008e0c <_svfiprintf_r>:
 8008e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e10:	4698      	mov	r8, r3
 8008e12:	898b      	ldrh	r3, [r1, #12]
 8008e14:	061b      	lsls	r3, r3, #24
 8008e16:	b09d      	sub	sp, #116	; 0x74
 8008e18:	4607      	mov	r7, r0
 8008e1a:	460d      	mov	r5, r1
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	d50e      	bpl.n	8008e3e <_svfiprintf_r+0x32>
 8008e20:	690b      	ldr	r3, [r1, #16]
 8008e22:	b963      	cbnz	r3, 8008e3e <_svfiprintf_r+0x32>
 8008e24:	2140      	movs	r1, #64	; 0x40
 8008e26:	f7ff ff0b 	bl	8008c40 <_malloc_r>
 8008e2a:	6028      	str	r0, [r5, #0]
 8008e2c:	6128      	str	r0, [r5, #16]
 8008e2e:	b920      	cbnz	r0, 8008e3a <_svfiprintf_r+0x2e>
 8008e30:	230c      	movs	r3, #12
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	e0d0      	b.n	8008fdc <_svfiprintf_r+0x1d0>
 8008e3a:	2340      	movs	r3, #64	; 0x40
 8008e3c:	616b      	str	r3, [r5, #20]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	9309      	str	r3, [sp, #36]	; 0x24
 8008e42:	2320      	movs	r3, #32
 8008e44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e48:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e4c:	2330      	movs	r3, #48	; 0x30
 8008e4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ff4 <_svfiprintf_r+0x1e8>
 8008e52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e56:	f04f 0901 	mov.w	r9, #1
 8008e5a:	4623      	mov	r3, r4
 8008e5c:	469a      	mov	sl, r3
 8008e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e62:	b10a      	cbz	r2, 8008e68 <_svfiprintf_r+0x5c>
 8008e64:	2a25      	cmp	r2, #37	; 0x25
 8008e66:	d1f9      	bne.n	8008e5c <_svfiprintf_r+0x50>
 8008e68:	ebba 0b04 	subs.w	fp, sl, r4
 8008e6c:	d00b      	beq.n	8008e86 <_svfiprintf_r+0x7a>
 8008e6e:	465b      	mov	r3, fp
 8008e70:	4622      	mov	r2, r4
 8008e72:	4629      	mov	r1, r5
 8008e74:	4638      	mov	r0, r7
 8008e76:	f7ff ff6f 	bl	8008d58 <__ssputs_r>
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	f000 80a9 	beq.w	8008fd2 <_svfiprintf_r+0x1c6>
 8008e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e82:	445a      	add	r2, fp
 8008e84:	9209      	str	r2, [sp, #36]	; 0x24
 8008e86:	f89a 3000 	ldrb.w	r3, [sl]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 80a1 	beq.w	8008fd2 <_svfiprintf_r+0x1c6>
 8008e90:	2300      	movs	r3, #0
 8008e92:	f04f 32ff 	mov.w	r2, #4294967295
 8008e96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e9a:	f10a 0a01 	add.w	sl, sl, #1
 8008e9e:	9304      	str	r3, [sp, #16]
 8008ea0:	9307      	str	r3, [sp, #28]
 8008ea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ea6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ea8:	4654      	mov	r4, sl
 8008eaa:	2205      	movs	r2, #5
 8008eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb0:	4850      	ldr	r0, [pc, #320]	; (8008ff4 <_svfiprintf_r+0x1e8>)
 8008eb2:	f7f7 f99d 	bl	80001f0 <memchr>
 8008eb6:	9a04      	ldr	r2, [sp, #16]
 8008eb8:	b9d8      	cbnz	r0, 8008ef2 <_svfiprintf_r+0xe6>
 8008eba:	06d0      	lsls	r0, r2, #27
 8008ebc:	bf44      	itt	mi
 8008ebe:	2320      	movmi	r3, #32
 8008ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ec4:	0711      	lsls	r1, r2, #28
 8008ec6:	bf44      	itt	mi
 8008ec8:	232b      	movmi	r3, #43	; 0x2b
 8008eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ece:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ed4:	d015      	beq.n	8008f02 <_svfiprintf_r+0xf6>
 8008ed6:	9a07      	ldr	r2, [sp, #28]
 8008ed8:	4654      	mov	r4, sl
 8008eda:	2000      	movs	r0, #0
 8008edc:	f04f 0c0a 	mov.w	ip, #10
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee6:	3b30      	subs	r3, #48	; 0x30
 8008ee8:	2b09      	cmp	r3, #9
 8008eea:	d94d      	bls.n	8008f88 <_svfiprintf_r+0x17c>
 8008eec:	b1b0      	cbz	r0, 8008f1c <_svfiprintf_r+0x110>
 8008eee:	9207      	str	r2, [sp, #28]
 8008ef0:	e014      	b.n	8008f1c <_svfiprintf_r+0x110>
 8008ef2:	eba0 0308 	sub.w	r3, r0, r8
 8008ef6:	fa09 f303 	lsl.w	r3, r9, r3
 8008efa:	4313      	orrs	r3, r2
 8008efc:	9304      	str	r3, [sp, #16]
 8008efe:	46a2      	mov	sl, r4
 8008f00:	e7d2      	b.n	8008ea8 <_svfiprintf_r+0x9c>
 8008f02:	9b03      	ldr	r3, [sp, #12]
 8008f04:	1d19      	adds	r1, r3, #4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	9103      	str	r1, [sp, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bfbb      	ittet	lt
 8008f0e:	425b      	neglt	r3, r3
 8008f10:	f042 0202 	orrlt.w	r2, r2, #2
 8008f14:	9307      	strge	r3, [sp, #28]
 8008f16:	9307      	strlt	r3, [sp, #28]
 8008f18:	bfb8      	it	lt
 8008f1a:	9204      	strlt	r2, [sp, #16]
 8008f1c:	7823      	ldrb	r3, [r4, #0]
 8008f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8008f20:	d10c      	bne.n	8008f3c <_svfiprintf_r+0x130>
 8008f22:	7863      	ldrb	r3, [r4, #1]
 8008f24:	2b2a      	cmp	r3, #42	; 0x2a
 8008f26:	d134      	bne.n	8008f92 <_svfiprintf_r+0x186>
 8008f28:	9b03      	ldr	r3, [sp, #12]
 8008f2a:	1d1a      	adds	r2, r3, #4
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	9203      	str	r2, [sp, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bfb8      	it	lt
 8008f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f38:	3402      	adds	r4, #2
 8008f3a:	9305      	str	r3, [sp, #20]
 8008f3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009004 <_svfiprintf_r+0x1f8>
 8008f40:	7821      	ldrb	r1, [r4, #0]
 8008f42:	2203      	movs	r2, #3
 8008f44:	4650      	mov	r0, sl
 8008f46:	f7f7 f953 	bl	80001f0 <memchr>
 8008f4a:	b138      	cbz	r0, 8008f5c <_svfiprintf_r+0x150>
 8008f4c:	9b04      	ldr	r3, [sp, #16]
 8008f4e:	eba0 000a 	sub.w	r0, r0, sl
 8008f52:	2240      	movs	r2, #64	; 0x40
 8008f54:	4082      	lsls	r2, r0
 8008f56:	4313      	orrs	r3, r2
 8008f58:	3401      	adds	r4, #1
 8008f5a:	9304      	str	r3, [sp, #16]
 8008f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f60:	4825      	ldr	r0, [pc, #148]	; (8008ff8 <_svfiprintf_r+0x1ec>)
 8008f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f66:	2206      	movs	r2, #6
 8008f68:	f7f7 f942 	bl	80001f0 <memchr>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d038      	beq.n	8008fe2 <_svfiprintf_r+0x1d6>
 8008f70:	4b22      	ldr	r3, [pc, #136]	; (8008ffc <_svfiprintf_r+0x1f0>)
 8008f72:	bb1b      	cbnz	r3, 8008fbc <_svfiprintf_r+0x1b0>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	3307      	adds	r3, #7
 8008f78:	f023 0307 	bic.w	r3, r3, #7
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	9303      	str	r3, [sp, #12]
 8008f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f82:	4433      	add	r3, r6
 8008f84:	9309      	str	r3, [sp, #36]	; 0x24
 8008f86:	e768      	b.n	8008e5a <_svfiprintf_r+0x4e>
 8008f88:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	2001      	movs	r0, #1
 8008f90:	e7a6      	b.n	8008ee0 <_svfiprintf_r+0xd4>
 8008f92:	2300      	movs	r3, #0
 8008f94:	3401      	adds	r4, #1
 8008f96:	9305      	str	r3, [sp, #20]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	f04f 0c0a 	mov.w	ip, #10
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fa4:	3a30      	subs	r2, #48	; 0x30
 8008fa6:	2a09      	cmp	r2, #9
 8008fa8:	d903      	bls.n	8008fb2 <_svfiprintf_r+0x1a6>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0c6      	beq.n	8008f3c <_svfiprintf_r+0x130>
 8008fae:	9105      	str	r1, [sp, #20]
 8008fb0:	e7c4      	b.n	8008f3c <_svfiprintf_r+0x130>
 8008fb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e7f0      	b.n	8008f9e <_svfiprintf_r+0x192>
 8008fbc:	ab03      	add	r3, sp, #12
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	462a      	mov	r2, r5
 8008fc2:	4b0f      	ldr	r3, [pc, #60]	; (8009000 <_svfiprintf_r+0x1f4>)
 8008fc4:	a904      	add	r1, sp, #16
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f3af 8000 	nop.w
 8008fcc:	1c42      	adds	r2, r0, #1
 8008fce:	4606      	mov	r6, r0
 8008fd0:	d1d6      	bne.n	8008f80 <_svfiprintf_r+0x174>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	065b      	lsls	r3, r3, #25
 8008fd6:	f53f af2d 	bmi.w	8008e34 <_svfiprintf_r+0x28>
 8008fda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fdc:	b01d      	add	sp, #116	; 0x74
 8008fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe2:	ab03      	add	r3, sp, #12
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	462a      	mov	r2, r5
 8008fe8:	4b05      	ldr	r3, [pc, #20]	; (8009000 <_svfiprintf_r+0x1f4>)
 8008fea:	a904      	add	r1, sp, #16
 8008fec:	4638      	mov	r0, r7
 8008fee:	f000 f879 	bl	80090e4 <_printf_i>
 8008ff2:	e7eb      	b.n	8008fcc <_svfiprintf_r+0x1c0>
 8008ff4:	08009564 	.word	0x08009564
 8008ff8:	0800956e 	.word	0x0800956e
 8008ffc:	00000000 	.word	0x00000000
 8009000:	08008d59 	.word	0x08008d59
 8009004:	0800956a 	.word	0x0800956a

08009008 <_printf_common>:
 8009008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800900c:	4616      	mov	r6, r2
 800900e:	4699      	mov	r9, r3
 8009010:	688a      	ldr	r2, [r1, #8]
 8009012:	690b      	ldr	r3, [r1, #16]
 8009014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009018:	4293      	cmp	r3, r2
 800901a:	bfb8      	it	lt
 800901c:	4613      	movlt	r3, r2
 800901e:	6033      	str	r3, [r6, #0]
 8009020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009024:	4607      	mov	r7, r0
 8009026:	460c      	mov	r4, r1
 8009028:	b10a      	cbz	r2, 800902e <_printf_common+0x26>
 800902a:	3301      	adds	r3, #1
 800902c:	6033      	str	r3, [r6, #0]
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	0699      	lsls	r1, r3, #26
 8009032:	bf42      	ittt	mi
 8009034:	6833      	ldrmi	r3, [r6, #0]
 8009036:	3302      	addmi	r3, #2
 8009038:	6033      	strmi	r3, [r6, #0]
 800903a:	6825      	ldr	r5, [r4, #0]
 800903c:	f015 0506 	ands.w	r5, r5, #6
 8009040:	d106      	bne.n	8009050 <_printf_common+0x48>
 8009042:	f104 0a19 	add.w	sl, r4, #25
 8009046:	68e3      	ldr	r3, [r4, #12]
 8009048:	6832      	ldr	r2, [r6, #0]
 800904a:	1a9b      	subs	r3, r3, r2
 800904c:	42ab      	cmp	r3, r5
 800904e:	dc26      	bgt.n	800909e <_printf_common+0x96>
 8009050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009054:	1e13      	subs	r3, r2, #0
 8009056:	6822      	ldr	r2, [r4, #0]
 8009058:	bf18      	it	ne
 800905a:	2301      	movne	r3, #1
 800905c:	0692      	lsls	r2, r2, #26
 800905e:	d42b      	bmi.n	80090b8 <_printf_common+0xb0>
 8009060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009064:	4649      	mov	r1, r9
 8009066:	4638      	mov	r0, r7
 8009068:	47c0      	blx	r8
 800906a:	3001      	adds	r0, #1
 800906c:	d01e      	beq.n	80090ac <_printf_common+0xa4>
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	6922      	ldr	r2, [r4, #16]
 8009072:	f003 0306 	and.w	r3, r3, #6
 8009076:	2b04      	cmp	r3, #4
 8009078:	bf02      	ittt	eq
 800907a:	68e5      	ldreq	r5, [r4, #12]
 800907c:	6833      	ldreq	r3, [r6, #0]
 800907e:	1aed      	subeq	r5, r5, r3
 8009080:	68a3      	ldr	r3, [r4, #8]
 8009082:	bf0c      	ite	eq
 8009084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009088:	2500      	movne	r5, #0
 800908a:	4293      	cmp	r3, r2
 800908c:	bfc4      	itt	gt
 800908e:	1a9b      	subgt	r3, r3, r2
 8009090:	18ed      	addgt	r5, r5, r3
 8009092:	2600      	movs	r6, #0
 8009094:	341a      	adds	r4, #26
 8009096:	42b5      	cmp	r5, r6
 8009098:	d11a      	bne.n	80090d0 <_printf_common+0xc8>
 800909a:	2000      	movs	r0, #0
 800909c:	e008      	b.n	80090b0 <_printf_common+0xa8>
 800909e:	2301      	movs	r3, #1
 80090a0:	4652      	mov	r2, sl
 80090a2:	4649      	mov	r1, r9
 80090a4:	4638      	mov	r0, r7
 80090a6:	47c0      	blx	r8
 80090a8:	3001      	adds	r0, #1
 80090aa:	d103      	bne.n	80090b4 <_printf_common+0xac>
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295
 80090b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b4:	3501      	adds	r5, #1
 80090b6:	e7c6      	b.n	8009046 <_printf_common+0x3e>
 80090b8:	18e1      	adds	r1, r4, r3
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	2030      	movs	r0, #48	; 0x30
 80090be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090c2:	4422      	add	r2, r4
 80090c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090cc:	3302      	adds	r3, #2
 80090ce:	e7c7      	b.n	8009060 <_printf_common+0x58>
 80090d0:	2301      	movs	r3, #1
 80090d2:	4622      	mov	r2, r4
 80090d4:	4649      	mov	r1, r9
 80090d6:	4638      	mov	r0, r7
 80090d8:	47c0      	blx	r8
 80090da:	3001      	adds	r0, #1
 80090dc:	d0e6      	beq.n	80090ac <_printf_common+0xa4>
 80090de:	3601      	adds	r6, #1
 80090e0:	e7d9      	b.n	8009096 <_printf_common+0x8e>
	...

080090e4 <_printf_i>:
 80090e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090e8:	7e0f      	ldrb	r7, [r1, #24]
 80090ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090ec:	2f78      	cmp	r7, #120	; 0x78
 80090ee:	4691      	mov	r9, r2
 80090f0:	4680      	mov	r8, r0
 80090f2:	460c      	mov	r4, r1
 80090f4:	469a      	mov	sl, r3
 80090f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090fa:	d807      	bhi.n	800910c <_printf_i+0x28>
 80090fc:	2f62      	cmp	r7, #98	; 0x62
 80090fe:	d80a      	bhi.n	8009116 <_printf_i+0x32>
 8009100:	2f00      	cmp	r7, #0
 8009102:	f000 80d4 	beq.w	80092ae <_printf_i+0x1ca>
 8009106:	2f58      	cmp	r7, #88	; 0x58
 8009108:	f000 80c0 	beq.w	800928c <_printf_i+0x1a8>
 800910c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009114:	e03a      	b.n	800918c <_printf_i+0xa8>
 8009116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800911a:	2b15      	cmp	r3, #21
 800911c:	d8f6      	bhi.n	800910c <_printf_i+0x28>
 800911e:	a101      	add	r1, pc, #4	; (adr r1, 8009124 <_printf_i+0x40>)
 8009120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009124:	0800917d 	.word	0x0800917d
 8009128:	08009191 	.word	0x08009191
 800912c:	0800910d 	.word	0x0800910d
 8009130:	0800910d 	.word	0x0800910d
 8009134:	0800910d 	.word	0x0800910d
 8009138:	0800910d 	.word	0x0800910d
 800913c:	08009191 	.word	0x08009191
 8009140:	0800910d 	.word	0x0800910d
 8009144:	0800910d 	.word	0x0800910d
 8009148:	0800910d 	.word	0x0800910d
 800914c:	0800910d 	.word	0x0800910d
 8009150:	08009295 	.word	0x08009295
 8009154:	080091bd 	.word	0x080091bd
 8009158:	0800924f 	.word	0x0800924f
 800915c:	0800910d 	.word	0x0800910d
 8009160:	0800910d 	.word	0x0800910d
 8009164:	080092b7 	.word	0x080092b7
 8009168:	0800910d 	.word	0x0800910d
 800916c:	080091bd 	.word	0x080091bd
 8009170:	0800910d 	.word	0x0800910d
 8009174:	0800910d 	.word	0x0800910d
 8009178:	08009257 	.word	0x08009257
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	1d1a      	adds	r2, r3, #4
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	602a      	str	r2, [r5, #0]
 8009184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800918c:	2301      	movs	r3, #1
 800918e:	e09f      	b.n	80092d0 <_printf_i+0x1ec>
 8009190:	6820      	ldr	r0, [r4, #0]
 8009192:	682b      	ldr	r3, [r5, #0]
 8009194:	0607      	lsls	r7, r0, #24
 8009196:	f103 0104 	add.w	r1, r3, #4
 800919a:	6029      	str	r1, [r5, #0]
 800919c:	d501      	bpl.n	80091a2 <_printf_i+0xbe>
 800919e:	681e      	ldr	r6, [r3, #0]
 80091a0:	e003      	b.n	80091aa <_printf_i+0xc6>
 80091a2:	0646      	lsls	r6, r0, #25
 80091a4:	d5fb      	bpl.n	800919e <_printf_i+0xba>
 80091a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091aa:	2e00      	cmp	r6, #0
 80091ac:	da03      	bge.n	80091b6 <_printf_i+0xd2>
 80091ae:	232d      	movs	r3, #45	; 0x2d
 80091b0:	4276      	negs	r6, r6
 80091b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091b6:	485a      	ldr	r0, [pc, #360]	; (8009320 <_printf_i+0x23c>)
 80091b8:	230a      	movs	r3, #10
 80091ba:	e012      	b.n	80091e2 <_printf_i+0xfe>
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	6820      	ldr	r0, [r4, #0]
 80091c0:	1d19      	adds	r1, r3, #4
 80091c2:	6029      	str	r1, [r5, #0]
 80091c4:	0605      	lsls	r5, r0, #24
 80091c6:	d501      	bpl.n	80091cc <_printf_i+0xe8>
 80091c8:	681e      	ldr	r6, [r3, #0]
 80091ca:	e002      	b.n	80091d2 <_printf_i+0xee>
 80091cc:	0641      	lsls	r1, r0, #25
 80091ce:	d5fb      	bpl.n	80091c8 <_printf_i+0xe4>
 80091d0:	881e      	ldrh	r6, [r3, #0]
 80091d2:	4853      	ldr	r0, [pc, #332]	; (8009320 <_printf_i+0x23c>)
 80091d4:	2f6f      	cmp	r7, #111	; 0x6f
 80091d6:	bf0c      	ite	eq
 80091d8:	2308      	moveq	r3, #8
 80091da:	230a      	movne	r3, #10
 80091dc:	2100      	movs	r1, #0
 80091de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091e2:	6865      	ldr	r5, [r4, #4]
 80091e4:	60a5      	str	r5, [r4, #8]
 80091e6:	2d00      	cmp	r5, #0
 80091e8:	bfa2      	ittt	ge
 80091ea:	6821      	ldrge	r1, [r4, #0]
 80091ec:	f021 0104 	bicge.w	r1, r1, #4
 80091f0:	6021      	strge	r1, [r4, #0]
 80091f2:	b90e      	cbnz	r6, 80091f8 <_printf_i+0x114>
 80091f4:	2d00      	cmp	r5, #0
 80091f6:	d04b      	beq.n	8009290 <_printf_i+0x1ac>
 80091f8:	4615      	mov	r5, r2
 80091fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80091fe:	fb03 6711 	mls	r7, r3, r1, r6
 8009202:	5dc7      	ldrb	r7, [r0, r7]
 8009204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009208:	4637      	mov	r7, r6
 800920a:	42bb      	cmp	r3, r7
 800920c:	460e      	mov	r6, r1
 800920e:	d9f4      	bls.n	80091fa <_printf_i+0x116>
 8009210:	2b08      	cmp	r3, #8
 8009212:	d10b      	bne.n	800922c <_printf_i+0x148>
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	07de      	lsls	r6, r3, #31
 8009218:	d508      	bpl.n	800922c <_printf_i+0x148>
 800921a:	6923      	ldr	r3, [r4, #16]
 800921c:	6861      	ldr	r1, [r4, #4]
 800921e:	4299      	cmp	r1, r3
 8009220:	bfde      	ittt	le
 8009222:	2330      	movle	r3, #48	; 0x30
 8009224:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009228:	f105 35ff 	addle.w	r5, r5, #4294967295
 800922c:	1b52      	subs	r2, r2, r5
 800922e:	6122      	str	r2, [r4, #16]
 8009230:	f8cd a000 	str.w	sl, [sp]
 8009234:	464b      	mov	r3, r9
 8009236:	aa03      	add	r2, sp, #12
 8009238:	4621      	mov	r1, r4
 800923a:	4640      	mov	r0, r8
 800923c:	f7ff fee4 	bl	8009008 <_printf_common>
 8009240:	3001      	adds	r0, #1
 8009242:	d14a      	bne.n	80092da <_printf_i+0x1f6>
 8009244:	f04f 30ff 	mov.w	r0, #4294967295
 8009248:	b004      	add	sp, #16
 800924a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	f043 0320 	orr.w	r3, r3, #32
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	4833      	ldr	r0, [pc, #204]	; (8009324 <_printf_i+0x240>)
 8009258:	2778      	movs	r7, #120	; 0x78
 800925a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	6829      	ldr	r1, [r5, #0]
 8009262:	061f      	lsls	r7, r3, #24
 8009264:	f851 6b04 	ldr.w	r6, [r1], #4
 8009268:	d402      	bmi.n	8009270 <_printf_i+0x18c>
 800926a:	065f      	lsls	r7, r3, #25
 800926c:	bf48      	it	mi
 800926e:	b2b6      	uxthmi	r6, r6
 8009270:	07df      	lsls	r7, r3, #31
 8009272:	bf48      	it	mi
 8009274:	f043 0320 	orrmi.w	r3, r3, #32
 8009278:	6029      	str	r1, [r5, #0]
 800927a:	bf48      	it	mi
 800927c:	6023      	strmi	r3, [r4, #0]
 800927e:	b91e      	cbnz	r6, 8009288 <_printf_i+0x1a4>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	f023 0320 	bic.w	r3, r3, #32
 8009286:	6023      	str	r3, [r4, #0]
 8009288:	2310      	movs	r3, #16
 800928a:	e7a7      	b.n	80091dc <_printf_i+0xf8>
 800928c:	4824      	ldr	r0, [pc, #144]	; (8009320 <_printf_i+0x23c>)
 800928e:	e7e4      	b.n	800925a <_printf_i+0x176>
 8009290:	4615      	mov	r5, r2
 8009292:	e7bd      	b.n	8009210 <_printf_i+0x12c>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	6826      	ldr	r6, [r4, #0]
 8009298:	6961      	ldr	r1, [r4, #20]
 800929a:	1d18      	adds	r0, r3, #4
 800929c:	6028      	str	r0, [r5, #0]
 800929e:	0635      	lsls	r5, r6, #24
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	d501      	bpl.n	80092a8 <_printf_i+0x1c4>
 80092a4:	6019      	str	r1, [r3, #0]
 80092a6:	e002      	b.n	80092ae <_printf_i+0x1ca>
 80092a8:	0670      	lsls	r0, r6, #25
 80092aa:	d5fb      	bpl.n	80092a4 <_printf_i+0x1c0>
 80092ac:	8019      	strh	r1, [r3, #0]
 80092ae:	2300      	movs	r3, #0
 80092b0:	6123      	str	r3, [r4, #16]
 80092b2:	4615      	mov	r5, r2
 80092b4:	e7bc      	b.n	8009230 <_printf_i+0x14c>
 80092b6:	682b      	ldr	r3, [r5, #0]
 80092b8:	1d1a      	adds	r2, r3, #4
 80092ba:	602a      	str	r2, [r5, #0]
 80092bc:	681d      	ldr	r5, [r3, #0]
 80092be:	6862      	ldr	r2, [r4, #4]
 80092c0:	2100      	movs	r1, #0
 80092c2:	4628      	mov	r0, r5
 80092c4:	f7f6 ff94 	bl	80001f0 <memchr>
 80092c8:	b108      	cbz	r0, 80092ce <_printf_i+0x1ea>
 80092ca:	1b40      	subs	r0, r0, r5
 80092cc:	6060      	str	r0, [r4, #4]
 80092ce:	6863      	ldr	r3, [r4, #4]
 80092d0:	6123      	str	r3, [r4, #16]
 80092d2:	2300      	movs	r3, #0
 80092d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d8:	e7aa      	b.n	8009230 <_printf_i+0x14c>
 80092da:	6923      	ldr	r3, [r4, #16]
 80092dc:	462a      	mov	r2, r5
 80092de:	4649      	mov	r1, r9
 80092e0:	4640      	mov	r0, r8
 80092e2:	47d0      	blx	sl
 80092e4:	3001      	adds	r0, #1
 80092e6:	d0ad      	beq.n	8009244 <_printf_i+0x160>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	079b      	lsls	r3, r3, #30
 80092ec:	d413      	bmi.n	8009316 <_printf_i+0x232>
 80092ee:	68e0      	ldr	r0, [r4, #12]
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	4298      	cmp	r0, r3
 80092f4:	bfb8      	it	lt
 80092f6:	4618      	movlt	r0, r3
 80092f8:	e7a6      	b.n	8009248 <_printf_i+0x164>
 80092fa:	2301      	movs	r3, #1
 80092fc:	4632      	mov	r2, r6
 80092fe:	4649      	mov	r1, r9
 8009300:	4640      	mov	r0, r8
 8009302:	47d0      	blx	sl
 8009304:	3001      	adds	r0, #1
 8009306:	d09d      	beq.n	8009244 <_printf_i+0x160>
 8009308:	3501      	adds	r5, #1
 800930a:	68e3      	ldr	r3, [r4, #12]
 800930c:	9903      	ldr	r1, [sp, #12]
 800930e:	1a5b      	subs	r3, r3, r1
 8009310:	42ab      	cmp	r3, r5
 8009312:	dcf2      	bgt.n	80092fa <_printf_i+0x216>
 8009314:	e7eb      	b.n	80092ee <_printf_i+0x20a>
 8009316:	2500      	movs	r5, #0
 8009318:	f104 0619 	add.w	r6, r4, #25
 800931c:	e7f5      	b.n	800930a <_printf_i+0x226>
 800931e:	bf00      	nop
 8009320:	08009575 	.word	0x08009575
 8009324:	08009586 	.word	0x08009586

08009328 <memmove>:
 8009328:	4288      	cmp	r0, r1
 800932a:	b510      	push	{r4, lr}
 800932c:	eb01 0402 	add.w	r4, r1, r2
 8009330:	d902      	bls.n	8009338 <memmove+0x10>
 8009332:	4284      	cmp	r4, r0
 8009334:	4623      	mov	r3, r4
 8009336:	d807      	bhi.n	8009348 <memmove+0x20>
 8009338:	1e43      	subs	r3, r0, #1
 800933a:	42a1      	cmp	r1, r4
 800933c:	d008      	beq.n	8009350 <memmove+0x28>
 800933e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009342:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009346:	e7f8      	b.n	800933a <memmove+0x12>
 8009348:	4402      	add	r2, r0
 800934a:	4601      	mov	r1, r0
 800934c:	428a      	cmp	r2, r1
 800934e:	d100      	bne.n	8009352 <memmove+0x2a>
 8009350:	bd10      	pop	{r4, pc}
 8009352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800935a:	e7f7      	b.n	800934c <memmove+0x24>

0800935c <_sbrk_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4d06      	ldr	r5, [pc, #24]	; (8009378 <_sbrk_r+0x1c>)
 8009360:	2300      	movs	r3, #0
 8009362:	4604      	mov	r4, r0
 8009364:	4608      	mov	r0, r1
 8009366:	602b      	str	r3, [r5, #0]
 8009368:	f7f8 feea 	bl	8002140 <_sbrk>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d102      	bne.n	8009376 <_sbrk_r+0x1a>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	b103      	cbz	r3, 8009376 <_sbrk_r+0x1a>
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	20000e78 	.word	0x20000e78

0800937c <memcpy>:
 800937c:	440a      	add	r2, r1
 800937e:	4291      	cmp	r1, r2
 8009380:	f100 33ff 	add.w	r3, r0, #4294967295
 8009384:	d100      	bne.n	8009388 <memcpy+0xc>
 8009386:	4770      	bx	lr
 8009388:	b510      	push	{r4, lr}
 800938a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800938e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009392:	4291      	cmp	r1, r2
 8009394:	d1f9      	bne.n	800938a <memcpy+0xe>
 8009396:	bd10      	pop	{r4, pc}

08009398 <_realloc_r>:
 8009398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800939c:	4680      	mov	r8, r0
 800939e:	4614      	mov	r4, r2
 80093a0:	460e      	mov	r6, r1
 80093a2:	b921      	cbnz	r1, 80093ae <_realloc_r+0x16>
 80093a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093a8:	4611      	mov	r1, r2
 80093aa:	f7ff bc49 	b.w	8008c40 <_malloc_r>
 80093ae:	b92a      	cbnz	r2, 80093bc <_realloc_r+0x24>
 80093b0:	f7ff fbda 	bl	8008b68 <_free_r>
 80093b4:	4625      	mov	r5, r4
 80093b6:	4628      	mov	r0, r5
 80093b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093bc:	f000 f81b 	bl	80093f6 <_malloc_usable_size_r>
 80093c0:	4284      	cmp	r4, r0
 80093c2:	4607      	mov	r7, r0
 80093c4:	d802      	bhi.n	80093cc <_realloc_r+0x34>
 80093c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093ca:	d812      	bhi.n	80093f2 <_realloc_r+0x5a>
 80093cc:	4621      	mov	r1, r4
 80093ce:	4640      	mov	r0, r8
 80093d0:	f7ff fc36 	bl	8008c40 <_malloc_r>
 80093d4:	4605      	mov	r5, r0
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d0ed      	beq.n	80093b6 <_realloc_r+0x1e>
 80093da:	42bc      	cmp	r4, r7
 80093dc:	4622      	mov	r2, r4
 80093de:	4631      	mov	r1, r6
 80093e0:	bf28      	it	cs
 80093e2:	463a      	movcs	r2, r7
 80093e4:	f7ff ffca 	bl	800937c <memcpy>
 80093e8:	4631      	mov	r1, r6
 80093ea:	4640      	mov	r0, r8
 80093ec:	f7ff fbbc 	bl	8008b68 <_free_r>
 80093f0:	e7e1      	b.n	80093b6 <_realloc_r+0x1e>
 80093f2:	4635      	mov	r5, r6
 80093f4:	e7df      	b.n	80093b6 <_realloc_r+0x1e>

080093f6 <_malloc_usable_size_r>:
 80093f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fa:	1f18      	subs	r0, r3, #4
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bfbc      	itt	lt
 8009400:	580b      	ldrlt	r3, [r1, r0]
 8009402:	18c0      	addlt	r0, r0, r3
 8009404:	4770      	bx	lr
	...

08009408 <_init>:
 8009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940a:	bf00      	nop
 800940c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800940e:	bc08      	pop	{r3}
 8009410:	469e      	mov	lr, r3
 8009412:	4770      	bx	lr

08009414 <_fini>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	bf00      	nop
 8009418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941a:	bc08      	pop	{r3}
 800941c:	469e      	mov	lr, r3
 800941e:	4770      	bx	lr
