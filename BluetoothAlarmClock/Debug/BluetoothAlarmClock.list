
BluetoothAlarmClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008050  08008050  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008050  08008050  00018050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008058  08008058  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008058  08008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08008060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00000b30  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bd4  20000bd4  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b4ef  00000000  00000000  00020117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004030  00000000  00000000  0003b606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017b8  00000000  00000000  0003f638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000127e  00000000  00000000  00040df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029d00  00000000  00000000  0004206e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002141f  00000000  00000000  0006bd6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f7fd9  00000000  00000000  0008d18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000068dc  00000000  00000000  00185168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0018ba44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ec0 	.word	0x08007ec0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	08007ec0 	.word	0x08007ec0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	463b      	mov	r3, r7
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005a0:	4a28      	ldr	r2, [pc, #160]	; (8000644 <MX_ADC1_Init+0xb8>)
 80005a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005b2:	4b23      	ldr	r3, [pc, #140]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c6:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005ce:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <MX_ADC1_Init+0xbc>)
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005da:	2202      	movs	r2, #2
 80005dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005ee:	f001 fe91 	bl	8002314 <HAL_ADC_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f8:	f001 fb02 	bl	8001c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000600:	2301      	movs	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000604:	2304      	movs	r3, #4
 8000606:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <MX_ADC1_Init+0xb4>)
 800060e:	f001 fff3 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000618:	f001 faf2 	bl	8001c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800061c:	230a      	movs	r3, #10
 800061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0xb4>)
 800062a:	f001 ffe5 	bl	80025f8 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000634:	f001 fae4 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000c0 	.word	0x200000c0
 8000644:	40012000 	.word	0x40012000
 8000648:	0f000001 	.word	0x0f000001

0800064c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a3c      	ldr	r2, [pc, #240]	; (800075c <HAL_ADC_MspInit+0x110>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d171      	bne.n	8000752 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b3b      	ldr	r3, [pc, #236]	; (8000760 <HAL_ADC_MspInit+0x114>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	4a3a      	ldr	r2, [pc, #232]	; (8000760 <HAL_ADC_MspInit+0x114>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6453      	str	r3, [r2, #68]	; 0x44
 800067e:	4b38      	ldr	r3, [pc, #224]	; (8000760 <HAL_ADC_MspInit+0x114>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b34      	ldr	r3, [pc, #208]	; (8000760 <HAL_ADC_MspInit+0x114>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a33      	ldr	r2, [pc, #204]	; (8000760 <HAL_ADC_MspInit+0x114>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b31      	ldr	r3, [pc, #196]	; (8000760 <HAL_ADC_MspInit+0x114>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <HAL_ADC_MspInit+0x114>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a2c      	ldr	r2, [pc, #176]	; (8000760 <HAL_ADC_MspInit+0x114>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <HAL_ADC_MspInit+0x114>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4823      	ldr	r0, [pc, #140]	; (8000764 <HAL_ADC_MspInit+0x118>)
 80006d6:	f003 f9e9 	bl	8003aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006da:	2308      	movs	r3, #8
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	481e      	ldr	r0, [pc, #120]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 80006ee:	f003 f9dd 	bl	8003aac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <HAL_ADC_MspInit+0x120>)
 80006f4:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <HAL_ADC_MspInit+0x124>)
 80006f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <HAL_ADC_MspInit+0x120>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_ADC_MspInit+0x120>)
 800070c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000710:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000718:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_ADC_MspInit+0x120>)
 800071c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000720:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000728:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_ADC_MspInit+0x120>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000736:	480d      	ldr	r0, [pc, #52]	; (800076c <HAL_ADC_MspInit+0x120>)
 8000738:	f002 fb20 	bl	8002d7c <HAL_DMA_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000742:	f001 fa5d 	bl	8001c00 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_ADC_MspInit+0x120>)
 800074a:	639a      	str	r2, [r3, #56]	; 0x38
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_ADC_MspInit+0x120>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	; 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40012000 	.word	0x40012000
 8000760:	40023800 	.word	0x40023800
 8000764:	40020800 	.word	0x40020800
 8000768:	40020000 	.word	0x40020000
 800076c:	20000108 	.word	0x20000108
 8000770:	40026410 	.word	0x40026410

08000774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_DMA_Init+0x3c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <MX_DMA_Init+0x3c>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_DMA_Init+0x3c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	2038      	movs	r0, #56	; 0x38
 800079c:	f002 fab7 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a0:	2038      	movs	r0, #56	; 0x38
 80007a2:	f002 fad0 	bl	8002d46 <HAL_NVIC_EnableIRQ>

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_ETH_Init+0x84>)
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <MX_ETH_Init+0x88>)
 80007bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_ETH_Init+0x8c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ETH_Init+0x8c>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ETH_Init+0x8c>)
 80007cc:	22e1      	movs	r2, #225	; 0xe1
 80007ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_ETH_Init+0x8c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ETH_Init+0x8c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_ETH_Init+0x8c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_ETH_Init+0x84>)
 80007e4:	4a16      	ldr	r2, [pc, #88]	; (8000840 <MX_ETH_Init+0x8c>)
 80007e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_ETH_Init+0x84>)
 80007ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_ETH_Init+0x84>)
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_ETH_Init+0x90>)
 80007f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_ETH_Init+0x84>)
 80007f8:	4a13      	ldr	r2, [pc, #76]	; (8000848 <MX_ETH_Init+0x94>)
 80007fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_ETH_Init+0x84>)
 80007fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000802:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_ETH_Init+0x84>)
 8000806:	f002 fe29 	bl	800345c <HAL_ETH_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000810:	f001 f9f6 	bl	8001c00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000814:	2238      	movs	r2, #56	; 0x38
 8000816:	2100      	movs	r1, #0
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_ETH_Init+0x98>)
 800081a:	f006 fecd 	bl	80075b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_ETH_Init+0x98>)
 8000820:	2221      	movs	r2, #33	; 0x21
 8000822:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_ETH_Init+0x98>)
 8000826:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800082a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_ETH_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200002e0 	.word	0x200002e0
 800083c:	40028000 	.word	0x40028000
 8000840:	20000390 	.word	0x20000390
 8000844:	20000208 	.word	0x20000208
 8000848:	20000168 	.word	0x20000168
 800084c:	200002a8 	.word	0x200002a8

08000850 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a55      	ldr	r2, [pc, #340]	; (80009c4 <HAL_ETH_MspInit+0x174>)
 800086e:	4293      	cmp	r3, r2
 8000870:	f040 80a4 	bne.w	80009bc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
 8000878:	4b53      	ldr	r3, [pc, #332]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4a52      	ldr	r2, [pc, #328]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 800087e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
 8000884:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800088c:	623b      	str	r3, [r7, #32]
 800088e:	6a3b      	ldr	r3, [r7, #32]
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	4b4c      	ldr	r3, [pc, #304]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a4b      	ldr	r2, [pc, #300]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 800089a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
 80008a0:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008a8:	61fb      	str	r3, [r7, #28]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	4b45      	ldr	r3, [pc, #276]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a44      	ldr	r2, [pc, #272]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	4a3d      	ldr	r2, [pc, #244]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6313      	str	r3, [r2, #48]	; 0x30
 80008d8:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a36      	ldr	r2, [pc, #216]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
 80008f4:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 800090a:	f043 0302 	orr.w	r3, r3, #2
 800090e:	6313      	str	r3, [r2, #48]	; 0x30
 8000910:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 8000926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092a:	6313      	str	r3, [r2, #48]	; 0x30
 800092c:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <HAL_ETH_MspInit+0x178>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000948:	230b      	movs	r3, #11
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	481e      	ldr	r0, [pc, #120]	; (80009cc <HAL_ETH_MspInit+0x17c>)
 8000954:	f003 f8aa 	bl	8003aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000958:	2386      	movs	r3, #134	; 0x86
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000968:	230b      	movs	r3, #11
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	4817      	ldr	r0, [pc, #92]	; (80009d0 <HAL_ETH_MspInit+0x180>)
 8000974:	f003 f89a 	bl	8003aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098a:	230b      	movs	r3, #11
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	480f      	ldr	r0, [pc, #60]	; (80009d4 <HAL_ETH_MspInit+0x184>)
 8000996:	f003 f889 	bl	8003aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800099a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ac:	230b      	movs	r3, #11
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4808      	ldr	r0, [pc, #32]	; (80009d8 <HAL_ETH_MspInit+0x188>)
 80009b8:	f003 f878 	bl	8003aac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009bc:	bf00      	nop
 80009be:	3738      	adds	r7, #56	; 0x38
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40028000 	.word	0x40028000
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40021800 	.word	0x40021800

080009dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	4b52      	ldr	r3, [pc, #328]	; (8000b40 <MX_GPIO_Init+0x164>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a51      	ldr	r2, [pc, #324]	; (8000b40 <MX_GPIO_Init+0x164>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b4f      	ldr	r3, [pc, #316]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	61bb      	str	r3, [r7, #24]
 8000a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	4b4b      	ldr	r3, [pc, #300]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b48      	ldr	r3, [pc, #288]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b44      	ldr	r3, [pc, #272]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a43      	ldr	r2, [pc, #268]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b3d      	ldr	r3, [pc, #244]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a3c      	ldr	r2, [pc, #240]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b3a      	ldr	r3, [pc, #232]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a35      	ldr	r2, [pc, #212]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a2e      	ldr	r2, [pc, #184]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <MX_GPIO_Init+0x164>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aa0:	4828      	ldr	r0, [pc, #160]	; (8000b44 <MX_GPIO_Init+0x168>)
 8000aa2:	f003 f9c7 	bl	8003e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	4827      	ldr	r0, [pc, #156]	; (8000b48 <MX_GPIO_Init+0x16c>)
 8000aac:	f003 f9c2 	bl	8003e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ab6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4821      	ldr	r0, [pc, #132]	; (8000b4c <MX_GPIO_Init+0x170>)
 8000ac8:	f002 fff0 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Joystick_Pin;
 8000acc:	2308      	movs	r3, #8
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Joystick_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	481b      	ldr	r0, [pc, #108]	; (8000b4c <MX_GPIO_Init+0x170>)
 8000ae0:	f002 ffe4 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ae4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4811      	ldr	r0, [pc, #68]	; (8000b44 <MX_GPIO_Init+0x168>)
 8000afe:	f002 ffd5 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b02:	2340      	movs	r3, #64	; 0x40
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	480b      	ldr	r0, [pc, #44]	; (8000b48 <MX_GPIO_Init+0x16c>)
 8000b1a:	f002 ffc7 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_GPIO_Init+0x16c>)
 8000b32:	f002 ffbb 	bl	8003aac <HAL_GPIO_Init>

}
 8000b36:	bf00      	nop
 8000b38:	3730      	adds	r7, #48	; 0x30
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40021800 	.word	0x40021800
 8000b4c:	40020800 	.word	0x40020800

08000b50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_I2C1_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <MX_I2C1_Init+0x7c>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000b8e:	f003 f983 	bl	8003e98 <HAL_I2C_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f001 f832 	bl	8001c00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000ba0:	f003 fdc5 	bl	800472e <HAL_I2CEx_ConfigAnalogFilter>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000baa:	f001 f829 	bl	8001c00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_I2C1_Init+0x74>)
 8000bb2:	f003 fdf8 	bl	80047a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bbc:	f001 f820 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000398 	.word	0x20000398
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	000186a0 	.word	0x000186a0

08000bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_I2C_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12c      	bne.n	8000c4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c14:	2312      	movs	r3, #18
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c20:	2304      	movs	r3, #4
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480c      	ldr	r0, [pc, #48]	; (8000c5c <HAL_I2C_MspInit+0x8c>)
 8000c2c:	f002 ff3e 	bl	8003aac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400

08000c60 <LCD_SendInternal>:
//    }
//
//    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
//}

void LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	71bb      	strb	r3, [r7, #6]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	717b      	strb	r3, [r7, #5]
//        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
//        if(res == HAL_OK)
//            break;
//    }

    uint8_t up = data & 0xF0;
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	f023 030f 	bic.w	r3, r3, #15
 8000c78:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	73bb      	strb	r3, [r7, #14]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	797b      	ldrb	r3, [r7, #5]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	f043 030c 	orr.w	r3, r3, #12
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000c90:	7bfa      	ldrb	r2, [r7, #15]
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000ca0:	7bba      	ldrb	r2, [r7, #14]
 8000ca2:	797b      	ldrb	r3, [r7, #5]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f043 030c 	orr.w	r3, r3, #12
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8000cb0:	7bba      	ldrb	r2, [r7, #14]
 8000cb2:	797b      	ldrb	r3, [r7, #5]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	f107 0208 	add.w	r2, r7, #8
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2304      	movs	r3, #4
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <LCD_SendInternal+0x84>)
 8000cd2:	f003 fa25 	bl	8004120 <HAL_I2C_Master_Transmit>
    HAL_Delay(LCD_DELAY_MS);
 8000cd6:	2005      	movs	r0, #5
 8000cd8:	f001 faf8 	bl	80022cc <HAL_Delay>
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000398 	.word	0x20000398

08000ce8 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000cf8:	79b9      	ldrb	r1, [r7, #6]
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ffae 	bl	8000c60 <LCD_SendInternal>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
    LCD_SendInternal(LCD_ADDR, data, PIN_RS);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	204e      	movs	r0, #78	; 0x4e
 8000d1e:	f7ff ff9f 	bl	8000c60 <LCD_SendInternal>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2130      	movs	r1, #48	; 0x30
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ffd5 	bl	8000ce8 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ffd0 	bl	8000ce8 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	210c      	movs	r1, #12
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ffcb 	bl	8000ce8 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2101      	movs	r1, #1
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ffc6 	bl	8000ce8 <LCD_SendCommand>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <LCD_SendString>:

void LCD_SendString(char *str) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    while(*str) {
 8000d6c:	e007      	b.n	8000d7e <LCD_SendString+0x1a>
        LCD_SendData((uint8_t)(*str));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ffca 	bl	8000d0c <LCD_SendData>
        str++;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	607b      	str	r3, [r7, #4]
    while(*str) {
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f3      	bne.n	8000d6e <LCD_SendString+0xa>
    }
}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LCM1602_init>:

void LCM1602_init() {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    LCD_Init(LCD_ADDR);
 8000d94:	204e      	movs	r0, #78	; 0x4e
 8000d96:	f7ff ffc8 	bl	8000d2a <LCD_Init>
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <lcd_put_cur>:

void lcd_put_cur(int row, int col){
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
    switch (row){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <lcd_put_cur+0x18>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d005      	beq.n	8000dc0 <lcd_put_cur+0x22>
 8000db4:	e009      	b.n	8000dca <lcd_put_cur+0x2c>
        case 0:
            col |= 0x80;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dbc:	603b      	str	r3, [r7, #0]
            break;
 8000dbe:	e004      	b.n	8000dca <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000dc6:	603b      	str	r3, [r7, #0]
            break;
 8000dc8:	bf00      	nop
    }
    LCD_SendCommand(LCD_ADDR, col);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4619      	mov	r1, r3
 8000dd0:	204e      	movs	r0, #78	; 0x4e
 8000dd2:	f7ff ff89 	bl	8000ce8 <LCD_SendCommand>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f001 f9ff 	bl	80021e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 fc73 	bl	80016d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dee:	f7ff fdf5 	bl	80009dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000df2:	f7ff fcbf 	bl	8000774 <MX_DMA_Init>
  MX_ETH_Init();
 8000df6:	f7ff fcdd 	bl	80007b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000dfa:	f001 f8d1 	bl	8001fa0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dfe:	f001 f941 	bl	8002084 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000e02:	f7ff fbc3 	bl	800058c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e06:	f7ff fea3 	bl	8000b50 <MX_I2C1_Init>
  MX_RTC_Init();
 8000e0a:	f000 feff 	bl	8001c0c <MX_RTC_Init>
  MX_TIM2_Init();
 8000e0e:	f000 fff9 	bl	8001e04 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000e12:	f000 fccb 	bl	80017ac <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  uint8_t toggle=0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]

  LCM1602_init();
 8000e1a:	f7ff ffb9 	bl	8000d90 <LCM1602_init>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4996      	ldr	r1, [pc, #600]	; (800107c <main+0x29c>)
 8000e22:	4897      	ldr	r0, [pc, #604]	; (8001080 <main+0x2a0>)
 8000e24:	f004 fd84 	bl	8005930 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4996      	ldr	r1, [pc, #600]	; (8001084 <main+0x2a4>)
 8000e2c:	4894      	ldr	r0, [pc, #592]	; (8001080 <main+0x2a0>)
 8000e2e:	f004 fddd 	bl	80059ec <HAL_RTC_GetDate>

  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8000e32:	2202      	movs	r2, #2
 8000e34:	4994      	ldr	r1, [pc, #592]	; (8001088 <main+0x2a8>)
 8000e36:	4895      	ldr	r0, [pc, #596]	; (800108c <main+0x2ac>)
 8000e38:	f001 fab0 	bl	800239c <HAL_ADC_Start_DMA>

  char customChar[] = {0x01, 0x03, 0x05, 0x09, 0x09, 0x0B, 0x1B, 0x18};
 8000e3c:	4a94      	ldr	r2, [pc, #592]	; (8001090 <main+0x2b0>)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e44:	e883 0003 	stmia.w	r3, {r0, r1}
  LCD_SendCommand(LCD_ADDR, 0x40);
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	204e      	movs	r0, #78	; 0x4e
 8000e4c:	f7ff ff4c 	bl	8000ce8 <LCD_SendCommand>
  for(int i=0; i<8; i++) LCD_SendData(customChar[i]);
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	e009      	b.n	8000e6a <main+0x8a>
 8000e56:	463a      	mov	r2, r7
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff54 	bl	8000d0c <LCD_SendData>
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	3301      	adds	r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	2b07      	cmp	r3, #7
 8000e6e:	ddf2      	ble.n	8000e56 <main+0x76>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // setting mode
	  if(mode==SETTING)
 8000e70:	4b88      	ldr	r3, [pc, #544]	; (8001094 <main+0x2b4>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f040 8172 	bne.w	800115e <main+0x37e>
	  {
		  toggle^=1;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	f083 0301 	eor.w	r3, r3, #1
 8000e80:	73fb      	strb	r3, [r7, #15]

		  lcd_put_cur(0,0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff8a 	bl	8000d9e <lcd_put_cur>
		  LCD_SendString("Setting Mode    ");
 8000e8a:	4883      	ldr	r0, [pc, #524]	; (8001098 <main+0x2b8>)
 8000e8c:	f7ff ff6a 	bl	8000d64 <LCD_SendString>

		  // read button
		  button = getButton();
 8000e90:	f000 fc98 	bl	80017c4 <getButton>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b80      	ldr	r3, [pc, #512]	; (800109c <main+0x2bc>)
 8000e9a:	701a      	strb	r2, [r3, #0]
		  move_cur_time(&sTime, button);
 8000e9c:	4b7f      	ldr	r3, [pc, #508]	; (800109c <main+0x2bc>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4876      	ldr	r0, [pc, #472]	; (800107c <main+0x29c>)
 8000ea4:	f000 fcb4 	bl	8001810 <move_cur_time>

		  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4974      	ldr	r1, [pc, #464]	; (800107c <main+0x29c>)
 8000eac:	4874      	ldr	r0, [pc, #464]	; (8001080 <main+0x2a0>)
 8000eae:	f004 fca5 	bl	80057fc <HAL_RTC_SetTime>

		  // the part where it's big and blinking
		  if(toggle)
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d017      	beq.n	8000ee8 <main+0x108>
		  {
			  sprintf(tmpTime,"%s %02d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000eb8:	4b70      	ldr	r3, [pc, #448]	; (800107c <main+0x29c>)
 8000eba:	78db      	ldrb	r3, [r3, #3]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a76      	ldr	r2, [pc, #472]	; (80010a0 <main+0x2c0>)
 8000ec6:	441a      	add	r2, r3
 8000ec8:	4b6c      	ldr	r3, [pc, #432]	; (800107c <main+0x29c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	4b6b      	ldr	r3, [pc, #428]	; (800107c <main+0x29c>)
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4b69      	ldr	r3, [pc, #420]	; (800107c <main+0x29c>)
 8000ed6:	789b      	ldrb	r3, [r3, #2]
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	9100      	str	r1, [sp, #0]
 8000edc:	4603      	mov	r3, r0
 8000ede:	4971      	ldr	r1, [pc, #452]	; (80010a4 <main+0x2c4>)
 8000ee0:	4871      	ldr	r0, [pc, #452]	; (80010a8 <main+0x2c8>)
 8000ee2:	f006 fb49 	bl	8007578 <siprintf>
 8000ee6:	e111      	b.n	800110c <main+0x32c>
		  }
		  else
		  {
			  if(setmode==AMPM)
 8000ee8:	4b70      	ldr	r3, [pc, #448]	; (80010ac <main+0x2cc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10e      	bne.n	8000f0e <main+0x12e>
			  {
				  sprintf(tmpTime,"   %02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ef0:	4b62      	ldr	r3, [pc, #392]	; (800107c <main+0x29c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b61      	ldr	r3, [pc, #388]	; (800107c <main+0x29c>)
 8000ef8:	785b      	ldrb	r3, [r3, #1]
 8000efa:	4619      	mov	r1, r3
 8000efc:	4b5f      	ldr	r3, [pc, #380]	; (800107c <main+0x29c>)
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	460b      	mov	r3, r1
 8000f04:	496a      	ldr	r1, [pc, #424]	; (80010b0 <main+0x2d0>)
 8000f06:	4868      	ldr	r0, [pc, #416]	; (80010a8 <main+0x2c8>)
 8000f08:	f006 fb36 	bl	8007578 <siprintf>
 8000f0c:	e0fe      	b.n	800110c <main+0x32c>
			  }
			  else if(setmode==HOUR_T)
 8000f0e:	4b67      	ldr	r3, [pc, #412]	; (80010ac <main+0x2cc>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d122      	bne.n	8000f5c <main+0x17c>
			  {
				  sprintf(tmpTime,"%s  %d:%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours%10, sTime.Minutes, sTime.Seconds);
 8000f16:	4b59      	ldr	r3, [pc, #356]	; (800107c <main+0x29c>)
 8000f18:	78db      	ldrb	r3, [r3, #3]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	4a5f      	ldr	r2, [pc, #380]	; (80010a0 <main+0x2c0>)
 8000f24:	1898      	adds	r0, r3, r2
 8000f26:	4b55      	ldr	r3, [pc, #340]	; (800107c <main+0x29c>)
 8000f28:	781a      	ldrb	r2, [r3, #0]
 8000f2a:	4b62      	ldr	r3, [pc, #392]	; (80010b4 <main+0x2d4>)
 8000f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8000f30:	08d9      	lsrs	r1, r3, #3
 8000f32:	460b      	mov	r3, r1
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4b4e      	ldr	r3, [pc, #312]	; (800107c <main+0x29c>)
 8000f42:	785b      	ldrb	r3, [r3, #1]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b4d      	ldr	r3, [pc, #308]	; (800107c <main+0x29c>)
 8000f48:	789b      	ldrb	r3, [r3, #2]
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	9200      	str	r2, [sp, #0]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4602      	mov	r2, r0
 8000f52:	4959      	ldr	r1, [pc, #356]	; (80010b8 <main+0x2d8>)
 8000f54:	4854      	ldr	r0, [pc, #336]	; (80010a8 <main+0x2c8>)
 8000f56:	f006 fb0f 	bl	8007578 <siprintf>
 8000f5a:	e0d7      	b.n	800110c <main+0x32c>
			  }
			  else if(setmode==HOUR_O)
 8000f5c:	4b53      	ldr	r3, [pc, #332]	; (80010ac <main+0x2cc>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d11c      	bne.n	8000f9e <main+0x1be>
			  {
				  sprintf(tmpTime,"%s %d :%02d:%02d", ampm[sTime.TimeFormat], sTime.Hours/10, sTime.Minutes, sTime.Seconds);
 8000f64:	4b45      	ldr	r3, [pc, #276]	; (800107c <main+0x29c>)
 8000f66:	78db      	ldrb	r3, [r3, #3]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <main+0x2c0>)
 8000f72:	441a      	add	r2, r3
 8000f74:	4b41      	ldr	r3, [pc, #260]	; (800107c <main+0x29c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	494e      	ldr	r1, [pc, #312]	; (80010b4 <main+0x2d4>)
 8000f7a:	fba1 1303 	umull	r1, r3, r1, r3
 8000f7e:	08db      	lsrs	r3, r3, #3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	4b3d      	ldr	r3, [pc, #244]	; (800107c <main+0x29c>)
 8000f86:	785b      	ldrb	r3, [r3, #1]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	; (800107c <main+0x29c>)
 8000f8c:	789b      	ldrb	r3, [r3, #2]
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	9100      	str	r1, [sp, #0]
 8000f92:	4603      	mov	r3, r0
 8000f94:	4949      	ldr	r1, [pc, #292]	; (80010bc <main+0x2dc>)
 8000f96:	4844      	ldr	r0, [pc, #272]	; (80010a8 <main+0x2c8>)
 8000f98:	f006 faee 	bl	8007578 <siprintf>
 8000f9c:	e0b6      	b.n	800110c <main+0x32c>
			  }
			  else if(setmode==MINUTE_T)
 8000f9e:	4b43      	ldr	r3, [pc, #268]	; (80010ac <main+0x2cc>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d122      	bne.n	8000fec <main+0x20c>
			  {
				  sprintf(tmpTime,"%s %02d: %d:%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes%10, sTime.Seconds);
 8000fa6:	4b35      	ldr	r3, [pc, #212]	; (800107c <main+0x29c>)
 8000fa8:	78db      	ldrb	r3, [r3, #3]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a3b      	ldr	r2, [pc, #236]	; (80010a0 <main+0x2c0>)
 8000fb4:	1898      	adds	r0, r3, r2
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <main+0x29c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461c      	mov	r4, r3
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <main+0x29c>)
 8000fbe:	785a      	ldrb	r2, [r3, #1]
 8000fc0:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <main+0x2d4>)
 8000fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fc6:	08d9      	lsrs	r1, r3, #3
 8000fc8:	460b      	mov	r3, r1
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <main+0x29c>)
 8000fd8:	789b      	ldrb	r3, [r3, #2]
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	9200      	str	r2, [sp, #0]
 8000fde:	4623      	mov	r3, r4
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	4937      	ldr	r1, [pc, #220]	; (80010c0 <main+0x2e0>)
 8000fe4:	4830      	ldr	r0, [pc, #192]	; (80010a8 <main+0x2c8>)
 8000fe6:	f006 fac7 	bl	8007578 <siprintf>
 8000fea:	e08f      	b.n	800110c <main+0x32c>
			  }
			  else if(setmode==MINUTE_O)
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <main+0x2cc>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d11c      	bne.n	800102e <main+0x24e>
			  {
				  sprintf(tmpTime,"%s %02d:%d :%02d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes/10, sTime.Seconds);
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <main+0x29c>)
 8000ff6:	78db      	ldrb	r3, [r3, #3]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <main+0x2c0>)
 8001002:	441a      	add	r2, r3
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <main+0x29c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <main+0x29c>)
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	4929      	ldr	r1, [pc, #164]	; (80010b4 <main+0x2d4>)
 8001010:	fba1 1303 	umull	r1, r3, r1, r3
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <main+0x29c>)
 800101c:	789b      	ldrb	r3, [r3, #2]
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	9100      	str	r1, [sp, #0]
 8001022:	4603      	mov	r3, r0
 8001024:	4927      	ldr	r1, [pc, #156]	; (80010c4 <main+0x2e4>)
 8001026:	4820      	ldr	r0, [pc, #128]	; (80010a8 <main+0x2c8>)
 8001028:	f006 faa6 	bl	8007578 <siprintf>
 800102c:	e06e      	b.n	800110c <main+0x32c>
			  }
			  else if(setmode==SECOND_T)
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <main+0x2cc>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d14a      	bne.n	80010cc <main+0x2ec>
			  {
				  sprintf(tmpTime,"%s %02d:%02d: %d", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds%10);
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <main+0x29c>)
 8001038:	78db      	ldrb	r3, [r3, #3]
 800103a:	461a      	mov	r2, r3
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <main+0x2c0>)
 8001044:	1898      	adds	r0, r3, r2
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <main+0x29c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461d      	mov	r5, r3
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <main+0x29c>)
 800104e:	785b      	ldrb	r3, [r3, #1]
 8001050:	461c      	mov	r4, r3
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <main+0x29c>)
 8001054:	789a      	ldrb	r2, [r3, #2]
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <main+0x2d4>)
 8001058:	fba3 1302 	umull	r1, r3, r3, r2
 800105c:	08d9      	lsrs	r1, r3, #3
 800105e:	460b      	mov	r3, r1
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	9400      	str	r4, [sp, #0]
 800106e:	462b      	mov	r3, r5
 8001070:	4602      	mov	r2, r0
 8001072:	4915      	ldr	r1, [pc, #84]	; (80010c8 <main+0x2e8>)
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <main+0x2c8>)
 8001076:	f006 fa7f 	bl	8007578 <siprintf>
 800107a:	e047      	b.n	800110c <main+0x32c>
 800107c:	200003ec 	.word	0x200003ec
 8001080:	200004cc 	.word	0x200004cc
 8001084:	20000400 	.word	0x20000400
 8001088:	200004b4 	.word	0x200004b4
 800108c:	200000c0 	.word	0x200000c0
 8001090:	08007ff4 	.word	0x08007ff4
 8001094:	2000041c 	.word	0x2000041c
 8001098:	08007ed8 	.word	0x08007ed8
 800109c:	2000049c 	.word	0x2000049c
 80010a0:	20000000 	.word	0x20000000
 80010a4:	08007eec 	.word	0x08007eec
 80010a8:	20000420 	.word	0x20000420
 80010ac:	2000041d 	.word	0x2000041d
 80010b0:	08007f00 	.word	0x08007f00
 80010b4:	cccccccd 	.word	0xcccccccd
 80010b8:	08007f14 	.word	0x08007f14
 80010bc:	08007f28 	.word	0x08007f28
 80010c0:	08007f3c 	.word	0x08007f3c
 80010c4:	08007f50 	.word	0x08007f50
 80010c8:	08007f64 	.word	0x08007f64
			  }
			  else if(setmode==SECOND_O)
 80010cc:	4ba0      	ldr	r3, [pc, #640]	; (8001350 <main+0x570>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	d11b      	bne.n	800110c <main+0x32c>
			  {
				  sprintf(tmpTime,"%s %02d:%02d:%d ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds/10);
 80010d4:	4b9f      	ldr	r3, [pc, #636]	; (8001354 <main+0x574>)
 80010d6:	78db      	ldrb	r3, [r3, #3]
 80010d8:	461a      	mov	r2, r3
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	4a9d      	ldr	r2, [pc, #628]	; (8001358 <main+0x578>)
 80010e2:	441a      	add	r2, r3
 80010e4:	4b9b      	ldr	r3, [pc, #620]	; (8001354 <main+0x574>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461c      	mov	r4, r3
 80010ea:	4b9a      	ldr	r3, [pc, #616]	; (8001354 <main+0x574>)
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	4618      	mov	r0, r3
 80010f0:	4b98      	ldr	r3, [pc, #608]	; (8001354 <main+0x574>)
 80010f2:	789b      	ldrb	r3, [r3, #2]
 80010f4:	4999      	ldr	r1, [pc, #612]	; (800135c <main+0x57c>)
 80010f6:	fba1 1303 	umull	r1, r3, r1, r3
 80010fa:	08db      	lsrs	r3, r3, #3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	9000      	str	r0, [sp, #0]
 8001102:	4623      	mov	r3, r4
 8001104:	4996      	ldr	r1, [pc, #600]	; (8001360 <main+0x580>)
 8001106:	4897      	ldr	r0, [pc, #604]	; (8001364 <main+0x584>)
 8001108:	f006 fa36 	bl	8007578 <siprintf>
			  }
		  }

		  lcd_put_cur(1,0);
 800110c:	2100      	movs	r1, #0
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff fe45 	bl	8000d9e <lcd_put_cur>
		  LCD_SendString(tmpTime);
 8001114:	4893      	ldr	r0, [pc, #588]	; (8001364 <main+0x584>)
 8001116:	f7ff fe25 	bl	8000d64 <LCD_SendString>

		  if(user_pressed_flag==1)
 800111a:	4b93      	ldr	r3, [pc, #588]	; (8001368 <main+0x588>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	f47f aea6 	bne.w	8000e70 <main+0x90>
		  {
			  current_tick=HAL_GetTick();
 8001124:	f001 f8c6 	bl	80022b4 <HAL_GetTick>
 8001128:	4603      	mov	r3, r0
 800112a:	4a90      	ldr	r2, [pc, #576]	; (800136c <main+0x58c>)
 800112c:	6013      	str	r3, [r2, #0]

			  if(current_tick-old_tick > 1)
 800112e:	4b8f      	ldr	r3, [pc, #572]	; (800136c <main+0x58c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b8f      	ldr	r3, [pc, #572]	; (8001370 <main+0x590>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	f67f ae99 	bls.w	8000e70 <main+0x90>
			  {
				  old_tick=current_tick;
 800113e:	4b8b      	ldr	r3, [pc, #556]	; (800136c <main+0x58c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a8b      	ldr	r2, [pc, #556]	; (8001370 <main+0x590>)
 8001144:	6013      	str	r3, [r2, #0]
				  user_pressed_flag=0;
 8001146:	4b88      	ldr	r3, [pc, #544]	; (8001368 <main+0x588>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
				  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800114c:	2200      	movs	r2, #0
 800114e:	4981      	ldr	r1, [pc, #516]	; (8001354 <main+0x574>)
 8001150:	4888      	ldr	r0, [pc, #544]	; (8001374 <main+0x594>)
 8001152:	f004 fb53 	bl	80057fc <HAL_RTC_SetTime>
				  mode=NORMAL;
 8001156:	4b88      	ldr	r3, [pc, #544]	; (8001378 <main+0x598>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e688      	b.n	8000e70 <main+0x90>
			  }
		  }
	  }
	  // normal mode
	  else if(mode==NORMAL)
 800115e:	4b86      	ldr	r3, [pc, #536]	; (8001378 <main+0x598>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	f040 80a9 	bne.w	80012ba <main+0x4da>
	  {
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001168:	2200      	movs	r2, #0
 800116a:	497a      	ldr	r1, [pc, #488]	; (8001354 <main+0x574>)
 800116c:	4881      	ldr	r0, [pc, #516]	; (8001374 <main+0x594>)
 800116e:	f004 fbdf 	bl	8005930 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001172:	2200      	movs	r2, #0
 8001174:	4981      	ldr	r1, [pc, #516]	; (800137c <main+0x59c>)
 8001176:	487f      	ldr	r0, [pc, #508]	; (8001374 <main+0x594>)
 8001178:	f004 fc38 	bl	80059ec <HAL_RTC_GetDate>
		  sprintf(tmpTime,"%s %02d:%02d:%02d    ", ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 800117c:	4b75      	ldr	r3, [pc, #468]	; (8001354 <main+0x574>)
 800117e:	78db      	ldrb	r3, [r3, #3]
 8001180:	461a      	mov	r2, r3
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	4a73      	ldr	r2, [pc, #460]	; (8001358 <main+0x578>)
 800118a:	441a      	add	r2, r3
 800118c:	4b71      	ldr	r3, [pc, #452]	; (8001354 <main+0x574>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	4b70      	ldr	r3, [pc, #448]	; (8001354 <main+0x574>)
 8001194:	785b      	ldrb	r3, [r3, #1]
 8001196:	4619      	mov	r1, r3
 8001198:	4b6e      	ldr	r3, [pc, #440]	; (8001354 <main+0x574>)
 800119a:	789b      	ldrb	r3, [r3, #2]
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	9100      	str	r1, [sp, #0]
 80011a0:	4603      	mov	r3, r0
 80011a2:	4977      	ldr	r1, [pc, #476]	; (8001380 <main+0x5a0>)
 80011a4:	486f      	ldr	r0, [pc, #444]	; (8001364 <main+0x584>)
 80011a6:	f006 f9e7 	bl	8007578 <siprintf>
		  lcd_put_cur(0,0);
 80011aa:	2100      	movs	r1, #0
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fdf6 	bl	8000d9e <lcd_put_cur>
		  LCD_SendString("Choi Jin Woo    ");
 80011b2:	4874      	ldr	r0, [pc, #464]	; (8001384 <main+0x5a4>)
 80011b4:	f7ff fdd6 	bl	8000d64 <LCD_SendString>
		  lcd_put_cur(1,0);
 80011b8:	2100      	movs	r1, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fdef 	bl	8000d9e <lcd_put_cur>
		  LCD_SendString(tmpTime);
 80011c0:	4868      	ldr	r0, [pc, #416]	; (8001364 <main+0x584>)
 80011c2:	f7ff fdcf 	bl	8000d64 <LCD_SendString>


		  if(sTime.TimeFormat==aTime.TimeFormat && sTime.Hours==aTime.Hours && sTime.Minutes==aTime.Minutes && sTime.Seconds==aTime.Seconds)
 80011c6:	4b63      	ldr	r3, [pc, #396]	; (8001354 <main+0x574>)
 80011c8:	78da      	ldrb	r2, [r3, #3]
 80011ca:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <main+0x5a8>)
 80011cc:	78db      	ldrb	r3, [r3, #3]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d114      	bne.n	80011fc <main+0x41c>
 80011d2:	4b60      	ldr	r3, [pc, #384]	; (8001354 <main+0x574>)
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	4b6c      	ldr	r3, [pc, #432]	; (8001388 <main+0x5a8>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d10e      	bne.n	80011fc <main+0x41c>
 80011de:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <main+0x574>)
 80011e0:	785a      	ldrb	r2, [r3, #1]
 80011e2:	4b69      	ldr	r3, [pc, #420]	; (8001388 <main+0x5a8>)
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d108      	bne.n	80011fc <main+0x41c>
 80011ea:	4b5a      	ldr	r3, [pc, #360]	; (8001354 <main+0x574>)
 80011ec:	789a      	ldrb	r2, [r3, #2]
 80011ee:	4b66      	ldr	r3, [pc, #408]	; (8001388 <main+0x5a8>)
 80011f0:	789b      	ldrb	r3, [r3, #2]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d102      	bne.n	80011fc <main+0x41c>
		  {
			  alarm_on=1;
 80011f6:	4b65      	ldr	r3, [pc, #404]	; (800138c <main+0x5ac>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
		  }

		  if(alarm_on==1)
 80011fc:	4b63      	ldr	r3, [pc, #396]	; (800138c <main+0x5ac>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d128      	bne.n	8001256 <main+0x476>
		  {
			  toggle^=1;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	f083 0301 	eor.w	r3, r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
			  current_alarm_tick=HAL_GetTick();
 800120c:	f001 f852 	bl	80022b4 <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	4a5f      	ldr	r2, [pc, #380]	; (8001390 <main+0x5b0>)
 8001214:	6013      	str	r3, [r2, #0]
			  if(toggle==1)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d104      	bne.n	8001226 <main+0x446>
			  {
				  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800121c:	2100      	movs	r1, #0
 800121e:	485d      	ldr	r0, [pc, #372]	; (8001394 <main+0x5b4>)
 8001220:	f004 fe60 	bl	8005ee4 <HAL_TIM_PWM_Stop>
 8001224:	e003      	b.n	800122e <main+0x44e>
			  }
			  else
			  {
				  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001226:	2100      	movs	r1, #0
 8001228:	485a      	ldr	r0, [pc, #360]	; (8001394 <main+0x5b4>)
 800122a:	f004 fd93 	bl	8005d54 <HAL_TIM_PWM_Start>
			  }
			  if(current_alarm_tick-old_alarm_tick > 3000)
 800122e:	4b58      	ldr	r3, [pc, #352]	; (8001390 <main+0x5b0>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b59      	ldr	r3, [pc, #356]	; (8001398 <main+0x5b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800123c:	4293      	cmp	r3, r2
 800123e:	d90a      	bls.n	8001256 <main+0x476>
			  {
				  old_alarm_tick=current_alarm_tick;
 8001240:	4b53      	ldr	r3, [pc, #332]	; (8001390 <main+0x5b0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a54      	ldr	r2, [pc, #336]	; (8001398 <main+0x5b8>)
 8001246:	6013      	str	r3, [r2, #0]
				  alarm_on=0;
 8001248:	4b50      	ldr	r3, [pc, #320]	; (800138c <main+0x5ac>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800124e:	2100      	movs	r1, #0
 8001250:	4850      	ldr	r0, [pc, #320]	; (8001394 <main+0x5b4>)
 8001252:	f004 fe47 	bl	8005ee4 <HAL_TIM_PWM_Stop>
			  }
		  }

		  if(user_pressed_flag==1)
 8001256:	4b44      	ldr	r3, [pc, #272]	; (8001368 <main+0x588>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d121      	bne.n	80012a2 <main+0x4c2>
		  {
			  current_tick=HAL_GetTick();
 800125e:	f001 f829 	bl	80022b4 <HAL_GetTick>
 8001262:	4603      	mov	r3, r0
 8001264:	4a41      	ldr	r2, [pc, #260]	; (800136c <main+0x58c>)
 8001266:	6013      	str	r3, [r2, #0]
			  if(current_tick-old_tick > 3000)
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <main+0x58c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b40      	ldr	r3, [pc, #256]	; (8001370 <main+0x590>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001276:	4293      	cmp	r3, r2
 8001278:	d913      	bls.n	80012a2 <main+0x4c2>
			  {
				  old_tick=current_tick;
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <main+0x58c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a3c      	ldr	r2, [pc, #240]	; (8001370 <main+0x590>)
 8001280:	6013      	str	r3, [r2, #0]
				  user_pressed_flag=0;
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <main+0x588>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
				  mode=ALARM;
 8001288:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <main+0x598>)
 800128a:	2202      	movs	r2, #2
 800128c:	701a      	strb	r2, [r3, #0]
				  HAL_RTC_GetTime(&hrtc, &aTime, RTC_FORMAT_BIN);
 800128e:	2200      	movs	r2, #0
 8001290:	493d      	ldr	r1, [pc, #244]	; (8001388 <main+0x5a8>)
 8001292:	4838      	ldr	r0, [pc, #224]	; (8001374 <main+0x594>)
 8001294:	f004 fb4c 	bl	8005930 <HAL_RTC_GetTime>
				  HAL_RTC_GetDate(&hrtc, &aDate, RTC_FORMAT_BIN);
 8001298:	2200      	movs	r2, #0
 800129a:	4940      	ldr	r1, [pc, #256]	; (800139c <main+0x5bc>)
 800129c:	4835      	ldr	r0, [pc, #212]	; (8001374 <main+0x594>)
 800129e:	f004 fba5 	bl	80059ec <HAL_RTC_GetDate>

			  }
		  }

		  if(double_click==1)
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <main+0x5c0>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	f47f ade2 	bne.w	8000e70 <main+0x90>
		  {
			  mode=BELL;
 80012ac:	4b32      	ldr	r3, [pc, #200]	; (8001378 <main+0x598>)
 80012ae:	2203      	movs	r2, #3
 80012b0:	701a      	strb	r2, [r3, #0]
			  double_click=0;
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <main+0x5c0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	e5da      	b.n	8000e70 <main+0x90>
		  }
	  }
	  // alarm mode
	  else if(mode==ALARM)
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <main+0x598>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	f040 819e 	bne.w	8001600 <main+0x820>
	  {
		  toggle^=1;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	f083 0301 	eor.w	r3, r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]

		  lcd_put_cur(0,0);
 80012cc:	2100      	movs	r1, #0
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fd65 	bl	8000d9e <lcd_put_cur>
		  LCD_SendString("Alarm Mode      ");
 80012d4:	4833      	ldr	r0, [pc, #204]	; (80013a4 <main+0x5c4>)
 80012d6:	f7ff fd45 	bl	8000d64 <LCD_SendString>

		  button = getButton();
 80012da:	f000 fa73 	bl	80017c4 <getButton>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <main+0x5c8>)
 80012e4:	701a      	strb	r2, [r3, #0]
		  move_cur_time(&aTime, button);
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <main+0x5c8>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4826      	ldr	r0, [pc, #152]	; (8001388 <main+0x5a8>)
 80012ee:	f000 fa8f 	bl	8001810 <move_cur_time>

		  if(toggle)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d017      	beq.n	8001328 <main+0x548>
		  {
			  sprintf(tmpTime,"%s %02d:%02d:%02d", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes, aTime.Seconds);
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <main+0x5a8>)
 80012fa:	78db      	ldrb	r3, [r3, #3]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <main+0x578>)
 8001306:	441a      	add	r2, r3
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <main+0x5a8>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <main+0x5a8>)
 8001310:	785b      	ldrb	r3, [r3, #1]
 8001312:	4619      	mov	r1, r3
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <main+0x5a8>)
 8001316:	789b      	ldrb	r3, [r3, #2]
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	9100      	str	r1, [sp, #0]
 800131c:	4603      	mov	r3, r0
 800131e:	4923      	ldr	r1, [pc, #140]	; (80013ac <main+0x5cc>)
 8001320:	4810      	ldr	r0, [pc, #64]	; (8001364 <main+0x584>)
 8001322:	f006 f929 	bl	8007578 <siprintf>
 8001326:	e11c      	b.n	8001562 <main+0x782>
		  }
		  else
		  {
			  if(setmode==AMPM)
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <main+0x570>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d141      	bne.n	80013b4 <main+0x5d4>
			  {
				  sprintf(tmpTime,"   %02d:%02d:%02d", aTime.Hours, aTime.Minutes, aTime.Seconds);
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <main+0x5a8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <main+0x5a8>)
 8001338:	785b      	ldrb	r3, [r3, #1]
 800133a:	4619      	mov	r1, r3
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <main+0x5a8>)
 800133e:	789b      	ldrb	r3, [r3, #2]
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	460b      	mov	r3, r1
 8001344:	491a      	ldr	r1, [pc, #104]	; (80013b0 <main+0x5d0>)
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <main+0x584>)
 8001348:	f006 f916 	bl	8007578 <siprintf>
 800134c:	e109      	b.n	8001562 <main+0x782>
 800134e:	bf00      	nop
 8001350:	2000041d 	.word	0x2000041d
 8001354:	200003ec 	.word	0x200003ec
 8001358:	20000000 	.word	0x20000000
 800135c:	cccccccd 	.word	0xcccccccd
 8001360:	08007f78 	.word	0x08007f78
 8001364:	20000420 	.word	0x20000420
 8001368:	2000049d 	.word	0x2000049d
 800136c:	200004a4 	.word	0x200004a4
 8001370:	200004a0 	.word	0x200004a0
 8001374:	200004cc 	.word	0x200004cc
 8001378:	2000041c 	.word	0x2000041c
 800137c:	20000400 	.word	0x20000400
 8001380:	08007f8c 	.word	0x08007f8c
 8001384:	08007fa4 	.word	0x08007fa4
 8001388:	20000404 	.word	0x20000404
 800138c:	200004b0 	.word	0x200004b0
 8001390:	200004ac 	.word	0x200004ac
 8001394:	200004f0 	.word	0x200004f0
 8001398:	200004a8 	.word	0x200004a8
 800139c:	20000418 	.word	0x20000418
 80013a0:	200004bc 	.word	0x200004bc
 80013a4:	08007fb8 	.word	0x08007fb8
 80013a8:	2000049c 	.word	0x2000049c
 80013ac:	08007eec 	.word	0x08007eec
 80013b0:	08007f00 	.word	0x08007f00
			  }
			  else if(setmode==HOUR_T)
 80013b4:	4b82      	ldr	r3, [pc, #520]	; (80015c0 <main+0x7e0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d122      	bne.n	8001402 <main+0x622>
			  {
				  sprintf(tmpTime,"%s  %d:%02d:%02d", ampm[aTime.TimeFormat], aTime.Hours%10, aTime.Minutes, aTime.Seconds);
 80013bc:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <main+0x7e4>)
 80013be:	78db      	ldrb	r3, [r3, #3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	4a7f      	ldr	r2, [pc, #508]	; (80015c8 <main+0x7e8>)
 80013ca:	1898      	adds	r0, r3, r2
 80013cc:	4b7d      	ldr	r3, [pc, #500]	; (80015c4 <main+0x7e4>)
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <main+0x7ec>)
 80013d2:	fba3 1302 	umull	r1, r3, r3, r2
 80013d6:	08d9      	lsrs	r1, r3, #3
 80013d8:	460b      	mov	r3, r1
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	4b77      	ldr	r3, [pc, #476]	; (80015c4 <main+0x7e4>)
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b75      	ldr	r3, [pc, #468]	; (80015c4 <main+0x7e4>)
 80013ee:	789b      	ldrb	r3, [r3, #2]
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	9200      	str	r2, [sp, #0]
 80013f4:	460b      	mov	r3, r1
 80013f6:	4602      	mov	r2, r0
 80013f8:	4975      	ldr	r1, [pc, #468]	; (80015d0 <main+0x7f0>)
 80013fa:	4876      	ldr	r0, [pc, #472]	; (80015d4 <main+0x7f4>)
 80013fc:	f006 f8bc 	bl	8007578 <siprintf>
 8001400:	e0af      	b.n	8001562 <main+0x782>
			  }
			  else if(setmode==HOUR_O)
 8001402:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <main+0x7e0>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d11c      	bne.n	8001444 <main+0x664>
			  {
				  sprintf(tmpTime,"%s %d :%02d:%02d", ampm[aTime.TimeFormat], aTime.Hours/10, aTime.Minutes, aTime.Seconds);
 800140a:	4b6e      	ldr	r3, [pc, #440]	; (80015c4 <main+0x7e4>)
 800140c:	78db      	ldrb	r3, [r3, #3]
 800140e:	461a      	mov	r2, r3
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	4a6c      	ldr	r2, [pc, #432]	; (80015c8 <main+0x7e8>)
 8001418:	441a      	add	r2, r3
 800141a:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <main+0x7e4>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	496b      	ldr	r1, [pc, #428]	; (80015cc <main+0x7ec>)
 8001420:	fba1 1303 	umull	r1, r3, r1, r3
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <main+0x7e4>)
 800142c:	785b      	ldrb	r3, [r3, #1]
 800142e:	4619      	mov	r1, r3
 8001430:	4b64      	ldr	r3, [pc, #400]	; (80015c4 <main+0x7e4>)
 8001432:	789b      	ldrb	r3, [r3, #2]
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	9100      	str	r1, [sp, #0]
 8001438:	4603      	mov	r3, r0
 800143a:	4967      	ldr	r1, [pc, #412]	; (80015d8 <main+0x7f8>)
 800143c:	4865      	ldr	r0, [pc, #404]	; (80015d4 <main+0x7f4>)
 800143e:	f006 f89b 	bl	8007578 <siprintf>
 8001442:	e08e      	b.n	8001562 <main+0x782>
			  }
			  else if(setmode==MINUTE_T)
 8001444:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <main+0x7e0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b03      	cmp	r3, #3
 800144a:	d122      	bne.n	8001492 <main+0x6b2>
			  {
				  sprintf(tmpTime,"%s %02d: %d:%02d", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes%10, aTime.Seconds);
 800144c:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <main+0x7e4>)
 800144e:	78db      	ldrb	r3, [r3, #3]
 8001450:	461a      	mov	r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	4a5b      	ldr	r2, [pc, #364]	; (80015c8 <main+0x7e8>)
 800145a:	1898      	adds	r0, r3, r2
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <main+0x7e4>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461c      	mov	r4, r3
 8001462:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <main+0x7e4>)
 8001464:	785a      	ldrb	r2, [r3, #1]
 8001466:	4b59      	ldr	r3, [pc, #356]	; (80015cc <main+0x7ec>)
 8001468:	fba3 1302 	umull	r1, r3, r3, r2
 800146c:	08d9      	lsrs	r1, r3, #3
 800146e:	460b      	mov	r3, r1
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <main+0x7e4>)
 800147e:	789b      	ldrb	r3, [r3, #2]
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	9200      	str	r2, [sp, #0]
 8001484:	4623      	mov	r3, r4
 8001486:	4602      	mov	r2, r0
 8001488:	4954      	ldr	r1, [pc, #336]	; (80015dc <main+0x7fc>)
 800148a:	4852      	ldr	r0, [pc, #328]	; (80015d4 <main+0x7f4>)
 800148c:	f006 f874 	bl	8007578 <siprintf>
 8001490:	e067      	b.n	8001562 <main+0x782>
			  }
			  else if(setmode==MINUTE_O)
 8001492:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <main+0x7e0>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b04      	cmp	r3, #4
 8001498:	d11c      	bne.n	80014d4 <main+0x6f4>
			  {
				  sprintf(tmpTime,"%s %02d:%d :%02d", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes/10, aTime.Seconds);
 800149a:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <main+0x7e4>)
 800149c:	78db      	ldrb	r3, [r3, #3]
 800149e:	461a      	mov	r2, r3
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	4a48      	ldr	r2, [pc, #288]	; (80015c8 <main+0x7e8>)
 80014a8:	441a      	add	r2, r3
 80014aa:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <main+0x7e4>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <main+0x7e4>)
 80014b2:	785b      	ldrb	r3, [r3, #1]
 80014b4:	4945      	ldr	r1, [pc, #276]	; (80015cc <main+0x7ec>)
 80014b6:	fba1 1303 	umull	r1, r3, r1, r3
 80014ba:	08db      	lsrs	r3, r3, #3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4619      	mov	r1, r3
 80014c0:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <main+0x7e4>)
 80014c2:	789b      	ldrb	r3, [r3, #2]
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	9100      	str	r1, [sp, #0]
 80014c8:	4603      	mov	r3, r0
 80014ca:	4945      	ldr	r1, [pc, #276]	; (80015e0 <main+0x800>)
 80014cc:	4841      	ldr	r0, [pc, #260]	; (80015d4 <main+0x7f4>)
 80014ce:	f006 f853 	bl	8007578 <siprintf>
 80014d2:	e046      	b.n	8001562 <main+0x782>
			  }
			  else if(setmode==SECOND_T)
 80014d4:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <main+0x7e0>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d122      	bne.n	8001522 <main+0x742>
			  {
				  sprintf(tmpTime,"%s %02d:%02d: %d", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes, aTime.Seconds%10);
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <main+0x7e4>)
 80014de:	78db      	ldrb	r3, [r3, #3]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	4a37      	ldr	r2, [pc, #220]	; (80015c8 <main+0x7e8>)
 80014ea:	1898      	adds	r0, r3, r2
 80014ec:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <main+0x7e4>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461d      	mov	r5, r3
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <main+0x7e4>)
 80014f4:	785b      	ldrb	r3, [r3, #1]
 80014f6:	461c      	mov	r4, r3
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <main+0x7e4>)
 80014fa:	789a      	ldrb	r2, [r3, #2]
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <main+0x7ec>)
 80014fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001502:	08d9      	lsrs	r1, r3, #3
 8001504:	460b      	mov	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	9400      	str	r4, [sp, #0]
 8001514:	462b      	mov	r3, r5
 8001516:	4602      	mov	r2, r0
 8001518:	4932      	ldr	r1, [pc, #200]	; (80015e4 <main+0x804>)
 800151a:	482e      	ldr	r0, [pc, #184]	; (80015d4 <main+0x7f4>)
 800151c:	f006 f82c 	bl	8007578 <siprintf>
 8001520:	e01f      	b.n	8001562 <main+0x782>
			  }
			  else if(setmode==SECOND_O)
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <main+0x7e0>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b06      	cmp	r3, #6
 8001528:	d11b      	bne.n	8001562 <main+0x782>
			  {
				  sprintf(tmpTime,"%s %02d:%02d:%d", ampm[aTime.TimeFormat], aTime.Hours, aTime.Minutes, aTime.Seconds/10);
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <main+0x7e4>)
 800152c:	78db      	ldrb	r3, [r3, #3]
 800152e:	461a      	mov	r2, r3
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <main+0x7e8>)
 8001538:	441a      	add	r2, r3
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <main+0x7e4>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461c      	mov	r4, r3
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <main+0x7e4>)
 8001542:	785b      	ldrb	r3, [r3, #1]
 8001544:	4618      	mov	r0, r3
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <main+0x7e4>)
 8001548:	789b      	ldrb	r3, [r3, #2]
 800154a:	4920      	ldr	r1, [pc, #128]	; (80015cc <main+0x7ec>)
 800154c:	fba1 1303 	umull	r1, r3, r1, r3
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	9000      	str	r0, [sp, #0]
 8001558:	4623      	mov	r3, r4
 800155a:	4923      	ldr	r1, [pc, #140]	; (80015e8 <main+0x808>)
 800155c:	481d      	ldr	r0, [pc, #116]	; (80015d4 <main+0x7f4>)
 800155e:	f006 f80b 	bl	8007578 <siprintf>
			  }
		  }

		  lcd_put_cur(1,0);
 8001562:	2100      	movs	r1, #0
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff fc1a 	bl	8000d9e <lcd_put_cur>
		  LCD_SendString(tmpTime);
 800156a:	481a      	ldr	r0, [pc, #104]	; (80015d4 <main+0x7f4>)
 800156c:	f7ff fbfa 	bl	8000d64 <LCD_SendString>
		  lcd_put_cur(1, 14);
 8001570:	210e      	movs	r1, #14
 8001572:	2001      	movs	r0, #1
 8001574:	f7ff fc13 	bl	8000d9e <lcd_put_cur>
		  LCD_SendData(0);
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff fbc7 	bl	8000d0c <LCD_SendData>

		  if(user_pressed_flag==1)
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <main+0x80c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	f47f ac74 	bne.w	8000e70 <main+0x90>
		  {
			  current_tick=HAL_GetTick();
 8001588:	f000 fe94 	bl	80022b4 <HAL_GetTick>
 800158c:	4603      	mov	r3, r0
 800158e:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <main+0x810>)
 8001590:	6013      	str	r3, [r2, #0]

			  if(current_tick-old_tick > 1)
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <main+0x810>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <main+0x814>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	f67f ac67 	bls.w	8000e70 <main+0x90>
			  {
				  old_tick=current_tick;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <main+0x810>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <main+0x814>)
 80015a8:	6013      	str	r3, [r2, #0]
				  user_pressed_flag=0;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <main+0x80c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
				  pulled_chk = -1;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <main+0x818>)
 80015b2:	f04f 32ff 	mov.w	r2, #4294967295
 80015b6:	601a      	str	r2, [r3, #0]
				  mode=NORMAL;
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <main+0x81c>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
 80015be:	e457      	b.n	8000e70 <main+0x90>
 80015c0:	2000041d 	.word	0x2000041d
 80015c4:	20000404 	.word	0x20000404
 80015c8:	20000000 	.word	0x20000000
 80015cc:	cccccccd 	.word	0xcccccccd
 80015d0:	08007f14 	.word	0x08007f14
 80015d4:	20000420 	.word	0x20000420
 80015d8:	08007f28 	.word	0x08007f28
 80015dc:	08007f3c 	.word	0x08007f3c
 80015e0:	08007f50 	.word	0x08007f50
 80015e4:	08007f64 	.word	0x08007f64
 80015e8:	08007fcc 	.word	0x08007fcc
 80015ec:	2000049d 	.word	0x2000049d
 80015f0:	200004a4 	.word	0x200004a4
 80015f4:	200004a0 	.word	0x200004a0
 80015f8:	20000044 	.word	0x20000044
 80015fc:	2000041c 	.word	0x2000041c
			  }
		  }
	  }
	  else if (mode == BELL)
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <main+0x8c4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b03      	cmp	r3, #3
 8001606:	f47f ac33 	bne.w	8000e70 <main+0x90>
	  {
		  lcd_put_cur(0, 0);
 800160a:	2100      	movs	r1, #0
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fbc6 	bl	8000d9e <lcd_put_cur>
		  LCD_SendString("Select Bell     ");
 8001612:	4825      	ldr	r0, [pc, #148]	; (80016a8 <main+0x8c8>)
 8001614:	f7ff fba6 	bl	8000d64 <LCD_SendString>

		  button = getButton();
 8001618:	f000 f8d4 	bl	80017c4 <getButton>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <main+0x8cc>)
 8001622:	701a      	strb	r2, [r3, #0]
		  move_cur_bell(button);
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <main+0x8cc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fa3d 	bl	8001aa8 <move_cur_bell>

		  sprintf(tmp_bell_name, "%s", bell_name[belltype]);
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <main+0x8d0>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <main+0x8d4>)
 800163e:	4413      	add	r3, r2
 8001640:	461a      	mov	r2, r3
 8001642:	491d      	ldr	r1, [pc, #116]	; (80016b8 <main+0x8d8>)
 8001644:	481d      	ldr	r0, [pc, #116]	; (80016bc <main+0x8dc>)
 8001646:	f005 ff97 	bl	8007578 <siprintf>

		  lcd_put_cur(1, 0);
 800164a:	2100      	movs	r1, #0
 800164c:	2001      	movs	r0, #1
 800164e:	f7ff fba6 	bl	8000d9e <lcd_put_cur>
		  LCD_SendString(tmp_bell_name);
 8001652:	481a      	ldr	r0, [pc, #104]	; (80016bc <main+0x8dc>)
 8001654:	f7ff fb86 	bl	8000d64 <LCD_SendString>

		  if (user_pressed_flag == 1)
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <main+0x8e0>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	f47f ac07 	bne.w	8000e70 <main+0x90>
		  {
			  current_tick = HAL_GetTick();
 8001662:	f000 fe27 	bl	80022b4 <HAL_GetTick>
 8001666:	4603      	mov	r3, r0
 8001668:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <main+0x8e4>)
 800166a:	6013      	str	r3, [r2, #0]
			  if (current_tick - old_tick > 1)
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <main+0x8e4>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <main+0x8e8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b01      	cmp	r3, #1
 8001678:	f67f abfa 	bls.w	8000e70 <main+0x90>
			  {
				  old_tick = current_tick;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <main+0x8e4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <main+0x8e8>)
 8001682:	6013      	str	r3, [r2, #0]
				  user_pressed_flag = 0;
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <main+0x8e0>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
				  interval = 0;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <main+0x8ec>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
				  pulled_chk = -1;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <main+0x8f0>)
 8001692:	f04f 32ff 	mov.w	r2, #4294967295
 8001696:	601a      	str	r2, [r3, #0]
				  mode = NORMAL;
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <main+0x8c4>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
	  if(mode==SETTING)
 800169e:	f7ff bbe7 	b.w	8000e70 <main+0x90>
 80016a2:	bf00      	nop
 80016a4:	2000041c 	.word	0x2000041c
 80016a8:	08007fdc 	.word	0x08007fdc
 80016ac:	2000049c 	.word	0x2000049c
 80016b0:	20000484 	.word	0x20000484
 80016b4:	20000008 	.word	0x20000008
 80016b8:	08007ff0 	.word	0x08007ff0
 80016bc:	20000488 	.word	0x20000488
 80016c0:	2000049d 	.word	0x2000049d
 80016c4:	200004a4 	.word	0x200004a4
 80016c8:	200004a0 	.word	0x200004a0
 80016cc:	200004c0 	.word	0x200004c0
 80016d0:	20000044 	.word	0x20000044

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2230      	movs	r2, #48	; 0x30
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 ff68 	bl	80075b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <SystemClock_Config+0xd0>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a28      	ldr	r2, [pc, #160]	; (80017a4 <SystemClock_Config+0xd0>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <SystemClock_Config+0xd0>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <SystemClock_Config+0xd4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a22      	ldr	r2, [pc, #136]	; (80017a8 <SystemClock_Config+0xd4>)
 800171e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <SystemClock_Config+0xd4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001730:	2305      	movs	r3, #5
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001734:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800173a:	2301      	movs	r3, #1
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173e:	2302      	movs	r3, #2
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001748:	2304      	movs	r3, #4
 800174a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800174c:	23a8      	movs	r3, #168	; 0xa8
 800174e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001750:	2302      	movs	r3, #2
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001754:	2307      	movs	r3, #7
 8001756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	4618      	mov	r0, r3
 800175e:	f003 f97f 	bl	8004a60 <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001768:	f000 fa4a 	bl	8001c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176c:	230f      	movs	r3, #15
 800176e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001770:	2302      	movs	r3, #2
 8001772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001778:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800177c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800177e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	2105      	movs	r1, #5
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fbe0 	bl	8004f50 <HAL_RCC_ClockConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001796:	f000 fa33 	bl	8001c00 <Error_Handler>
  }
}
 800179a:	bf00      	nop
 800179c:	3750      	adds	r7, #80	; 0x50
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40007000 	.word	0x40007000

080017ac <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	2028      	movs	r0, #40	; 0x28
 80017b6:	f001 faaa 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ba:	2028      	movs	r0, #40	; 0x28
 80017bc:	f001 fac3 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <getButton>:

/* USER CODE BEGIN 4 */
_Direction getButton()
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	if(XY[0] < 300)
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <getButton+0x48>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017d0:	d201      	bcs.n	80017d6 <getButton+0x12>
		return RIGHT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e015      	b.n	8001802 <getButton+0x3e>
	else if(XY[0] > 4000)
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <getButton+0x48>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80017de:	d901      	bls.n	80017e4 <getButton+0x20>
		return LEFT;
 80017e0:	2304      	movs	r3, #4
 80017e2:	e00e      	b.n	8001802 <getButton+0x3e>
	else if(XY[1] > 4000)
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <getButton+0x48>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80017ec:	d901      	bls.n	80017f2 <getButton+0x2e>
		return UP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e007      	b.n	8001802 <getButton+0x3e>
	else if(XY[1] < 300)
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <getButton+0x48>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017fa:	d201      	bcs.n	8001800 <getButton+0x3c>
		return DOWN;
 80017fc:	2302      	movs	r3, #2
 80017fe:	e000      	b.n	8001802 <getButton+0x3e>
	else
	{
		return NONE;
 8001800:	2300      	movs	r3, #0
	}
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	200004b4 	.word	0x200004b4

08001810 <move_cur_time>:

void move_cur_time(RTC_TimeTypeDef *Time, _Direction direction)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
	switch(direction)
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	2b04      	cmp	r3, #4
 8001820:	f200 813b 	bhi.w	8001a9a <move_cur_time+0x28a>
 8001824:	a201      	add	r2, pc, #4	; (adr r2, 800182c <move_cur_time+0x1c>)
 8001826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182a:	bf00      	nop
 800182c:	08001a85 	.word	0x08001a85
 8001830:	08001877 	.word	0x08001877
 8001834:	08001985 	.word	0x08001985
 8001838:	08001841 	.word	0x08001841
 800183c:	0800185f 	.word	0x0800185f
	{
	case RIGHT:
		setmode++;
 8001840:	4b92      	ldr	r3, [pc, #584]	; (8001a8c <move_cur_time+0x27c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b90      	ldr	r3, [pc, #576]	; (8001a8c <move_cur_time+0x27c>)
 800184a:	701a      	strb	r2, [r3, #0]
		if(setmode > SECOND_O) setmode = SECOND_O;
 800184c:	4b8f      	ldr	r3, [pc, #572]	; (8001a8c <move_cur_time+0x27c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b06      	cmp	r3, #6
 8001852:	f240 8119 	bls.w	8001a88 <move_cur_time+0x278>
 8001856:	4b8d      	ldr	r3, [pc, #564]	; (8001a8c <move_cur_time+0x27c>)
 8001858:	2206      	movs	r2, #6
 800185a:	701a      	strb	r2, [r3, #0]
		break;
 800185c:	e114      	b.n	8001a88 <move_cur_time+0x278>
	case LEFT:
		if(setmode > AMPM) setmode--;
 800185e:	4b8b      	ldr	r3, [pc, #556]	; (8001a8c <move_cur_time+0x27c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8114 	beq.w	8001a90 <move_cur_time+0x280>
 8001868:	4b88      	ldr	r3, [pc, #544]	; (8001a8c <move_cur_time+0x27c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b86      	ldr	r3, [pc, #536]	; (8001a8c <move_cur_time+0x27c>)
 8001872:	701a      	strb	r2, [r3, #0]
		break;
 8001874:	e10c      	b.n	8001a90 <move_cur_time+0x280>
	case UP:
		if(setmode==AMPM)
 8001876:	4b85      	ldr	r3, [pc, #532]	; (8001a8c <move_cur_time+0x27c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d107      	bne.n	800188e <move_cur_time+0x7e>
		{
			Time->TimeFormat ^= 1;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	78db      	ldrb	r3, [r3, #3]
 8001882:	f083 0301 	eor.w	r3, r3, #1
 8001886:	b2da      	uxtb	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	70da      	strb	r2, [r3, #3]
		else if(setmode==SECOND_O)
		{
			Time->Seconds++;
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
		}
		break;
 800188c:	e102      	b.n	8001a94 <move_cur_time+0x284>
		else if(setmode==HOUR_T)
 800188e:	4b7f      	ldr	r3, [pc, #508]	; (8001a8c <move_cur_time+0x27c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d112      	bne.n	80018bc <move_cur_time+0xac>
			Time->Hours+=10;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	330a      	adds	r3, #10
 800189c:	b2da      	uxtb	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 1;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d004      	beq.n	80018b4 <move_cur_time+0xa4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	f240 80f0 	bls.w	8001a94 <move_cur_time+0x284>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
		break;
 80018ba:	e0eb      	b.n	8001a94 <move_cur_time+0x284>
		else if(setmode==HOUR_O)
 80018bc:	4b73      	ldr	r3, [pc, #460]	; (8001a8c <move_cur_time+0x27c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d112      	bne.n	80018ea <move_cur_time+0xda>
			Time->Hours++;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 1;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <move_cur_time+0xd2>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b0c      	cmp	r3, #12
 80018de:	f240 80d9 	bls.w	8001a94 <move_cur_time+0x284>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
		break;
 80018e8:	e0d4      	b.n	8001a94 <move_cur_time+0x284>
		else if(setmode==MINUTE_T)
 80018ea:	4b68      	ldr	r3, [pc, #416]	; (8001a8c <move_cur_time+0x27c>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d10e      	bne.n	8001910 <move_cur_time+0x100>
			Time->Minutes+=10;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	785b      	ldrb	r3, [r3, #1]
 80018f6:	330a      	adds	r3, #10
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	785b      	ldrb	r3, [r3, #1]
 8001902:	2b3b      	cmp	r3, #59	; 0x3b
 8001904:	f240 80c6 	bls.w	8001a94 <move_cur_time+0x284>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	705a      	strb	r2, [r3, #1]
		break;
 800190e:	e0c1      	b.n	8001a94 <move_cur_time+0x284>
		else if(setmode==MINUTE_O)
 8001910:	4b5e      	ldr	r3, [pc, #376]	; (8001a8c <move_cur_time+0x27c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d10e      	bne.n	8001936 <move_cur_time+0x126>
			Time->Minutes++;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	785b      	ldrb	r3, [r3, #1]
 800191c:	3301      	adds	r3, #1
 800191e:	b2da      	uxtb	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 0;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	785b      	ldrb	r3, [r3, #1]
 8001928:	2b3b      	cmp	r3, #59	; 0x3b
 800192a:	f240 80b3 	bls.w	8001a94 <move_cur_time+0x284>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	705a      	strb	r2, [r3, #1]
		break;
 8001934:	e0ae      	b.n	8001a94 <move_cur_time+0x284>
		else if(setmode==SECOND_T)
 8001936:	4b55      	ldr	r3, [pc, #340]	; (8001a8c <move_cur_time+0x27c>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b05      	cmp	r3, #5
 800193c:	d10e      	bne.n	800195c <move_cur_time+0x14c>
			Time->Seconds+=10;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	789b      	ldrb	r3, [r3, #2]
 8001942:	330a      	adds	r3, #10
 8001944:	b2da      	uxtb	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	789b      	ldrb	r3, [r3, #2]
 800194e:	2b3b      	cmp	r3, #59	; 0x3b
 8001950:	f240 80a0 	bls.w	8001a94 <move_cur_time+0x284>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	709a      	strb	r2, [r3, #2]
		break;
 800195a:	e09b      	b.n	8001a94 <move_cur_time+0x284>
		else if(setmode==SECOND_O)
 800195c:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <move_cur_time+0x27c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b06      	cmp	r3, #6
 8001962:	f040 8097 	bne.w	8001a94 <move_cur_time+0x284>
			Time->Seconds++;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	789b      	ldrb	r3, [r3, #2]
 800196a:	3301      	adds	r3, #1
 800196c:	b2da      	uxtb	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	789b      	ldrb	r3, [r3, #2]
 8001976:	2b3b      	cmp	r3, #59	; 0x3b
 8001978:	f240 808c 	bls.w	8001a94 <move_cur_time+0x284>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	709a      	strb	r2, [r3, #2]
		break;
 8001982:	e087      	b.n	8001a94 <move_cur_time+0x284>
	case DOWN:
		if(setmode==AMPM)
 8001984:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <move_cur_time+0x27c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d107      	bne.n	800199c <move_cur_time+0x18c>
		{
			Time->TimeFormat ^= 1;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	78db      	ldrb	r3, [r3, #3]
 8001990:	f083 0301 	eor.w	r3, r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	70da      	strb	r2, [r3, #3]
		else if(setmode==SECOND_O)
		{
			Time->Seconds--;
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
		}
		break;
 800199a:	e07d      	b.n	8001a98 <move_cur_time+0x288>
		else if(setmode==HOUR_T)
 800199c:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <move_cur_time+0x27c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d111      	bne.n	80019c8 <move_cur_time+0x1b8>
			Time->Hours-=10;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	3b0a      	subs	r3, #10
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 12;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <move_cur_time+0x1b0>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	d96b      	bls.n	8001a98 <move_cur_time+0x288>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	220c      	movs	r2, #12
 80019c4:	701a      	strb	r2, [r3, #0]
		break;
 80019c6:	e067      	b.n	8001a98 <move_cur_time+0x288>
		else if(setmode==HOUR_O)
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <move_cur_time+0x27c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d111      	bne.n	80019f4 <move_cur_time+0x1e4>
			Time->Hours--;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	701a      	strb	r2, [r3, #0]
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 12;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <move_cur_time+0x1dc>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b0c      	cmp	r3, #12
 80019ea:	d955      	bls.n	8001a98 <move_cur_time+0x288>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	220c      	movs	r2, #12
 80019f0:	701a      	strb	r2, [r3, #0]
		break;
 80019f2:	e051      	b.n	8001a98 <move_cur_time+0x288>
		else if(setmode==MINUTE_T)
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <move_cur_time+0x27c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d10d      	bne.n	8001a18 <move_cur_time+0x208>
			Time->Minutes-=10;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	3b0a      	subs	r3, #10
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 59;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	785b      	ldrb	r3, [r3, #1]
 8001a0c:	2b3b      	cmp	r3, #59	; 0x3b
 8001a0e:	d943      	bls.n	8001a98 <move_cur_time+0x288>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	223b      	movs	r2, #59	; 0x3b
 8001a14:	705a      	strb	r2, [r3, #1]
		break;
 8001a16:	e03f      	b.n	8001a98 <move_cur_time+0x288>
		else if(setmode==MINUTE_O)
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <move_cur_time+0x27c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d10d      	bne.n	8001a3c <move_cur_time+0x22c>
			Time->Minutes--;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	705a      	strb	r2, [r3, #1]
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 59;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	785b      	ldrb	r3, [r3, #1]
 8001a30:	2b3b      	cmp	r3, #59	; 0x3b
 8001a32:	d931      	bls.n	8001a98 <move_cur_time+0x288>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	223b      	movs	r2, #59	; 0x3b
 8001a38:	705a      	strb	r2, [r3, #1]
		break;
 8001a3a:	e02d      	b.n	8001a98 <move_cur_time+0x288>
		else if(setmode==SECOND_T)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <move_cur_time+0x27c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d10d      	bne.n	8001a60 <move_cur_time+0x250>
			Time->Seconds-=10;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	789b      	ldrb	r3, [r3, #2]
 8001a48:	3b0a      	subs	r3, #10
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	789b      	ldrb	r3, [r3, #2]
 8001a54:	2b3b      	cmp	r3, #59	; 0x3b
 8001a56:	d91f      	bls.n	8001a98 <move_cur_time+0x288>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	223b      	movs	r2, #59	; 0x3b
 8001a5c:	709a      	strb	r2, [r3, #2]
		break;
 8001a5e:	e01b      	b.n	8001a98 <move_cur_time+0x288>
		else if(setmode==SECOND_O)
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <move_cur_time+0x27c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b06      	cmp	r3, #6
 8001a66:	d117      	bne.n	8001a98 <move_cur_time+0x288>
			Time->Seconds--;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	789b      	ldrb	r3, [r3, #2]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	709a      	strb	r2, [r3, #2]
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	789b      	ldrb	r3, [r3, #2]
 8001a78:	2b3b      	cmp	r3, #59	; 0x3b
 8001a7a:	d90d      	bls.n	8001a98 <move_cur_time+0x288>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	223b      	movs	r2, #59	; 0x3b
 8001a80:	709a      	strb	r2, [r3, #2]
		break;
 8001a82:	e009      	b.n	8001a98 <move_cur_time+0x288>
	case NONE:
		break;
 8001a84:	bf00      	nop
 8001a86:	e008      	b.n	8001a9a <move_cur_time+0x28a>
		break;
 8001a88:	bf00      	nop
 8001a8a:	e006      	b.n	8001a9a <move_cur_time+0x28a>
 8001a8c:	2000041d 	.word	0x2000041d
		break;
 8001a90:	bf00      	nop
 8001a92:	e002      	b.n	8001a9a <move_cur_time+0x28a>
		break;
 8001a94:	bf00      	nop
 8001a96:	e000      	b.n	8001a9a <move_cur_time+0x28a>
		break;
 8001a98:	bf00      	nop
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <move_cur_bell>:

void move_cur_bell(_Direction direction)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	switch(direction)
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d82c      	bhi.n	8001b12 <move_cur_bell+0x6a>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <move_cur_bell+0x18>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08001b11 	.word	0x08001b11
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001af3 	.word	0x08001af3
 8001acc:	08001b11 	.word	0x08001b11
 8001ad0:	08001b11 	.word	0x08001b11
	case LEFT:
		break;
	case NONE:
		break;
	case UP:
		if(belltype < 2) belltype++;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <move_cur_bell+0x78>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d806      	bhi.n	8001aea <move_cur_bell+0x42>
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <move_cur_bell+0x78>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <move_cur_bell+0x78>)
 8001ae6:	701a      	strb	r2, [r3, #0]
		else belltype=0;
		break;
 8001ae8:	e013      	b.n	8001b12 <move_cur_bell+0x6a>
		else belltype=0;
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <move_cur_bell+0x78>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
		break;
 8001af0:	e00f      	b.n	8001b12 <move_cur_bell+0x6a>
	case DOWN:
		if(belltype > 0) belltype--;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <move_cur_bell+0x78>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <move_cur_bell+0x60>
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <move_cur_bell+0x78>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <move_cur_bell+0x78>)
 8001b04:	701a      	strb	r2, [r3, #0]
		else belltype=2;
		break;
 8001b06:	e004      	b.n	8001b12 <move_cur_bell+0x6a>
		else belltype=2;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <move_cur_bell+0x78>)
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	701a      	strb	r2, [r3, #0]
		break;
 8001b0e:	e000      	b.n	8001b12 <move_cur_bell+0x6a>
		break;
 8001b10:	bf00      	nop
	}
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000484 	.word	0x20000484

08001b24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b34:	d14c      	bne.n	8001bd0 <HAL_GPIO_EXTI_Callback+0xac>
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8001b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3a:	4827      	ldr	r0, [pc, #156]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001b3c:	f002 f962 	bl	8003e04 <HAL_GPIO_ReadPin>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d020      	beq.n	8001b88 <HAL_GPIO_EXTI_Callback+0x64>
		{
			user_pulled_flag = 0;
 8001b46:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <HAL_GPIO_EXTI_Callback+0xb8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
			user_pressed_flag = 1;
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
			old_tick=HAL_GetTick();
 8001b52:	f000 fbaf 	bl	80022b4 <HAL_GetTick>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a22      	ldr	r2, [pc, #136]	; (8001be4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b5a:	6013      	str	r3, [r2, #0]
			current_tick=HAL_GetTick();
 8001b5c:	f000 fbaa 	bl	80022b4 <HAL_GetTick>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001b64:	6013      	str	r3, [r2, #0]

			if (mode == NORMAL)
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_GPIO_EXTI_Callback+0xc8>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d130      	bne.n	8001bd0 <HAL_GPIO_EXTI_Callback+0xac>
			{
				interval_chk[0] = HAL_GetTick();
 8001b6e:	f000 fba1 	bl	80022b4 <HAL_GetTick>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001b76:	6013      	str	r3, [r2, #0]

				interval = interval_chk[0] - interval_chk[1];
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001b84:	6013      	str	r3, [r2, #0]
					double_click = 1;
				}
			}
		}
	}
}
 8001b86:	e023      	b.n	8001bd0 <HAL_GPIO_EXTI_Callback+0xac>
			user_pulled_flag = 1;
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_GPIO_EXTI_Callback+0xb8>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
			user_pressed_flag = 0;
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
			if (mode == NORMAL)
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_GPIO_EXTI_Callback+0xc8>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d119      	bne.n	8001bd0 <HAL_GPIO_EXTI_Callback+0xac>
				interval_chk[1] = HAL_GetTick();
 8001b9c:	f000 fb8a 	bl	80022b4 <HAL_GetTick>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001ba4:	6053      	str	r3, [r2, #4]
				pulled_chk++;
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001bae:	6013      	str	r3, [r2, #0]
				if(interval > 0 && interval < 300 && pulled_chk > 1)
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_GPIO_EXTI_Callback+0xac>
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bc0:	d206      	bcs.n	8001bd0 <HAL_GPIO_EXTI_Callback+0xac>
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	dd02      	ble.n	8001bd0 <HAL_GPIO_EXTI_Callback+0xac>
					double_click = 1;
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	2000049e 	.word	0x2000049e
 8001be0:	2000049d 	.word	0x2000049d
 8001be4:	200004a0 	.word	0x200004a0
 8001be8:	200004a4 	.word	0x200004a4
 8001bec:	2000041c 	.word	0x2000041c
 8001bf0:	200004c4 	.word	0x200004c4
 8001bf4:	200004c0 	.word	0x200004c0
 8001bf8:	20000044 	.word	0x20000044
 8001bfc:	200004bc 	.word	0x200004bc

08001c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c04:	b672      	cpsid	i
}
 8001c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <Error_Handler+0x8>
	...

08001c0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_RTC_Init+0x44>)
 8001c12:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <MX_RTC_Init+0x48>)
 8001c14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_RTC_Init+0x44>)
 8001c18:	2240      	movs	r2, #64	; 0x40
 8001c1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_RTC_Init+0x44>)
 8001c1e:	227f      	movs	r2, #127	; 0x7f
 8001c20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_RTC_Init+0x44>)
 8001c24:	22ff      	movs	r2, #255	; 0xff
 8001c26:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_RTC_Init+0x44>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_RTC_Init+0x44>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_RTC_Init+0x44>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_RTC_Init+0x44>)
 8001c3c:	f003 fd68 	bl	8005710 <HAL_RTC_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001c46:	f7ff ffdb 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200004cc 	.word	0x200004cc
 8001c54:	40002800 	.word	0x40002800

08001c58 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08e      	sub	sp, #56	; 0x38
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	2230      	movs	r2, #48	; 0x30
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 fca5 	bl	80075b8 <memset>
  if(rtcHandle->Instance==RTC)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <HAL_RTC_MspInit+0x4c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d111      	bne.n	8001c9c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fb82 	bl	8005390 <HAL_RCCEx_PeriphCLKConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001c92:	f7ff ffb5 	bl	8001c00 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_RTC_MspInit+0x50>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3738      	adds	r7, #56	; 0x38
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40002800 	.word	0x40002800
 8001ca8:	42470e3c 	.word	0x42470e3c

08001cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_MspInit+0x4c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <NMI_Handler+0x4>

08001d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <HardFault_Handler+0x4>

08001d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <MemManage_Handler+0x4>

08001d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <BusFault_Handler+0x4>

08001d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <UsageFault_Handler+0x4>

08001d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d48:	f000 faa0 	bl	800228c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001d54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d58:	f002 f886 	bl	8003e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <DMA2_Stream0_IRQHandler+0x10>)
 8001d66:	f001 f90f 	bl	8002f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000108 	.word	0x20000108

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f005 fc10 	bl	80075c8 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20030000 	.word	0x20030000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	200004ec 	.word	0x200004ec
 8001ddc:	20000bd8 	.word	0x20000bd8

08001de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08e      	sub	sp, #56	; 0x38
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 0320 	add.w	r3, r7, #32
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
 8001e30:	615a      	str	r2, [r3, #20]
 8001e32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e34:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001e36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001e3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e44:	4b29      	ldr	r3, [pc, #164]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 180-1;
 8001e4a:	4b28      	ldr	r3, [pc, #160]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001e4c:	22b3      	movs	r2, #179	; 0xb3
 8001e4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e50:	4b26      	ldr	r3, [pc, #152]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e5c:	4823      	ldr	r0, [pc, #140]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001e5e:	f003 fed1 	bl	8005c04 <HAL_TIM_Base_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e68:	f7ff feca 	bl	8001c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e76:	4619      	mov	r1, r3
 8001e78:	481c      	ldr	r0, [pc, #112]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001e7a:	f004 f965 	bl	8006148 <HAL_TIM_ConfigClockSource>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e84:	f7ff febc 	bl	8001c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e88:	4818      	ldr	r0, [pc, #96]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001e8a:	f003 ff0a 	bl	8005ca2 <HAL_TIM_PWM_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e94:	f7ff feb4 	bl	8001c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ea0:	f107 0320 	add.w	r3, r7, #32
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4811      	ldr	r0, [pc, #68]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001ea8:	f004 fd26 	bl	80068f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001eb2:	f7ff fea5 	bl	8001c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb6:	2360      	movs	r3, #96	; 0x60
 8001eb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 90;
 8001eba:	235a      	movs	r3, #90	; 0x5a
 8001ebc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001ece:	f004 f879 	bl	8005fc4 <HAL_TIM_PWM_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ed8:	f7ff fe92 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <MX_TIM2_Init+0xe8>)
 8001ede:	f000 f827 	bl	8001f30 <HAL_TIM_MspPostInit>

}
 8001ee2:	bf00      	nop
 8001ee4:	3738      	adds	r7, #56	; 0x38
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200004f0 	.word	0x200004f0

08001ef0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f00:	d10d      	bne.n	8001f1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_TIM_Base_MspInit+0x3c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <HAL_TIM_Base_MspInit+0x3c>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_TIM_Base_MspInit+0x3c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f50:	d11d      	bne.n	8001f8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_TIM_MspPostInit+0x68>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_TIM_MspPostInit+0x68>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_TIM_MspPostInit+0x68>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4619      	mov	r1, r3
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <HAL_TIM_MspPostInit+0x6c>)
 8001f8a:	f001 fd8f 	bl	8003aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f8e:	bf00      	nop
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000

08001fa0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_USART3_UART_Init+0x4c>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <MX_USART3_UART_Init+0x50>)
 8001fa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <MX_USART3_UART_Init+0x4c>)
 8001fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <MX_USART3_UART_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_USART3_UART_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <MX_USART3_UART_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_USART3_UART_Init+0x4c>)
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MX_USART3_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_USART3_UART_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_USART3_UART_Init+0x4c>)
 8001fd8:	f004 fd0a 	bl	80069f0 <HAL_UART_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fe2:	f7ff fe0d 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000538 	.word	0x20000538
 8001ff0:	40004800 	.word	0x40004800

08001ff4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_UART_MspInit+0x84>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d12c      	bne.n	8002070 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <HAL_UART_MspInit+0x88>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a17      	ldr	r2, [pc, #92]	; (800207c <HAL_UART_MspInit+0x88>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_UART_MspInit+0x88>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_UART_MspInit+0x88>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a10      	ldr	r2, [pc, #64]	; (800207c <HAL_UART_MspInit+0x88>)
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <HAL_UART_MspInit+0x88>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800204e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002060:	2307      	movs	r3, #7
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <HAL_UART_MspInit+0x8c>)
 800206c:	f001 fd1e 	bl	8003aac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002070:	bf00      	nop
 8002072:	3728      	adds	r7, #40	; 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40004800 	.word	0x40004800
 800207c:	40023800 	.word	0x40023800
 8002080:	40020c00 	.word	0x40020c00

08002084 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800208a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800208e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002092:	2204      	movs	r2, #4
 8002094:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002098:	2202      	movs	r2, #2
 800209a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020a4:	2202      	movs	r2, #2
 80020a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020bc:	2201      	movs	r2, #1
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020c8:	f002 fbac 	bl	8004824 <HAL_PCD_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80020d2:	f7ff fd95 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000057c 	.word	0x2000057c

080020e0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002100:	d13f      	bne.n	8002182 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_PCD_MspInit+0xac>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a20      	ldr	r2, [pc, #128]	; (800218c <HAL_PCD_MspInit+0xac>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_PCD_MspInit+0xac>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800211e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002130:	230a      	movs	r3, #10
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	4815      	ldr	r0, [pc, #84]	; (8002190 <HAL_PCD_MspInit+0xb0>)
 800213c:	f001 fcb6 	bl	8003aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	480e      	ldr	r0, [pc, #56]	; (8002190 <HAL_PCD_MspInit+0xb0>)
 8002156:	f001 fca9 	bl	8003aac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_PCD_MspInit+0xac>)
 800215c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_PCD_MspInit+0xac>)
 8002160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002164:	6353      	str	r3, [r2, #52]	; 0x34
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_PCD_MspInit+0xac>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_PCD_MspInit+0xac>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_PCD_MspInit+0xac>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000

08002194 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 

  ldr   sp, =_estack       /* set stack pointer */
 8002194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021cc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800219a:	490e      	ldr	r1, [pc, #56]	; (80021d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800219c:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021b0:	4c0b      	ldr	r4, [pc, #44]	; (80021e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021be:	f7ff fe0f 	bl	8001de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c2:	f005 fa07 	bl	80075d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c6:	f7fe fe0b 	bl	8000de0 <main>
  bx  lr    
 80021ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80021d8:	08008060 	.word	0x08008060
  ldr r2, =_sbss
 80021dc:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80021e0:	20000bd4 	.word	0x20000bd4

080021e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e4:	e7fe      	b.n	80021e4 <ADC_IRQHandler>
	...

080021e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_Init+0x40>)
 80021f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <HAL_Init+0x40>)
 80021fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_Init+0x40>)
 800220a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002210:	2003      	movs	r0, #3
 8002212:	f000 fd71 	bl	8002cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002216:	2000      	movs	r0, #0
 8002218:	f000 f808 	bl	800222c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800221c:	f7ff fd46 	bl	8001cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023c00 	.word	0x40023c00

0800222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_InitTick+0x54>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x58>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002242:	fbb3 f3f1 	udiv	r3, r3, r1
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fd89 	bl	8002d62 <HAL_SYSTICK_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e00e      	b.n	8002278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b0f      	cmp	r3, #15
 800225e:	d80a      	bhi.n	8002276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002260:	2200      	movs	r2, #0
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f000 fd51 	bl	8002d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800226c:	4a06      	ldr	r2, [pc, #24]	; (8002288 <HAL_InitTick+0x5c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000048 	.word	0x20000048
 8002284:	20000050 	.word	0x20000050
 8002288:	2000004c 	.word	0x2000004c

0800228c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_IncTick+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x24>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <HAL_IncTick+0x24>)
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000050 	.word	0x20000050
 80022b0:	20000a88 	.word	0x20000a88

080022b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_GetTick+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000a88 	.word	0x20000a88

080022cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff ffee 	bl	80022b4 <HAL_GetTick>
 80022d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d005      	beq.n	80022f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_Delay+0x44>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f2:	bf00      	nop
 80022f4:	f7ff ffde 	bl	80022b4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	d8f7      	bhi.n	80022f4 <HAL_Delay+0x28>
  {
  }
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000050 	.word	0x20000050

08002314 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e033      	b.n	8002392 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe f98a 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	d118      	bne.n	8002384 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800235a:	f023 0302 	bic.w	r3, r3, #2
 800235e:	f043 0202 	orr.w	r2, r3, #2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fa78 	bl	800285c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
 8002382:	e001      	b.n	8002388 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_Start_DMA+0x1e>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e0e9      	b.n	800258e <HAL_ADC_Start_DMA+0x1f2>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d018      	beq.n	8002402 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023e0:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_ADC_Start_DMA+0x1fc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a6d      	ldr	r2, [pc, #436]	; (800259c <HAL_ADC_Start_DMA+0x200>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9a      	lsrs	r2, r3, #18
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023f4:	e002      	b.n	80023fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f9      	bne.n	80023f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002410:	d107      	bne.n	8002422 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002420:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	f040 80a1 	bne.w	8002574 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800245c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002470:	d106      	bne.n	8002480 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f023 0206 	bic.w	r2, r3, #6
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
 800247e:	e002      	b.n	8002486 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800248e:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <HAL_ADC_Start_DMA+0x204>)
 8002490:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	4a43      	ldr	r2, [pc, #268]	; (80025a4 <HAL_ADC_Start_DMA+0x208>)
 8002498:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	4a42      	ldr	r2, [pc, #264]	; (80025a8 <HAL_ADC_Start_DMA+0x20c>)
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	4a41      	ldr	r2, [pc, #260]	; (80025ac <HAL_ADC_Start_DMA+0x210>)
 80024a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	334c      	adds	r3, #76	; 0x4c
 80024de:	4619      	mov	r1, r3
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f000 fcf8 	bl	8002ed8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d12a      	bne.n	800254a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2d      	ldr	r2, [pc, #180]	; (80025b0 <HAL_ADC_Start_DMA+0x214>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d015      	beq.n	800252a <HAL_ADC_Start_DMA+0x18e>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2c      	ldr	r2, [pc, #176]	; (80025b4 <HAL_ADC_Start_DMA+0x218>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d105      	bne.n	8002514 <HAL_ADC_Start_DMA+0x178>
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <HAL_ADC_Start_DMA+0x204>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <HAL_ADC_Start_DMA+0x21c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d136      	bne.n	800258c <HAL_ADC_Start_DMA+0x1f0>
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HAL_ADC_Start_DMA+0x204>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d130      	bne.n	800258c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d129      	bne.n	800258c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	e020      	b.n	800258c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <HAL_ADC_Start_DMA+0x214>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d11b      	bne.n	800258c <HAL_ADC_Start_DMA+0x1f0>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d114      	bne.n	800258c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	e00b      	b.n	800258c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f043 0210 	orr.w	r2, r3, #16
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000048 	.word	0x20000048
 800259c:	431bde83 	.word	0x431bde83
 80025a0:	40012300 	.word	0x40012300
 80025a4:	08002a55 	.word	0x08002a55
 80025a8:	08002b0f 	.word	0x08002b0f
 80025ac:	08002b2b 	.word	0x08002b2b
 80025b0:	40012000 	.word	0x40012000
 80025b4:	40012100 	.word	0x40012100
 80025b8:	40012200 	.word	0x40012200

080025bc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1c>
 8002610:	2302      	movs	r3, #2
 8002612:	e113      	b.n	800283c <HAL_ADC_ConfigChannel+0x244>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b09      	cmp	r3, #9
 8002622:	d925      	bls.n	8002670 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68d9      	ldr	r1, [r3, #12]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	3b1e      	subs	r3, #30
 800263a:	2207      	movs	r2, #7
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43da      	mvns	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	400a      	ands	r2, r1
 8002648:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68d9      	ldr	r1, [r3, #12]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	4618      	mov	r0, r3
 800265c:	4603      	mov	r3, r0
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4403      	add	r3, r0
 8002662:	3b1e      	subs	r3, #30
 8002664:	409a      	lsls	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	e022      	b.n	80026b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6919      	ldr	r1, [r3, #16]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	2207      	movs	r2, #7
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	400a      	ands	r2, r1
 8002692:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6919      	ldr	r1, [r3, #16]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4618      	mov	r0, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4403      	add	r3, r0
 80026ac:	409a      	lsls	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d824      	bhi.n	8002708 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	3b05      	subs	r3, #5
 80026d0:	221f      	movs	r2, #31
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	400a      	ands	r2, r1
 80026de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	4618      	mov	r0, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	3b05      	subs	r3, #5
 80026fa:	fa00 f203 	lsl.w	r2, r0, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	635a      	str	r2, [r3, #52]	; 0x34
 8002706:	e04c      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b0c      	cmp	r3, #12
 800270e:	d824      	bhi.n	800275a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	3b23      	subs	r3, #35	; 0x23
 8002722:	221f      	movs	r2, #31
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43da      	mvns	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	400a      	ands	r2, r1
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	4618      	mov	r0, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	3b23      	subs	r3, #35	; 0x23
 800274c:	fa00 f203 	lsl.w	r2, r0, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
 8002758:	e023      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	3b41      	subs	r3, #65	; 0x41
 800276c:	221f      	movs	r2, #31
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	400a      	ands	r2, r1
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	4618      	mov	r0, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	3b41      	subs	r3, #65	; 0x41
 8002796:	fa00 f203 	lsl.w	r2, r0, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027a2:	4b29      	ldr	r3, [pc, #164]	; (8002848 <HAL_ADC_ConfigChannel+0x250>)
 80027a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a28      	ldr	r2, [pc, #160]	; (800284c <HAL_ADC_ConfigChannel+0x254>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d10f      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1d8>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b12      	cmp	r3, #18
 80027b6:	d10b      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1d      	ldr	r2, [pc, #116]	; (800284c <HAL_ADC_ConfigChannel+0x254>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d12b      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x23a>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <HAL_ADC_ConfigChannel+0x258>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d003      	beq.n	80027ec <HAL_ADC_ConfigChannel+0x1f4>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b11      	cmp	r3, #17
 80027ea:	d122      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a11      	ldr	r2, [pc, #68]	; (8002850 <HAL_ADC_ConfigChannel+0x258>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d111      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_ADC_ConfigChannel+0x25c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a11      	ldr	r2, [pc, #68]	; (8002858 <HAL_ADC_ConfigChannel+0x260>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	0c9a      	lsrs	r2, r3, #18
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002824:	e002      	b.n	800282c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3b01      	subs	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f9      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40012300 	.word	0x40012300
 800284c:	40012000 	.word	0x40012000
 8002850:	10000012 	.word	0x10000012
 8002854:	20000048 	.word	0x20000048
 8002858:	431bde83 	.word	0x431bde83

0800285c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002864:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <ADC_Init+0x1f0>)
 8002866:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	431a      	orrs	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	021a      	lsls	r2, r3, #8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6899      	ldr	r1, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <ADC_Init+0x1f4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002902:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6899      	ldr	r1, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	e00f      	b.n	800295a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002948:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002958:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0202 	bic.w	r2, r2, #2
 8002968:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7e1b      	ldrb	r3, [r3, #24]
 8002974:	005a      	lsls	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01b      	beq.n	80029c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002996:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	3b01      	subs	r3, #1
 80029b4:	035a      	lsls	r2, r3, #13
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	e007      	b.n	80029d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	051a      	lsls	r2, r3, #20
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6899      	ldr	r1, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a12:	025a      	lsls	r2, r3, #9
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	029a      	lsls	r2, r3, #10
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40012300 	.word	0x40012300
 8002a50:	0f000001 	.word	0x0f000001

08002a54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d13c      	bne.n	8002ae8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d12b      	bne.n	8002ae0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d127      	bne.n	8002ae0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d119      	bne.n	8002ae0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0220 	bic.w	r2, r2, #32
 8002aba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f7ff fd6b 	bl	80025bc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ae6:	e00e      	b.n	8002b06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f7ff fd75 	bl	80025e4 <HAL_ADC_ErrorCallback>
}
 8002afa:	e004      	b.n	8002b06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff fd57 	bl	80025d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2240      	movs	r2, #64	; 0x40
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7ff fd4a 	bl	80025e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8a:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	60d3      	str	r3, [r2, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0307 	and.w	r3, r3, #7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	db0b      	blt.n	8002be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4907      	ldr	r1, [pc, #28]	; (8002bf4 <__NVIC_EnableIRQ+0x38>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2001      	movs	r0, #1
 8002bde:	fa00 f202 	lsl.w	r2, r0, r2
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000e100 	.word	0xe000e100

08002bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	db0a      	blt.n	8002c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	490c      	ldr	r1, [pc, #48]	; (8002c44 <__NVIC_SetPriority+0x4c>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c20:	e00a      	b.n	8002c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4908      	ldr	r1, [pc, #32]	; (8002c48 <__NVIC_SetPriority+0x50>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3b04      	subs	r3, #4
 8002c30:	0112      	lsls	r2, r2, #4
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	440b      	add	r3, r1
 8002c36:	761a      	strb	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	; 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f1c3 0307 	rsb	r3, r3, #7
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf28      	it	cs
 8002c6a:	2304      	movcs	r3, #4
 8002c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d902      	bls.n	8002c7c <NVIC_EncodePriority+0x30>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3b03      	subs	r3, #3
 8002c7a:	e000      	b.n	8002c7e <NVIC_EncodePriority+0x32>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	401a      	ands	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	43d9      	mvns	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	4313      	orrs	r3, r2
         );
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc4:	d301      	bcc.n	8002cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00f      	b.n	8002cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <SysTick_Config+0x40>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd2:	210f      	movs	r1, #15
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f7ff ff8e 	bl	8002bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <SysTick_Config+0x40>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <SysTick_Config+0x40>)
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000e010 	.word	0xe000e010

08002cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ff29 	bl	8002b58 <__NVIC_SetPriorityGrouping>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d20:	f7ff ff3e 	bl	8002ba0 <__NVIC_GetPriorityGrouping>
 8002d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7ff ff8e 	bl	8002c4c <NVIC_EncodePriority>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff5d 	bl	8002bf8 <__NVIC_SetPriority>
}
 8002d3e:	bf00      	nop
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff31 	bl	8002bbc <__NVIC_EnableIRQ>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ffa2 	bl	8002cb4 <SysTick_Config>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff fa94 	bl	80022b4 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e099      	b.n	8002ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db8:	e00f      	b.n	8002dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dba:	f7ff fa7b 	bl	80022b4 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d908      	bls.n	8002dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e078      	b.n	8002ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e8      	bne.n	8002dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <HAL_DMA_Init+0x158>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d107      	bne.n	8002e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0307 	bic.w	r3, r3, #7
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d117      	bne.n	8002e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fa6f 	bl	8003364 <DMA_CheckFifoParam>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2240      	movs	r2, #64	; 0x40
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e016      	b.n	8002ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa26 	bl	80032f8 <DMA_CalcBaseAndBitshift>
 8002eac:	4603      	mov	r3, r0
 8002eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	223f      	movs	r2, #63	; 0x3f
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	f010803f 	.word	0xf010803f

08002ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_DMA_Start_IT+0x26>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e040      	b.n	8002f80 <HAL_DMA_Start_IT+0xa8>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d12f      	bne.n	8002f72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f9b8 	bl	800329c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f30:	223f      	movs	r2, #63	; 0x3f
 8002f32:	409a      	lsls	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0216 	orr.w	r2, r2, #22
 8002f46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0208 	orr.w	r2, r2, #8
 8002f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	e005      	b.n	8002f7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f94:	4b8e      	ldr	r3, [pc, #568]	; (80031d0 <HAL_DMA_IRQHandler+0x248>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a8e      	ldr	r2, [pc, #568]	; (80031d4 <HAL_DMA_IRQHandler+0x24c>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0a9b      	lsrs	r3, r3, #10
 8002fa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0204 	bic.w	r2, r2, #4
 8002fda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d012      	beq.n	800302a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	2201      	movs	r2, #1
 8003018:	409a      	lsls	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f043 0202 	orr.w	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302e:	2204      	movs	r2, #4
 8003030:	409a      	lsls	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d012      	beq.n	8003060 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	2204      	movs	r2, #4
 800304e:	409a      	lsls	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f043 0204 	orr.w	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	2210      	movs	r2, #16
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d043      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03c      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	2210      	movs	r2, #16
 8003084:	409a      	lsls	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d018      	beq.n	80030ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d024      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
 80030b6:	e01f      	b.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01b      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
 80030c8:	e016      	b.n	80030f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0208 	bic.w	r2, r2, #8
 80030e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	2220      	movs	r2, #32
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 808f 	beq.w	8003228 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8087 	beq.w	8003228 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	2220      	movs	r2, #32
 8003120:	409a      	lsls	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b05      	cmp	r3, #5
 8003130:	d136      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0216 	bic.w	r2, r2, #22
 8003140:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003150:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <HAL_DMA_IRQHandler+0x1da>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0208 	bic.w	r2, r2, #8
 8003170:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	223f      	movs	r2, #63	; 0x3f
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	2b00      	cmp	r3, #0
 8003194:	d07e      	beq.n	8003294 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4798      	blx	r3
        }
        return;
 800319e:	e079      	b.n	8003294 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01d      	beq.n	80031ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d031      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
 80031cc:	e02c      	b.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
 80031ce:	bf00      	nop
 80031d0:	20000048 	.word	0x20000048
 80031d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d023      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
 80031e8:	e01e      	b.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0210 	bic.w	r2, r2, #16
 8003206:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	2b00      	cmp	r3, #0
 800322e:	d032      	beq.n	8003296 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d022      	beq.n	8003282 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2205      	movs	r2, #5
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3301      	adds	r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	d307      	bcc.n	8003270 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f2      	bne.n	8003254 <HAL_DMA_IRQHandler+0x2cc>
 800326e:	e000      	b.n	8003272 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003270:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
 8003292:	e000      	b.n	8003296 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003294:	bf00      	nop
    }
  }
}
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d108      	bne.n	80032dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032da:	e007      	b.n	80032ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3b10      	subs	r3, #16
 8003308:	4a14      	ldr	r2, [pc, #80]	; (800335c <DMA_CalcBaseAndBitshift+0x64>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003312:	4a13      	ldr	r2, [pc, #76]	; (8003360 <DMA_CalcBaseAndBitshift+0x68>)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d909      	bls.n	800333a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	1d1a      	adds	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	659a      	str	r2, [r3, #88]	; 0x58
 8003338:	e007      	b.n	800334a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	aaaaaaab 	.word	0xaaaaaaab
 8003360:	08008014 	.word	0x08008014

08003364 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11f      	bne.n	80033be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d856      	bhi.n	8003432 <DMA_CheckFifoParam+0xce>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <DMA_CheckFifoParam+0x28>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033af 	.word	0x080033af
 8003394:	0800339d 	.word	0x0800339d
 8003398:	08003433 	.word	0x08003433
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d046      	beq.n	8003436 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ac:	e043      	b.n	8003436 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033b6:	d140      	bne.n	800343a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e03d      	b.n	800343a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c6:	d121      	bne.n	800340c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d837      	bhi.n	800343e <DMA_CheckFifoParam+0xda>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <DMA_CheckFifoParam+0x70>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033eb 	.word	0x080033eb
 80033dc:	080033e5 	.word	0x080033e5
 80033e0:	080033fd 	.word	0x080033fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e030      	b.n	800344c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d025      	beq.n	8003442 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fa:	e022      	b.n	8003442 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003404:	d11f      	bne.n	8003446 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800340a:	e01c      	b.n	8003446 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d903      	bls.n	800341a <DMA_CheckFifoParam+0xb6>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d003      	beq.n	8003420 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003418:	e018      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      break;
 800341e:	e015      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00e      	beq.n	800344a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e00b      	b.n	800344a <DMA_CheckFifoParam+0xe6>
      break;
 8003432:	bf00      	nop
 8003434:	e00a      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 8003436:	bf00      	nop
 8003438:	e008      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e006      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
 8003440:	e004      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
 8003444:	e002      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;   
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800344a:	bf00      	nop
    }
  } 
  
  return status; 
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop

0800345c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e06c      	b.n	8003548 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2223      	movs	r2, #35	; 0x23
 800347c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7fd f9e5 	bl	8000850 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	4b31      	ldr	r3, [pc, #196]	; (8003550 <HAL_ETH_Init+0xf4>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	4a30      	ldr	r2, [pc, #192]	; (8003550 <HAL_ETH_Init+0xf4>)
 8003490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003494:	6453      	str	r3, [r2, #68]	; 0x44
 8003496:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <HAL_ETH_Init+0xf4>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80034a2:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <HAL_ETH_Init+0xf8>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <HAL_ETH_Init+0xf8>)
 80034a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80034ae:	4b29      	ldr	r3, [pc, #164]	; (8003554 <HAL_ETH_Init+0xf8>)
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4927      	ldr	r1, [pc, #156]	; (8003554 <HAL_ETH_Init+0xf8>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_ETH_Init+0xf8>)
 80034be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d8:	f7fe feec 	bl	80022b4 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034de:	e011      	b.n	8003504 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80034e0:	f7fe fee8 	bl	80022b4 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034ee:	d909      	bls.n	8003504 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2204      	movs	r2, #4
 80034f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	22e0      	movs	r2, #224	; 0xe0
 80034fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e021      	b.n	8003548 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e4      	bne.n	80034e0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f958 	bl	80037cc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f9ff 	bl	8003920 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa55 	bl	80039d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	461a      	mov	r2, r3
 800352e:	2100      	movs	r1, #0
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f9bd 	bl	80038b0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2210      	movs	r2, #16
 8003542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	40013800 	.word	0x40013800

08003558 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4b51      	ldr	r3, [pc, #324]	; (80036b4 <ETH_SetMACConfig+0x15c>)
 800356e:	4013      	ands	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	7c1b      	ldrb	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d102      	bne.n	8003580 <ETH_SetMACConfig+0x28>
 800357a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800357e:	e000      	b.n	8003582 <ETH_SetMACConfig+0x2a>
 8003580:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	7c5b      	ldrb	r3, [r3, #17]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <ETH_SetMACConfig+0x38>
 800358a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800358e:	e000      	b.n	8003592 <ETH_SetMACConfig+0x3a>
 8003590:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003592:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003598:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	7fdb      	ldrb	r3, [r3, #31]
 800359e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80035a0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80035a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	7f92      	ldrb	r2, [r2, #30]
 80035ac:	2a00      	cmp	r2, #0
 80035ae:	d102      	bne.n	80035b6 <ETH_SetMACConfig+0x5e>
 80035b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035b4:	e000      	b.n	80035b8 <ETH_SetMACConfig+0x60>
 80035b6:	2200      	movs	r2, #0
                        macconf->Speed |
 80035b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	7f1b      	ldrb	r3, [r3, #28]
 80035be:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80035c0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80035c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	791b      	ldrb	r3, [r3, #4]
 80035cc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80035ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80035d6:	2a00      	cmp	r2, #0
 80035d8:	d102      	bne.n	80035e0 <ETH_SetMACConfig+0x88>
 80035da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035de:	e000      	b.n	80035e2 <ETH_SetMACConfig+0x8a>
 80035e0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80035e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	7bdb      	ldrb	r3, [r3, #15]
 80035e8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035ea:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035f8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035fa:	4313      	orrs	r3, r2
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003612:	2001      	movs	r0, #1
 8003614:	f7fe fe5a 	bl	80022cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800362e:	4013      	ands	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003636:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800363e:	2a00      	cmp	r2, #0
 8003640:	d101      	bne.n	8003646 <ETH_SetMACConfig+0xee>
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	e000      	b.n	8003648 <ETH_SetMACConfig+0xf0>
 8003646:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003648:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800364e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003656:	2a01      	cmp	r2, #1
 8003658:	d101      	bne.n	800365e <ETH_SetMACConfig+0x106>
 800365a:	2208      	movs	r2, #8
 800365c:	e000      	b.n	8003660 <ETH_SetMACConfig+0x108>
 800365e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003660:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003668:	2a01      	cmp	r2, #1
 800366a:	d101      	bne.n	8003670 <ETH_SetMACConfig+0x118>
 800366c:	2204      	movs	r2, #4
 800366e:	e000      	b.n	8003672 <ETH_SetMACConfig+0x11a>
 8003670:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003672:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800367a:	2a01      	cmp	r2, #1
 800367c:	d101      	bne.n	8003682 <ETH_SetMACConfig+0x12a>
 800367e:	2202      	movs	r2, #2
 8003680:	e000      	b.n	8003684 <ETH_SetMACConfig+0x12c>
 8003682:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003684:	4313      	orrs	r3, r2
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800369c:	2001      	movs	r0, #1
 800369e:	f7fe fe15 	bl	80022cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	619a      	str	r2, [r3, #24]
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	ff20810f 	.word	0xff20810f

080036b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <ETH_SetDMAConfig+0x110>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	7b1b      	ldrb	r3, [r3, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <ETH_SetDMAConfig+0x2c>
 80036de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036e2:	e000      	b.n	80036e6 <ETH_SetDMAConfig+0x2e>
 80036e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	7b5b      	ldrb	r3, [r3, #13]
 80036ea:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036ec:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	7f52      	ldrb	r2, [r2, #29]
 80036f2:	2a00      	cmp	r2, #0
 80036f4:	d102      	bne.n	80036fc <ETH_SetDMAConfig+0x44>
 80036f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036fa:	e000      	b.n	80036fe <ETH_SetDMAConfig+0x46>
 80036fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	7b9b      	ldrb	r3, [r3, #14]
 8003704:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003706:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800370c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	7f1b      	ldrb	r3, [r3, #28]
 8003712:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003714:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	7f9b      	ldrb	r3, [r3, #30]
 800371a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800371c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003722:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800372a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800372c:	4313      	orrs	r3, r2
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373c:	461a      	mov	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800374e:	2001      	movs	r0, #1
 8003750:	f7fe fdbc 	bl	80022cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375c:	461a      	mov	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	791b      	ldrb	r3, [r3, #4]
 8003766:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800376c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003772:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003778:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003780:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003782:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800378a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003790:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800379a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800379e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037ac:	2001      	movs	r0, #1
 80037ae:	f7fe fd8d 	bl	80022cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ba:	461a      	mov	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6013      	str	r3, [r2, #0]
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	f8de3f23 	.word	0xf8de3f23

080037cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b0a6      	sub	sp, #152	; 0x98
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80037e0:	2300      	movs	r3, #0
 80037e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003802:	2300      	movs	r3, #0
 8003804:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003808:	2300      	movs	r3, #0
 800380a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003812:	2300      	movs	r3, #0
 8003814:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800381c:	2300      	movs	r3, #0
 800381e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003822:	2300      	movs	r3, #0
 8003824:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003828:	2300      	movs	r3, #0
 800382a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800382e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003834:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003838:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800383a:	2300      	movs	r3, #0
 800383c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003840:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fe86 	bl	8003558 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800384c:	2301      	movs	r3, #1
 800384e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003850:	2301      	movs	r3, #1
 8003852:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003854:	2301      	movs	r3, #1
 8003856:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800385a:	2301      	movs	r3, #1
 800385c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003862:	2300      	movs	r3, #0
 8003864:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003868:	2300      	movs	r3, #0
 800386a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800386e:	2300      	movs	r3, #0
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003878:	2301      	movs	r3, #1
 800387a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800387c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003880:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003886:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800388c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003894:	2300      	movs	r3, #0
 8003896:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800389c:	f107 0308 	add.w	r3, r7, #8
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ff08 	bl	80036b8 <ETH_SetDMAConfig>
}
 80038a8:	bf00      	nop
 80038aa:	3798      	adds	r7, #152	; 0x98
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3305      	adds	r3, #5
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	3204      	adds	r2, #4
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <ETH_MACAddressConfig+0x68>)
 80038d2:	4413      	add	r3, r2
 80038d4:	461a      	mov	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3303      	adds	r3, #3
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	061a      	lsls	r2, r3, #24
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3302      	adds	r3, #2
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3301      	adds	r3, #1
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	4313      	orrs	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	7812      	ldrb	r2, [r2, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <ETH_MACAddressConfig+0x6c>)
 8003902:	4413      	add	r3, r2
 8003904:	461a      	mov	r2, r3
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	6013      	str	r3, [r2, #0]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40028040 	.word	0x40028040
 800391c:	40028044 	.word	0x40028044

08003920 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e03e      	b.n	80039ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68d9      	ldr	r1, [r3, #12]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2200      	movs	r2, #0
 800394a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2200      	movs	r2, #0
 8003956:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	3206      	adds	r2, #6
 8003960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d80c      	bhi.n	8003990 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68d9      	ldr	r1, [r3, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	461a      	mov	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	e004      	b.n	800399a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	461a      	mov	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3301      	adds	r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d9bd      	bls.n	800392e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c4:	611a      	str	r2, [r3, #16]
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e046      	b.n	8003a6e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6919      	ldr	r1, [r3, #16]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	440b      	add	r3, r1
 80039f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2200      	movs	r2, #0
 80039fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2200      	movs	r2, #0
 8003a08:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2200      	movs	r2, #0
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a1c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003a24:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	3212      	adds	r2, #18
 8003a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d80c      	bhi.n	8003a5e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6919      	ldr	r1, [r3, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	60da      	str	r2, [r3, #12]
 8003a5c:	e004      	b.n	8003a68 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	461a      	mov	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d9b5      	bls.n	80039e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9e:	60da      	str	r2, [r3, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b089      	sub	sp, #36	; 0x24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	e177      	b.n	8003db8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ac8:	2201      	movs	r2, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	f040 8166 	bne.w	8003db2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d005      	beq.n	8003afe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d130      	bne.n	8003b60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	2203      	movs	r2, #3
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b34:	2201      	movs	r2, #1
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 0201 	and.w	r2, r3, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d017      	beq.n	8003b9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	2203      	movs	r2, #3
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4013      	ands	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d123      	bne.n	8003bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	08da      	lsrs	r2, r3, #3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3208      	adds	r2, #8
 8003bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	220f      	movs	r2, #15
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	08da      	lsrs	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3208      	adds	r2, #8
 8003bea:	69b9      	ldr	r1, [r7, #24]
 8003bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0203 	and.w	r2, r3, #3
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80c0 	beq.w	8003db2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <HAL_GPIO_Init+0x324>)
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	4a65      	ldr	r2, [pc, #404]	; (8003dd0 <HAL_GPIO_Init+0x324>)
 8003c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c40:	6453      	str	r3, [r2, #68]	; 0x44
 8003c42:	4b63      	ldr	r3, [pc, #396]	; (8003dd0 <HAL_GPIO_Init+0x324>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c4e:	4a61      	ldr	r2, [pc, #388]	; (8003dd4 <HAL_GPIO_Init+0x328>)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	089b      	lsrs	r3, r3, #2
 8003c54:	3302      	adds	r3, #2
 8003c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	220f      	movs	r2, #15
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <HAL_GPIO_Init+0x32c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d037      	beq.n	8003cea <HAL_GPIO_Init+0x23e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a57      	ldr	r2, [pc, #348]	; (8003ddc <HAL_GPIO_Init+0x330>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d031      	beq.n	8003ce6 <HAL_GPIO_Init+0x23a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a56      	ldr	r2, [pc, #344]	; (8003de0 <HAL_GPIO_Init+0x334>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d02b      	beq.n	8003ce2 <HAL_GPIO_Init+0x236>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a55      	ldr	r2, [pc, #340]	; (8003de4 <HAL_GPIO_Init+0x338>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d025      	beq.n	8003cde <HAL_GPIO_Init+0x232>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a54      	ldr	r2, [pc, #336]	; (8003de8 <HAL_GPIO_Init+0x33c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01f      	beq.n	8003cda <HAL_GPIO_Init+0x22e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a53      	ldr	r2, [pc, #332]	; (8003dec <HAL_GPIO_Init+0x340>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d019      	beq.n	8003cd6 <HAL_GPIO_Init+0x22a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a52      	ldr	r2, [pc, #328]	; (8003df0 <HAL_GPIO_Init+0x344>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_GPIO_Init+0x226>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a51      	ldr	r2, [pc, #324]	; (8003df4 <HAL_GPIO_Init+0x348>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00d      	beq.n	8003cce <HAL_GPIO_Init+0x222>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a50      	ldr	r2, [pc, #320]	; (8003df8 <HAL_GPIO_Init+0x34c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d007      	beq.n	8003cca <HAL_GPIO_Init+0x21e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4f      	ldr	r2, [pc, #316]	; (8003dfc <HAL_GPIO_Init+0x350>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_GPIO_Init+0x21a>
 8003cc2:	2309      	movs	r3, #9
 8003cc4:	e012      	b.n	8003cec <HAL_GPIO_Init+0x240>
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	e010      	b.n	8003cec <HAL_GPIO_Init+0x240>
 8003cca:	2308      	movs	r3, #8
 8003ccc:	e00e      	b.n	8003cec <HAL_GPIO_Init+0x240>
 8003cce:	2307      	movs	r3, #7
 8003cd0:	e00c      	b.n	8003cec <HAL_GPIO_Init+0x240>
 8003cd2:	2306      	movs	r3, #6
 8003cd4:	e00a      	b.n	8003cec <HAL_GPIO_Init+0x240>
 8003cd6:	2305      	movs	r3, #5
 8003cd8:	e008      	b.n	8003cec <HAL_GPIO_Init+0x240>
 8003cda:	2304      	movs	r3, #4
 8003cdc:	e006      	b.n	8003cec <HAL_GPIO_Init+0x240>
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e004      	b.n	8003cec <HAL_GPIO_Init+0x240>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_Init+0x240>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_GPIO_Init+0x240>
 8003cea:	2300      	movs	r3, #0
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	f002 0203 	and.w	r2, r2, #3
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	4093      	lsls	r3, r2
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cfc:	4935      	ldr	r1, [pc, #212]	; (8003dd4 <HAL_GPIO_Init+0x328>)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	3302      	adds	r3, #2
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <HAL_GPIO_Init+0x354>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d2e:	4a34      	ldr	r2, [pc, #208]	; (8003e00 <HAL_GPIO_Init+0x354>)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d34:	4b32      	ldr	r3, [pc, #200]	; (8003e00 <HAL_GPIO_Init+0x354>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d58:	4a29      	ldr	r2, [pc, #164]	; (8003e00 <HAL_GPIO_Init+0x354>)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d5e:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <HAL_GPIO_Init+0x354>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d82:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <HAL_GPIO_Init+0x354>)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_GPIO_Init+0x354>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <HAL_GPIO_Init+0x354>)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3301      	adds	r3, #1
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b0f      	cmp	r3, #15
 8003dbc:	f67f ae84 	bls.w	8003ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	3724      	adds	r7, #36	; 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40013800 	.word	0x40013800
 8003dd8:	40020000 	.word	0x40020000
 8003ddc:	40020400 	.word	0x40020400
 8003de0:	40020800 	.word	0x40020800
 8003de4:	40020c00 	.word	0x40020c00
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40021400 	.word	0x40021400
 8003df0:	40021800 	.word	0x40021800
 8003df4:	40021c00 	.word	0x40021c00
 8003df8:	40022000 	.word	0x40022000
 8003dfc:	40022400 	.word	0x40022400
 8003e00:	40013c00 	.word	0x40013c00

08003e04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	887b      	ldrh	r3, [r7, #2]
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
 8003e20:	e001      	b.n	8003e26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	807b      	strh	r3, [r7, #2]
 8003e40:	4613      	mov	r3, r2
 8003e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e44:	787b      	ldrb	r3, [r7, #1]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e4a:	887a      	ldrh	r2, [r7, #2]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e50:	e003      	b.n	8003e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e52:	887b      	ldrh	r3, [r7, #2]
 8003e54:	041a      	lsls	r2, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	619a      	str	r2, [r3, #24]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d006      	beq.n	8003e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e7e:	4a05      	ldr	r2, [pc, #20]	; (8003e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd fe4c 	bl	8001b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40013c00 	.word	0x40013c00

08003e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e12b      	b.n	8004102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fc fe86 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2224      	movs	r2, #36	; 0x24
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0201 	bic.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003efc:	f001 fa20 	bl	8005340 <HAL_RCC_GetPCLK1Freq>
 8003f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4a81      	ldr	r2, [pc, #516]	; (800410c <HAL_I2C_Init+0x274>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d807      	bhi.n	8003f1c <HAL_I2C_Init+0x84>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a80      	ldr	r2, [pc, #512]	; (8004110 <HAL_I2C_Init+0x278>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	bf94      	ite	ls
 8003f14:	2301      	movls	r3, #1
 8003f16:	2300      	movhi	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e006      	b.n	8003f2a <HAL_I2C_Init+0x92>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a7d      	ldr	r2, [pc, #500]	; (8004114 <HAL_I2C_Init+0x27c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	bf94      	ite	ls
 8003f24:	2301      	movls	r3, #1
 8003f26:	2300      	movhi	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0e7      	b.n	8004102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4a78      	ldr	r2, [pc, #480]	; (8004118 <HAL_I2C_Init+0x280>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	0c9b      	lsrs	r3, r3, #18
 8003f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4a6a      	ldr	r2, [pc, #424]	; (800410c <HAL_I2C_Init+0x274>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d802      	bhi.n	8003f6c <HAL_I2C_Init+0xd4>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	e009      	b.n	8003f80 <HAL_I2C_Init+0xe8>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	4a69      	ldr	r2, [pc, #420]	; (800411c <HAL_I2C_Init+0x284>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	3301      	adds	r3, #1
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	495c      	ldr	r1, [pc, #368]	; (800410c <HAL_I2C_Init+0x274>)
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	d819      	bhi.n	8003fd4 <HAL_I2C_Init+0x13c>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1e59      	subs	r1, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fae:	1c59      	adds	r1, r3, #1
 8003fb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fb4:	400b      	ands	r3, r1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_I2C_Init+0x138>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1e59      	subs	r1, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fc8:	3301      	adds	r3, #1
 8003fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fce:	e051      	b.n	8004074 <HAL_I2C_Init+0x1dc>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	e04f      	b.n	8004074 <HAL_I2C_Init+0x1dc>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d111      	bne.n	8004000 <HAL_I2C_Init+0x168>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1e58      	subs	r0, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	440b      	add	r3, r1
 8003fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	e012      	b.n	8004026 <HAL_I2C_Init+0x18e>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1e58      	subs	r0, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	0099      	lsls	r1, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	fbb0 f3f3 	udiv	r3, r0, r3
 8004016:	3301      	adds	r3, #1
 8004018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_I2C_Init+0x196>
 800402a:	2301      	movs	r3, #1
 800402c:	e022      	b.n	8004074 <HAL_I2C_Init+0x1dc>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10e      	bne.n	8004054 <HAL_I2C_Init+0x1bc>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1e58      	subs	r0, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6859      	ldr	r1, [r3, #4]
 800403e:	460b      	mov	r3, r1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	440b      	add	r3, r1
 8004044:	fbb0 f3f3 	udiv	r3, r0, r3
 8004048:	3301      	adds	r3, #1
 800404a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004052:	e00f      	b.n	8004074 <HAL_I2C_Init+0x1dc>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1e58      	subs	r0, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	0099      	lsls	r1, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	fbb0 f3f3 	udiv	r3, r0, r3
 800406a:	3301      	adds	r3, #1
 800406c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	6809      	ldr	r1, [r1, #0]
 8004078:	4313      	orrs	r3, r2
 800407a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6911      	ldr	r1, [r2, #16]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68d2      	ldr	r2, [r2, #12]
 80040ae:	4311      	orrs	r1, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	000186a0 	.word	0x000186a0
 8004110:	001e847f 	.word	0x001e847f
 8004114:	003d08ff 	.word	0x003d08ff
 8004118:	431bde83 	.word	0x431bde83
 800411c:	10624dd3 	.word	0x10624dd3

08004120 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	461a      	mov	r2, r3
 800412c:	460b      	mov	r3, r1
 800412e:	817b      	strh	r3, [r7, #10]
 8004130:	4613      	mov	r3, r2
 8004132:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004134:	f7fe f8be 	bl	80022b4 <HAL_GetTick>
 8004138:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b20      	cmp	r3, #32
 8004144:	f040 80e0 	bne.w	8004308 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	2319      	movs	r3, #25
 800414e:	2201      	movs	r2, #1
 8004150:	4970      	ldr	r1, [pc, #448]	; (8004314 <HAL_I2C_Master_Transmit+0x1f4>)
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f964 	bl	8004420 <I2C_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
 8004160:	e0d3      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_I2C_Master_Transmit+0x50>
 800416c:	2302      	movs	r3, #2
 800416e:	e0cc      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b01      	cmp	r3, #1
 8004184:	d007      	beq.n	8004196 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2221      	movs	r2, #33	; 0x21
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2210      	movs	r2, #16
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	893a      	ldrh	r2, [r7, #8]
 80041c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4a50      	ldr	r2, [pc, #320]	; (8004318 <HAL_I2C_Master_Transmit+0x1f8>)
 80041d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041d8:	8979      	ldrh	r1, [r7, #10]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	6a3a      	ldr	r2, [r7, #32]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f89c 	bl	800431c <I2C_MasterRequestWrite>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e08d      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004204:	e066      	b.n	80042d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	6a39      	ldr	r1, [r7, #32]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f9de 	bl	80045cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b04      	cmp	r3, #4
 800421c:	d107      	bne.n	800422e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e06b      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d11b      	bne.n	80042a8 <HAL_I2C_Master_Transmit+0x188>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	d017      	beq.n	80042a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	6a39      	ldr	r1, [r7, #32]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f9ce 	bl	800464e <I2C_WaitOnBTFFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d107      	bne.n	80042d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e01a      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d194      	bne.n	8004206 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	e000      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004308:	2302      	movs	r3, #2
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	00100002 	.word	0x00100002
 8004318:	ffff0000 	.word	0xffff0000

0800431c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	460b      	mov	r3, r1
 800432a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d006      	beq.n	8004346 <I2C_MasterRequestWrite+0x2a>
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d003      	beq.n	8004346 <I2C_MasterRequestWrite+0x2a>
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004344:	d108      	bne.n	8004358 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e00b      	b.n	8004370 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	2b12      	cmp	r3, #18
 800435e:	d107      	bne.n	8004370 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800436e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f84f 	bl	8004420 <I2C_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00d      	beq.n	80043a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004396:	d103      	bne.n	80043a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e035      	b.n	8004410 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ac:	d108      	bne.n	80043c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ae:	897b      	ldrh	r3, [r7, #10]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043bc:	611a      	str	r2, [r3, #16]
 80043be:	e01b      	b.n	80043f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043c0:	897b      	ldrh	r3, [r7, #10]
 80043c2:	11db      	asrs	r3, r3, #7
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	f003 0306 	and.w	r3, r3, #6
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f063 030f 	orn	r3, r3, #15
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	490e      	ldr	r1, [pc, #56]	; (8004418 <I2C_MasterRequestWrite+0xfc>)
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f875 	bl	80044ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e010      	b.n	8004410 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043ee:	897b      	ldrh	r3, [r7, #10]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4907      	ldr	r1, [pc, #28]	; (800441c <I2C_MasterRequestWrite+0x100>)
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f865 	bl	80044ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	00010008 	.word	0x00010008
 800441c:	00010002 	.word	0x00010002

08004420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004430:	e025      	b.n	800447e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d021      	beq.n	800447e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7fd ff3b 	bl	80022b4 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <I2C_WaitOnFlagUntilTimeout+0x30>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d116      	bne.n	800447e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0220 	orr.w	r2, r3, #32
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e023      	b.n	80044c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10d      	bne.n	80044a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	43da      	mvns	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4013      	ands	r3, r2
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	bf0c      	ite	eq
 800449a:	2301      	moveq	r3, #1
 800449c:	2300      	movne	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	e00c      	b.n	80044be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	43da      	mvns	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d0b6      	beq.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044dc:	e051      	b.n	8004582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ec:	d123      	bne.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004506:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f043 0204 	orr.w	r2, r3, #4
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e046      	b.n	80045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d021      	beq.n	8004582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453e:	f7fd feb9 	bl	80022b4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d302      	bcc.n	8004554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d116      	bne.n	8004582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f043 0220 	orr.w	r2, r3, #32
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e020      	b.n	80045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10c      	bne.n	80045a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	43da      	mvns	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4013      	ands	r3, r2
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf14      	ite	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	2300      	moveq	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	e00b      	b.n	80045be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	43da      	mvns	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4013      	ands	r3, r2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf14      	ite	ne
 80045b8:	2301      	movne	r3, #1
 80045ba:	2300      	moveq	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d18d      	bne.n	80044de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045d8:	e02d      	b.n	8004636 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f878 	bl	80046d0 <I2C_IsAcknowledgeFailed>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e02d      	b.n	8004646 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d021      	beq.n	8004636 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fd fe5f 	bl	80022b4 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d116      	bne.n	8004636 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e007      	b.n	8004646 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	2b80      	cmp	r3, #128	; 0x80
 8004642:	d1ca      	bne.n	80045da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800465a:	e02d      	b.n	80046b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f837 	bl	80046d0 <I2C_IsAcknowledgeFailed>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e02d      	b.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d021      	beq.n	80046b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004674:	f7fd fe1e 	bl	80022b4 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	429a      	cmp	r2, r3
 8004682:	d302      	bcc.n	800468a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d116      	bne.n	80046b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e007      	b.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d1ca      	bne.n	800465c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e6:	d11b      	bne.n	8004720 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	f043 0204 	orr.w	r2, r3, #4
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b20      	cmp	r3, #32
 8004742:	d129      	bne.n	8004798 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2224      	movs	r2, #36	; 0x24
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0210 	bic.w	r2, r2, #16
 800476a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d12a      	bne.n	8004816 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2224      	movs	r2, #36	; 0x24
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80047e0:	89fb      	ldrh	r3, [r7, #14]
 80047e2:	f023 030f 	bic.w	r3, r3, #15
 80047e6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	89fb      	ldrh	r3, [r7, #14]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	89fa      	ldrh	r2, [r7, #14]
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0201 	orr.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	e000      	b.n	8004818 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004816:	2302      	movs	r3, #2
  }
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004826:	b08f      	sub	sp, #60	; 0x3c
 8004828:	af0a      	add	r7, sp, #40	; 0x28
 800482a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e10f      	b.n	8004a56 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7fd fc45 	bl	80020e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2203      	movs	r2, #3
 800485a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f002 fbde 	bl	8007036 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	687e      	ldr	r6, [r7, #4]
 8004882:	466d      	mov	r5, sp
 8004884:	f106 0410 	add.w	r4, r6, #16
 8004888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800488a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800488c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800488e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004890:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004894:	e885 0003 	stmia.w	r5, {r0, r1}
 8004898:	1d33      	adds	r3, r6, #4
 800489a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800489c:	6838      	ldr	r0, [r7, #0]
 800489e:	f002 fb69 	bl	8006f74 <USB_CoreInit>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0d0      	b.n	8004a56 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f002 fbcc 	bl	8007058 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]
 80048c4:	e04a      	b.n	800495c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048c6:	7bfa      	ldrb	r2, [r7, #15]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	333d      	adds	r3, #61	; 0x3d
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	333c      	adds	r3, #60	; 0x3c
 80048ea:	7bfa      	ldrb	r2, [r7, #15]
 80048ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048ee:	7bfa      	ldrb	r2, [r7, #15]
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	b298      	uxth	r0, r3
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	3344      	adds	r3, #68	; 0x44
 8004902:	4602      	mov	r2, r0
 8004904:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004906:	7bfa      	ldrb	r2, [r7, #15]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	3340      	adds	r3, #64	; 0x40
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800491a:	7bfa      	ldrb	r2, [r7, #15]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	3348      	adds	r3, #72	; 0x48
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800492e:	7bfa      	ldrb	r2, [r7, #15]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	334c      	adds	r3, #76	; 0x4c
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004942:	7bfa      	ldrb	r2, [r7, #15]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	3354      	adds	r3, #84	; 0x54
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	3301      	adds	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	429a      	cmp	r2, r3
 8004964:	d3af      	bcc.n	80048c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	e044      	b.n	80049f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800496c:	7bfa      	ldrb	r2, [r7, #15]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004994:	7bfa      	ldrb	r2, [r7, #15]
 8004996:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004998:	7bfa      	ldrb	r2, [r7, #15]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049aa:	2200      	movs	r2, #0
 80049ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049ae:	7bfa      	ldrb	r2, [r7, #15]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049c4:	7bfa      	ldrb	r2, [r7, #15]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049da:	7bfa      	ldrb	r2, [r7, #15]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	3301      	adds	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	7bfa      	ldrb	r2, [r7, #15]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d3b5      	bcc.n	800496c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	687e      	ldr	r6, [r7, #4]
 8004a08:	466d      	mov	r5, sp
 8004a0a:	f106 0410 	add.w	r4, r6, #16
 8004a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a1e:	1d33      	adds	r3, r6, #4
 8004a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a22:	6838      	ldr	r0, [r7, #0]
 8004a24:	f002 fb64 	bl	80070f0 <USB_DevInit>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2202      	movs	r2, #2
 8004a32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e00d      	b.n	8004a56 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f002 fd2f 	bl	80074b2 <USB_DevDisconnect>

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004a60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e267      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d075      	beq.n	8004b6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a7e:	4b88      	ldr	r3, [pc, #544]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d00c      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a8a:	4b85      	ldr	r3, [pc, #532]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d112      	bne.n	8004abc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a96:	4b82      	ldr	r3, [pc, #520]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aa2:	d10b      	bne.n	8004abc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa4:	4b7e      	ldr	r3, [pc, #504]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d05b      	beq.n	8004b68 <HAL_RCC_OscConfig+0x108>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d157      	bne.n	8004b68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e242      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac4:	d106      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x74>
 8004ac6:	4b76      	ldr	r3, [pc, #472]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a75      	ldr	r2, [pc, #468]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e01d      	b.n	8004b10 <HAL_RCC_OscConfig+0xb0>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004adc:	d10c      	bne.n	8004af8 <HAL_RCC_OscConfig+0x98>
 8004ade:	4b70      	ldr	r3, [pc, #448]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a6f      	ldr	r2, [pc, #444]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	4b6d      	ldr	r3, [pc, #436]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a6c      	ldr	r2, [pc, #432]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e00b      	b.n	8004b10 <HAL_RCC_OscConfig+0xb0>
 8004af8:	4b69      	ldr	r3, [pc, #420]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a68      	ldr	r2, [pc, #416]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	4b66      	ldr	r3, [pc, #408]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a65      	ldr	r2, [pc, #404]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d013      	beq.n	8004b40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fd fbcc 	bl	80022b4 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fd fbc8 	bl	80022b4 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e207      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	4b5b      	ldr	r3, [pc, #364]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0xc0>
 8004b3e:	e014      	b.n	8004b6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7fd fbb8 	bl	80022b4 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b48:	f7fd fbb4 	bl	80022b4 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	; 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e1f3      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5a:	4b51      	ldr	r3, [pc, #324]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0xe8>
 8004b66:	e000      	b.n	8004b6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d063      	beq.n	8004c3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b76:	4b4a      	ldr	r3, [pc, #296]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b82:	4b47      	ldr	r3, [pc, #284]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d11c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b8e:	4b44      	ldr	r3, [pc, #272]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d116      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9a:	4b41      	ldr	r3, [pc, #260]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x152>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d001      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e1c7      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4937      	ldr	r1, [pc, #220]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc6:	e03a      	b.n	8004c3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d020      	beq.n	8004c12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd0:	4b34      	ldr	r3, [pc, #208]	; (8004ca4 <HAL_RCC_OscConfig+0x244>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fd fb6d 	bl	80022b4 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bde:	f7fd fb69 	bl	80022b4 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e1a8      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf0:	4b2b      	ldr	r3, [pc, #172]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfc:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4925      	ldr	r1, [pc, #148]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]
 8004c10:	e015      	b.n	8004c3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <HAL_RCC_OscConfig+0x244>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd fb4c 	bl	80022b4 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c20:	f7fd fb48 	bl	80022b4 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e187      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c32:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d036      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d016      	beq.n	8004c80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <HAL_RCC_OscConfig+0x248>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c58:	f7fd fb2c 	bl	80022b4 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c60:	f7fd fb28 	bl	80022b4 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e167      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c72:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCC_OscConfig+0x240>)
 8004c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x200>
 8004c7e:	e01b      	b.n	8004cb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c80:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <HAL_RCC_OscConfig+0x248>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c86:	f7fd fb15 	bl	80022b4 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8c:	e00e      	b.n	8004cac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c8e:	f7fd fb11 	bl	80022b4 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d907      	bls.n	8004cac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e150      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	42470000 	.word	0x42470000
 8004ca8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cac:	4b88      	ldr	r3, [pc, #544]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ea      	bne.n	8004c8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8097 	beq.w	8004df4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cca:	4b81      	ldr	r3, [pc, #516]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10f      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	4b7d      	ldr	r3, [pc, #500]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	4a7c      	ldr	r2, [pc, #496]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce6:	4b7a      	ldr	r3, [pc, #488]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf6:	4b77      	ldr	r3, [pc, #476]	; (8004ed4 <HAL_RCC_OscConfig+0x474>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d118      	bne.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d02:	4b74      	ldr	r3, [pc, #464]	; (8004ed4 <HAL_RCC_OscConfig+0x474>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a73      	ldr	r2, [pc, #460]	; (8004ed4 <HAL_RCC_OscConfig+0x474>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d0e:	f7fd fad1 	bl	80022b4 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d16:	f7fd facd 	bl	80022b4 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e10c      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d28:	4b6a      	ldr	r3, [pc, #424]	; (8004ed4 <HAL_RCC_OscConfig+0x474>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d106      	bne.n	8004d4a <HAL_RCC_OscConfig+0x2ea>
 8004d3c:	4b64      	ldr	r3, [pc, #400]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d40:	4a63      	ldr	r2, [pc, #396]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	6713      	str	r3, [r2, #112]	; 0x70
 8004d48:	e01c      	b.n	8004d84 <HAL_RCC_OscConfig+0x324>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCC_OscConfig+0x30c>
 8004d52:	4b5f      	ldr	r3, [pc, #380]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	4a5e      	ldr	r2, [pc, #376]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d58:	f043 0304 	orr.w	r3, r3, #4
 8004d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5e:	4b5c      	ldr	r3, [pc, #368]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a5b      	ldr	r2, [pc, #364]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6a:	e00b      	b.n	8004d84 <HAL_RCC_OscConfig+0x324>
 8004d6c:	4b58      	ldr	r3, [pc, #352]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	4a57      	ldr	r2, [pc, #348]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	6713      	str	r3, [r2, #112]	; 0x70
 8004d78:	4b55      	ldr	r3, [pc, #340]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	4a54      	ldr	r2, [pc, #336]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004d7e:	f023 0304 	bic.w	r3, r3, #4
 8004d82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d015      	beq.n	8004db8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fd fa92 	bl	80022b4 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d92:	e00a      	b.n	8004daa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d94:	f7fd fa8e 	bl	80022b4 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e0cb      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004daa:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ee      	beq.n	8004d94 <HAL_RCC_OscConfig+0x334>
 8004db6:	e014      	b.n	8004de2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db8:	f7fd fa7c 	bl	80022b4 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc0:	f7fd fa78 	bl	80022b4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e0b5      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd6:	4b3e      	ldr	r3, [pc, #248]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1ee      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d105      	bne.n	8004df4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de8:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	4a38      	ldr	r2, [pc, #224]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80a1 	beq.w	8004f40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dfe:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d05c      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d141      	bne.n	8004e96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e12:	4b31      	ldr	r3, [pc, #196]	; (8004ed8 <HAL_RCC_OscConfig+0x478>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fd fa4c 	bl	80022b4 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fd fa48 	bl	80022b4 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e087      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	4b27      	ldr	r3, [pc, #156]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69da      	ldr	r2, [r3, #28]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	019b      	lsls	r3, r3, #6
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	3b01      	subs	r3, #1
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	491b      	ldr	r1, [pc, #108]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e68:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <HAL_RCC_OscConfig+0x478>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6e:	f7fd fa21 	bl	80022b4 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e76:	f7fd fa1d 	bl	80022b4 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e05c      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e88:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x416>
 8004e94:	e054      	b.n	8004f40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e96:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <HAL_RCC_OscConfig+0x478>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fd fa0a 	bl	80022b4 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fd fa06 	bl	80022b4 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e045      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x444>
 8004ec2:	e03d      	b.n	8004f40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d107      	bne.n	8004edc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e038      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <HAL_RCC_OscConfig+0x4ec>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d028      	beq.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d121      	bne.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d11a      	bne.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d111      	bne.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	3b01      	subs	r3, #1
 8004f26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d107      	bne.n	8004f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800

08004f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0cc      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f64:	4b68      	ldr	r3, [pc, #416]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d90c      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f72:	4b65      	ldr	r3, [pc, #404]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	4b63      	ldr	r3, [pc, #396]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0b8      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d020      	beq.n	8004fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fa4:	4b59      	ldr	r3, [pc, #356]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4a58      	ldr	r2, [pc, #352]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fbc:	4b53      	ldr	r3, [pc, #332]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4a52      	ldr	r2, [pc, #328]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc8:	4b50      	ldr	r3, [pc, #320]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	494d      	ldr	r1, [pc, #308]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d044      	beq.n	8005070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fee:	4b47      	ldr	r3, [pc, #284]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d119      	bne.n	800502e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e07f      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d003      	beq.n	800500e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800500a:	2b03      	cmp	r3, #3
 800500c:	d107      	bne.n	800501e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500e:	4b3f      	ldr	r3, [pc, #252]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e06f      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501e:	4b3b      	ldr	r3, [pc, #236]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e067      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800502e:	4b37      	ldr	r3, [pc, #220]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f023 0203 	bic.w	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4934      	ldr	r1, [pc, #208]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 800503c:	4313      	orrs	r3, r2
 800503e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005040:	f7fd f938 	bl	80022b4 <HAL_GetTick>
 8005044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005046:	e00a      	b.n	800505e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005048:	f7fd f934 	bl	80022b4 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	; 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e04f      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505e:	4b2b      	ldr	r3, [pc, #172]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 020c 	and.w	r2, r3, #12
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	429a      	cmp	r2, r3
 800506e:	d1eb      	bne.n	8005048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005070:	4b25      	ldr	r3, [pc, #148]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d20c      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507e:	4b22      	ldr	r3, [pc, #136]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d001      	beq.n	8005098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e032      	b.n	80050fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a4:	4b19      	ldr	r3, [pc, #100]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4916      	ldr	r1, [pc, #88]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050c2:	4b12      	ldr	r3, [pc, #72]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	490e      	ldr	r1, [pc, #56]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050d6:	f000 f821 	bl	800511c <HAL_RCC_GetSysClockFreq>
 80050da:	4602      	mov	r2, r0
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	490a      	ldr	r1, [pc, #40]	; (8005110 <HAL_RCC_ClockConfig+0x1c0>)
 80050e8:	5ccb      	ldrb	r3, [r1, r3]
 80050ea:	fa22 f303 	lsr.w	r3, r2, r3
 80050ee:	4a09      	ldr	r2, [pc, #36]	; (8005114 <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <HAL_RCC_ClockConfig+0x1c8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fd f898 	bl	800222c <HAL_InitTick>

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40023c00 	.word	0x40023c00
 800510c:	40023800 	.word	0x40023800
 8005110:	08007ffc 	.word	0x08007ffc
 8005114:	20000048 	.word	0x20000048
 8005118:	2000004c 	.word	0x2000004c

0800511c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800511c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005120:	b094      	sub	sp, #80	; 0x50
 8005122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	647b      	str	r3, [r7, #68]	; 0x44
 8005128:	2300      	movs	r3, #0
 800512a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800512c:	2300      	movs	r3, #0
 800512e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005134:	4b79      	ldr	r3, [pc, #484]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 030c 	and.w	r3, r3, #12
 800513c:	2b08      	cmp	r3, #8
 800513e:	d00d      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0x40>
 8005140:	2b08      	cmp	r3, #8
 8005142:	f200 80e1 	bhi.w	8005308 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <HAL_RCC_GetSysClockFreq+0x34>
 800514a:	2b04      	cmp	r3, #4
 800514c:	d003      	beq.n	8005156 <HAL_RCC_GetSysClockFreq+0x3a>
 800514e:	e0db      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005150:	4b73      	ldr	r3, [pc, #460]	; (8005320 <HAL_RCC_GetSysClockFreq+0x204>)
 8005152:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005154:	e0db      	b.n	800530e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005156:	4b73      	ldr	r3, [pc, #460]	; (8005324 <HAL_RCC_GetSysClockFreq+0x208>)
 8005158:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800515a:	e0d8      	b.n	800530e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800515c:	4b6f      	ldr	r3, [pc, #444]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005164:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005166:	4b6d      	ldr	r3, [pc, #436]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d063      	beq.n	800523a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005172:	4b6a      	ldr	r3, [pc, #424]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	099b      	lsrs	r3, r3, #6
 8005178:	2200      	movs	r2, #0
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38
 800517c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005184:	633b      	str	r3, [r7, #48]	; 0x30
 8005186:	2300      	movs	r3, #0
 8005188:	637b      	str	r3, [r7, #52]	; 0x34
 800518a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800518e:	4622      	mov	r2, r4
 8005190:	462b      	mov	r3, r5
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f04f 0100 	mov.w	r1, #0
 800519a:	0159      	lsls	r1, r3, #5
 800519c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051a0:	0150      	lsls	r0, r2, #5
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4621      	mov	r1, r4
 80051a8:	1a51      	subs	r1, r2, r1
 80051aa:	6139      	str	r1, [r7, #16]
 80051ac:	4629      	mov	r1, r5
 80051ae:	eb63 0301 	sbc.w	r3, r3, r1
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051c0:	4659      	mov	r1, fp
 80051c2:	018b      	lsls	r3, r1, #6
 80051c4:	4651      	mov	r1, sl
 80051c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ca:	4651      	mov	r1, sl
 80051cc:	018a      	lsls	r2, r1, #6
 80051ce:	4651      	mov	r1, sl
 80051d0:	ebb2 0801 	subs.w	r8, r2, r1
 80051d4:	4659      	mov	r1, fp
 80051d6:	eb63 0901 	sbc.w	r9, r3, r1
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ee:	4690      	mov	r8, r2
 80051f0:	4699      	mov	r9, r3
 80051f2:	4623      	mov	r3, r4
 80051f4:	eb18 0303 	adds.w	r3, r8, r3
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	462b      	mov	r3, r5
 80051fc:	eb49 0303 	adc.w	r3, r9, r3
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800520e:	4629      	mov	r1, r5
 8005210:	024b      	lsls	r3, r1, #9
 8005212:	4621      	mov	r1, r4
 8005214:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005218:	4621      	mov	r1, r4
 800521a:	024a      	lsls	r2, r1, #9
 800521c:	4610      	mov	r0, r2
 800521e:	4619      	mov	r1, r3
 8005220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005222:	2200      	movs	r2, #0
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
 8005226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800522c:	f7fb f830 	bl	8000290 <__aeabi_uldivmod>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4613      	mov	r3, r2
 8005236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005238:	e058      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800523a:	4b38      	ldr	r3, [pc, #224]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	099b      	lsrs	r3, r3, #6
 8005240:	2200      	movs	r2, #0
 8005242:	4618      	mov	r0, r3
 8005244:	4611      	mov	r1, r2
 8005246:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800524a:	623b      	str	r3, [r7, #32]
 800524c:	2300      	movs	r3, #0
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
 8005250:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	f04f 0000 	mov.w	r0, #0
 800525c:	f04f 0100 	mov.w	r1, #0
 8005260:	0159      	lsls	r1, r3, #5
 8005262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005266:	0150      	lsls	r0, r2, #5
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4641      	mov	r1, r8
 800526e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005272:	4649      	mov	r1, r9
 8005274:	eb63 0b01 	sbc.w	fp, r3, r1
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005284:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005288:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800528c:	ebb2 040a 	subs.w	r4, r2, sl
 8005290:	eb63 050b 	sbc.w	r5, r3, fp
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	00eb      	lsls	r3, r5, #3
 800529e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052a2:	00e2      	lsls	r2, r4, #3
 80052a4:	4614      	mov	r4, r2
 80052a6:	461d      	mov	r5, r3
 80052a8:	4643      	mov	r3, r8
 80052aa:	18e3      	adds	r3, r4, r3
 80052ac:	603b      	str	r3, [r7, #0]
 80052ae:	464b      	mov	r3, r9
 80052b0:	eb45 0303 	adc.w	r3, r5, r3
 80052b4:	607b      	str	r3, [r7, #4]
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052c2:	4629      	mov	r1, r5
 80052c4:	028b      	lsls	r3, r1, #10
 80052c6:	4621      	mov	r1, r4
 80052c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052cc:	4621      	mov	r1, r4
 80052ce:	028a      	lsls	r2, r1, #10
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d6:	2200      	movs	r2, #0
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	61fa      	str	r2, [r7, #28]
 80052dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052e0:	f7fa ffd6 	bl	8000290 <__aeabi_uldivmod>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4613      	mov	r3, r2
 80052ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_RCC_GetSysClockFreq+0x200>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	0c1b      	lsrs	r3, r3, #16
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	3301      	adds	r3, #1
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005306:	e002      	b.n	800530e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_RCC_GetSysClockFreq+0x204>)
 800530a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800530c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800530e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005310:	4618      	mov	r0, r3
 8005312:	3750      	adds	r7, #80	; 0x50
 8005314:	46bd      	mov	sp, r7
 8005316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800
 8005320:	00f42400 	.word	0x00f42400
 8005324:	007a1200 	.word	0x007a1200

08005328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800532c:	4b03      	ldr	r3, [pc, #12]	; (800533c <HAL_RCC_GetHCLKFreq+0x14>)
 800532e:	681b      	ldr	r3, [r3, #0]
}
 8005330:	4618      	mov	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000048 	.word	0x20000048

08005340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005344:	f7ff fff0 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 8005348:	4602      	mov	r2, r0
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	0a9b      	lsrs	r3, r3, #10
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	4903      	ldr	r1, [pc, #12]	; (8005364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005356:	5ccb      	ldrb	r3, [r1, r3]
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800535c:	4618      	mov	r0, r3
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40023800 	.word	0x40023800
 8005364:	0800800c 	.word	0x0800800c

08005368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800536c:	f7ff ffdc 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	0b5b      	lsrs	r3, r3, #13
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	4903      	ldr	r1, [pc, #12]	; (800538c <HAL_RCC_GetPCLK2Freq+0x24>)
 800537e:	5ccb      	ldrb	r3, [r1, r3]
 8005380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40023800 	.word	0x40023800
 800538c:	0800800c 	.word	0x0800800c

08005390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d105      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d075      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053c4:	4b91      	ldr	r3, [pc, #580]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ca:	f7fc ff73 	bl	80022b4 <HAL_GetTick>
 80053ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053d0:	e008      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053d2:	f7fc ff6f 	bl	80022b4 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e189      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053e4:	4b8a      	ldr	r3, [pc, #552]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f0      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d009      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	019a      	lsls	r2, r3, #6
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	071b      	lsls	r3, r3, #28
 8005408:	4981      	ldr	r1, [pc, #516]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01f      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800541c:	4b7c      	ldr	r3, [pc, #496]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800541e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005422:	0f1b      	lsrs	r3, r3, #28
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	019a      	lsls	r2, r3, #6
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	061b      	lsls	r3, r3, #24
 8005436:	431a      	orrs	r2, r3
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	071b      	lsls	r3, r3, #28
 800543c:	4974      	ldr	r1, [pc, #464]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005444:	4b72      	ldr	r3, [pc, #456]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800544a:	f023 021f 	bic.w	r2, r3, #31
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	3b01      	subs	r3, #1
 8005454:	496e      	ldr	r1, [pc, #440]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00d      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	019a      	lsls	r2, r3, #6
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	061b      	lsls	r3, r3, #24
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	071b      	lsls	r3, r3, #28
 800547c:	4964      	ldr	r1, [pc, #400]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005484:	4b61      	ldr	r3, [pc, #388]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005486:	2201      	movs	r2, #1
 8005488:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800548a:	f7fc ff13 	bl	80022b4 <HAL_GetTick>
 800548e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005490:	e008      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005492:	f7fc ff0f 	bl	80022b4 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e129      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054a4:	4b5a      	ldr	r3, [pc, #360]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0f0      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d079      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054c8:	4b52      	ldr	r3, [pc, #328]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054ce:	f7fc fef1 	bl	80022b4 <HAL_GetTick>
 80054d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80054d6:	f7fc feed 	bl	80022b4 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e107      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054e8:	4b49      	ldr	r3, [pc, #292]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f4:	d0ef      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d020      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005502:	4b43      	ldr	r3, [pc, #268]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005508:	0f1b      	lsrs	r3, r3, #28
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	019a      	lsls	r2, r3, #6
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	061b      	lsls	r3, r3, #24
 800551c:	431a      	orrs	r2, r3
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	071b      	lsls	r3, r3, #28
 8005522:	493b      	ldr	r1, [pc, #236]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800552a:	4b39      	ldr	r3, [pc, #228]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800552c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005530:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	3b01      	subs	r3, #1
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	4934      	ldr	r1, [pc, #208]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01e      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005550:	4b2f      	ldr	r3, [pc, #188]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005556:	0e1b      	lsrs	r3, r3, #24
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	019a      	lsls	r2, r3, #6
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	061b      	lsls	r3, r3, #24
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	071b      	lsls	r3, r3, #28
 8005570:	4927      	ldr	r1, [pc, #156]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005578:	4b25      	ldr	r3, [pc, #148]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800557a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800557e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	4922      	ldr	r1, [pc, #136]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800558e:	4b21      	ldr	r3, [pc, #132]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005590:	2201      	movs	r2, #1
 8005592:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005594:	f7fc fe8e 	bl	80022b4 <HAL_GetTick>
 8005598:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800559c:	f7fc fe8a 	bl	80022b4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e0a4      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ae:	4b18      	ldr	r3, [pc, #96]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ba:	d1ef      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 808b 	beq.w	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	4b10      	ldr	r3, [pc, #64]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	4a0f      	ldr	r2, [pc, #60]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d8:	6413      	str	r3, [r2, #64]	; 0x40
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055e6:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055f2:	f7fc fe5f 	bl	80022b4 <HAL_GetTick>
 80055f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055f8:	e010      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055fa:	f7fc fe5b 	bl	80022b4 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d909      	bls.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e075      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800560c:	42470068 	.word	0x42470068
 8005610:	40023800 	.word	0x40023800
 8005614:	42470070 	.word	0x42470070
 8005618:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800561c:	4b38      	ldr	r3, [pc, #224]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0e8      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005628:	4b36      	ldr	r3, [pc, #216]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005630:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d02f      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	429a      	cmp	r2, r3
 8005644:	d028      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005646:	4b2f      	ldr	r3, [pc, #188]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005650:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005652:	2201      	movs	r2, #1
 8005654:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005656:	4b2c      	ldr	r3, [pc, #176]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800565c:	4a29      	ldr	r2, [pc, #164]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005662:	4b28      	ldr	r3, [pc, #160]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b01      	cmp	r3, #1
 800566c:	d114      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800566e:	f7fc fe21 	bl	80022b4 <HAL_GetTick>
 8005672:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005674:	e00a      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005676:	f7fc fe1d 	bl	80022b4 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	f241 3288 	movw	r2, #5000	; 0x1388
 8005684:	4293      	cmp	r3, r2
 8005686:	d901      	bls.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e035      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0ee      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056a4:	d10d      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80056a6:	4b17      	ldr	r3, [pc, #92]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80056b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ba:	4912      	ldr	r1, [pc, #72]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	608b      	str	r3, [r1, #8]
 80056c0:	e005      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80056c2:	4b10      	ldr	r3, [pc, #64]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	4a0f      	ldr	r2, [pc, #60]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80056cc:	6093      	str	r3, [r2, #8]
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056da:	490a      	ldr	r1, [pc, #40]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80056f2:	4b06      	ldr	r3, [pc, #24]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80056f4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40007000 	.word	0x40007000
 8005704:	40023800 	.word	0x40023800
 8005708:	42470e40 	.word	0x42470e40
 800570c:	424711e0 	.word	0x424711e0

08005710 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e066      	b.n	80057f4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	7f5b      	ldrb	r3, [r3, #29]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d105      	bne.n	800573c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fc fa8e 	bl	8001c58 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	22ca      	movs	r2, #202	; 0xca
 8005748:	625a      	str	r2, [r3, #36]	; 0x24
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2253      	movs	r2, #83	; 0x53
 8005750:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f9c1 	bl	8005ada <RTC_EnterInitMode>
 8005758:	4603      	mov	r3, r0
 800575a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d12c      	bne.n	80057bc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005774:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6899      	ldr	r1, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	68d2      	ldr	r2, [r2, #12]
 800579c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6919      	ldr	r1, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	041a      	lsls	r2, r3, #16
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f9c8 	bl	8005b48 <RTC_ExitInitMode>
 80057b8:	4603      	mov	r3, r0
 80057ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d113      	bne.n	80057ea <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699a      	ldr	r2, [r3, #24]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	22ff      	movs	r2, #255	; 0xff
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	7f1b      	ldrb	r3, [r3, #28]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_RTC_SetTime+0x1c>
 8005814:	2302      	movs	r3, #2
 8005816:	e087      	b.n	8005928 <HAL_RTC_SetTime+0x12c>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2202      	movs	r2, #2
 8005822:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d126      	bne.n	8005878 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d102      	bne.n	800583e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2200      	movs	r2, #0
 800583c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f9a5 	bl	8005b92 <RTC_ByteToBcd2>
 8005848:	4603      	mov	r3, r0
 800584a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	785b      	ldrb	r3, [r3, #1]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 f99e 	bl	8005b92 <RTC_ByteToBcd2>
 8005856:	4603      	mov	r3, r0
 8005858:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800585a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	789b      	ldrb	r3, [r3, #2]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f996 	bl	8005b92 <RTC_ByteToBcd2>
 8005866:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005868:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	78db      	ldrb	r3, [r3, #3]
 8005870:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	e018      	b.n	80058aa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2200      	movs	r2, #0
 800588a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005898:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800589e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	78db      	ldrb	r3, [r3, #3]
 80058a4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	22ca      	movs	r2, #202	; 0xca
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2253      	movs	r2, #83	; 0x53
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f90d 	bl	8005ada <RTC_EnterInitMode>
 80058c0:	4603      	mov	r3, r0
 80058c2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d120      	bne.n	800590c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80058d4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80058d8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6899      	ldr	r1, [r3, #8]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f920 	bl	8005b48 <RTC_ExitInitMode>
 8005908:	4603      	mov	r3, r0
 800590a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800590c:	7cfb      	ldrb	r3, [r7, #19]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	22ff      	movs	r2, #255	; 0xff
 800591e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	771a      	strb	r2, [r3, #28]

  return status;
 8005926:	7cfb      	ldrb	r3, [r7, #19]
}
 8005928:	4618      	mov	r0, r3
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	bd90      	pop	{r4, r7, pc}

08005930 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005962:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005966:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	0c1b      	lsrs	r3, r3, #16
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005972:	b2da      	uxtb	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005982:	b2da      	uxtb	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005990:	b2da      	uxtb	r2, r3
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	0d9b      	lsrs	r3, r3, #22
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d11a      	bne.n	80059e2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 f90b 	bl	8005bcc <RTC_Bcd2ToByte>
 80059b6:	4603      	mov	r3, r0
 80059b8:	461a      	mov	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f902 	bl	8005bcc <RTC_Bcd2ToByte>
 80059c8:	4603      	mov	r3, r0
 80059ca:	461a      	mov	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	789b      	ldrb	r3, [r3, #2]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 f8f9 	bl	8005bcc <RTC_Bcd2ToByte>
 80059da:	4603      	mov	r3, r0
 80059dc:	461a      	mov	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	0c1b      	lsrs	r3, r3, #16
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	0b5b      	lsrs	r3, r3, #13
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d11a      	bne.n	8005a80 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	78db      	ldrb	r3, [r3, #3]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f8bc 	bl	8005bcc <RTC_Bcd2ToByte>
 8005a54:	4603      	mov	r3, r0
 8005a56:	461a      	mov	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f8b3 	bl	8005bcc <RTC_Bcd2ToByte>
 8005a66:	4603      	mov	r3, r0
 8005a68:	461a      	mov	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	789b      	ldrb	r3, [r3, #2]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f8aa 	bl	8005bcc <RTC_Bcd2ToByte>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005aa4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aa6:	f7fc fc05 	bl	80022b4 <HAL_GetTick>
 8005aaa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005aac:	e009      	b.n	8005ac2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005aae:	f7fc fc01 	bl	80022b4 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005abc:	d901      	bls.n	8005ac2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e007      	b.n	8005ad2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0ee      	beq.n	8005aae <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d122      	bne.n	8005b3e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b08:	f7fc fbd4 	bl	80022b4 <HAL_GetTick>
 8005b0c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b0e:	e00c      	b.n	8005b2a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b10:	f7fc fbd0 	bl	80022b4 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b1e:	d904      	bls.n	8005b2a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2204      	movs	r2, #4
 8005b24:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <RTC_EnterInitMode+0x64>
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d1e8      	bne.n	8005b10 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b62:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff ff89 	bl	8005a8a <HAL_RTC_WaitForSynchro>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d004      	beq.n	8005b88 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2204      	movs	r2, #4
 8005b82:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	4603      	mov	r3, r0
 8005b9a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005ba0:	e005      	b.n	8005bae <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	3b0a      	subs	r3, #10
 8005bac:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	2b09      	cmp	r3, #9
 8005bb2:	d8f6      	bhi.n	8005ba2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	b2db      	uxtb	r3, r3
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	091b      	lsrs	r3, r3, #4
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	0092      	lsls	r2, r2, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	b2db      	uxtb	r3, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e041      	b.n	8005c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fc f960 	bl	8001ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f000 fb48 	bl	80062d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e041      	b.n	8005d38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d106      	bne.n	8005cce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f839 	bl	8005d40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f000 faf9 	bl	80062d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <HAL_TIM_PWM_Start+0x24>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	bf14      	ite	ne
 8005d70:	2301      	movne	r3, #1
 8005d72:	2300      	moveq	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	e022      	b.n	8005dbe <HAL_TIM_PWM_Start+0x6a>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d109      	bne.n	8005d92 <HAL_TIM_PWM_Start+0x3e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	bf14      	ite	ne
 8005d8a:	2301      	movne	r3, #1
 8005d8c:	2300      	moveq	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	e015      	b.n	8005dbe <HAL_TIM_PWM_Start+0x6a>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d109      	bne.n	8005dac <HAL_TIM_PWM_Start+0x58>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	bf14      	ite	ne
 8005da4:	2301      	movne	r3, #1
 8005da6:	2300      	moveq	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	e008      	b.n	8005dbe <HAL_TIM_PWM_Start+0x6a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	bf14      	ite	ne
 8005db8:	2301      	movne	r3, #1
 8005dba:	2300      	moveq	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e07c      	b.n	8005ec0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <HAL_TIM_PWM_Start+0x82>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dd4:	e013      	b.n	8005dfe <HAL_TIM_PWM_Start+0xaa>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d104      	bne.n	8005de6 <HAL_TIM_PWM_Start+0x92>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005de4:	e00b      	b.n	8005dfe <HAL_TIM_PWM_Start+0xaa>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d104      	bne.n	8005df6 <HAL_TIM_PWM_Start+0xa2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005df4:	e003      	b.n	8005dfe <HAL_TIM_PWM_Start+0xaa>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2201      	movs	r2, #1
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fd50 	bl	80068ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2d      	ldr	r2, [pc, #180]	; (8005ec8 <HAL_TIM_PWM_Start+0x174>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <HAL_TIM_PWM_Start+0xcc>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a2c      	ldr	r2, [pc, #176]	; (8005ecc <HAL_TIM_PWM_Start+0x178>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d101      	bne.n	8005e24 <HAL_TIM_PWM_Start+0xd0>
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <HAL_TIM_PWM_Start+0xd2>
 8005e24:	2300      	movs	r3, #0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d007      	beq.n	8005e3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a22      	ldr	r2, [pc, #136]	; (8005ec8 <HAL_TIM_PWM_Start+0x174>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d022      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x136>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4c:	d01d      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x136>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <HAL_TIM_PWM_Start+0x17c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x136>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_TIM_PWM_Start+0x180>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x136>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a1c      	ldr	r2, [pc, #112]	; (8005ed8 <HAL_TIM_PWM_Start+0x184>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x136>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a16      	ldr	r2, [pc, #88]	; (8005ecc <HAL_TIM_PWM_Start+0x178>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x136>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a18      	ldr	r2, [pc, #96]	; (8005edc <HAL_TIM_PWM_Start+0x188>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x136>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <HAL_TIM_PWM_Start+0x18c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d111      	bne.n	8005eae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b06      	cmp	r3, #6
 8005e9a:	d010      	beq.n	8005ebe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eac:	e007      	b.n	8005ebe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0201 	orr.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40010400 	.word	0x40010400
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40000800 	.word	0x40000800
 8005ed8:	40000c00 	.word	0x40000c00
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40001800 	.word	0x40001800

08005ee4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fcd8 	bl	80068ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2e      	ldr	r2, [pc, #184]	; (8005fbc <HAL_TIM_PWM_Stop+0xd8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d004      	beq.n	8005f10 <HAL_TIM_PWM_Stop+0x2c>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a2d      	ldr	r2, [pc, #180]	; (8005fc0 <HAL_TIM_PWM_Stop+0xdc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d101      	bne.n	8005f14 <HAL_TIM_PWM_Stop+0x30>
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <HAL_TIM_PWM_Stop+0x32>
 8005f14:	2300      	movs	r3, #0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d017      	beq.n	8005f4a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f24:	4013      	ands	r3, r2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10f      	bne.n	8005f4a <HAL_TIM_PWM_Stop+0x66>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6a1a      	ldr	r2, [r3, #32]
 8005f30:	f240 4344 	movw	r3, #1092	; 0x444
 8005f34:	4013      	ands	r3, r2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d107      	bne.n	8005f4a <HAL_TIM_PWM_Stop+0x66>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f54:	4013      	ands	r3, r2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10f      	bne.n	8005f7a <HAL_TIM_PWM_Stop+0x96>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6a1a      	ldr	r2, [r3, #32]
 8005f60:	f240 4344 	movw	r3, #1092	; 0x444
 8005f64:	4013      	ands	r3, r2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d107      	bne.n	8005f7a <HAL_TIM_PWM_Stop+0x96>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0201 	bic.w	r2, r2, #1
 8005f78:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <HAL_TIM_PWM_Stop+0xa6>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f88:	e013      	b.n	8005fb2 <HAL_TIM_PWM_Stop+0xce>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d104      	bne.n	8005f9a <HAL_TIM_PWM_Stop+0xb6>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f98:	e00b      	b.n	8005fb2 <HAL_TIM_PWM_Stop+0xce>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d104      	bne.n	8005faa <HAL_TIM_PWM_Stop+0xc6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fa8:	e003      	b.n	8005fb2 <HAL_TIM_PWM_Stop+0xce>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	40010400 	.word	0x40010400

08005fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e0ae      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b0c      	cmp	r3, #12
 8005fee:	f200 809f 	bhi.w	8006130 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	0800602d 	.word	0x0800602d
 8005ffc:	08006131 	.word	0x08006131
 8006000:	08006131 	.word	0x08006131
 8006004:	08006131 	.word	0x08006131
 8006008:	0800606d 	.word	0x0800606d
 800600c:	08006131 	.word	0x08006131
 8006010:	08006131 	.word	0x08006131
 8006014:	08006131 	.word	0x08006131
 8006018:	080060af 	.word	0x080060af
 800601c:	08006131 	.word	0x08006131
 8006020:	08006131 	.word	0x08006131
 8006024:	08006131 	.word	0x08006131
 8006028:	080060ef 	.word	0x080060ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f9f0 	bl	8006418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699a      	ldr	r2, [r3, #24]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0208 	orr.w	r2, r2, #8
 8006046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0204 	bic.w	r2, r2, #4
 8006056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6999      	ldr	r1, [r3, #24]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	619a      	str	r2, [r3, #24]
      break;
 800606a:	e064      	b.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fa40 	bl	80064f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6999      	ldr	r1, [r3, #24]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	021a      	lsls	r2, r3, #8
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	619a      	str	r2, [r3, #24]
      break;
 80060ac:	e043      	b.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fa95 	bl	80065e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69da      	ldr	r2, [r3, #28]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0208 	orr.w	r2, r2, #8
 80060c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0204 	bic.w	r2, r2, #4
 80060d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69d9      	ldr	r1, [r3, #28]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	61da      	str	r2, [r3, #28]
      break;
 80060ec:	e023      	b.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fae9 	bl	80066cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69da      	ldr	r2, [r3, #28]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69d9      	ldr	r1, [r3, #28]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	021a      	lsls	r2, r3, #8
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	61da      	str	r2, [r3, #28]
      break;
 800612e:	e002      	b.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	75fb      	strb	r3, [r7, #23]
      break;
 8006134:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800613e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <HAL_TIM_ConfigClockSource+0x1c>
 8006160:	2302      	movs	r3, #2
 8006162:	e0b4      	b.n	80062ce <HAL_TIM_ConfigClockSource+0x186>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800618a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800619c:	d03e      	beq.n	800621c <HAL_TIM_ConfigClockSource+0xd4>
 800619e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a2:	f200 8087 	bhi.w	80062b4 <HAL_TIM_ConfigClockSource+0x16c>
 80061a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061aa:	f000 8086 	beq.w	80062ba <HAL_TIM_ConfigClockSource+0x172>
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b2:	d87f      	bhi.n	80062b4 <HAL_TIM_ConfigClockSource+0x16c>
 80061b4:	2b70      	cmp	r3, #112	; 0x70
 80061b6:	d01a      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0xa6>
 80061b8:	2b70      	cmp	r3, #112	; 0x70
 80061ba:	d87b      	bhi.n	80062b4 <HAL_TIM_ConfigClockSource+0x16c>
 80061bc:	2b60      	cmp	r3, #96	; 0x60
 80061be:	d050      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x11a>
 80061c0:	2b60      	cmp	r3, #96	; 0x60
 80061c2:	d877      	bhi.n	80062b4 <HAL_TIM_ConfigClockSource+0x16c>
 80061c4:	2b50      	cmp	r3, #80	; 0x50
 80061c6:	d03c      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0xfa>
 80061c8:	2b50      	cmp	r3, #80	; 0x50
 80061ca:	d873      	bhi.n	80062b4 <HAL_TIM_ConfigClockSource+0x16c>
 80061cc:	2b40      	cmp	r3, #64	; 0x40
 80061ce:	d058      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0x13a>
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d86f      	bhi.n	80062b4 <HAL_TIM_ConfigClockSource+0x16c>
 80061d4:	2b30      	cmp	r3, #48	; 0x30
 80061d6:	d064      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0x15a>
 80061d8:	2b30      	cmp	r3, #48	; 0x30
 80061da:	d86b      	bhi.n	80062b4 <HAL_TIM_ConfigClockSource+0x16c>
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d060      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0x15a>
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d867      	bhi.n	80062b4 <HAL_TIM_ConfigClockSource+0x16c>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d05c      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0x15a>
 80061e8:	2b10      	cmp	r3, #16
 80061ea:	d05a      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0x15a>
 80061ec:	e062      	b.n	80062b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6899      	ldr	r1, [r3, #8]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f000 fb35 	bl	800686c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006210:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	609a      	str	r2, [r3, #8]
      break;
 800621a:	e04f      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	6899      	ldr	r1, [r3, #8]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f000 fb1e 	bl	800686c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800623e:	609a      	str	r2, [r3, #8]
      break;
 8006240:	e03c      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	461a      	mov	r2, r3
 8006250:	f000 fa92 	bl	8006778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2150      	movs	r1, #80	; 0x50
 800625a:	4618      	mov	r0, r3
 800625c:	f000 faeb 	bl	8006836 <TIM_ITRx_SetConfig>
      break;
 8006260:	e02c      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	6859      	ldr	r1, [r3, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	461a      	mov	r2, r3
 8006270:	f000 fab1 	bl	80067d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2160      	movs	r1, #96	; 0x60
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fadb 	bl	8006836 <TIM_ITRx_SetConfig>
      break;
 8006280:	e01c      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	6859      	ldr	r1, [r3, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	461a      	mov	r2, r3
 8006290:	f000 fa72 	bl	8006778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2140      	movs	r1, #64	; 0x40
 800629a:	4618      	mov	r0, r3
 800629c:	f000 facb 	bl	8006836 <TIM_ITRx_SetConfig>
      break;
 80062a0:	e00c      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f000 fac2 	bl	8006836 <TIM_ITRx_SetConfig>
      break;
 80062b2:	e003      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
      break;
 80062b8:	e000      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a40      	ldr	r2, [pc, #256]	; (80063ec <TIM_Base_SetConfig+0x114>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <TIM_Base_SetConfig+0x40>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f6:	d00f      	beq.n	8006318 <TIM_Base_SetConfig+0x40>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a3d      	ldr	r2, [pc, #244]	; (80063f0 <TIM_Base_SetConfig+0x118>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00b      	beq.n	8006318 <TIM_Base_SetConfig+0x40>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a3c      	ldr	r2, [pc, #240]	; (80063f4 <TIM_Base_SetConfig+0x11c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d007      	beq.n	8006318 <TIM_Base_SetConfig+0x40>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a3b      	ldr	r2, [pc, #236]	; (80063f8 <TIM_Base_SetConfig+0x120>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_Base_SetConfig+0x40>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a3a      	ldr	r2, [pc, #232]	; (80063fc <TIM_Base_SetConfig+0x124>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d108      	bne.n	800632a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a2f      	ldr	r2, [pc, #188]	; (80063ec <TIM_Base_SetConfig+0x114>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d02b      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006338:	d027      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2c      	ldr	r2, [pc, #176]	; (80063f0 <TIM_Base_SetConfig+0x118>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d023      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a2b      	ldr	r2, [pc, #172]	; (80063f4 <TIM_Base_SetConfig+0x11c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d01f      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a2a      	ldr	r2, [pc, #168]	; (80063f8 <TIM_Base_SetConfig+0x120>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01b      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a29      	ldr	r2, [pc, #164]	; (80063fc <TIM_Base_SetConfig+0x124>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d017      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a28      	ldr	r2, [pc, #160]	; (8006400 <TIM_Base_SetConfig+0x128>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a27      	ldr	r2, [pc, #156]	; (8006404 <TIM_Base_SetConfig+0x12c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00f      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a26      	ldr	r2, [pc, #152]	; (8006408 <TIM_Base_SetConfig+0x130>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00b      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a25      	ldr	r2, [pc, #148]	; (800640c <TIM_Base_SetConfig+0x134>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d007      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a24      	ldr	r2, [pc, #144]	; (8006410 <TIM_Base_SetConfig+0x138>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d003      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a23      	ldr	r2, [pc, #140]	; (8006414 <TIM_Base_SetConfig+0x13c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d108      	bne.n	800639c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a0a      	ldr	r2, [pc, #40]	; (80063ec <TIM_Base_SetConfig+0x114>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d003      	beq.n	80063d0 <TIM_Base_SetConfig+0xf8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a0c      	ldr	r2, [pc, #48]	; (80063fc <TIM_Base_SetConfig+0x124>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d103      	bne.n	80063d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	615a      	str	r2, [r3, #20]
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40010400 	.word	0x40010400
 8006400:	40014000 	.word	0x40014000
 8006404:	40014400 	.word	0x40014400
 8006408:	40014800 	.word	0x40014800
 800640c:	40001800 	.word	0x40001800
 8006410:	40001c00 	.word	0x40001c00
 8006414:	40002000 	.word	0x40002000

08006418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f023 0201 	bic.w	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f023 0302 	bic.w	r3, r3, #2
 8006460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a20      	ldr	r2, [pc, #128]	; (80064f0 <TIM_OC1_SetConfig+0xd8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_OC1_SetConfig+0x64>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <TIM_OC1_SetConfig+0xdc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d10c      	bne.n	8006496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0308 	bic.w	r3, r3, #8
 8006482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f023 0304 	bic.w	r3, r3, #4
 8006494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a15      	ldr	r2, [pc, #84]	; (80064f0 <TIM_OC1_SetConfig+0xd8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d003      	beq.n	80064a6 <TIM_OC1_SetConfig+0x8e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a14      	ldr	r2, [pc, #80]	; (80064f4 <TIM_OC1_SetConfig+0xdc>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d111      	bne.n	80064ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	621a      	str	r2, [r3, #32]
}
 80064e4:	bf00      	nop
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40010400 	.word	0x40010400

080064f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0210 	bic.w	r2, r3, #16
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f023 0320 	bic.w	r3, r3, #32
 8006542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a22      	ldr	r2, [pc, #136]	; (80065dc <TIM_OC2_SetConfig+0xe4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC2_SetConfig+0x68>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a21      	ldr	r2, [pc, #132]	; (80065e0 <TIM_OC2_SetConfig+0xe8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10d      	bne.n	800657c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a17      	ldr	r2, [pc, #92]	; (80065dc <TIM_OC2_SetConfig+0xe4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_OC2_SetConfig+0x94>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a16      	ldr	r2, [pc, #88]	; (80065e0 <TIM_OC2_SetConfig+0xe8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d113      	bne.n	80065b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800659a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40010000 	.word	0x40010000
 80065e0:	40010400 	.word	0x40010400

080065e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800662c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a21      	ldr	r2, [pc, #132]	; (80066c4 <TIM_OC3_SetConfig+0xe0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_OC3_SetConfig+0x66>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a20      	ldr	r2, [pc, #128]	; (80066c8 <TIM_OC3_SetConfig+0xe4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d10d      	bne.n	8006666 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a16      	ldr	r2, [pc, #88]	; (80066c4 <TIM_OC3_SetConfig+0xe0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <TIM_OC3_SetConfig+0x92>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <TIM_OC3_SetConfig+0xe4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d113      	bne.n	800669e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800667c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	621a      	str	r2, [r3, #32]
}
 80066b8:	bf00      	nop
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	40010000 	.word	0x40010000
 80066c8:	40010400 	.word	0x40010400

080066cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	031b      	lsls	r3, r3, #12
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a12      	ldr	r2, [pc, #72]	; (8006770 <TIM_OC4_SetConfig+0xa4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_OC4_SetConfig+0x68>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a11      	ldr	r2, [pc, #68]	; (8006774 <TIM_OC4_SetConfig+0xa8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d109      	bne.n	8006748 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800673a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	019b      	lsls	r3, r3, #6
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	621a      	str	r2, [r3, #32]
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	40010000 	.word	0x40010000
 8006774:	40010400 	.word	0x40010400

08006778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	f023 0201 	bic.w	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f023 030a 	bic.w	r3, r3, #10
 80067b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	621a      	str	r2, [r3, #32]
}
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b087      	sub	sp, #28
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	f023 0210 	bic.w	r2, r3, #16
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	031b      	lsls	r3, r3, #12
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006812:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	621a      	str	r2, [r3, #32]
}
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006836:	b480      	push	{r7}
 8006838:	b085      	sub	sp, #20
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	f043 0307 	orr.w	r3, r3, #7
 8006858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	609a      	str	r2, [r3, #8]
}
 8006860:	bf00      	nop
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	021a      	lsls	r2, r3, #8
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	431a      	orrs	r2, r3
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4313      	orrs	r3, r2
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	609a      	str	r2, [r3, #8]
}
 80068a0:	bf00      	nop
 80068a2:	371c      	adds	r7, #28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	2201      	movs	r2, #1
 80068c0:	fa02 f303 	lsl.w	r3, r2, r3
 80068c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1a      	ldr	r2, [r3, #32]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	401a      	ands	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1a      	ldr	r2, [r3, #32]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	6879      	ldr	r1, [r7, #4]
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	431a      	orrs	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800690c:	2302      	movs	r3, #2
 800690e:	e05a      	b.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a21      	ldr	r2, [pc, #132]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d022      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695c:	d01d      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1d      	ldr	r2, [pc, #116]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d018      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a1b      	ldr	r2, [pc, #108]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1a      	ldr	r2, [pc, #104]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00e      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a18      	ldr	r2, [pc, #96]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d009      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a17      	ldr	r2, [pc, #92]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d004      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a15      	ldr	r2, [pc, #84]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d10c      	bne.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40000400 	.word	0x40000400
 80069dc:	40000800 	.word	0x40000800
 80069e0:	40000c00 	.word	0x40000c00
 80069e4:	40010400 	.word	0x40010400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40001800 	.word	0x40001800

080069f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e03f      	b.n	8006a82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fb faec 	bl	8001ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2224      	movs	r2, #36	; 0x24
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f829 	bl	8006a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695a      	ldr	r2, [r3, #20]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a90:	b0c0      	sub	sp, #256	; 0x100
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa8:	68d9      	ldr	r1, [r3, #12]
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	ea40 0301 	orr.w	r3, r0, r1
 8006ab4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ae4:	f021 010c 	bic.w	r1, r1, #12
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006af2:	430b      	orrs	r3, r1
 8006af4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b06:	6999      	ldr	r1, [r3, #24]
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	ea40 0301 	orr.w	r3, r0, r1
 8006b12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	4b8f      	ldr	r3, [pc, #572]	; (8006d58 <UART_SetConfig+0x2cc>)
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d005      	beq.n	8006b2c <UART_SetConfig+0xa0>
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	4b8d      	ldr	r3, [pc, #564]	; (8006d5c <UART_SetConfig+0x2d0>)
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d104      	bne.n	8006b36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b2c:	f7fe fc1c 	bl	8005368 <HAL_RCC_GetPCLK2Freq>
 8006b30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b34:	e003      	b.n	8006b3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b36:	f7fe fc03 	bl	8005340 <HAL_RCC_GetPCLK1Freq>
 8006b3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b48:	f040 810c 	bne.w	8006d64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b5e:	4622      	mov	r2, r4
 8006b60:	462b      	mov	r3, r5
 8006b62:	1891      	adds	r1, r2, r2
 8006b64:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b66:	415b      	adcs	r3, r3
 8006b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b6e:	4621      	mov	r1, r4
 8006b70:	eb12 0801 	adds.w	r8, r2, r1
 8006b74:	4629      	mov	r1, r5
 8006b76:	eb43 0901 	adc.w	r9, r3, r1
 8006b7a:	f04f 0200 	mov.w	r2, #0
 8006b7e:	f04f 0300 	mov.w	r3, #0
 8006b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b8e:	4690      	mov	r8, r2
 8006b90:	4699      	mov	r9, r3
 8006b92:	4623      	mov	r3, r4
 8006b94:	eb18 0303 	adds.w	r3, r8, r3
 8006b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b9c:	462b      	mov	r3, r5
 8006b9e:	eb49 0303 	adc.w	r3, r9, r3
 8006ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006bb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006bba:	460b      	mov	r3, r1
 8006bbc:	18db      	adds	r3, r3, r3
 8006bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	eb42 0303 	adc.w	r3, r2, r3
 8006bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8006bc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bd0:	f7f9 fb5e 	bl	8000290 <__aeabi_uldivmod>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4b61      	ldr	r3, [pc, #388]	; (8006d60 <UART_SetConfig+0x2d4>)
 8006bda:	fba3 2302 	umull	r2, r3, r3, r2
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	011c      	lsls	r4, r3, #4
 8006be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006bf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	1891      	adds	r1, r2, r2
 8006bfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8006bfc:	415b      	adcs	r3, r3
 8006bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c04:	4641      	mov	r1, r8
 8006c06:	eb12 0a01 	adds.w	sl, r2, r1
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	eb43 0b01 	adc.w	fp, r3, r1
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c24:	4692      	mov	sl, r2
 8006c26:	469b      	mov	fp, r3
 8006c28:	4643      	mov	r3, r8
 8006c2a:	eb1a 0303 	adds.w	r3, sl, r3
 8006c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c32:	464b      	mov	r3, r9
 8006c34:	eb4b 0303 	adc.w	r3, fp, r3
 8006c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c50:	460b      	mov	r3, r1
 8006c52:	18db      	adds	r3, r3, r3
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40
 8006c56:	4613      	mov	r3, r2
 8006c58:	eb42 0303 	adc.w	r3, r2, r3
 8006c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c66:	f7f9 fb13 	bl	8000290 <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4b3b      	ldr	r3, [pc, #236]	; (8006d60 <UART_SetConfig+0x2d4>)
 8006c72:	fba3 2301 	umull	r2, r3, r3, r1
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	2264      	movs	r2, #100	; 0x64
 8006c7a:	fb02 f303 	mul.w	r3, r2, r3
 8006c7e:	1acb      	subs	r3, r1, r3
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c86:	4b36      	ldr	r3, [pc, #216]	; (8006d60 <UART_SetConfig+0x2d4>)
 8006c88:	fba3 2302 	umull	r2, r3, r3, r2
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c94:	441c      	add	r4, r3
 8006c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ca0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ca4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ca8:	4642      	mov	r2, r8
 8006caa:	464b      	mov	r3, r9
 8006cac:	1891      	adds	r1, r2, r2
 8006cae:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cb0:	415b      	adcs	r3, r3
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cb8:	4641      	mov	r1, r8
 8006cba:	1851      	adds	r1, r2, r1
 8006cbc:	6339      	str	r1, [r7, #48]	; 0x30
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	414b      	adcs	r3, r1
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006cd0:	4659      	mov	r1, fp
 8006cd2:	00cb      	lsls	r3, r1, #3
 8006cd4:	4651      	mov	r1, sl
 8006cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cda:	4651      	mov	r1, sl
 8006cdc:	00ca      	lsls	r2, r1, #3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	189b      	adds	r3, r3, r2
 8006ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cec:	464b      	mov	r3, r9
 8006cee:	460a      	mov	r2, r1
 8006cf0:	eb42 0303 	adc.w	r3, r2, r3
 8006cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	18db      	adds	r3, r3, r3
 8006d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d12:	4613      	mov	r3, r2
 8006d14:	eb42 0303 	adc.w	r3, r2, r3
 8006d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d22:	f7f9 fab5 	bl	8000290 <__aeabi_uldivmod>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <UART_SetConfig+0x2d4>)
 8006d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	2164      	movs	r1, #100	; 0x64
 8006d34:	fb01 f303 	mul.w	r3, r1, r3
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	3332      	adds	r3, #50	; 0x32
 8006d3e:	4a08      	ldr	r2, [pc, #32]	; (8006d60 <UART_SetConfig+0x2d4>)
 8006d40:	fba2 2303 	umull	r2, r3, r2, r3
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	f003 0207 	and.w	r2, r3, #7
 8006d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4422      	add	r2, r4
 8006d52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d54:	e106      	b.n	8006f64 <UART_SetConfig+0x4d8>
 8006d56:	bf00      	nop
 8006d58:	40011000 	.word	0x40011000
 8006d5c:	40011400 	.word	0x40011400
 8006d60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d76:	4642      	mov	r2, r8
 8006d78:	464b      	mov	r3, r9
 8006d7a:	1891      	adds	r1, r2, r2
 8006d7c:	6239      	str	r1, [r7, #32]
 8006d7e:	415b      	adcs	r3, r3
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
 8006d82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d86:	4641      	mov	r1, r8
 8006d88:	1854      	adds	r4, r2, r1
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	eb43 0501 	adc.w	r5, r3, r1
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	00eb      	lsls	r3, r5, #3
 8006d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d9e:	00e2      	lsls	r2, r4, #3
 8006da0:	4614      	mov	r4, r2
 8006da2:	461d      	mov	r5, r3
 8006da4:	4643      	mov	r3, r8
 8006da6:	18e3      	adds	r3, r4, r3
 8006da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dac:	464b      	mov	r3, r9
 8006dae:	eb45 0303 	adc.w	r3, r5, r3
 8006db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	f04f 0300 	mov.w	r3, #0
 8006dce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	008b      	lsls	r3, r1, #2
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ddc:	4621      	mov	r1, r4
 8006dde:	008a      	lsls	r2, r1, #2
 8006de0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006de4:	f7f9 fa54 	bl	8000290 <__aeabi_uldivmod>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4b60      	ldr	r3, [pc, #384]	; (8006f70 <UART_SetConfig+0x4e4>)
 8006dee:	fba3 2302 	umull	r2, r3, r3, r2
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	011c      	lsls	r4, r3, #4
 8006df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	1891      	adds	r1, r2, r2
 8006e0e:	61b9      	str	r1, [r7, #24]
 8006e10:	415b      	adcs	r3, r3
 8006e12:	61fb      	str	r3, [r7, #28]
 8006e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e18:	4641      	mov	r1, r8
 8006e1a:	1851      	adds	r1, r2, r1
 8006e1c:	6139      	str	r1, [r7, #16]
 8006e1e:	4649      	mov	r1, r9
 8006e20:	414b      	adcs	r3, r1
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e30:	4659      	mov	r1, fp
 8006e32:	00cb      	lsls	r3, r1, #3
 8006e34:	4651      	mov	r1, sl
 8006e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e3a:	4651      	mov	r1, sl
 8006e3c:	00ca      	lsls	r2, r1, #3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4619      	mov	r1, r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	4642      	mov	r2, r8
 8006e46:	189b      	adds	r3, r3, r2
 8006e48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	460a      	mov	r2, r1
 8006e50:	eb42 0303 	adc.w	r3, r2, r3
 8006e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e70:	4649      	mov	r1, r9
 8006e72:	008b      	lsls	r3, r1, #2
 8006e74:	4641      	mov	r1, r8
 8006e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e7a:	4641      	mov	r1, r8
 8006e7c:	008a      	lsls	r2, r1, #2
 8006e7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e82:	f7f9 fa05 	bl	8000290 <__aeabi_uldivmod>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	4b38      	ldr	r3, [pc, #224]	; (8006f70 <UART_SetConfig+0x4e4>)
 8006e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	2264      	movs	r2, #100	; 0x64
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	1acb      	subs	r3, r1, r3
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	3332      	adds	r3, #50	; 0x32
 8006ea0:	4a33      	ldr	r2, [pc, #204]	; (8006f70 <UART_SetConfig+0x4e4>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eac:	441c      	add	r4, r3
 8006eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	673b      	str	r3, [r7, #112]	; 0x70
 8006eb6:	677a      	str	r2, [r7, #116]	; 0x74
 8006eb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ebc:	4642      	mov	r2, r8
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	1891      	adds	r1, r2, r2
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	415b      	adcs	r3, r3
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ecc:	4641      	mov	r1, r8
 8006ece:	1851      	adds	r1, r2, r1
 8006ed0:	6039      	str	r1, [r7, #0]
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	414b      	adcs	r3, r1
 8006ed6:	607b      	str	r3, [r7, #4]
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	00cb      	lsls	r3, r1, #3
 8006ee8:	4651      	mov	r1, sl
 8006eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eee:	4651      	mov	r1, sl
 8006ef0:	00ca      	lsls	r2, r1, #3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4642      	mov	r2, r8
 8006efa:	189b      	adds	r3, r3, r2
 8006efc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006efe:	464b      	mov	r3, r9
 8006f00:	460a      	mov	r2, r1
 8006f02:	eb42 0303 	adc.w	r3, r2, r3
 8006f06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	663b      	str	r3, [r7, #96]	; 0x60
 8006f12:	667a      	str	r2, [r7, #100]	; 0x64
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f20:	4649      	mov	r1, r9
 8006f22:	008b      	lsls	r3, r1, #2
 8006f24:	4641      	mov	r1, r8
 8006f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f2a:	4641      	mov	r1, r8
 8006f2c:	008a      	lsls	r2, r1, #2
 8006f2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f32:	f7f9 f9ad 	bl	8000290 <__aeabi_uldivmod>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <UART_SetConfig+0x4e4>)
 8006f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	2164      	movs	r1, #100	; 0x64
 8006f44:	fb01 f303 	mul.w	r3, r1, r3
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	3332      	adds	r3, #50	; 0x32
 8006f4e:	4a08      	ldr	r2, [pc, #32]	; (8006f70 <UART_SetConfig+0x4e4>)
 8006f50:	fba2 2303 	umull	r2, r3, r2, r3
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	f003 020f 	and.w	r2, r3, #15
 8006f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4422      	add	r2, r4
 8006f62:	609a      	str	r2, [r3, #8]
}
 8006f64:	bf00      	nop
 8006f66:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f70:	51eb851f 	.word	0x51eb851f

08006f74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f74:	b084      	sub	sp, #16
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	f107 001c 	add.w	r0, r7, #28
 8006f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d122      	bne.n	8006fd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d105      	bne.n	8006fc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 faa2 	bl	8007510 <USB_CoreReset>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]
 8006fd0:	e01a      	b.n	8007008 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa96 	bl	8007510 <USB_CoreReset>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d106      	bne.n	8006ffc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	639a      	str	r2, [r3, #56]	; 0x38
 8006ffa:	e005      	b.n	8007008 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	2b01      	cmp	r3, #1
 800700c:	d10b      	bne.n	8007026 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f043 0206 	orr.w	r2, r3, #6
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f043 0220 	orr.w	r2, r3, #32
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007032:	b004      	add	sp, #16
 8007034:	4770      	bx	lr

08007036 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f023 0201 	bic.w	r2, r3, #1
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d115      	bne.n	80070a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007086:	2001      	movs	r0, #1
 8007088:	f7fb f920 	bl	80022cc <HAL_Delay>
      ms++;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3301      	adds	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa2e 	bl	80074f4 <USB_GetMode>
 8007098:	4603      	mov	r3, r0
 800709a:	2b01      	cmp	r3, #1
 800709c:	d01e      	beq.n	80070dc <USB_SetCurrentMode+0x84>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b31      	cmp	r3, #49	; 0x31
 80070a2:	d9f0      	bls.n	8007086 <USB_SetCurrentMode+0x2e>
 80070a4:	e01a      	b.n	80070dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d115      	bne.n	80070d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070b8:	2001      	movs	r0, #1
 80070ba:	f7fb f907 	bl	80022cc <HAL_Delay>
      ms++;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3301      	adds	r3, #1
 80070c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa15 	bl	80074f4 <USB_GetMode>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <USB_SetCurrentMode+0x84>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b31      	cmp	r3, #49	; 0x31
 80070d4:	d9f0      	bls.n	80070b8 <USB_SetCurrentMode+0x60>
 80070d6:	e001      	b.n	80070dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e005      	b.n	80070e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b32      	cmp	r3, #50	; 0x32
 80070e0:	d101      	bne.n	80070e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070f0:	b084      	sub	sp, #16
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800710a:	2300      	movs	r3, #0
 800710c:	613b      	str	r3, [r7, #16]
 800710e:	e009      	b.n	8007124 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	3340      	adds	r3, #64	; 0x40
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	2200      	movs	r2, #0
 800711c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	3301      	adds	r3, #1
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2b0e      	cmp	r3, #14
 8007128:	d9f2      	bls.n	8007110 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800712a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d11c      	bne.n	800716a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713e:	f043 0302 	orr.w	r3, r3, #2
 8007142:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	639a      	str	r2, [r3, #56]	; 0x38
 8007168:	e00b      	b.n	8007182 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007188:	461a      	mov	r2, r3
 800718a:	2300      	movs	r3, #0
 800718c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007194:	4619      	mov	r1, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719c:	461a      	mov	r2, r3
 800719e:	680b      	ldr	r3, [r1, #0]
 80071a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d10c      	bne.n	80071c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071ae:	2100      	movs	r1, #0
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f965 	bl	8007480 <USB_SetDevSpeed>
 80071b6:	e008      	b.n	80071ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071b8:	2101      	movs	r1, #1
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f960 	bl	8007480 <USB_SetDevSpeed>
 80071c0:	e003      	b.n	80071ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071c2:	2103      	movs	r1, #3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f95b 	bl	8007480 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071ca:	2110      	movs	r1, #16
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f8f3 	bl	80073b8 <USB_FlushTxFifo>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f91f 	bl	8007420 <USB_FlushRxFifo>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f2:	461a      	mov	r2, r3
 80071f4:	2300      	movs	r3, #0
 80071f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fe:	461a      	mov	r2, r3
 8007200:	2300      	movs	r3, #0
 8007202:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720a:	461a      	mov	r2, r3
 800720c:	2300      	movs	r3, #0
 800720e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007210:	2300      	movs	r3, #0
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	e043      	b.n	800729e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800722c:	d118      	bne.n	8007260 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007240:	461a      	mov	r2, r3
 8007242:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	e013      	b.n	8007272 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007256:	461a      	mov	r2, r3
 8007258:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e008      	b.n	8007272 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	461a      	mov	r2, r3
 800726e:	2300      	movs	r3, #0
 8007270:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727e:	461a      	mov	r2, r3
 8007280:	2300      	movs	r3, #0
 8007282:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007290:	461a      	mov	r2, r3
 8007292:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007296:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	3301      	adds	r3, #1
 800729c:	613b      	str	r3, [r7, #16]
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d3b7      	bcc.n	8007216 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072a6:	2300      	movs	r3, #0
 80072a8:	613b      	str	r3, [r7, #16]
 80072aa:	e043      	b.n	8007334 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072c2:	d118      	bne.n	80072f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d6:	461a      	mov	r2, r3
 80072d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	e013      	b.n	8007308 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ec:	461a      	mov	r2, r3
 80072ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	e008      	b.n	8007308 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007302:	461a      	mov	r2, r3
 8007304:	2300      	movs	r3, #0
 8007306:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007314:	461a      	mov	r2, r3
 8007316:	2300      	movs	r3, #0
 8007318:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007326:	461a      	mov	r2, r3
 8007328:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800732c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	3301      	adds	r3, #1
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	429a      	cmp	r2, r3
 800733a:	d3b7      	bcc.n	80072ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800734a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800734e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800735c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	2b00      	cmp	r3, #0
 8007362:	d105      	bne.n	8007370 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	f043 0210 	orr.w	r2, r3, #16
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	699a      	ldr	r2, [r3, #24]
 8007374:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <USB_DevInit+0x2c4>)
 8007376:	4313      	orrs	r3, r2
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800737c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d005      	beq.n	800738e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	f043 0208 	orr.w	r2, r3, #8
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800738e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007390:	2b01      	cmp	r3, #1
 8007392:	d107      	bne.n	80073a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800739c:	f043 0304 	orr.w	r3, r3, #4
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073b0:	b004      	add	sp, #16
 80073b2:	4770      	bx	lr
 80073b4:	803c3800 	.word	0x803c3800

080073b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	3301      	adds	r3, #1
 80073ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4a13      	ldr	r2, [pc, #76]	; (800741c <USB_FlushTxFifo+0x64>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d901      	bls.n	80073d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e01b      	b.n	8007410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	daf2      	bge.n	80073c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	019b      	lsls	r3, r3, #6
 80073e8:	f043 0220 	orr.w	r2, r3, #32
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a08      	ldr	r2, [pc, #32]	; (800741c <USB_FlushTxFifo+0x64>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d901      	bls.n	8007402 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e006      	b.n	8007410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	2b20      	cmp	r3, #32
 800740c:	d0f0      	beq.n	80073f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	00030d40 	.word	0x00030d40

08007420 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4a11      	ldr	r2, [pc, #68]	; (800747c <USB_FlushRxFifo+0x5c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d901      	bls.n	800743e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e018      	b.n	8007470 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	daf2      	bge.n	800742c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2210      	movs	r2, #16
 800744e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3301      	adds	r3, #1
 8007454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4a08      	ldr	r2, [pc, #32]	; (800747c <USB_FlushRxFifo+0x5c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e006      	b.n	8007470 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b10      	cmp	r3, #16
 800746c:	d0f0      	beq.n	8007450 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	00030d40 	.word	0x00030d40

08007480 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	68f9      	ldr	r1, [r7, #12]
 800749c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074a0:	4313      	orrs	r3, r2
 80074a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074cc:	f023 0303 	bic.w	r3, r3, #3
 80074d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e0:	f043 0302 	orr.w	r3, r3, #2
 80074e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	f003 0301 	and.w	r3, r3, #1
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3301      	adds	r3, #1
 8007520:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4a13      	ldr	r2, [pc, #76]	; (8007574 <USB_CoreReset+0x64>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e01b      	b.n	8007566 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	daf2      	bge.n	800751c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f043 0201 	orr.w	r2, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3301      	adds	r3, #1
 800754a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4a09      	ldr	r2, [pc, #36]	; (8007574 <USB_CoreReset+0x64>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d901      	bls.n	8007558 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e006      	b.n	8007566 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b01      	cmp	r3, #1
 8007562:	d0f0      	beq.n	8007546 <USB_CoreReset+0x36>

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	00030d40 	.word	0x00030d40

08007578 <siprintf>:
 8007578:	b40e      	push	{r1, r2, r3}
 800757a:	b500      	push	{lr}
 800757c:	b09c      	sub	sp, #112	; 0x70
 800757e:	ab1d      	add	r3, sp, #116	; 0x74
 8007580:	9002      	str	r0, [sp, #8]
 8007582:	9006      	str	r0, [sp, #24]
 8007584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007588:	4809      	ldr	r0, [pc, #36]	; (80075b0 <siprintf+0x38>)
 800758a:	9107      	str	r1, [sp, #28]
 800758c:	9104      	str	r1, [sp, #16]
 800758e:	4909      	ldr	r1, [pc, #36]	; (80075b4 <siprintf+0x3c>)
 8007590:	f853 2b04 	ldr.w	r2, [r3], #4
 8007594:	9105      	str	r1, [sp, #20]
 8007596:	6800      	ldr	r0, [r0, #0]
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	a902      	add	r1, sp, #8
 800759c:	f000 f992 	bl	80078c4 <_svfiprintf_r>
 80075a0:	9b02      	ldr	r3, [sp, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	b01c      	add	sp, #112	; 0x70
 80075a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075ac:	b003      	add	sp, #12
 80075ae:	4770      	bx	lr
 80075b0:	200000a0 	.word	0x200000a0
 80075b4:	ffff0208 	.word	0xffff0208

080075b8 <memset>:
 80075b8:	4402      	add	r2, r0
 80075ba:	4603      	mov	r3, r0
 80075bc:	4293      	cmp	r3, r2
 80075be:	d100      	bne.n	80075c2 <memset+0xa>
 80075c0:	4770      	bx	lr
 80075c2:	f803 1b01 	strb.w	r1, [r3], #1
 80075c6:	e7f9      	b.n	80075bc <memset+0x4>

080075c8 <__errno>:
 80075c8:	4b01      	ldr	r3, [pc, #4]	; (80075d0 <__errno+0x8>)
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	200000a0 	.word	0x200000a0

080075d4 <__libc_init_array>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	4d0d      	ldr	r5, [pc, #52]	; (800760c <__libc_init_array+0x38>)
 80075d8:	4c0d      	ldr	r4, [pc, #52]	; (8007610 <__libc_init_array+0x3c>)
 80075da:	1b64      	subs	r4, r4, r5
 80075dc:	10a4      	asrs	r4, r4, #2
 80075de:	2600      	movs	r6, #0
 80075e0:	42a6      	cmp	r6, r4
 80075e2:	d109      	bne.n	80075f8 <__libc_init_array+0x24>
 80075e4:	4d0b      	ldr	r5, [pc, #44]	; (8007614 <__libc_init_array+0x40>)
 80075e6:	4c0c      	ldr	r4, [pc, #48]	; (8007618 <__libc_init_array+0x44>)
 80075e8:	f000 fc6a 	bl	8007ec0 <_init>
 80075ec:	1b64      	subs	r4, r4, r5
 80075ee:	10a4      	asrs	r4, r4, #2
 80075f0:	2600      	movs	r6, #0
 80075f2:	42a6      	cmp	r6, r4
 80075f4:	d105      	bne.n	8007602 <__libc_init_array+0x2e>
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fc:	4798      	blx	r3
 80075fe:	3601      	adds	r6, #1
 8007600:	e7ee      	b.n	80075e0 <__libc_init_array+0xc>
 8007602:	f855 3b04 	ldr.w	r3, [r5], #4
 8007606:	4798      	blx	r3
 8007608:	3601      	adds	r6, #1
 800760a:	e7f2      	b.n	80075f2 <__libc_init_array+0x1e>
 800760c:	08008058 	.word	0x08008058
 8007610:	08008058 	.word	0x08008058
 8007614:	08008058 	.word	0x08008058
 8007618:	0800805c 	.word	0x0800805c

0800761c <__retarget_lock_acquire_recursive>:
 800761c:	4770      	bx	lr

0800761e <__retarget_lock_release_recursive>:
 800761e:	4770      	bx	lr

08007620 <_free_r>:
 8007620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007622:	2900      	cmp	r1, #0
 8007624:	d044      	beq.n	80076b0 <_free_r+0x90>
 8007626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800762a:	9001      	str	r0, [sp, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f1a1 0404 	sub.w	r4, r1, #4
 8007632:	bfb8      	it	lt
 8007634:	18e4      	addlt	r4, r4, r3
 8007636:	f000 f8df 	bl	80077f8 <__malloc_lock>
 800763a:	4a1e      	ldr	r2, [pc, #120]	; (80076b4 <_free_r+0x94>)
 800763c:	9801      	ldr	r0, [sp, #4]
 800763e:	6813      	ldr	r3, [r2, #0]
 8007640:	b933      	cbnz	r3, 8007650 <_free_r+0x30>
 8007642:	6063      	str	r3, [r4, #4]
 8007644:	6014      	str	r4, [r2, #0]
 8007646:	b003      	add	sp, #12
 8007648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800764c:	f000 b8da 	b.w	8007804 <__malloc_unlock>
 8007650:	42a3      	cmp	r3, r4
 8007652:	d908      	bls.n	8007666 <_free_r+0x46>
 8007654:	6825      	ldr	r5, [r4, #0]
 8007656:	1961      	adds	r1, r4, r5
 8007658:	428b      	cmp	r3, r1
 800765a:	bf01      	itttt	eq
 800765c:	6819      	ldreq	r1, [r3, #0]
 800765e:	685b      	ldreq	r3, [r3, #4]
 8007660:	1949      	addeq	r1, r1, r5
 8007662:	6021      	streq	r1, [r4, #0]
 8007664:	e7ed      	b.n	8007642 <_free_r+0x22>
 8007666:	461a      	mov	r2, r3
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	b10b      	cbz	r3, 8007670 <_free_r+0x50>
 800766c:	42a3      	cmp	r3, r4
 800766e:	d9fa      	bls.n	8007666 <_free_r+0x46>
 8007670:	6811      	ldr	r1, [r2, #0]
 8007672:	1855      	adds	r5, r2, r1
 8007674:	42a5      	cmp	r5, r4
 8007676:	d10b      	bne.n	8007690 <_free_r+0x70>
 8007678:	6824      	ldr	r4, [r4, #0]
 800767a:	4421      	add	r1, r4
 800767c:	1854      	adds	r4, r2, r1
 800767e:	42a3      	cmp	r3, r4
 8007680:	6011      	str	r1, [r2, #0]
 8007682:	d1e0      	bne.n	8007646 <_free_r+0x26>
 8007684:	681c      	ldr	r4, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	6053      	str	r3, [r2, #4]
 800768a:	440c      	add	r4, r1
 800768c:	6014      	str	r4, [r2, #0]
 800768e:	e7da      	b.n	8007646 <_free_r+0x26>
 8007690:	d902      	bls.n	8007698 <_free_r+0x78>
 8007692:	230c      	movs	r3, #12
 8007694:	6003      	str	r3, [r0, #0]
 8007696:	e7d6      	b.n	8007646 <_free_r+0x26>
 8007698:	6825      	ldr	r5, [r4, #0]
 800769a:	1961      	adds	r1, r4, r5
 800769c:	428b      	cmp	r3, r1
 800769e:	bf04      	itt	eq
 80076a0:	6819      	ldreq	r1, [r3, #0]
 80076a2:	685b      	ldreq	r3, [r3, #4]
 80076a4:	6063      	str	r3, [r4, #4]
 80076a6:	bf04      	itt	eq
 80076a8:	1949      	addeq	r1, r1, r5
 80076aa:	6021      	streq	r1, [r4, #0]
 80076ac:	6054      	str	r4, [r2, #4]
 80076ae:	e7ca      	b.n	8007646 <_free_r+0x26>
 80076b0:	b003      	add	sp, #12
 80076b2:	bd30      	pop	{r4, r5, pc}
 80076b4:	20000bcc 	.word	0x20000bcc

080076b8 <sbrk_aligned>:
 80076b8:	b570      	push	{r4, r5, r6, lr}
 80076ba:	4e0e      	ldr	r6, [pc, #56]	; (80076f4 <sbrk_aligned+0x3c>)
 80076bc:	460c      	mov	r4, r1
 80076be:	6831      	ldr	r1, [r6, #0]
 80076c0:	4605      	mov	r5, r0
 80076c2:	b911      	cbnz	r1, 80076ca <sbrk_aligned+0x12>
 80076c4:	f000 fba6 	bl	8007e14 <_sbrk_r>
 80076c8:	6030      	str	r0, [r6, #0]
 80076ca:	4621      	mov	r1, r4
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 fba1 	bl	8007e14 <_sbrk_r>
 80076d2:	1c43      	adds	r3, r0, #1
 80076d4:	d00a      	beq.n	80076ec <sbrk_aligned+0x34>
 80076d6:	1cc4      	adds	r4, r0, #3
 80076d8:	f024 0403 	bic.w	r4, r4, #3
 80076dc:	42a0      	cmp	r0, r4
 80076de:	d007      	beq.n	80076f0 <sbrk_aligned+0x38>
 80076e0:	1a21      	subs	r1, r4, r0
 80076e2:	4628      	mov	r0, r5
 80076e4:	f000 fb96 	bl	8007e14 <_sbrk_r>
 80076e8:	3001      	adds	r0, #1
 80076ea:	d101      	bne.n	80076f0 <sbrk_aligned+0x38>
 80076ec:	f04f 34ff 	mov.w	r4, #4294967295
 80076f0:	4620      	mov	r0, r4
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	20000bd0 	.word	0x20000bd0

080076f8 <_malloc_r>:
 80076f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076fc:	1ccd      	adds	r5, r1, #3
 80076fe:	f025 0503 	bic.w	r5, r5, #3
 8007702:	3508      	adds	r5, #8
 8007704:	2d0c      	cmp	r5, #12
 8007706:	bf38      	it	cc
 8007708:	250c      	movcc	r5, #12
 800770a:	2d00      	cmp	r5, #0
 800770c:	4607      	mov	r7, r0
 800770e:	db01      	blt.n	8007714 <_malloc_r+0x1c>
 8007710:	42a9      	cmp	r1, r5
 8007712:	d905      	bls.n	8007720 <_malloc_r+0x28>
 8007714:	230c      	movs	r3, #12
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	2600      	movs	r6, #0
 800771a:	4630      	mov	r0, r6
 800771c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007720:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077f4 <_malloc_r+0xfc>
 8007724:	f000 f868 	bl	80077f8 <__malloc_lock>
 8007728:	f8d8 3000 	ldr.w	r3, [r8]
 800772c:	461c      	mov	r4, r3
 800772e:	bb5c      	cbnz	r4, 8007788 <_malloc_r+0x90>
 8007730:	4629      	mov	r1, r5
 8007732:	4638      	mov	r0, r7
 8007734:	f7ff ffc0 	bl	80076b8 <sbrk_aligned>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	4604      	mov	r4, r0
 800773c:	d155      	bne.n	80077ea <_malloc_r+0xf2>
 800773e:	f8d8 4000 	ldr.w	r4, [r8]
 8007742:	4626      	mov	r6, r4
 8007744:	2e00      	cmp	r6, #0
 8007746:	d145      	bne.n	80077d4 <_malloc_r+0xdc>
 8007748:	2c00      	cmp	r4, #0
 800774a:	d048      	beq.n	80077de <_malloc_r+0xe6>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	4631      	mov	r1, r6
 8007750:	4638      	mov	r0, r7
 8007752:	eb04 0903 	add.w	r9, r4, r3
 8007756:	f000 fb5d 	bl	8007e14 <_sbrk_r>
 800775a:	4581      	cmp	r9, r0
 800775c:	d13f      	bne.n	80077de <_malloc_r+0xe6>
 800775e:	6821      	ldr	r1, [r4, #0]
 8007760:	1a6d      	subs	r5, r5, r1
 8007762:	4629      	mov	r1, r5
 8007764:	4638      	mov	r0, r7
 8007766:	f7ff ffa7 	bl	80076b8 <sbrk_aligned>
 800776a:	3001      	adds	r0, #1
 800776c:	d037      	beq.n	80077de <_malloc_r+0xe6>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	442b      	add	r3, r5
 8007772:	6023      	str	r3, [r4, #0]
 8007774:	f8d8 3000 	ldr.w	r3, [r8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d038      	beq.n	80077ee <_malloc_r+0xf6>
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	42a2      	cmp	r2, r4
 8007780:	d12b      	bne.n	80077da <_malloc_r+0xe2>
 8007782:	2200      	movs	r2, #0
 8007784:	605a      	str	r2, [r3, #4]
 8007786:	e00f      	b.n	80077a8 <_malloc_r+0xb0>
 8007788:	6822      	ldr	r2, [r4, #0]
 800778a:	1b52      	subs	r2, r2, r5
 800778c:	d41f      	bmi.n	80077ce <_malloc_r+0xd6>
 800778e:	2a0b      	cmp	r2, #11
 8007790:	d917      	bls.n	80077c2 <_malloc_r+0xca>
 8007792:	1961      	adds	r1, r4, r5
 8007794:	42a3      	cmp	r3, r4
 8007796:	6025      	str	r5, [r4, #0]
 8007798:	bf18      	it	ne
 800779a:	6059      	strne	r1, [r3, #4]
 800779c:	6863      	ldr	r3, [r4, #4]
 800779e:	bf08      	it	eq
 80077a0:	f8c8 1000 	streq.w	r1, [r8]
 80077a4:	5162      	str	r2, [r4, r5]
 80077a6:	604b      	str	r3, [r1, #4]
 80077a8:	4638      	mov	r0, r7
 80077aa:	f104 060b 	add.w	r6, r4, #11
 80077ae:	f000 f829 	bl	8007804 <__malloc_unlock>
 80077b2:	f026 0607 	bic.w	r6, r6, #7
 80077b6:	1d23      	adds	r3, r4, #4
 80077b8:	1af2      	subs	r2, r6, r3
 80077ba:	d0ae      	beq.n	800771a <_malloc_r+0x22>
 80077bc:	1b9b      	subs	r3, r3, r6
 80077be:	50a3      	str	r3, [r4, r2]
 80077c0:	e7ab      	b.n	800771a <_malloc_r+0x22>
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	6862      	ldr	r2, [r4, #4]
 80077c6:	d1dd      	bne.n	8007784 <_malloc_r+0x8c>
 80077c8:	f8c8 2000 	str.w	r2, [r8]
 80077cc:	e7ec      	b.n	80077a8 <_malloc_r+0xb0>
 80077ce:	4623      	mov	r3, r4
 80077d0:	6864      	ldr	r4, [r4, #4]
 80077d2:	e7ac      	b.n	800772e <_malloc_r+0x36>
 80077d4:	4634      	mov	r4, r6
 80077d6:	6876      	ldr	r6, [r6, #4]
 80077d8:	e7b4      	b.n	8007744 <_malloc_r+0x4c>
 80077da:	4613      	mov	r3, r2
 80077dc:	e7cc      	b.n	8007778 <_malloc_r+0x80>
 80077de:	230c      	movs	r3, #12
 80077e0:	603b      	str	r3, [r7, #0]
 80077e2:	4638      	mov	r0, r7
 80077e4:	f000 f80e 	bl	8007804 <__malloc_unlock>
 80077e8:	e797      	b.n	800771a <_malloc_r+0x22>
 80077ea:	6025      	str	r5, [r4, #0]
 80077ec:	e7dc      	b.n	80077a8 <_malloc_r+0xb0>
 80077ee:	605b      	str	r3, [r3, #4]
 80077f0:	deff      	udf	#255	; 0xff
 80077f2:	bf00      	nop
 80077f4:	20000bcc 	.word	0x20000bcc

080077f8 <__malloc_lock>:
 80077f8:	4801      	ldr	r0, [pc, #4]	; (8007800 <__malloc_lock+0x8>)
 80077fa:	f7ff bf0f 	b.w	800761c <__retarget_lock_acquire_recursive>
 80077fe:	bf00      	nop
 8007800:	20000bc8 	.word	0x20000bc8

08007804 <__malloc_unlock>:
 8007804:	4801      	ldr	r0, [pc, #4]	; (800780c <__malloc_unlock+0x8>)
 8007806:	f7ff bf0a 	b.w	800761e <__retarget_lock_release_recursive>
 800780a:	bf00      	nop
 800780c:	20000bc8 	.word	0x20000bc8

08007810 <__ssputs_r>:
 8007810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007814:	688e      	ldr	r6, [r1, #8]
 8007816:	461f      	mov	r7, r3
 8007818:	42be      	cmp	r6, r7
 800781a:	680b      	ldr	r3, [r1, #0]
 800781c:	4682      	mov	sl, r0
 800781e:	460c      	mov	r4, r1
 8007820:	4690      	mov	r8, r2
 8007822:	d82c      	bhi.n	800787e <__ssputs_r+0x6e>
 8007824:	898a      	ldrh	r2, [r1, #12]
 8007826:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800782a:	d026      	beq.n	800787a <__ssputs_r+0x6a>
 800782c:	6965      	ldr	r5, [r4, #20]
 800782e:	6909      	ldr	r1, [r1, #16]
 8007830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007834:	eba3 0901 	sub.w	r9, r3, r1
 8007838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800783c:	1c7b      	adds	r3, r7, #1
 800783e:	444b      	add	r3, r9
 8007840:	106d      	asrs	r5, r5, #1
 8007842:	429d      	cmp	r5, r3
 8007844:	bf38      	it	cc
 8007846:	461d      	movcc	r5, r3
 8007848:	0553      	lsls	r3, r2, #21
 800784a:	d527      	bpl.n	800789c <__ssputs_r+0x8c>
 800784c:	4629      	mov	r1, r5
 800784e:	f7ff ff53 	bl	80076f8 <_malloc_r>
 8007852:	4606      	mov	r6, r0
 8007854:	b360      	cbz	r0, 80078b0 <__ssputs_r+0xa0>
 8007856:	6921      	ldr	r1, [r4, #16]
 8007858:	464a      	mov	r2, r9
 800785a:	f000 faeb 	bl	8007e34 <memcpy>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	6126      	str	r6, [r4, #16]
 800786c:	6165      	str	r5, [r4, #20]
 800786e:	444e      	add	r6, r9
 8007870:	eba5 0509 	sub.w	r5, r5, r9
 8007874:	6026      	str	r6, [r4, #0]
 8007876:	60a5      	str	r5, [r4, #8]
 8007878:	463e      	mov	r6, r7
 800787a:	42be      	cmp	r6, r7
 800787c:	d900      	bls.n	8007880 <__ssputs_r+0x70>
 800787e:	463e      	mov	r6, r7
 8007880:	6820      	ldr	r0, [r4, #0]
 8007882:	4632      	mov	r2, r6
 8007884:	4641      	mov	r1, r8
 8007886:	f000 faab 	bl	8007de0 <memmove>
 800788a:	68a3      	ldr	r3, [r4, #8]
 800788c:	1b9b      	subs	r3, r3, r6
 800788e:	60a3      	str	r3, [r4, #8]
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	4433      	add	r3, r6
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	2000      	movs	r0, #0
 8007898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789c:	462a      	mov	r2, r5
 800789e:	f000 fad7 	bl	8007e50 <_realloc_r>
 80078a2:	4606      	mov	r6, r0
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d1e0      	bne.n	800786a <__ssputs_r+0x5a>
 80078a8:	6921      	ldr	r1, [r4, #16]
 80078aa:	4650      	mov	r0, sl
 80078ac:	f7ff feb8 	bl	8007620 <_free_r>
 80078b0:	230c      	movs	r3, #12
 80078b2:	f8ca 3000 	str.w	r3, [sl]
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	f04f 30ff 	mov.w	r0, #4294967295
 80078c2:	e7e9      	b.n	8007898 <__ssputs_r+0x88>

080078c4 <_svfiprintf_r>:
 80078c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c8:	4698      	mov	r8, r3
 80078ca:	898b      	ldrh	r3, [r1, #12]
 80078cc:	061b      	lsls	r3, r3, #24
 80078ce:	b09d      	sub	sp, #116	; 0x74
 80078d0:	4607      	mov	r7, r0
 80078d2:	460d      	mov	r5, r1
 80078d4:	4614      	mov	r4, r2
 80078d6:	d50e      	bpl.n	80078f6 <_svfiprintf_r+0x32>
 80078d8:	690b      	ldr	r3, [r1, #16]
 80078da:	b963      	cbnz	r3, 80078f6 <_svfiprintf_r+0x32>
 80078dc:	2140      	movs	r1, #64	; 0x40
 80078de:	f7ff ff0b 	bl	80076f8 <_malloc_r>
 80078e2:	6028      	str	r0, [r5, #0]
 80078e4:	6128      	str	r0, [r5, #16]
 80078e6:	b920      	cbnz	r0, 80078f2 <_svfiprintf_r+0x2e>
 80078e8:	230c      	movs	r3, #12
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295
 80078f0:	e0d0      	b.n	8007a94 <_svfiprintf_r+0x1d0>
 80078f2:	2340      	movs	r3, #64	; 0x40
 80078f4:	616b      	str	r3, [r5, #20]
 80078f6:	2300      	movs	r3, #0
 80078f8:	9309      	str	r3, [sp, #36]	; 0x24
 80078fa:	2320      	movs	r3, #32
 80078fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007900:	f8cd 800c 	str.w	r8, [sp, #12]
 8007904:	2330      	movs	r3, #48	; 0x30
 8007906:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007aac <_svfiprintf_r+0x1e8>
 800790a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800790e:	f04f 0901 	mov.w	r9, #1
 8007912:	4623      	mov	r3, r4
 8007914:	469a      	mov	sl, r3
 8007916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800791a:	b10a      	cbz	r2, 8007920 <_svfiprintf_r+0x5c>
 800791c:	2a25      	cmp	r2, #37	; 0x25
 800791e:	d1f9      	bne.n	8007914 <_svfiprintf_r+0x50>
 8007920:	ebba 0b04 	subs.w	fp, sl, r4
 8007924:	d00b      	beq.n	800793e <_svfiprintf_r+0x7a>
 8007926:	465b      	mov	r3, fp
 8007928:	4622      	mov	r2, r4
 800792a:	4629      	mov	r1, r5
 800792c:	4638      	mov	r0, r7
 800792e:	f7ff ff6f 	bl	8007810 <__ssputs_r>
 8007932:	3001      	adds	r0, #1
 8007934:	f000 80a9 	beq.w	8007a8a <_svfiprintf_r+0x1c6>
 8007938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800793a:	445a      	add	r2, fp
 800793c:	9209      	str	r2, [sp, #36]	; 0x24
 800793e:	f89a 3000 	ldrb.w	r3, [sl]
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 80a1 	beq.w	8007a8a <_svfiprintf_r+0x1c6>
 8007948:	2300      	movs	r3, #0
 800794a:	f04f 32ff 	mov.w	r2, #4294967295
 800794e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007952:	f10a 0a01 	add.w	sl, sl, #1
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	9307      	str	r3, [sp, #28]
 800795a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800795e:	931a      	str	r3, [sp, #104]	; 0x68
 8007960:	4654      	mov	r4, sl
 8007962:	2205      	movs	r2, #5
 8007964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007968:	4850      	ldr	r0, [pc, #320]	; (8007aac <_svfiprintf_r+0x1e8>)
 800796a:	f7f8 fc41 	bl	80001f0 <memchr>
 800796e:	9a04      	ldr	r2, [sp, #16]
 8007970:	b9d8      	cbnz	r0, 80079aa <_svfiprintf_r+0xe6>
 8007972:	06d0      	lsls	r0, r2, #27
 8007974:	bf44      	itt	mi
 8007976:	2320      	movmi	r3, #32
 8007978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800797c:	0711      	lsls	r1, r2, #28
 800797e:	bf44      	itt	mi
 8007980:	232b      	movmi	r3, #43	; 0x2b
 8007982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007986:	f89a 3000 	ldrb.w	r3, [sl]
 800798a:	2b2a      	cmp	r3, #42	; 0x2a
 800798c:	d015      	beq.n	80079ba <_svfiprintf_r+0xf6>
 800798e:	9a07      	ldr	r2, [sp, #28]
 8007990:	4654      	mov	r4, sl
 8007992:	2000      	movs	r0, #0
 8007994:	f04f 0c0a 	mov.w	ip, #10
 8007998:	4621      	mov	r1, r4
 800799a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800799e:	3b30      	subs	r3, #48	; 0x30
 80079a0:	2b09      	cmp	r3, #9
 80079a2:	d94d      	bls.n	8007a40 <_svfiprintf_r+0x17c>
 80079a4:	b1b0      	cbz	r0, 80079d4 <_svfiprintf_r+0x110>
 80079a6:	9207      	str	r2, [sp, #28]
 80079a8:	e014      	b.n	80079d4 <_svfiprintf_r+0x110>
 80079aa:	eba0 0308 	sub.w	r3, r0, r8
 80079ae:	fa09 f303 	lsl.w	r3, r9, r3
 80079b2:	4313      	orrs	r3, r2
 80079b4:	9304      	str	r3, [sp, #16]
 80079b6:	46a2      	mov	sl, r4
 80079b8:	e7d2      	b.n	8007960 <_svfiprintf_r+0x9c>
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	1d19      	adds	r1, r3, #4
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	9103      	str	r1, [sp, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	bfbb      	ittet	lt
 80079c6:	425b      	neglt	r3, r3
 80079c8:	f042 0202 	orrlt.w	r2, r2, #2
 80079cc:	9307      	strge	r3, [sp, #28]
 80079ce:	9307      	strlt	r3, [sp, #28]
 80079d0:	bfb8      	it	lt
 80079d2:	9204      	strlt	r2, [sp, #16]
 80079d4:	7823      	ldrb	r3, [r4, #0]
 80079d6:	2b2e      	cmp	r3, #46	; 0x2e
 80079d8:	d10c      	bne.n	80079f4 <_svfiprintf_r+0x130>
 80079da:	7863      	ldrb	r3, [r4, #1]
 80079dc:	2b2a      	cmp	r3, #42	; 0x2a
 80079de:	d134      	bne.n	8007a4a <_svfiprintf_r+0x186>
 80079e0:	9b03      	ldr	r3, [sp, #12]
 80079e2:	1d1a      	adds	r2, r3, #4
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	9203      	str	r2, [sp, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	bfb8      	it	lt
 80079ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80079f0:	3402      	adds	r4, #2
 80079f2:	9305      	str	r3, [sp, #20]
 80079f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007abc <_svfiprintf_r+0x1f8>
 80079f8:	7821      	ldrb	r1, [r4, #0]
 80079fa:	2203      	movs	r2, #3
 80079fc:	4650      	mov	r0, sl
 80079fe:	f7f8 fbf7 	bl	80001f0 <memchr>
 8007a02:	b138      	cbz	r0, 8007a14 <_svfiprintf_r+0x150>
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	eba0 000a 	sub.w	r0, r0, sl
 8007a0a:	2240      	movs	r2, #64	; 0x40
 8007a0c:	4082      	lsls	r2, r0
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	3401      	adds	r4, #1
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a18:	4825      	ldr	r0, [pc, #148]	; (8007ab0 <_svfiprintf_r+0x1ec>)
 8007a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a1e:	2206      	movs	r2, #6
 8007a20:	f7f8 fbe6 	bl	80001f0 <memchr>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d038      	beq.n	8007a9a <_svfiprintf_r+0x1d6>
 8007a28:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <_svfiprintf_r+0x1f0>)
 8007a2a:	bb1b      	cbnz	r3, 8007a74 <_svfiprintf_r+0x1b0>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	3307      	adds	r3, #7
 8007a30:	f023 0307 	bic.w	r3, r3, #7
 8007a34:	3308      	adds	r3, #8
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3a:	4433      	add	r3, r6
 8007a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3e:	e768      	b.n	8007912 <_svfiprintf_r+0x4e>
 8007a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a44:	460c      	mov	r4, r1
 8007a46:	2001      	movs	r0, #1
 8007a48:	e7a6      	b.n	8007998 <_svfiprintf_r+0xd4>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	3401      	adds	r4, #1
 8007a4e:	9305      	str	r3, [sp, #20]
 8007a50:	4619      	mov	r1, r3
 8007a52:	f04f 0c0a 	mov.w	ip, #10
 8007a56:	4620      	mov	r0, r4
 8007a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a5c:	3a30      	subs	r2, #48	; 0x30
 8007a5e:	2a09      	cmp	r2, #9
 8007a60:	d903      	bls.n	8007a6a <_svfiprintf_r+0x1a6>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0c6      	beq.n	80079f4 <_svfiprintf_r+0x130>
 8007a66:	9105      	str	r1, [sp, #20]
 8007a68:	e7c4      	b.n	80079f4 <_svfiprintf_r+0x130>
 8007a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a6e:	4604      	mov	r4, r0
 8007a70:	2301      	movs	r3, #1
 8007a72:	e7f0      	b.n	8007a56 <_svfiprintf_r+0x192>
 8007a74:	ab03      	add	r3, sp, #12
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	462a      	mov	r2, r5
 8007a7a:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <_svfiprintf_r+0x1f4>)
 8007a7c:	a904      	add	r1, sp, #16
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f3af 8000 	nop.w
 8007a84:	1c42      	adds	r2, r0, #1
 8007a86:	4606      	mov	r6, r0
 8007a88:	d1d6      	bne.n	8007a38 <_svfiprintf_r+0x174>
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	065b      	lsls	r3, r3, #25
 8007a8e:	f53f af2d 	bmi.w	80078ec <_svfiprintf_r+0x28>
 8007a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a94:	b01d      	add	sp, #116	; 0x74
 8007a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9a:	ab03      	add	r3, sp, #12
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <_svfiprintf_r+0x1f4>)
 8007aa2:	a904      	add	r1, sp, #16
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	f000 f879 	bl	8007b9c <_printf_i>
 8007aaa:	e7eb      	b.n	8007a84 <_svfiprintf_r+0x1c0>
 8007aac:	0800801c 	.word	0x0800801c
 8007ab0:	08008026 	.word	0x08008026
 8007ab4:	00000000 	.word	0x00000000
 8007ab8:	08007811 	.word	0x08007811
 8007abc:	08008022 	.word	0x08008022

08007ac0 <_printf_common>:
 8007ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac4:	4616      	mov	r6, r2
 8007ac6:	4699      	mov	r9, r3
 8007ac8:	688a      	ldr	r2, [r1, #8]
 8007aca:	690b      	ldr	r3, [r1, #16]
 8007acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	bfb8      	it	lt
 8007ad4:	4613      	movlt	r3, r2
 8007ad6:	6033      	str	r3, [r6, #0]
 8007ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007adc:	4607      	mov	r7, r0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	b10a      	cbz	r2, 8007ae6 <_printf_common+0x26>
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	6033      	str	r3, [r6, #0]
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	0699      	lsls	r1, r3, #26
 8007aea:	bf42      	ittt	mi
 8007aec:	6833      	ldrmi	r3, [r6, #0]
 8007aee:	3302      	addmi	r3, #2
 8007af0:	6033      	strmi	r3, [r6, #0]
 8007af2:	6825      	ldr	r5, [r4, #0]
 8007af4:	f015 0506 	ands.w	r5, r5, #6
 8007af8:	d106      	bne.n	8007b08 <_printf_common+0x48>
 8007afa:	f104 0a19 	add.w	sl, r4, #25
 8007afe:	68e3      	ldr	r3, [r4, #12]
 8007b00:	6832      	ldr	r2, [r6, #0]
 8007b02:	1a9b      	subs	r3, r3, r2
 8007b04:	42ab      	cmp	r3, r5
 8007b06:	dc26      	bgt.n	8007b56 <_printf_common+0x96>
 8007b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b0c:	1e13      	subs	r3, r2, #0
 8007b0e:	6822      	ldr	r2, [r4, #0]
 8007b10:	bf18      	it	ne
 8007b12:	2301      	movne	r3, #1
 8007b14:	0692      	lsls	r2, r2, #26
 8007b16:	d42b      	bmi.n	8007b70 <_printf_common+0xb0>
 8007b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	4638      	mov	r0, r7
 8007b20:	47c0      	blx	r8
 8007b22:	3001      	adds	r0, #1
 8007b24:	d01e      	beq.n	8007b64 <_printf_common+0xa4>
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	6922      	ldr	r2, [r4, #16]
 8007b2a:	f003 0306 	and.w	r3, r3, #6
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	bf02      	ittt	eq
 8007b32:	68e5      	ldreq	r5, [r4, #12]
 8007b34:	6833      	ldreq	r3, [r6, #0]
 8007b36:	1aed      	subeq	r5, r5, r3
 8007b38:	68a3      	ldr	r3, [r4, #8]
 8007b3a:	bf0c      	ite	eq
 8007b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b40:	2500      	movne	r5, #0
 8007b42:	4293      	cmp	r3, r2
 8007b44:	bfc4      	itt	gt
 8007b46:	1a9b      	subgt	r3, r3, r2
 8007b48:	18ed      	addgt	r5, r5, r3
 8007b4a:	2600      	movs	r6, #0
 8007b4c:	341a      	adds	r4, #26
 8007b4e:	42b5      	cmp	r5, r6
 8007b50:	d11a      	bne.n	8007b88 <_printf_common+0xc8>
 8007b52:	2000      	movs	r0, #0
 8007b54:	e008      	b.n	8007b68 <_printf_common+0xa8>
 8007b56:	2301      	movs	r3, #1
 8007b58:	4652      	mov	r2, sl
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	47c0      	blx	r8
 8007b60:	3001      	adds	r0, #1
 8007b62:	d103      	bne.n	8007b6c <_printf_common+0xac>
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	e7c6      	b.n	8007afe <_printf_common+0x3e>
 8007b70:	18e1      	adds	r1, r4, r3
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	2030      	movs	r0, #48	; 0x30
 8007b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b7a:	4422      	add	r2, r4
 8007b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b84:	3302      	adds	r3, #2
 8007b86:	e7c7      	b.n	8007b18 <_printf_common+0x58>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	4649      	mov	r1, r9
 8007b8e:	4638      	mov	r0, r7
 8007b90:	47c0      	blx	r8
 8007b92:	3001      	adds	r0, #1
 8007b94:	d0e6      	beq.n	8007b64 <_printf_common+0xa4>
 8007b96:	3601      	adds	r6, #1
 8007b98:	e7d9      	b.n	8007b4e <_printf_common+0x8e>
	...

08007b9c <_printf_i>:
 8007b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	7e0f      	ldrb	r7, [r1, #24]
 8007ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ba4:	2f78      	cmp	r7, #120	; 0x78
 8007ba6:	4691      	mov	r9, r2
 8007ba8:	4680      	mov	r8, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	469a      	mov	sl, r3
 8007bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bb2:	d807      	bhi.n	8007bc4 <_printf_i+0x28>
 8007bb4:	2f62      	cmp	r7, #98	; 0x62
 8007bb6:	d80a      	bhi.n	8007bce <_printf_i+0x32>
 8007bb8:	2f00      	cmp	r7, #0
 8007bba:	f000 80d4 	beq.w	8007d66 <_printf_i+0x1ca>
 8007bbe:	2f58      	cmp	r7, #88	; 0x58
 8007bc0:	f000 80c0 	beq.w	8007d44 <_printf_i+0x1a8>
 8007bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bcc:	e03a      	b.n	8007c44 <_printf_i+0xa8>
 8007bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bd2:	2b15      	cmp	r3, #21
 8007bd4:	d8f6      	bhi.n	8007bc4 <_printf_i+0x28>
 8007bd6:	a101      	add	r1, pc, #4	; (adr r1, 8007bdc <_printf_i+0x40>)
 8007bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bdc:	08007c35 	.word	0x08007c35
 8007be0:	08007c49 	.word	0x08007c49
 8007be4:	08007bc5 	.word	0x08007bc5
 8007be8:	08007bc5 	.word	0x08007bc5
 8007bec:	08007bc5 	.word	0x08007bc5
 8007bf0:	08007bc5 	.word	0x08007bc5
 8007bf4:	08007c49 	.word	0x08007c49
 8007bf8:	08007bc5 	.word	0x08007bc5
 8007bfc:	08007bc5 	.word	0x08007bc5
 8007c00:	08007bc5 	.word	0x08007bc5
 8007c04:	08007bc5 	.word	0x08007bc5
 8007c08:	08007d4d 	.word	0x08007d4d
 8007c0c:	08007c75 	.word	0x08007c75
 8007c10:	08007d07 	.word	0x08007d07
 8007c14:	08007bc5 	.word	0x08007bc5
 8007c18:	08007bc5 	.word	0x08007bc5
 8007c1c:	08007d6f 	.word	0x08007d6f
 8007c20:	08007bc5 	.word	0x08007bc5
 8007c24:	08007c75 	.word	0x08007c75
 8007c28:	08007bc5 	.word	0x08007bc5
 8007c2c:	08007bc5 	.word	0x08007bc5
 8007c30:	08007d0f 	.word	0x08007d0f
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	1d1a      	adds	r2, r3, #4
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	602a      	str	r2, [r5, #0]
 8007c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c44:	2301      	movs	r3, #1
 8007c46:	e09f      	b.n	8007d88 <_printf_i+0x1ec>
 8007c48:	6820      	ldr	r0, [r4, #0]
 8007c4a:	682b      	ldr	r3, [r5, #0]
 8007c4c:	0607      	lsls	r7, r0, #24
 8007c4e:	f103 0104 	add.w	r1, r3, #4
 8007c52:	6029      	str	r1, [r5, #0]
 8007c54:	d501      	bpl.n	8007c5a <_printf_i+0xbe>
 8007c56:	681e      	ldr	r6, [r3, #0]
 8007c58:	e003      	b.n	8007c62 <_printf_i+0xc6>
 8007c5a:	0646      	lsls	r6, r0, #25
 8007c5c:	d5fb      	bpl.n	8007c56 <_printf_i+0xba>
 8007c5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c62:	2e00      	cmp	r6, #0
 8007c64:	da03      	bge.n	8007c6e <_printf_i+0xd2>
 8007c66:	232d      	movs	r3, #45	; 0x2d
 8007c68:	4276      	negs	r6, r6
 8007c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c6e:	485a      	ldr	r0, [pc, #360]	; (8007dd8 <_printf_i+0x23c>)
 8007c70:	230a      	movs	r3, #10
 8007c72:	e012      	b.n	8007c9a <_printf_i+0xfe>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	6820      	ldr	r0, [r4, #0]
 8007c78:	1d19      	adds	r1, r3, #4
 8007c7a:	6029      	str	r1, [r5, #0]
 8007c7c:	0605      	lsls	r5, r0, #24
 8007c7e:	d501      	bpl.n	8007c84 <_printf_i+0xe8>
 8007c80:	681e      	ldr	r6, [r3, #0]
 8007c82:	e002      	b.n	8007c8a <_printf_i+0xee>
 8007c84:	0641      	lsls	r1, r0, #25
 8007c86:	d5fb      	bpl.n	8007c80 <_printf_i+0xe4>
 8007c88:	881e      	ldrh	r6, [r3, #0]
 8007c8a:	4853      	ldr	r0, [pc, #332]	; (8007dd8 <_printf_i+0x23c>)
 8007c8c:	2f6f      	cmp	r7, #111	; 0x6f
 8007c8e:	bf0c      	ite	eq
 8007c90:	2308      	moveq	r3, #8
 8007c92:	230a      	movne	r3, #10
 8007c94:	2100      	movs	r1, #0
 8007c96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c9a:	6865      	ldr	r5, [r4, #4]
 8007c9c:	60a5      	str	r5, [r4, #8]
 8007c9e:	2d00      	cmp	r5, #0
 8007ca0:	bfa2      	ittt	ge
 8007ca2:	6821      	ldrge	r1, [r4, #0]
 8007ca4:	f021 0104 	bicge.w	r1, r1, #4
 8007ca8:	6021      	strge	r1, [r4, #0]
 8007caa:	b90e      	cbnz	r6, 8007cb0 <_printf_i+0x114>
 8007cac:	2d00      	cmp	r5, #0
 8007cae:	d04b      	beq.n	8007d48 <_printf_i+0x1ac>
 8007cb0:	4615      	mov	r5, r2
 8007cb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cb6:	fb03 6711 	mls	r7, r3, r1, r6
 8007cba:	5dc7      	ldrb	r7, [r0, r7]
 8007cbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cc0:	4637      	mov	r7, r6
 8007cc2:	42bb      	cmp	r3, r7
 8007cc4:	460e      	mov	r6, r1
 8007cc6:	d9f4      	bls.n	8007cb2 <_printf_i+0x116>
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d10b      	bne.n	8007ce4 <_printf_i+0x148>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	07de      	lsls	r6, r3, #31
 8007cd0:	d508      	bpl.n	8007ce4 <_printf_i+0x148>
 8007cd2:	6923      	ldr	r3, [r4, #16]
 8007cd4:	6861      	ldr	r1, [r4, #4]
 8007cd6:	4299      	cmp	r1, r3
 8007cd8:	bfde      	ittt	le
 8007cda:	2330      	movle	r3, #48	; 0x30
 8007cdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ce0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ce4:	1b52      	subs	r2, r2, r5
 8007ce6:	6122      	str	r2, [r4, #16]
 8007ce8:	f8cd a000 	str.w	sl, [sp]
 8007cec:	464b      	mov	r3, r9
 8007cee:	aa03      	add	r2, sp, #12
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	f7ff fee4 	bl	8007ac0 <_printf_common>
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d14a      	bne.n	8007d92 <_printf_i+0x1f6>
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	b004      	add	sp, #16
 8007d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	f043 0320 	orr.w	r3, r3, #32
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	4833      	ldr	r0, [pc, #204]	; (8007ddc <_printf_i+0x240>)
 8007d10:	2778      	movs	r7, #120	; 0x78
 8007d12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	6829      	ldr	r1, [r5, #0]
 8007d1a:	061f      	lsls	r7, r3, #24
 8007d1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d20:	d402      	bmi.n	8007d28 <_printf_i+0x18c>
 8007d22:	065f      	lsls	r7, r3, #25
 8007d24:	bf48      	it	mi
 8007d26:	b2b6      	uxthmi	r6, r6
 8007d28:	07df      	lsls	r7, r3, #31
 8007d2a:	bf48      	it	mi
 8007d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8007d30:	6029      	str	r1, [r5, #0]
 8007d32:	bf48      	it	mi
 8007d34:	6023      	strmi	r3, [r4, #0]
 8007d36:	b91e      	cbnz	r6, 8007d40 <_printf_i+0x1a4>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	f023 0320 	bic.w	r3, r3, #32
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	2310      	movs	r3, #16
 8007d42:	e7a7      	b.n	8007c94 <_printf_i+0xf8>
 8007d44:	4824      	ldr	r0, [pc, #144]	; (8007dd8 <_printf_i+0x23c>)
 8007d46:	e7e4      	b.n	8007d12 <_printf_i+0x176>
 8007d48:	4615      	mov	r5, r2
 8007d4a:	e7bd      	b.n	8007cc8 <_printf_i+0x12c>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	6826      	ldr	r6, [r4, #0]
 8007d50:	6961      	ldr	r1, [r4, #20]
 8007d52:	1d18      	adds	r0, r3, #4
 8007d54:	6028      	str	r0, [r5, #0]
 8007d56:	0635      	lsls	r5, r6, #24
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	d501      	bpl.n	8007d60 <_printf_i+0x1c4>
 8007d5c:	6019      	str	r1, [r3, #0]
 8007d5e:	e002      	b.n	8007d66 <_printf_i+0x1ca>
 8007d60:	0670      	lsls	r0, r6, #25
 8007d62:	d5fb      	bpl.n	8007d5c <_printf_i+0x1c0>
 8007d64:	8019      	strh	r1, [r3, #0]
 8007d66:	2300      	movs	r3, #0
 8007d68:	6123      	str	r3, [r4, #16]
 8007d6a:	4615      	mov	r5, r2
 8007d6c:	e7bc      	b.n	8007ce8 <_printf_i+0x14c>
 8007d6e:	682b      	ldr	r3, [r5, #0]
 8007d70:	1d1a      	adds	r2, r3, #4
 8007d72:	602a      	str	r2, [r5, #0]
 8007d74:	681d      	ldr	r5, [r3, #0]
 8007d76:	6862      	ldr	r2, [r4, #4]
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	f7f8 fa38 	bl	80001f0 <memchr>
 8007d80:	b108      	cbz	r0, 8007d86 <_printf_i+0x1ea>
 8007d82:	1b40      	subs	r0, r0, r5
 8007d84:	6060      	str	r0, [r4, #4]
 8007d86:	6863      	ldr	r3, [r4, #4]
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d90:	e7aa      	b.n	8007ce8 <_printf_i+0x14c>
 8007d92:	6923      	ldr	r3, [r4, #16]
 8007d94:	462a      	mov	r2, r5
 8007d96:	4649      	mov	r1, r9
 8007d98:	4640      	mov	r0, r8
 8007d9a:	47d0      	blx	sl
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d0ad      	beq.n	8007cfc <_printf_i+0x160>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	079b      	lsls	r3, r3, #30
 8007da4:	d413      	bmi.n	8007dce <_printf_i+0x232>
 8007da6:	68e0      	ldr	r0, [r4, #12]
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	4298      	cmp	r0, r3
 8007dac:	bfb8      	it	lt
 8007dae:	4618      	movlt	r0, r3
 8007db0:	e7a6      	b.n	8007d00 <_printf_i+0x164>
 8007db2:	2301      	movs	r3, #1
 8007db4:	4632      	mov	r2, r6
 8007db6:	4649      	mov	r1, r9
 8007db8:	4640      	mov	r0, r8
 8007dba:	47d0      	blx	sl
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d09d      	beq.n	8007cfc <_printf_i+0x160>
 8007dc0:	3501      	adds	r5, #1
 8007dc2:	68e3      	ldr	r3, [r4, #12]
 8007dc4:	9903      	ldr	r1, [sp, #12]
 8007dc6:	1a5b      	subs	r3, r3, r1
 8007dc8:	42ab      	cmp	r3, r5
 8007dca:	dcf2      	bgt.n	8007db2 <_printf_i+0x216>
 8007dcc:	e7eb      	b.n	8007da6 <_printf_i+0x20a>
 8007dce:	2500      	movs	r5, #0
 8007dd0:	f104 0619 	add.w	r6, r4, #25
 8007dd4:	e7f5      	b.n	8007dc2 <_printf_i+0x226>
 8007dd6:	bf00      	nop
 8007dd8:	0800802d 	.word	0x0800802d
 8007ddc:	0800803e 	.word	0x0800803e

08007de0 <memmove>:
 8007de0:	4288      	cmp	r0, r1
 8007de2:	b510      	push	{r4, lr}
 8007de4:	eb01 0402 	add.w	r4, r1, r2
 8007de8:	d902      	bls.n	8007df0 <memmove+0x10>
 8007dea:	4284      	cmp	r4, r0
 8007dec:	4623      	mov	r3, r4
 8007dee:	d807      	bhi.n	8007e00 <memmove+0x20>
 8007df0:	1e43      	subs	r3, r0, #1
 8007df2:	42a1      	cmp	r1, r4
 8007df4:	d008      	beq.n	8007e08 <memmove+0x28>
 8007df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dfe:	e7f8      	b.n	8007df2 <memmove+0x12>
 8007e00:	4402      	add	r2, r0
 8007e02:	4601      	mov	r1, r0
 8007e04:	428a      	cmp	r2, r1
 8007e06:	d100      	bne.n	8007e0a <memmove+0x2a>
 8007e08:	bd10      	pop	{r4, pc}
 8007e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e12:	e7f7      	b.n	8007e04 <memmove+0x24>

08007e14 <_sbrk_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	4d06      	ldr	r5, [pc, #24]	; (8007e30 <_sbrk_r+0x1c>)
 8007e18:	2300      	movs	r3, #0
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	4608      	mov	r0, r1
 8007e1e:	602b      	str	r3, [r5, #0]
 8007e20:	f7f9 ffa8 	bl	8001d74 <_sbrk>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_sbrk_r+0x1a>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_sbrk_r+0x1a>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	20000bc4 	.word	0x20000bc4

08007e34 <memcpy>:
 8007e34:	440a      	add	r2, r1
 8007e36:	4291      	cmp	r1, r2
 8007e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e3c:	d100      	bne.n	8007e40 <memcpy+0xc>
 8007e3e:	4770      	bx	lr
 8007e40:	b510      	push	{r4, lr}
 8007e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e4a:	4291      	cmp	r1, r2
 8007e4c:	d1f9      	bne.n	8007e42 <memcpy+0xe>
 8007e4e:	bd10      	pop	{r4, pc}

08007e50 <_realloc_r>:
 8007e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e54:	4680      	mov	r8, r0
 8007e56:	4614      	mov	r4, r2
 8007e58:	460e      	mov	r6, r1
 8007e5a:	b921      	cbnz	r1, 8007e66 <_realloc_r+0x16>
 8007e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e60:	4611      	mov	r1, r2
 8007e62:	f7ff bc49 	b.w	80076f8 <_malloc_r>
 8007e66:	b92a      	cbnz	r2, 8007e74 <_realloc_r+0x24>
 8007e68:	f7ff fbda 	bl	8007620 <_free_r>
 8007e6c:	4625      	mov	r5, r4
 8007e6e:	4628      	mov	r0, r5
 8007e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e74:	f000 f81b 	bl	8007eae <_malloc_usable_size_r>
 8007e78:	4284      	cmp	r4, r0
 8007e7a:	4607      	mov	r7, r0
 8007e7c:	d802      	bhi.n	8007e84 <_realloc_r+0x34>
 8007e7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e82:	d812      	bhi.n	8007eaa <_realloc_r+0x5a>
 8007e84:	4621      	mov	r1, r4
 8007e86:	4640      	mov	r0, r8
 8007e88:	f7ff fc36 	bl	80076f8 <_malloc_r>
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d0ed      	beq.n	8007e6e <_realloc_r+0x1e>
 8007e92:	42bc      	cmp	r4, r7
 8007e94:	4622      	mov	r2, r4
 8007e96:	4631      	mov	r1, r6
 8007e98:	bf28      	it	cs
 8007e9a:	463a      	movcs	r2, r7
 8007e9c:	f7ff ffca 	bl	8007e34 <memcpy>
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4640      	mov	r0, r8
 8007ea4:	f7ff fbbc 	bl	8007620 <_free_r>
 8007ea8:	e7e1      	b.n	8007e6e <_realloc_r+0x1e>
 8007eaa:	4635      	mov	r5, r6
 8007eac:	e7df      	b.n	8007e6e <_realloc_r+0x1e>

08007eae <_malloc_usable_size_r>:
 8007eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eb2:	1f18      	subs	r0, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	bfbc      	itt	lt
 8007eb8:	580b      	ldrlt	r3, [r1, r0]
 8007eba:	18c0      	addlt	r0, r0, r3
 8007ebc:	4770      	bx	lr
	...

08007ec0 <_init>:
 8007ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec2:	bf00      	nop
 8007ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec6:	bc08      	pop	{r3}
 8007ec8:	469e      	mov	lr, r3
 8007eca:	4770      	bx	lr

08007ecc <_fini>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	bf00      	nop
 8007ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed2:	bc08      	pop	{r3}
 8007ed4:	469e      	mov	lr, r3
 8007ed6:	4770      	bx	lr
