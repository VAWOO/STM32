
DAC_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ae8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d7c  08006d7c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d84  08006d84  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00000a30  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a90  20000a90  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   000189bb  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ec0  00000000  00000000  00038a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001390  00000000  00000000  0003c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f14  00000000  00000000  0003dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028f70  00000000  00000000  0003ebf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ce28  00000000  00000000  00067b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f120e  00000000  00000000  0008498c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005610  00000000  00000000  00175b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0017b1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c80 	.word	0x08006c80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08006c80 	.word	0x08006c80

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b21      	ldr	r3, [pc, #132]	; (8000634 <MX_ADC1_Init+0x98>)
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <MX_ADC1_Init+0x98>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <MX_ADC1_Init+0x98>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_ADC1_Init+0x98>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_ADC1_Init+0x98>)
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <MX_ADC1_Init+0xa0>)
 80005e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_ADC1_Init+0x98>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_ADC1_Init+0x98>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <MX_ADC1_Init+0x98>)
 80005fe:	f001 f839 	bl	8001674 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000608:	f000 fd88 	bl	800111c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800060c:	2303      	movs	r3, #3
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_ADC1_Init+0x98>)
 800061e:	f001 fb05 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000628:	f000 fd78 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000007c 	.word	0x2000007c
 8000638:	40012000 	.word	0x40012000
 800063c:	0f000001 	.word	0x0f000001

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a17      	ldr	r2, [pc, #92]	; (80006bc <HAL_ADC_MspInit+0x7c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d127      	bne.n	80006b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000670:	6453      	str	r3, [r2, #68]	; 0x44
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_ADC_MspInit+0x80>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800069a:	2308      	movs	r3, #8
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <HAL_ADC_MspInit+0x84>)
 80006ae:	f002 fab5 	bl	8002c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	; 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40012000 	.word	0x40012000
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000

080006c8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_DAC_Init+0x60>)
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <MX_DAC_Init+0x64>)
 80006da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006dc:	4812      	ldr	r0, [pc, #72]	; (8000728 <MX_DAC_Init+0x60>)
 80006de:	f001 fdfb 	bl	80022d8 <HAL_DAC_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006e8:	f000 fd18 	bl	800111c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <MX_DAC_Init+0x60>)
 80006fc:	f001 fe85 	bl	800240a <HAL_DAC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000706:	f000 fd09 	bl	800111c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	2210      	movs	r2, #16
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_DAC_Init+0x60>)
 8000712:	f001 fe7a 	bl	800240a <HAL_DAC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800071c:	f000 fcfe 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000c4 	.word	0x200000c4
 800072c:	40007400 	.word	0x40007400

08000730 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a17      	ldr	r2, [pc, #92]	; (80007ac <HAL_DAC_MspInit+0x7c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d127      	bne.n	80007a2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 800075c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_DAC_MspInit+0x80>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800078a:	2330      	movs	r3, #48	; 0x30
 800078c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078e:	2303      	movs	r3, #3
 8000790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <HAL_DAC_MspInit+0x84>)
 800079e:	f002 fa3d 	bl	8002c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40007400 	.word	0x40007400
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000

080007b8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ETH_Init+0x84>)
 80007be:	4a20      	ldr	r2, [pc, #128]	; (8000840 <MX_ETH_Init+0x88>)
 80007c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_ETH_Init+0x8c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_ETH_Init+0x8c>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_ETH_Init+0x8c>)
 80007d0:	22e1      	movs	r2, #225	; 0xe1
 80007d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ETH_Init+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_ETH_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_ETH_Init+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_ETH_Init+0x84>)
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <MX_ETH_Init+0x8c>)
 80007ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_ETH_Init+0x84>)
 80007ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_ETH_Init+0x84>)
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <MX_ETH_Init+0x90>)
 80007f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_ETH_Init+0x84>)
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_ETH_Init+0x94>)
 80007fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_ETH_Init+0x84>)
 8000802:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000806:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <MX_ETH_Init+0x84>)
 800080a:	f001 fedf 	bl	80025cc <HAL_ETH_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 fc82 	bl	800111c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000818:	2238      	movs	r2, #56	; 0x38
 800081a:	2100      	movs	r1, #0
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_ETH_Init+0x98>)
 800081e:	f005 fdab 	bl	8006378 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_ETH_Init+0x98>)
 8000824:	2221      	movs	r2, #33	; 0x21
 8000826:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_ETH_Init+0x98>)
 800082a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800082e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_ETH_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000250 	.word	0x20000250
 8000840:	40028000 	.word	0x40028000
 8000844:	20000300 	.word	0x20000300
 8000848:	20000178 	.word	0x20000178
 800084c:	200000d8 	.word	0x200000d8
 8000850:	20000218 	.word	0x20000218

08000854 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08e      	sub	sp, #56	; 0x38
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a55      	ldr	r2, [pc, #340]	; (80009c8 <HAL_ETH_MspInit+0x174>)
 8000872:	4293      	cmp	r3, r2
 8000874:	f040 80a4 	bne.w	80009c0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
 800087c:	4b53      	ldr	r3, [pc, #332]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a52      	ldr	r2, [pc, #328]	; (80009cc <HAL_ETH_MspInit+0x178>)
 8000882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
 8000888:	4b50      	ldr	r3, [pc, #320]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	6a3b      	ldr	r3, [r7, #32]
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	4b4c      	ldr	r3, [pc, #304]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a4b      	ldr	r2, [pc, #300]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800089e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b49      	ldr	r3, [pc, #292]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	4b45      	ldr	r3, [pc, #276]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a44      	ldr	r2, [pc, #272]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008be:	6313      	str	r3, [r2, #48]	; 0x30
 80008c0:	4b42      	ldr	r3, [pc, #264]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d4:	4a3d      	ldr	r2, [pc, #244]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6313      	str	r3, [r2, #48]	; 0x30
 80008dc:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	4a36      	ldr	r2, [pc, #216]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6313      	str	r3, [r2, #48]	; 0x30
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <HAL_ETH_MspInit+0x178>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	4b30      	ldr	r3, [pc, #192]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a2f      	ldr	r2, [pc, #188]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <HAL_ETH_MspInit+0x178>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <HAL_ETH_MspInit+0x178>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a28      	ldr	r2, [pc, #160]	; (80009cc <HAL_ETH_MspInit+0x178>)
 800092a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <HAL_ETH_MspInit+0x178>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800093c:	2332      	movs	r3, #50	; 0x32
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094c:	230b      	movs	r3, #11
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	481e      	ldr	r0, [pc, #120]	; (80009d0 <HAL_ETH_MspInit+0x17c>)
 8000958:	f002 f960 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800095c:	2386      	movs	r3, #134	; 0x86
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800096c:	230b      	movs	r3, #11
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4817      	ldr	r0, [pc, #92]	; (80009d4 <HAL_ETH_MspInit+0x180>)
 8000978:	f002 f950 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098e:	230b      	movs	r3, #11
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	480f      	ldr	r0, [pc, #60]	; (80009d8 <HAL_ETH_MspInit+0x184>)
 800099a:	f002 f93f 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800099e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b0:	230b      	movs	r3, #11
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4808      	ldr	r0, [pc, #32]	; (80009dc <HAL_ETH_MspInit+0x188>)
 80009bc:	f002 f92e 	bl	8002c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009c0:	bf00      	nop
 80009c2:	3738      	adds	r7, #56	; 0x38
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40028000 	.word	0x40028000
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40021800 	.word	0x40021800

080009e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	4b4c      	ldr	r3, [pc, #304]	; (8000b2c <MX_GPIO_Init+0x14c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a4b      	ldr	r2, [pc, #300]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b49      	ldr	r3, [pc, #292]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a44      	ldr	r2, [pc, #272]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a3d      	ldr	r2, [pc, #244]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a36      	ldr	r2, [pc, #216]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aa4:	4822      	ldr	r0, [pc, #136]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000aa6:	f002 fa65 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2140      	movs	r1, #64	; 0x40
 8000aae:	4821      	ldr	r0, [pc, #132]	; (8000b34 <MX_GPIO_Init+0x154>)
 8000ab0:	f002 fa60 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481b      	ldr	r0, [pc, #108]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000acc:	f002 f8a6 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ad0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000aea:	f002 f897 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aee:	2340      	movs	r3, #64	; 0x40
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <MX_GPIO_Init+0x154>)
 8000b06:	f002 f889 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_GPIO_Init+0x154>)
 8000b1e:	f002 f87d 	bl	8002c1c <HAL_GPIO_Init>

}
 8000b22:	bf00      	nop
 8000b24:	3730      	adds	r7, #48	; 0x30
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40021800 	.word	0x40021800
 8000b38:	40020800 	.word	0x40020800

08000b3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <MX_I2C1_Init+0x78>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <MX_I2C1_Init+0x7c>)
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b7a:	f002 fa2f 	bl	8002fdc <HAL_I2C_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b84:	f000 faca 	bl	800111c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b8c:	f002 ff9f 	bl	8003ace <HAL_I2CEx_ConfigAnalogFilter>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000b96:	f000 fac1 	bl	800111c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b9e:	f002 ffd2 	bl	8003b46 <HAL_I2CEx_ConfigDigitalFilter>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ba8:	f000 fab8 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000308 	.word	0x20000308
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	000186a0 	.word	0x000186a0

08000bbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_I2C_MspInit+0x84>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d12c      	bne.n	8000c38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c00:	2312      	movs	r3, #18
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	480c      	ldr	r0, [pc, #48]	; (8000c48 <HAL_I2C_MspInit+0x8c>)
 8000c18:	f002 f800 	bl	8002c1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40005400 	.word	0x40005400
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020400 	.word	0x40020400

08000c4c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 8000c4c:	b5b0      	push	{r4, r5, r7, lr}
 8000c4e:	b098      	sub	sp, #96	; 0x60
 8000c50:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 8000c52:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <I2C_Scan+0xc0>)
 8000c54:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000c58:	461d      	mov	r5, r3
 8000c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c62:	6020      	str	r0, [r4, #0]
 8000c64:	3404      	adds	r4, #4
 8000c66:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000c68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fabf 	bl	80001f0 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	4824      	ldr	r0, [pc, #144]	; (8000d10 <I2C_Scan+0xc4>)
 8000c80:	f004 f85d 	bl	8004d3e <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000c8a:	e02f      	b.n	8000cec <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000c8c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	b299      	uxth	r1, r3
 8000c94:	230a      	movs	r3, #10
 8000c96:	2201      	movs	r2, #1
 8000c98:	481e      	ldr	r0, [pc, #120]	; (8000d14 <I2C_Scan+0xc8>)
 8000c9a:	f002 fbe1 	bl	8003460 <HAL_I2C_IsDeviceReady>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 8000ca4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d113      	bne.n	8000cd4 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 8000cac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000cb0:	1d38      	adds	r0, r7, #4
 8000cb2:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <I2C_Scan+0xcc>)
 8000cb4:	2140      	movs	r1, #64	; 0x40
 8000cb6:	f005 fb0b 	bl	80062d0 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fa97 	bl	80001f0 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	1d39      	adds	r1, r7, #4
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ccc:	4810      	ldr	r0, [pc, #64]	; (8000d10 <I2C_Scan+0xc4>)
 8000cce:	f004 f836 	bl	8004d3e <HAL_UART_Transmit>
 8000cd2:	e006      	b.n	8000ce2 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4910      	ldr	r1, [pc, #64]	; (8000d1c <I2C_Scan+0xd0>)
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <I2C_Scan+0xc4>)
 8000cde:	f004 f82e 	bl	8004d3e <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000ce2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000cec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf2:	d9cb      	bls.n	8000c8c <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	4909      	ldr	r1, [pc, #36]	; (8000d20 <I2C_Scan+0xd4>)
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <I2C_Scan+0xc4>)
 8000cfe:	f004 f81e 	bl	8004d3e <HAL_UART_Transmit>
}
 8000d02:	bf00      	nop
 8000d04:	3760      	adds	r7, #96	; 0x60
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bdb0      	pop	{r4, r5, r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	08006ca8 	.word	0x08006ca8
 8000d10:	200003f4 	.word	0x200003f4
 8000d14:	20000308 	.word	0x20000308
 8000d18:	08006c98 	.word	0x08006c98
 8000d1c:	08006ca0 	.word	0x08006ca0
 8000d20:	08006ca4 	.word	0x08006ca4

08000d24 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	71bb      	strb	r3, [r7, #6]
 8000d32:	4613      	mov	r3, r2
 8000d34:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	b299      	uxth	r1, r3
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4822      	ldr	r0, [pc, #136]	; (8000dcc <LCD_SendInternal+0xa8>)
 8000d42:	f002 fb8d 	bl	8003460 <HAL_I2C_IsDeviceReady>
 8000d46:	4603      	mov	r3, r0
 8000d48:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d000      	beq.n	8000d52 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000d50:	e7f1      	b.n	8000d36 <LCD_SendInternal+0x12>
            break;
 8000d52:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	f023 030f 	bic.w	r3, r3, #15
 8000d5a:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000d62:	7bba      	ldrb	r2, [r7, #14]
 8000d64:	797b      	ldrb	r3, [r7, #5]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f043 030c 	orr.w	r3, r3, #12
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000d72:	7bba      	ldrb	r2, [r7, #14]
 8000d74:	797b      	ldrb	r3, [r7, #5]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000d82:	7b7a      	ldrb	r2, [r7, #13]
 8000d84:	797b      	ldrb	r3, [r7, #5]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	f043 030c 	orr.w	r3, r3, #12
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8000d92:	7b7a      	ldrb	r2, [r7, #13]
 8000d94:	797b      	ldrb	r3, [r7, #5]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	b299      	uxth	r1, r3
 8000da6:	f107 0208 	add.w	r2, r7, #8
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2304      	movs	r3, #4
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <LCD_SendInternal+0xa8>)
 8000db4:	f002 fa56 	bl	8003264 <HAL_I2C_Master_Transmit>
 8000db8:	4603      	mov	r3, r0
 8000dba:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000dbc:	2005      	movs	r0, #5
 8000dbe:	f000 fc35 	bl	800162c <HAL_Delay>
    return res;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000308 	.word	0x20000308

08000dd0 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460a      	mov	r2, r1
 8000dda:	71fb      	strb	r3, [r7, #7]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000de0:	79b9      	ldrb	r1, [r7, #6]
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2200      	movs	r2, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff9c 	bl	8000d24 <LCD_SendInternal>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000e04:	79b9      	ldrb	r1, [r7, #6]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff8a 	bl	8000d24 <LCD_SendInternal>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2130      	movs	r1, #48	; 0x30
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ffd2 	bl	8000dd0 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2102      	movs	r1, #2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ffcd 	bl	8000dd0 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	210c      	movs	r1, #12
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffc8 	bl	8000dd0 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2101      	movs	r1, #1
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ffc3 	bl	8000dd0 <LCD_SendCommand>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	6039      	str	r1, [r7, #0]
 8000e5c:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 8000e5e:	e009      	b.n	8000e74 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ffc3 	bl	8000df4 <LCD_SendData>
        str++;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f1      	bne.n	8000e60 <LCD_SendString+0xe>
    }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_IncTick>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_IncTick(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_IncTick+0x40>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_IncTick+0x44>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_IncTick+0x44>)
 8000e9a:	6013      	str	r3, [r2, #0]
	if((uwTick%1000)==0)
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_IncTick+0x44>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_IncTick+0x48>)
 8000ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ea6:	099b      	lsrs	r3, r3, #6
 8000ea8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000eac:	fb01 f303 	mul.w	r3, r1, r3
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d106      	bne.n	8000ec4 <HAL_IncTick+0x3c>
	{
		flag = 1;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <HAL_IncTick+0x4c>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <HAL_IncTick+0x50>)
 8000ec0:	f002 f871 	bl	8002fa6 <HAL_GPIO_TogglePin>
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	2000000c 	.word	0x2000000c
 8000ecc:	20000944 	.word	0x20000944
 8000ed0:	10624dd3 	.word	0x10624dd3
 8000ed4:	200003cc 	.word	0x200003cc
 8000ed8:	40020400 	.word	0x40020400

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f000 fb45 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f899 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f7ff fd79 	bl	80009e0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000eee:	f7ff fc63 	bl	80007b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ef2:	f000 fa19 	bl	8001328 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ef6:	f000 fa89 	bl	800140c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000efa:	f7ff fb4f 	bl	800059c <MX_ADC1_Init>
  MX_DAC_Init();
 8000efe:	f7ff fbe3 	bl	80006c8 <MX_DAC_Init>
  MX_I2C1_Init();
 8000f02:	f7ff fe1b 	bl	8000b3c <MX_I2C1_Init>
  MX_RTC_Init();
 8000f06:	f000 f90f 	bl	8001128 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f0a:	f000 f8f3 	bl	80010f4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan();
 8000f0e:	f7ff fe9d 	bl	8000c4c <I2C_Scan>
  LCD_Init(LCD_ADDR);
 8000f12:	204e      	movs	r0, #78	; 0x4e
 8000f14:	f7ff ff80 	bl	8000e18 <LCD_Init>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4835      	ldr	r0, [pc, #212]	; (8000ff0 <main+0x114>)
 8000f1c:	f001 f9fe 	bl	800231c <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000f20:	2110      	movs	r1, #16
 8000f22:	4833      	ldr	r0, [pc, #204]	; (8000ff0 <main+0x114>)
 8000f24:	f001 f9fa 	bl	800231c <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000f28:	4832      	ldr	r0, [pc, #200]	; (8000ff4 <main+0x118>)
 8000f2a:	f000 fbe7 	bl	80016fc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000f2e:	210a      	movs	r1, #10
 8000f30:	4830      	ldr	r0, [pc, #192]	; (8000ff4 <main+0x118>)
 8000f32:	f000 fcb5 	bl	80018a0 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000f36:	482f      	ldr	r0, [pc, #188]	; (8000ff4 <main+0x118>)
 8000f38:	f000 fe4d 	bl	8001bd6 <HAL_ADC_GetValue>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <main+0x11c>)
 8000f42:	601a      	str	r2, [r3, #0]

	  dac_value1 = adc_value;
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <main+0x11c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a2c      	ldr	r2, [pc, #176]	; (8000ffc <main+0x120>)
 8000f4a:	6013      	str	r3, [r2, #0]
	  dac_value2 = 4095 - adc_value;
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <main+0x11c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000f54:	330f      	adds	r3, #15
 8000f56:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <main+0x124>)
 8000f58:	6013      	str	r3, [r2, #0]

	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value1);
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <main+0x120>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	4823      	ldr	r0, [pc, #140]	; (8000ff0 <main+0x114>)
 8000f64:	f001 fa2c 	bl	80023c0 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value2);
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <main+0x124>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2110      	movs	r1, #16
 8000f70:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <main+0x114>)
 8000f72:	f001 fa25 	bl	80023c0 <HAL_DAC_SetValue>

	  memset(uart_buf, 0, sizeof(uart_buf));
 8000f76:	2246      	movs	r2, #70	; 0x46
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4822      	ldr	r0, [pc, #136]	; (8001004 <main+0x128>)
 8000f7c:	f005 f9fc 	bl	8006378 <memset>
	  sprintf(uart_buf, "ADC Value: %4d  DAC1 Value: %4d  DAC2 Value: %4d\r\n", adc_value, dac_value1, dac_value2);
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <main+0x11c>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <main+0x120>)
 8000f86:	6819      	ldr	r1, [r3, #0]
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <main+0x124>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	491d      	ldr	r1, [pc, #116]	; (8001008 <main+0x12c>)
 8000f92:	481c      	ldr	r0, [pc, #112]	; (8001004 <main+0x128>)
 8000f94:	f005 f9d0 	bl	8006338 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000f98:	481a      	ldr	r0, [pc, #104]	; (8001004 <main+0x128>)
 8000f9a:	f7ff f929 	bl	80001f0 <strlen>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	4917      	ldr	r1, [pc, #92]	; (8001004 <main+0x128>)
 8000fa8:	4818      	ldr	r0, [pc, #96]	; (800100c <main+0x130>)
 8000faa:	f003 fec8 	bl	8004d3e <HAL_UART_Transmit>

	  // set address to 0x00
	  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	204e      	movs	r0, #78	; 0x4e
 8000fb2:	f7ff ff0d 	bl	8000dd0 <LCD_SendCommand>
	  LCD_SendString(LCD_ADDR, " ADC DAC1 DAC2");
 8000fb6:	4916      	ldr	r1, [pc, #88]	; (8001010 <main+0x134>)
 8000fb8:	204e      	movs	r0, #78	; 0x4e
 8000fba:	f7ff ff4a 	bl	8000e52 <LCD_SendString>

  	  // set address to 0x40
	  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000fbe:	21c0      	movs	r1, #192	; 0xc0
 8000fc0:	204e      	movs	r0, #78	; 0x4e
 8000fc2:	f7ff ff05 	bl	8000dd0 <LCD_SendCommand>
	  sprintf(lcd_string, "%4d %4d %4d", adc_value, dac_value1, dac_value2);
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <main+0x11c>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <main+0x120>)
 8000fcc:	6819      	ldr	r1, [r3, #0]
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <main+0x124>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	490f      	ldr	r1, [pc, #60]	; (8001014 <main+0x138>)
 8000fd8:	480f      	ldr	r0, [pc, #60]	; (8001018 <main+0x13c>)
 8000fda:	f005 f9ad 	bl	8006338 <siprintf>
	  LCD_SendString(LCD_ADDR, lcd_string);
 8000fde:	490e      	ldr	r1, [pc, #56]	; (8001018 <main+0x13c>)
 8000fe0:	204e      	movs	r0, #78	; 0x4e
 8000fe2:	f7ff ff36 	bl	8000e52 <LCD_SendString>

	  HAL_Delay(250);
 8000fe6:	20fa      	movs	r0, #250	; 0xfa
 8000fe8:	f000 fb20 	bl	800162c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000fec:	e79c      	b.n	8000f28 <main+0x4c>
 8000fee:	bf00      	nop
 8000ff0:	200000c4 	.word	0x200000c4
 8000ff4:	2000007c 	.word	0x2000007c
 8000ff8:	200003c4 	.word	0x200003c4
 8000ffc:	200003c8 	.word	0x200003c8
 8001000:	20000000 	.word	0x20000000
 8001004:	2000035c 	.word	0x2000035c
 8001008:	08006ce0 	.word	0x08006ce0
 800100c:	200003f4 	.word	0x200003f4
 8001010:	08006d14 	.word	0x08006d14
 8001014:	08006d24 	.word	0x08006d24
 8001018:	200003a4 	.word	0x200003a4

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	2230      	movs	r2, #48	; 0x30
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f005 f9a4 	bl	8006378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <SystemClock_Config+0xd0>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	4a28      	ldr	r2, [pc, #160]	; (80010ec <SystemClock_Config+0xd0>)
 800104a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	; 0x40
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <SystemClock_Config+0xd0>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <SystemClock_Config+0xd4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <SystemClock_Config+0xd4>)
 8001066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <SystemClock_Config+0xd4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001078:	2305      	movs	r3, #5
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800107c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001082:	2301      	movs	r3, #1
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001086:	2302      	movs	r3, #2
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001090:	2304      	movs	r3, #4
 8001092:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001094:	23a8      	movs	r3, #168	; 0xa8
 8001096:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001098:	2302      	movs	r3, #2
 800109a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800109c:	2307      	movs	r3, #7
 800109e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 feab 	bl	8003e00 <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010b0:	f000 f834 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2302      	movs	r3, #2
 80010ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2105      	movs	r1, #5
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 f90c 	bl	80042f0 <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010de:	f000 f81d 	bl	800111c <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3750      	adds	r7, #80	; 0x50
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000

080010f4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2012      	movs	r0, #18
 80010fe:	f001 f8a8 	bl	8002252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001102:	2012      	movs	r0, #18
 8001104:	f001 f8c1 	bl	800228a <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2027      	movs	r0, #39	; 0x27
 800110e:	f001 f8a0 	bl	8002252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001112:	2027      	movs	r0, #39	; 0x27
 8001114:	f001 f8b9 	bl	800228a <HAL_NVIC_EnableIRQ>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>
	...

08001128 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_RTC_Init+0x44>)
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <MX_RTC_Init+0x48>)
 8001130:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_RTC_Init+0x44>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_RTC_Init+0x44>)
 800113a:	227f      	movs	r2, #127	; 0x7f
 800113c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_RTC_Init+0x44>)
 8001140:	22ff      	movs	r2, #255	; 0xff
 8001142:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_RTC_Init+0x44>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_RTC_Init+0x44>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_RTC_Init+0x44>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_RTC_Init+0x44>)
 8001158:	f003 fcaa 	bl	8004ab0 <HAL_RTC_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001162:	f7ff ffdb 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200003d0 	.word	0x200003d0
 8001170:	40002800 	.word	0x40002800

08001174 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	2230      	movs	r2, #48	; 0x30
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f005 f8f7 	bl	8006378 <memset>
  if(rtcHandle->Instance==RTC)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <HAL_RTC_MspInit+0x4c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d111      	bne.n	80011b8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001194:	2320      	movs	r3, #32
 8001196:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fac4 	bl	8004730 <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80011ae:	f7ff ffb5 	bl	800111c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <HAL_RTC_MspInit+0x50>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3738      	adds	r7, #56	; 0x38
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40002800 	.word	0x40002800
 80011c4:	42470e3c 	.word	0x42470e3c

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_MspInit+0x4c>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x4c>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001264:	f7ff fe10 	bl	8000e88 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001268:	f001 f829 	bl	80022be <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <ADC_IRQHandler+0x10>)
 8001276:	f000 fb9e 	bl	80019b6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000007c 	.word	0x2000007c

08001284 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <USART3_IRQHandler+0x10>)
 800128a:	f003 fdeb 	bl	8004e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200003f4 	.word	0x200003f4

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f005 f85e 	bl	8006388 <__errno>
 80012cc:	4603      	mov	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <_sbrk+0x64>)
 80012e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20030000 	.word	0x20030000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	200003f0 	.word	0x200003f0
 8001300:	20000a90 	.word	0x20000a90

08001304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_USART3_UART_Init+0x4c>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <MX_USART3_UART_Init+0x50>)
 8001330:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <MX_USART3_UART_Init+0x4c>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_USART3_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_USART3_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_USART3_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_USART3_UART_Init+0x4c>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_USART3_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_USART3_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_USART3_UART_Init+0x4c>)
 8001360:	f003 fca0 	bl	8004ca4 <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800136a:	f7ff fed7 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200003f4 	.word	0x200003f4
 8001378:	40004800 	.word	0x40004800

0800137c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a19      	ldr	r2, [pc, #100]	; (8001400 <HAL_UART_MspInit+0x84>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d12c      	bne.n	80013f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_UART_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e8:	2307      	movs	r3, #7
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_UART_MspInit+0x8c>)
 80013f4:	f001 fc12 	bl	8002c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40004800 	.word	0x40004800
 8001404:	40023800 	.word	0x40023800
 8001408:	40020c00 	.word	0x40020c00

0800140c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001412:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001416:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800141a:	2204      	movs	r2, #4
 800141c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001420:	2202      	movs	r2, #2
 8001422:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142c:	2202      	movs	r2, #2
 800142e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001432:	2201      	movs	r2, #1
 8001434:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001444:	2201      	movs	r2, #1
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001450:	f002 fbb8 	bl	8003bc4 <HAL_PCD_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800145a:	f7ff fe5f 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000438 	.word	0x20000438

08001468 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001488:	d13f      	bne.n	800150a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_PCD_MspInit+0xac>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a20      	ldr	r2, [pc, #128]	; (8001514 <HAL_PCD_MspInit+0xac>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_PCD_MspInit+0xac>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014a6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014b8:	230a      	movs	r3, #10
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4815      	ldr	r0, [pc, #84]	; (8001518 <HAL_PCD_MspInit+0xb0>)
 80014c4:	f001 fbaa 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	480e      	ldr	r0, [pc, #56]	; (8001518 <HAL_PCD_MspInit+0xb0>)
 80014de:	f001 fb9d 	bl	8002c1c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_PCD_MspInit+0xac>)
 80014e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <HAL_PCD_MspInit+0xac>)
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	6353      	str	r3, [r2, #52]	; 0x34
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_PCD_MspInit+0xac>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_PCD_MspInit+0xac>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_PCD_MspInit+0xac>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001554 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001520:	480d      	ldr	r0, [pc, #52]	; (8001558 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001522:	490e      	ldr	r1, [pc, #56]	; (800155c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001538:	4c0b      	ldr	r4, [pc, #44]	; (8001568 <LoopFillZerobss+0x26>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001546:	f7ff fedd 	bl	8001304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f004 ff23 	bl	8006394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7ff fcc5 	bl	8000edc <main>
  bx  lr    
 8001552:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001554:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001560:	08006d8c 	.word	0x08006d8c
  ldr r2, =_sbss
 8001564:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001568:	20000a90 	.word	0x20000a90

0800156c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <CAN1_RX0_IRQHandler>
	...

08001570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_Init+0x40>)
 800157a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_Init+0x40>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_Init+0x40>)
 8001592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 fe4f 	bl	800223c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f808 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fe10 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fe67 	bl	80022a6 <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 fe2f 	bl	8002252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000004 	.word	0x20000004
 800160c:	2000000c 	.word	0x2000000c
 8001610:	20000008 	.word	0x20000008

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000944 	.word	0x20000944

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff ffee 	bl	8001614 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffde 	bl	8001614 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000000c 	.word	0x2000000c

08001674 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e033      	b.n	80016f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ffd4 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d118      	bne.n	80016e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016ba:	f023 0302 	bic.w	r3, r3, #2
 80016be:	f043 0202 	orr.w	r2, r3, #2
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fbe2 	bl	8001e90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f023 0303 	bic.w	r3, r3, #3
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
 80016e2:	e001      	b.n	80016e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_ADC_Start+0x1a>
 8001712:	2302      	movs	r3, #2
 8001714:	e0b2      	b.n	800187c <HAL_ADC_Start+0x180>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b01      	cmp	r3, #1
 800172a:	d018      	beq.n	800175e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800173c:	4b52      	ldr	r3, [pc, #328]	; (8001888 <HAL_ADC_Start+0x18c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a52      	ldr	r2, [pc, #328]	; (800188c <HAL_ADC_Start+0x190>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0c9a      	lsrs	r2, r3, #18
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001750:	e002      	b.n	8001758 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	3b01      	subs	r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f9      	bne.n	8001752 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b01      	cmp	r3, #1
 800176a:	d17a      	bne.n	8001862 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001796:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017aa:	d106      	bne.n	80017ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	f023 0206 	bic.w	r2, r3, #6
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	645a      	str	r2, [r3, #68]	; 0x44
 80017b8:	e002      	b.n	80017c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c8:	4b31      	ldr	r3, [pc, #196]	; (8001890 <HAL_ADC_Start+0x194>)
 80017ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d12a      	bne.n	8001838 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a2b      	ldr	r2, [pc, #172]	; (8001894 <HAL_ADC_Start+0x198>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d015      	beq.n	8001818 <HAL_ADC_Start+0x11c>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a29      	ldr	r2, [pc, #164]	; (8001898 <HAL_ADC_Start+0x19c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d105      	bne.n	8001802 <HAL_ADC_Start+0x106>
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <HAL_ADC_Start+0x194>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00a      	beq.n	8001818 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a25      	ldr	r2, [pc, #148]	; (800189c <HAL_ADC_Start+0x1a0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d136      	bne.n	800187a <HAL_ADC_Start+0x17e>
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_ADC_Start+0x194>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b00      	cmp	r3, #0
 8001816:	d130      	bne.n	800187a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d129      	bne.n	800187a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	e020      	b.n	800187a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a15      	ldr	r2, [pc, #84]	; (8001894 <HAL_ADC_Start+0x198>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d11b      	bne.n	800187a <HAL_ADC_Start+0x17e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d114      	bne.n	800187a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	e00b      	b.n	800187a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f043 0210 	orr.w	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	20000004 	.word	0x20000004
 800188c:	431bde83 	.word	0x431bde83
 8001890:	40012300 	.word	0x40012300
 8001894:	40012000 	.word	0x40012000
 8001898:	40012100 	.word	0x40012100
 800189c:	40012200 	.word	0x40012200

080018a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018bc:	d113      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018cc:	d10b      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f043 0220 	orr.w	r2, r3, #32
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e063      	b.n	80019ae <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80018e6:	f7ff fe95 	bl	8001614 <HAL_GetTick>
 80018ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018ec:	e021      	b.n	8001932 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d01d      	beq.n	8001932 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d007      	beq.n	800190c <HAL_ADC_PollForConversion+0x6c>
 80018fc:	f7ff fe8a 	bl	8001614 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d212      	bcs.n	8001932 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b02      	cmp	r3, #2
 8001918:	d00b      	beq.n	8001932 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f043 0204 	orr.w	r2, r3, #4
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e03d      	b.n	80019ae <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b02      	cmp	r3, #2
 800193e:	d1d6      	bne.n	80018ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f06f 0212 	mvn.w	r2, #18
 8001948:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d123      	bne.n	80019ac <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001968:	2b00      	cmp	r3, #0
 800196a:	d11f      	bne.n	80019ac <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001984:	2b00      	cmp	r3, #0
 8001986:	d111      	bne.n	80019ac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f043 0201 	orr.w	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d049      	beq.n	8001a80 <HAL_ADC_IRQHandler+0xca>
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d046      	beq.n	8001a80 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d12b      	bne.n	8001a70 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d127      	bne.n	8001a70 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d119      	bne.n	8001a70 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0220 	bic.w	r2, r2, #32
 8001a4a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f8bd 	bl	8001bf0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f06f 0212 	mvn.w	r2, #18
 8001a7e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d057      	beq.n	8001b46 <HAL_ADC_IRQHandler+0x190>
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d054      	beq.n	8001b46 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d105      	bne.n	8001ab4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d139      	bne.n	8001b36 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d12b      	bne.n	8001b36 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d124      	bne.n	8001b36 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d11d      	bne.n	8001b36 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d119      	bne.n	8001b36 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b10:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d105      	bne.n	8001b36 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f043 0201 	orr.w	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 faa6 	bl	8002088 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 020c 	mvn.w	r2, #12
 8001b44:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b54:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d017      	beq.n	8001b8c <HAL_ADC_IRQHandler+0x1d6>
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d014      	beq.n	8001b8c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d10d      	bne.n	8001b8c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f841 	bl	8001c04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f06f 0201 	mvn.w	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b9a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d015      	beq.n	8001bce <HAL_ADC_IRQHandler+0x218>
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d012      	beq.n	8001bce <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	f043 0202 	orr.w	r2, r3, #2
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f06f 0220 	mvn.w	r2, #32
 8001bbc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f82a 	bl	8001c18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0220 	mvn.w	r2, #32
 8001bcc:	601a      	str	r2, [r3, #0]
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1c>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e113      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x244>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b09      	cmp	r3, #9
 8001c56:	d925      	bls.n	8001ca4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68d9      	ldr	r1, [r3, #12]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b1e      	subs	r3, #30
 8001c6e:	2207      	movs	r2, #7
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43da      	mvns	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68d9      	ldr	r1, [r3, #12]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	4603      	mov	r3, r0
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4403      	add	r3, r0
 8001c96:	3b1e      	subs	r3, #30
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	e022      	b.n	8001cea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6919      	ldr	r1, [r3, #16]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	2207      	movs	r2, #7
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6919      	ldr	r1, [r3, #16]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4403      	add	r3, r0
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d824      	bhi.n	8001d3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	3b05      	subs	r3, #5
 8001d04:	221f      	movs	r2, #31
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	400a      	ands	r2, r1
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3b05      	subs	r3, #5
 8001d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	635a      	str	r2, [r3, #52]	; 0x34
 8001d3a:	e04c      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d824      	bhi.n	8001d8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	3b23      	subs	r3, #35	; 0x23
 8001d56:	221f      	movs	r2, #31
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	400a      	ands	r2, r1
 8001d64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3b23      	subs	r3, #35	; 0x23
 8001d80:	fa00 f203 	lsl.w	r2, r0, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d8c:	e023      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3b41      	subs	r3, #65	; 0x41
 8001da0:	221f      	movs	r2, #31
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	400a      	ands	r2, r1
 8001dae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b41      	subs	r3, #65	; 0x41
 8001dca:	fa00 f203 	lsl.w	r2, r0, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd6:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <HAL_ADC_ConfigChannel+0x250>)
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a28      	ldr	r2, [pc, #160]	; (8001e80 <HAL_ADC_ConfigChannel+0x254>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d10f      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1d8>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b12      	cmp	r3, #18
 8001dea:	d10b      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_ADC_ConfigChannel+0x254>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d12b      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x23a>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <HAL_ADC_ConfigChannel+0x258>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d003      	beq.n	8001e20 <HAL_ADC_ConfigChannel+0x1f4>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b11      	cmp	r3, #17
 8001e1e:	d122      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a11      	ldr	r2, [pc, #68]	; (8001e84 <HAL_ADC_ConfigChannel+0x258>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d111      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_ADC_ConfigChannel+0x25c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <HAL_ADC_ConfigChannel+0x260>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	0c9a      	lsrs	r2, r3, #18
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e58:	e002      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f9      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40012300 	.word	0x40012300
 8001e80:	40012000 	.word	0x40012000
 8001e84:	10000012 	.word	0x10000012
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	431bde83 	.word	0x431bde83

08001e90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e98:	4b79      	ldr	r3, [pc, #484]	; (8002080 <ADC_Init+0x1f0>)
 8001e9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	021a      	lsls	r2, r3, #8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ee8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6899      	ldr	r1, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	4a58      	ldr	r2, [pc, #352]	; (8002084 <ADC_Init+0x1f4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d022      	beq.n	8001f6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6899      	ldr	r1, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6899      	ldr	r1, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	e00f      	b.n	8001f8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0202 	bic.w	r2, r2, #2
 8001f9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6899      	ldr	r1, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7e1b      	ldrb	r3, [r3, #24]
 8001fa8:	005a      	lsls	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01b      	beq.n	8001ff4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6859      	ldr	r1, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	035a      	lsls	r2, r3, #13
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	e007      	b.n	8002004 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002002:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	3b01      	subs	r3, #1
 8002020:	051a      	lsls	r2, r3, #20
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002038:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002046:	025a      	lsls	r2, r3, #9
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800205e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	029a      	lsls	r2, r3, #10
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	609a      	str	r2, [r3, #8]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	40012300 	.word	0x40012300
 8002084:	0f000001 	.word	0x0f000001

08002088 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ce:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60d3      	str	r3, [r2, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <__NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	2b00      	cmp	r3, #0
 8002110:	db0b      	blt.n	800212a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4907      	ldr	r1, [pc, #28]	; (8002138 <__NVIC_EnableIRQ+0x38>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f202 	lsl.w	r2, r0, r2
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	; (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	; (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
         );
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002208:	d301      	bcc.n	800220e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e00f      	b.n	800222e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <SysTick_Config+0x40>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	210f      	movs	r1, #15
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f7ff ff8e 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <SysTick_Config+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <SysTick_Config+0x40>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff29 	bl	800209c <__NVIC_SetPriorityGrouping>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002264:	f7ff ff3e 	bl	80020e4 <__NVIC_GetPriorityGrouping>
 8002268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff ff8e 	bl	8002190 <NVIC_EncodePriority>
 8002274:	4602      	mov	r2, r0
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff5d 	bl	800213c <__NVIC_SetPriority>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff31 	bl	8002100 <__NVIC_EnableIRQ>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffa2 	bl	80021f8 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80022c2:	f000 f802 	bl	80022ca <HAL_SYSTICK_Callback>
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e014      	b.n	8002314 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	791b      	ldrb	r3, [r3, #4]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe fa18 	bl	8000730 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	795b      	ldrb	r3, [r3, #5]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_DAC_Start+0x16>
 800232e:	2302      	movs	r3, #2
 8002330:	e040      	b.n	80023b4 <HAL_DAC_Start+0x98>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2201      	movs	r2, #1
 800234c:	409a      	lsls	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10f      	bne.n	800237c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002366:	2b3c      	cmp	r3, #60	; 0x3c
 8002368:	d11d      	bne.n	80023a6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	e014      	b.n	80023a6 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	213c      	movs	r1, #60	; 0x3c
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	429a      	cmp	r2, r3
 8002394:	d107      	bne.n	80023a6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0202 	orr.w	r2, r2, #2
 80023a4:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	3308      	adds	r3, #8
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	e004      	b.n	80023f4 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	3314      	adds	r3, #20
 80023f2:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	461a      	mov	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800240a:	b480      	push	{r7}
 800240c:	b087      	sub	sp, #28
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	795b      	ldrb	r3, [r3, #5]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_DAC_ConfigChannel+0x18>
 800241e:	2302      	movs	r3, #2
 8002420:	e03c      	b.n	800249c <HAL_DAC_ConfigChannel+0x92>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2202      	movs	r2, #2
 800242c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	22c0      	movs	r2, #192	; 0xc0
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43da      	mvns	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	400a      	ands	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024b6:	f7ff f8ad 	bl	8001614 <HAL_GetTick>
 80024ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d008      	beq.n	80024da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e052      	b.n	8002580 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0216 	bic.w	r2, r2, #22
 80024e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <HAL_DMA_Abort+0x62>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0208 	bic.w	r2, r2, #8
 8002518:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252a:	e013      	b.n	8002554 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800252c:	f7ff f872 	bl	8001614 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b05      	cmp	r3, #5
 8002538:	d90c      	bls.n	8002554 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2220      	movs	r2, #32
 800253e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2203      	movs	r2, #3
 8002544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e015      	b.n	8002580 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1e4      	bne.n	800252c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	223f      	movs	r2, #63	; 0x3f
 8002568:	409a      	lsls	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d004      	beq.n	80025a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00c      	b.n	80025c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2205      	movs	r2, #5
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e06c      	b.n	80026b8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2223      	movs	r2, #35	; 0x23
 80025ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7fe f92f 	bl	8000854 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_ETH_Init+0xf4>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	4a30      	ldr	r2, [pc, #192]	; (80026c0 <HAL_ETH_Init+0xf4>)
 8002600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002604:	6453      	str	r3, [r2, #68]	; 0x44
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HAL_ETH_Init+0xf4>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002612:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <HAL_ETH_Init+0xf8>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a2b      	ldr	r2, [pc, #172]	; (80026c4 <HAL_ETH_Init+0xf8>)
 8002618:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800261c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <HAL_ETH_Init+0xf8>)
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4927      	ldr	r1, [pc, #156]	; (80026c4 <HAL_ETH_Init+0xf8>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_ETH_Init+0xf8>)
 800262e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002646:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002648:	f7fe ffe4 	bl	8001614 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800264e:	e011      	b.n	8002674 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002650:	f7fe ffe0 	bl	8001614 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800265e:	d909      	bls.n	8002674 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2204      	movs	r2, #4
 8002664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	22e0      	movs	r2, #224	; 0xe0
 800266c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e021      	b.n	80026b8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e4      	bne.n	8002650 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f958 	bl	800293c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f9ff 	bl	8002a90 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa55 	bl	8002b42 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	461a      	mov	r2, r3
 800269e:	2100      	movs	r1, #0
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f9bd 	bl	8002a20 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2210      	movs	r2, #16
 80026b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40013800 	.word	0x40013800

080026c8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4b51      	ldr	r3, [pc, #324]	; (8002824 <ETH_SetMACConfig+0x15c>)
 80026de:	4013      	ands	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	7c1b      	ldrb	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <ETH_SetMACConfig+0x28>
 80026ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026ee:	e000      	b.n	80026f2 <ETH_SetMACConfig+0x2a>
 80026f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	7c5b      	ldrb	r3, [r3, #17]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <ETH_SetMACConfig+0x38>
 80026fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026fe:	e000      	b.n	8002702 <ETH_SetMACConfig+0x3a>
 8002700:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002702:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002708:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	7fdb      	ldrb	r3, [r3, #31]
 800270e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002710:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002716:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	7f92      	ldrb	r2, [r2, #30]
 800271c:	2a00      	cmp	r2, #0
 800271e:	d102      	bne.n	8002726 <ETH_SetMACConfig+0x5e>
 8002720:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002724:	e000      	b.n	8002728 <ETH_SetMACConfig+0x60>
 8002726:	2200      	movs	r2, #0
                        macconf->Speed |
 8002728:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	7f1b      	ldrb	r3, [r3, #28]
 800272e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002730:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002736:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	791b      	ldrb	r3, [r3, #4]
 800273c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800273e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002746:	2a00      	cmp	r2, #0
 8002748:	d102      	bne.n	8002750 <ETH_SetMACConfig+0x88>
 800274a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800274e:	e000      	b.n	8002752 <ETH_SetMACConfig+0x8a>
 8002750:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002752:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	7bdb      	ldrb	r3, [r3, #15]
 8002758:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800275a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002760:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002768:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800276a:	4313      	orrs	r3, r2
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002782:	2001      	movs	r0, #1
 8002784:	f7fe ff52 	bl	800162c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027ae:	2a00      	cmp	r2, #0
 80027b0:	d101      	bne.n	80027b6 <ETH_SetMACConfig+0xee>
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	e000      	b.n	80027b8 <ETH_SetMACConfig+0xf0>
 80027b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80027c6:	2a01      	cmp	r2, #1
 80027c8:	d101      	bne.n	80027ce <ETH_SetMACConfig+0x106>
 80027ca:	2208      	movs	r2, #8
 80027cc:	e000      	b.n	80027d0 <ETH_SetMACConfig+0x108>
 80027ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80027d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80027d8:	2a01      	cmp	r2, #1
 80027da:	d101      	bne.n	80027e0 <ETH_SetMACConfig+0x118>
 80027dc:	2204      	movs	r2, #4
 80027de:	e000      	b.n	80027e2 <ETH_SetMACConfig+0x11a>
 80027e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80027ea:	2a01      	cmp	r2, #1
 80027ec:	d101      	bne.n	80027f2 <ETH_SetMACConfig+0x12a>
 80027ee:	2202      	movs	r2, #2
 80027f0:	e000      	b.n	80027f4 <ETH_SetMACConfig+0x12c>
 80027f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027f4:	4313      	orrs	r3, r2
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800280c:	2001      	movs	r0, #1
 800280e:	f7fe ff0d 	bl	800162c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	ff20810f 	.word	0xff20810f

08002828 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <ETH_SetDMAConfig+0x110>)
 8002842:	4013      	ands	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	7b1b      	ldrb	r3, [r3, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <ETH_SetDMAConfig+0x2c>
 800284e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002852:	e000      	b.n	8002856 <ETH_SetDMAConfig+0x2e>
 8002854:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	7b5b      	ldrb	r3, [r3, #13]
 800285a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800285c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	7f52      	ldrb	r2, [r2, #29]
 8002862:	2a00      	cmp	r2, #0
 8002864:	d102      	bne.n	800286c <ETH_SetDMAConfig+0x44>
 8002866:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800286a:	e000      	b.n	800286e <ETH_SetDMAConfig+0x46>
 800286c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800286e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	7b9b      	ldrb	r3, [r3, #14]
 8002874:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002876:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800287c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7f1b      	ldrb	r3, [r3, #28]
 8002882:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002884:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	7f9b      	ldrb	r3, [r3, #30]
 800288a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800288c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002892:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800289a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800289c:	4313      	orrs	r3, r2
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ac:	461a      	mov	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028be:	2001      	movs	r0, #1
 80028c0:	f7fe feb4 	bl	800162c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028cc:	461a      	mov	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	791b      	ldrb	r3, [r3, #4]
 80028d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80028e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80028f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002900:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800290a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800290e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800291c:	2001      	movs	r0, #1
 800291e:	f7fe fe85 	bl	800162c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	f8de3f23 	.word	0xf8de3f23

0800293c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b0a6      	sub	sp, #152	; 0x98
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002950:	2300      	movs	r3, #0
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800295a:	2301      	movs	r3, #1
 800295c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002966:	2301      	movs	r3, #1
 8002968:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002978:	2300      	movs	r3, #0
 800297a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002982:	2300      	movs	r3, #0
 8002984:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800299e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029b4:	4619      	mov	r1, r3
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fe86 	bl	80026c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029bc:	2301      	movs	r3, #1
 80029be:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80029ca:	2301      	movs	r3, #1
 80029cc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80029de:	2300      	movs	r3, #0
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029e8:	2301      	movs	r3, #1
 80029ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029f0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a0c:	f107 0308 	add.w	r3, r7, #8
 8002a10:	4619      	mov	r1, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ff08 	bl	8002828 <ETH_SetDMAConfig>
}
 8002a18:	bf00      	nop
 8002a1a:	3798      	adds	r7, #152	; 0x98
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3305      	adds	r3, #5
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	3204      	adds	r2, #4
 8002a38:	7812      	ldrb	r2, [r2, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <ETH_MACAddressConfig+0x68>)
 8002a42:	4413      	add	r3, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3303      	adds	r3, #3
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	061a      	lsls	r2, r3, #24
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3302      	adds	r3, #2
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	4313      	orrs	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <ETH_MACAddressConfig+0x6c>)
 8002a72:	4413      	add	r3, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	6013      	str	r3, [r2, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40028040 	.word	0x40028040
 8002a8c:	40028044 	.word	0x40028044

08002a90 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	e03e      	b.n	8002b1c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68d9      	ldr	r1, [r3, #12]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	3206      	adds	r2, #6
 8002ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d80c      	bhi.n	8002b00 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68d9      	ldr	r1, [r3, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	461a      	mov	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	e004      	b.n	8002b0a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d9bd      	bls.n	8002a9e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b34:	611a      	str	r2, [r3, #16]
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b085      	sub	sp, #20
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e046      	b.n	8002bde <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6919      	ldr	r1, [r3, #16]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b8c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002b94:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	3212      	adds	r2, #18
 8002baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d80c      	bhi.n	8002bce <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6919      	ldr	r1, [r3, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	e004      	b.n	8002bd8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d9b5      	bls.n	8002b50 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c0e:	60da      	str	r2, [r3, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e177      	b.n	8002f28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	f040 8166 	bne.w	8002f22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d005      	beq.n	8002c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d130      	bne.n	8002cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	2203      	movs	r2, #3
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 0201 	and.w	r2, r3, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d017      	beq.n	8002d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d123      	bne.n	8002d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	220f      	movs	r2, #15
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	69b9      	ldr	r1, [r7, #24]
 8002d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0203 	and.w	r2, r3, #3
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80c0 	beq.w	8002f22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <HAL_GPIO_Init+0x324>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <HAL_GPIO_Init+0x324>)
 8002dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db0:	6453      	str	r3, [r2, #68]	; 0x44
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_GPIO_Init+0x324>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dbe:	4a61      	ldr	r2, [pc, #388]	; (8002f44 <HAL_GPIO_Init+0x328>)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a58      	ldr	r2, [pc, #352]	; (8002f48 <HAL_GPIO_Init+0x32c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d037      	beq.n	8002e5a <HAL_GPIO_Init+0x23e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a57      	ldr	r2, [pc, #348]	; (8002f4c <HAL_GPIO_Init+0x330>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d031      	beq.n	8002e56 <HAL_GPIO_Init+0x23a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a56      	ldr	r2, [pc, #344]	; (8002f50 <HAL_GPIO_Init+0x334>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02b      	beq.n	8002e52 <HAL_GPIO_Init+0x236>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a55      	ldr	r2, [pc, #340]	; (8002f54 <HAL_GPIO_Init+0x338>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d025      	beq.n	8002e4e <HAL_GPIO_Init+0x232>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a54      	ldr	r2, [pc, #336]	; (8002f58 <HAL_GPIO_Init+0x33c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01f      	beq.n	8002e4a <HAL_GPIO_Init+0x22e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a53      	ldr	r2, [pc, #332]	; (8002f5c <HAL_GPIO_Init+0x340>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d019      	beq.n	8002e46 <HAL_GPIO_Init+0x22a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a52      	ldr	r2, [pc, #328]	; (8002f60 <HAL_GPIO_Init+0x344>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_GPIO_Init+0x226>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a51      	ldr	r2, [pc, #324]	; (8002f64 <HAL_GPIO_Init+0x348>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00d      	beq.n	8002e3e <HAL_GPIO_Init+0x222>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a50      	ldr	r2, [pc, #320]	; (8002f68 <HAL_GPIO_Init+0x34c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <HAL_GPIO_Init+0x21e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4f      	ldr	r2, [pc, #316]	; (8002f6c <HAL_GPIO_Init+0x350>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_GPIO_Init+0x21a>
 8002e32:	2309      	movs	r3, #9
 8002e34:	e012      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e36:	230a      	movs	r3, #10
 8002e38:	e010      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	e00e      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e3e:	2307      	movs	r3, #7
 8002e40:	e00c      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e42:	2306      	movs	r3, #6
 8002e44:	e00a      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e46:	2305      	movs	r3, #5
 8002e48:	e008      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e006      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e004      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e002      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_GPIO_Init+0x240>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	f002 0203 	and.w	r2, r2, #3
 8002e62:	0092      	lsls	r2, r2, #2
 8002e64:	4093      	lsls	r3, r2
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e6c:	4935      	ldr	r1, [pc, #212]	; (8002f44 <HAL_GPIO_Init+0x328>)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	3302      	adds	r3, #2
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e7a:	4b3d      	ldr	r3, [pc, #244]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e9e:	4a34      	ldr	r2, [pc, #208]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea4:	4b32      	ldr	r3, [pc, #200]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec8:	4a29      	ldr	r2, [pc, #164]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ece:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ef2:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <HAL_GPIO_Init+0x354>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3301      	adds	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b0f      	cmp	r3, #15
 8002f2c:	f67f ae84 	bls.w	8002c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40013800 	.word	0x40013800
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40021400 	.word	0x40021400
 8002f60:	40021800 	.word	0x40021800
 8002f64:	40021c00 	.word	0x40021c00
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40022400 	.word	0x40022400
 8002f70:	40013c00 	.word	0x40013c00

08002f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
 8002f80:	4613      	mov	r3, r2
 8002f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f84:	787b      	ldrb	r3, [r7, #1]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f90:	e003      	b.n	8002f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	041a      	lsls	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	619a      	str	r2, [r3, #24]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fb8:	887a      	ldrh	r2, [r7, #2]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	041a      	lsls	r2, r3, #16
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	43d9      	mvns	r1, r3
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	400b      	ands	r3, r1
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	619a      	str	r2, [r3, #24]
}
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e12b      	b.n	8003246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd fdda 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800303e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003040:	f001 fb4e 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8003044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4a81      	ldr	r2, [pc, #516]	; (8003250 <HAL_I2C_Init+0x274>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d807      	bhi.n	8003060 <HAL_I2C_Init+0x84>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a80      	ldr	r2, [pc, #512]	; (8003254 <HAL_I2C_Init+0x278>)
 8003054:	4293      	cmp	r3, r2
 8003056:	bf94      	ite	ls
 8003058:	2301      	movls	r3, #1
 800305a:	2300      	movhi	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e006      	b.n	800306e <HAL_I2C_Init+0x92>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a7d      	ldr	r2, [pc, #500]	; (8003258 <HAL_I2C_Init+0x27c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	bf94      	ite	ls
 8003068:	2301      	movls	r3, #1
 800306a:	2300      	movhi	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0e7      	b.n	8003246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4a78      	ldr	r2, [pc, #480]	; (800325c <HAL_I2C_Init+0x280>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0c9b      	lsrs	r3, r3, #18
 8003080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4a6a      	ldr	r2, [pc, #424]	; (8003250 <HAL_I2C_Init+0x274>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d802      	bhi.n	80030b0 <HAL_I2C_Init+0xd4>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3301      	adds	r3, #1
 80030ae:	e009      	b.n	80030c4 <HAL_I2C_Init+0xe8>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	4a69      	ldr	r2, [pc, #420]	; (8003260 <HAL_I2C_Init+0x284>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	3301      	adds	r3, #1
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	495c      	ldr	r1, [pc, #368]	; (8003250 <HAL_I2C_Init+0x274>)
 80030e0:	428b      	cmp	r3, r1
 80030e2:	d819      	bhi.n	8003118 <HAL_I2C_Init+0x13c>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1e59      	subs	r1, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f2:	1c59      	adds	r1, r3, #1
 80030f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030f8:	400b      	ands	r3, r1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_I2C_Init+0x138>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e59      	subs	r1, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fbb1 f3f3 	udiv	r3, r1, r3
 800310c:	3301      	adds	r3, #1
 800310e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003112:	e051      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003114:	2304      	movs	r3, #4
 8003116:	e04f      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d111      	bne.n	8003144 <HAL_I2C_Init+0x168>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e58      	subs	r0, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e012      	b.n	800316a <HAL_I2C_Init+0x18e>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	0099      	lsls	r1, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	fbb0 f3f3 	udiv	r3, r0, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Init+0x196>
 800316e:	2301      	movs	r3, #1
 8003170:	e022      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10e      	bne.n	8003198 <HAL_I2C_Init+0x1bc>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1e58      	subs	r0, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	440b      	add	r3, r1
 8003188:	fbb0 f3f3 	udiv	r3, r0, r3
 800318c:	3301      	adds	r3, #1
 800318e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003196:	e00f      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e58      	subs	r0, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	0099      	lsls	r1, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	6809      	ldr	r1, [r1, #0]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6911      	ldr	r1, [r2, #16]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68d2      	ldr	r2, [r2, #12]
 80031f2:	4311      	orrs	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	000186a0 	.word	0x000186a0
 8003254:	001e847f 	.word	0x001e847f
 8003258:	003d08ff 	.word	0x003d08ff
 800325c:	431bde83 	.word	0x431bde83
 8003260:	10624dd3 	.word	0x10624dd3

08003264 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	461a      	mov	r2, r3
 8003270:	460b      	mov	r3, r1
 8003272:	817b      	strh	r3, [r7, #10]
 8003274:	4613      	mov	r3, r2
 8003276:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7fe f9cc 	bl	8001614 <HAL_GetTick>
 800327c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	f040 80e0 	bne.w	800344c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2319      	movs	r3, #25
 8003292:	2201      	movs	r2, #1
 8003294:	4970      	ldr	r1, [pc, #448]	; (8003458 <HAL_I2C_Master_Transmit+0x1f4>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fa92 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
 80032a4:	e0d3      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2C_Master_Transmit+0x50>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e0cc      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d007      	beq.n	80032da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2221      	movs	r2, #33	; 0x21
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2210      	movs	r2, #16
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	893a      	ldrh	r2, [r7, #8]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a50      	ldr	r2, [pc, #320]	; (800345c <HAL_I2C_Master_Transmit+0x1f8>)
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800331c:	8979      	ldrh	r1, [r7, #10]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	6a3a      	ldr	r2, [r7, #32]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f9ca 	bl	80036bc <I2C_MasterRequestWrite>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e08d      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003348:	e066      	b.n	8003418 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	6a39      	ldr	r1, [r7, #32]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fb0c 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b04      	cmp	r3, #4
 8003360:	d107      	bne.n	8003372 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e06b      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d11b      	bne.n	80033ec <HAL_I2C_Master_Transmit+0x188>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d017      	beq.n	80033ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	6a39      	ldr	r1, [r7, #32]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fafc 	bl	80039ee <I2C_WaitOnBTFFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00d      	beq.n	8003418 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	2b04      	cmp	r3, #4
 8003402:	d107      	bne.n	8003414 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003412:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e01a      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d194      	bne.n	800334a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	e000      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	00100002 	.word	0x00100002
 800345c:	ffff0000 	.word	0xffff0000

08003460 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	460b      	mov	r3, r1
 800346e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003470:	f7fe f8d0 	bl	8001614 <HAL_GetTick>
 8003474:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b20      	cmp	r3, #32
 8003484:	f040 8111 	bne.w	80036aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2319      	movs	r3, #25
 800348e:	2201      	movs	r2, #1
 8003490:	4988      	ldr	r1, [pc, #544]	; (80036b4 <HAL_I2C_IsDeviceReady+0x254>)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f994 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	e104      	b.n	80036ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_I2C_IsDeviceReady+0x50>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0fd      	b.n	80036ac <HAL_I2C_IsDeviceReady+0x24c>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d007      	beq.n	80034d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2224      	movs	r2, #36	; 0x24
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a70      	ldr	r2, [pc, #448]	; (80036b8 <HAL_I2C_IsDeviceReady+0x258>)
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003508:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2200      	movs	r2, #0
 8003512:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f952 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00d      	beq.n	800353e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003530:	d103      	bne.n	800353a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0b6      	b.n	80036ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800353e:	897b      	ldrh	r3, [r7, #10]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800354c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800354e:	f7fe f861 	bl	8001614 <HAL_GetTick>
 8003552:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b02      	cmp	r3, #2
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003582:	e025      	b.n	80035d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003584:	f7fe f846 	bl	8001614 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d302      	bcc.n	800359a <HAL_I2C_IsDeviceReady+0x13a>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d103      	bne.n	80035a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	22a0      	movs	r2, #160	; 0xa0
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2ba0      	cmp	r3, #160	; 0xa0
 80035da:	d005      	beq.n	80035e8 <HAL_I2C_IsDeviceReady+0x188>
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d102      	bne.n	80035e8 <HAL_I2C_IsDeviceReady+0x188>
 80035e2:	7dbb      	ldrb	r3, [r7, #22]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0cd      	beq.n	8003584 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d129      	bne.n	8003652 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	2319      	movs	r3, #25
 800362a:	2201      	movs	r2, #1
 800362c:	4921      	ldr	r1, [pc, #132]	; (80036b4 <HAL_I2C_IsDeviceReady+0x254>)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f8c6 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e036      	b.n	80036ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e02c      	b.n	80036ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003660:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800366a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2319      	movs	r3, #25
 8003672:	2201      	movs	r2, #1
 8003674:	490f      	ldr	r1, [pc, #60]	; (80036b4 <HAL_I2C_IsDeviceReady+0x254>)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f8a2 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e012      	b.n	80036ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	3301      	adds	r3, #1
 800368a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	f4ff af32 	bcc.w	80034fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
  }
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	00100002 	.word	0x00100002
 80036b8:	ffff0000 	.word	0xffff0000

080036bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	460b      	mov	r3, r1
 80036ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d006      	beq.n	80036e6 <I2C_MasterRequestWrite+0x2a>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d003      	beq.n	80036e6 <I2C_MasterRequestWrite+0x2a>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036e4:	d108      	bne.n	80036f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e00b      	b.n	8003710 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	2b12      	cmp	r3, #18
 80036fe:	d107      	bne.n	8003710 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f84f 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003736:	d103      	bne.n	8003740 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e035      	b.n	80037b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800374c:	d108      	bne.n	8003760 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800374e:	897b      	ldrh	r3, [r7, #10]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800375c:	611a      	str	r2, [r3, #16]
 800375e:	e01b      	b.n	8003798 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003760:	897b      	ldrh	r3, [r7, #10]
 8003762:	11db      	asrs	r3, r3, #7
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 0306 	and.w	r3, r3, #6
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f063 030f 	orn	r3, r3, #15
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	490e      	ldr	r1, [pc, #56]	; (80037b8 <I2C_MasterRequestWrite+0xfc>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f875 	bl	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e010      	b.n	80037b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4907      	ldr	r1, [pc, #28]	; (80037bc <I2C_MasterRequestWrite+0x100>)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f865 	bl	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	00010008 	.word	0x00010008
 80037bc:	00010002 	.word	0x00010002

080037c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d0:	e025      	b.n	800381e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d021      	beq.n	800381e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037da:	f7fd ff1b 	bl	8001614 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d302      	bcc.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d116      	bne.n	800381e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e023      	b.n	8003866 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d10d      	bne.n	8003844 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	e00c      	b.n	800385e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	429a      	cmp	r2, r3
 8003862:	d0b6      	beq.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800387c:	e051      	b.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388c:	d123      	bne.n	80038d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0204 	orr.w	r2, r3, #4
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e046      	b.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d021      	beq.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fd fe99 	bl	8001614 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d116      	bne.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e020      	b.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d10c      	bne.n	8003946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	43da      	mvns	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4013      	ands	r3, r2
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e00b      	b.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	43da      	mvns	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4013      	ands	r3, r2
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d18d      	bne.n	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003978:	e02d      	b.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f878 	bl	8003a70 <I2C_IsAcknowledgeFailed>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e02d      	b.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d021      	beq.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fd fe3f 	bl	8001614 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d116      	bne.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f043 0220 	orr.w	r2, r3, #32
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e007      	b.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e0:	2b80      	cmp	r3, #128	; 0x80
 80039e2:	d1ca      	bne.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039fa:	e02d      	b.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f837 	bl	8003a70 <I2C_IsAcknowledgeFailed>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e02d      	b.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d021      	beq.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a14:	f7fd fdfe 	bl	8001614 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e007      	b.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d1ca      	bne.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a86:	d11b      	bne.n	8003ac0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f043 0204 	orr.w	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d129      	bne.n	8003b38 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2224      	movs	r2, #36	; 0x24
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0210 	bic.w	r2, r2, #16
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d12a      	bne.n	8003bb6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2224      	movs	r2, #36	; 0x24
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003b80:	89fb      	ldrh	r3, [r7, #14]
 8003b82:	f023 030f 	bic.w	r3, r3, #15
 8003b86:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	89fb      	ldrh	r3, [r7, #14]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	89fa      	ldrh	r2, [r7, #14]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b08f      	sub	sp, #60	; 0x3c
 8003bc8:	af0a      	add	r7, sp, #40	; 0x28
 8003bca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e10f      	b.n	8003df6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fd fc39 	bl	8001468 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f002 f8ba 	bl	8005d8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	687e      	ldr	r6, [r7, #4]
 8003c22:	466d      	mov	r5, sp
 8003c24:	f106 0410 	add.w	r4, r6, #16
 8003c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c34:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c38:	1d33      	adds	r3, r6, #4
 8003c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c3c:	6838      	ldr	r0, [r7, #0]
 8003c3e:	f002 f845 	bl	8005ccc <USB_CoreInit>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0d0      	b.n	8003df6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f002 f8a8 	bl	8005db0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]
 8003c64:	e04a      	b.n	8003cfc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c66:	7bfa      	ldrb	r2, [r7, #15]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	333d      	adds	r3, #61	; 0x3d
 8003c76:	2201      	movs	r2, #1
 8003c78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c7a:	7bfa      	ldrb	r2, [r7, #15]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	333c      	adds	r3, #60	; 0x3c
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c8e:	7bfa      	ldrb	r2, [r7, #15]
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	b298      	uxth	r0, r3
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	3344      	adds	r3, #68	; 0x44
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3340      	adds	r3, #64	; 0x40
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3348      	adds	r3, #72	; 0x48
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cce:	7bfa      	ldrb	r2, [r7, #15]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	334c      	adds	r3, #76	; 0x4c
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ce2:	7bfa      	ldrb	r2, [r7, #15]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	3354      	adds	r3, #84	; 0x54
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3af      	bcc.n	8003c66 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	e044      	b.n	8003d96 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d34:	7bfa      	ldrb	r2, [r7, #15]
 8003d36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d64:	7bfa      	ldrb	r2, [r7, #15]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d7a:	7bfa      	ldrb	r2, [r7, #15]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	3301      	adds	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	7bfa      	ldrb	r2, [r7, #15]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d3b5      	bcc.n	8003d0c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	687e      	ldr	r6, [r7, #4]
 8003da8:	466d      	mov	r5, sp
 8003daa:	f106 0410 	add.w	r4, r6, #16
 8003dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dba:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dbe:	1d33      	adds	r3, r6, #4
 8003dc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc2:	6838      	ldr	r0, [r7, #0]
 8003dc4:	f002 f840 	bl	8005e48 <USB_DevInit>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00d      	b.n	8003df6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f002 fa0b 	bl	800620a <USB_DevDisconnect>

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e267      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d075      	beq.n	8003f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e1e:	4b88      	ldr	r3, [pc, #544]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d00c      	beq.n	8003e44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2a:	4b85      	ldr	r3, [pc, #532]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d112      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e36:	4b82      	ldr	r3, [pc, #520]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	4b7e      	ldr	r3, [pc, #504]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d05b      	beq.n	8003f08 <HAL_RCC_OscConfig+0x108>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d157      	bne.n	8003f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e242      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d106      	bne.n	8003e74 <HAL_RCC_OscConfig+0x74>
 8003e66:	4b76      	ldr	r3, [pc, #472]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a75      	ldr	r2, [pc, #468]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e01d      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x98>
 8003e7e:	4b70      	ldr	r3, [pc, #448]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a6f      	ldr	r2, [pc, #444]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b6d      	ldr	r3, [pc, #436]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a6c      	ldr	r2, [pc, #432]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e98:	4b69      	ldr	r3, [pc, #420]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a68      	ldr	r2, [pc, #416]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b66      	ldr	r3, [pc, #408]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a65      	ldr	r2, [pc, #404]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fd fbac 	bl	8001614 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fd fba8 	bl	8001614 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e207      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b5b      	ldr	r3, [pc, #364]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xc0>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fb98 	bl	8001614 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fd fb94 	bl	8001614 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e1f3      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	4b51      	ldr	r3, [pc, #324]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0xe8>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d063      	beq.n	8003fde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f16:	4b4a      	ldr	r3, [pc, #296]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f22:	4b47      	ldr	r3, [pc, #284]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d11c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2e:	4b44      	ldr	r3, [pc, #272]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d116      	bne.n	8003f68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	4b41      	ldr	r3, [pc, #260]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_RCC_OscConfig+0x152>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e1c7      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f52:	4b3b      	ldr	r3, [pc, #236]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4937      	ldr	r1, [pc, #220]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f66:	e03a      	b.n	8003fde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d020      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f70:	4b34      	ldr	r3, [pc, #208]	; (8004044 <HAL_RCC_OscConfig+0x244>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fd fb4d 	bl	8001614 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f7e:	f7fd fb49 	bl	8001614 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e1a8      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f90:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9c:	4b28      	ldr	r3, [pc, #160]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4925      	ldr	r1, [pc, #148]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
 8003fb0:	e015      	b.n	8003fde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb2:	4b24      	ldr	r3, [pc, #144]	; (8004044 <HAL_RCC_OscConfig+0x244>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fd fb2c 	bl	8001614 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc0:	f7fd fb28 	bl	8001614 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e187      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d036      	beq.n	8004058 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_RCC_OscConfig+0x248>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fd fb0c 	bl	8001614 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004000:	f7fd fb08 	bl	8001614 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e167      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_OscConfig+0x240>)
 8004014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x200>
 800401e:	e01b      	b.n	8004058 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_RCC_OscConfig+0x248>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004026:	f7fd faf5 	bl	8001614 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	e00e      	b.n	800404c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800402e:	f7fd faf1 	bl	8001614 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d907      	bls.n	800404c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e150      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
 8004040:	40023800 	.word	0x40023800
 8004044:	42470000 	.word	0x42470000
 8004048:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404c:	4b88      	ldr	r3, [pc, #544]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 800404e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1ea      	bne.n	800402e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8097 	beq.w	8004194 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004066:	2300      	movs	r3, #0
 8004068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800406a:	4b81      	ldr	r3, [pc, #516]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10f      	bne.n	8004096 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	4b7d      	ldr	r3, [pc, #500]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	4a7c      	ldr	r2, [pc, #496]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 8004080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004084:	6413      	str	r3, [r2, #64]	; 0x40
 8004086:	4b7a      	ldr	r3, [pc, #488]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004092:	2301      	movs	r3, #1
 8004094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	4b77      	ldr	r3, [pc, #476]	; (8004274 <HAL_RCC_OscConfig+0x474>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d118      	bne.n	80040d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a2:	4b74      	ldr	r3, [pc, #464]	; (8004274 <HAL_RCC_OscConfig+0x474>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a73      	ldr	r2, [pc, #460]	; (8004274 <HAL_RCC_OscConfig+0x474>)
 80040a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ae:	f7fd fab1 	bl	8001614 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b6:	f7fd faad 	bl	8001614 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e10c      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c8:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <HAL_RCC_OscConfig+0x474>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d106      	bne.n	80040ea <HAL_RCC_OscConfig+0x2ea>
 80040dc:	4b64      	ldr	r3, [pc, #400]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	4a63      	ldr	r2, [pc, #396]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6713      	str	r3, [r2, #112]	; 0x70
 80040e8:	e01c      	b.n	8004124 <HAL_RCC_OscConfig+0x324>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d10c      	bne.n	800410c <HAL_RCC_OscConfig+0x30c>
 80040f2:	4b5f      	ldr	r3, [pc, #380]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	4a5e      	ldr	r2, [pc, #376]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	6713      	str	r3, [r2, #112]	; 0x70
 80040fe:	4b5c      	ldr	r3, [pc, #368]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	4a5b      	ldr	r2, [pc, #364]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6713      	str	r3, [r2, #112]	; 0x70
 800410a:	e00b      	b.n	8004124 <HAL_RCC_OscConfig+0x324>
 800410c:	4b58      	ldr	r3, [pc, #352]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	4a57      	ldr	r2, [pc, #348]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	; 0x70
 8004118:	4b55      	ldr	r3, [pc, #340]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	4a54      	ldr	r2, [pc, #336]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 800411e:	f023 0304 	bic.w	r3, r3, #4
 8004122:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d015      	beq.n	8004158 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fd fa72 	bl	8001614 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f7fd fa6e 	bl	8001614 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e0cb      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414a:	4b49      	ldr	r3, [pc, #292]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0ee      	beq.n	8004134 <HAL_RCC_OscConfig+0x334>
 8004156:	e014      	b.n	8004182 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004158:	f7fd fa5c 	bl	8001614 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fd fa58 	bl	8001614 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e0b5      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004176:	4b3e      	ldr	r3, [pc, #248]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ee      	bne.n	8004160 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d105      	bne.n	8004194 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004188:	4b39      	ldr	r3, [pc, #228]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	4a38      	ldr	r2, [pc, #224]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 800418e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004192:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80a1 	beq.w	80042e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800419e:	4b34      	ldr	r3, [pc, #208]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d05c      	beq.n	8004264 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d141      	bne.n	8004236 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b2:	4b31      	ldr	r3, [pc, #196]	; (8004278 <HAL_RCC_OscConfig+0x478>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fd fa2c 	bl	8001614 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fd fa28 	bl	8001614 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e087      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d2:	4b27      	ldr	r3, [pc, #156]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69da      	ldr	r2, [r3, #28]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	019b      	lsls	r3, r3, #6
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	3b01      	subs	r3, #1
 80041f8:	041b      	lsls	r3, r3, #16
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	491b      	ldr	r1, [pc, #108]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004208:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <HAL_RCC_OscConfig+0x478>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420e:	f7fd fa01 	bl	8001614 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004216:	f7fd f9fd 	bl	8001614 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e05c      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x416>
 8004234:	e054      	b.n	80042e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <HAL_RCC_OscConfig+0x478>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fd f9ea 	bl	8001614 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004244:	f7fd f9e6 	bl	8001614 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e045      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_RCC_OscConfig+0x470>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x444>
 8004262:	e03d      	b.n	80042e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d107      	bne.n	800427c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e038      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
 8004270:	40023800 	.word	0x40023800
 8004274:	40007000 	.word	0x40007000
 8004278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800427c:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <HAL_RCC_OscConfig+0x4ec>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d028      	beq.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d121      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d11a      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d111      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	3b01      	subs	r3, #1
 80042c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023800 	.word	0x40023800

080042f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0cc      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004304:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d90c      	bls.n	800432c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b65      	ldr	r3, [pc, #404]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0b8      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004344:	4b59      	ldr	r3, [pc, #356]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a58      	ldr	r2, [pc, #352]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800434e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800435c:	4b53      	ldr	r3, [pc, #332]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a52      	ldr	r2, [pc, #328]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004368:	4b50      	ldr	r3, [pc, #320]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	494d      	ldr	r1, [pc, #308]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d044      	beq.n	8004410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b47      	ldr	r3, [pc, #284]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d119      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e07f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d003      	beq.n	80043ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e067      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ce:	4b37      	ldr	r3, [pc, #220]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f023 0203 	bic.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4934      	ldr	r1, [pc, #208]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e0:	f7fd f918 	bl	8001614 <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e8:	f7fd f914 	bl	8001614 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e04f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 020c 	and.w	r2, r3, #12
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	429a      	cmp	r2, r3
 800440e:	d1eb      	bne.n	80043e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d20c      	bcs.n	8004438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e032      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004444:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4916      	ldr	r1, [pc, #88]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	490e      	ldr	r1, [pc, #56]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004476:	f000 f821 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 800447a:	4602      	mov	r2, r0
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	490a      	ldr	r1, [pc, #40]	; (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004488:	5ccb      	ldrb	r3, [r1, r3]
 800448a:	fa22 f303 	lsr.w	r3, r2, r3
 800448e:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd f88c 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023c00 	.word	0x40023c00
 80044ac:	40023800 	.word	0x40023800
 80044b0:	08006d30 	.word	0x08006d30
 80044b4:	20000004 	.word	0x20000004
 80044b8:	20000008 	.word	0x20000008

080044bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c0:	b094      	sub	sp, #80	; 0x50
 80044c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	647b      	str	r3, [r7, #68]	; 0x44
 80044c8:	2300      	movs	r3, #0
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044cc:	2300      	movs	r3, #0
 80044ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d4:	4b79      	ldr	r3, [pc, #484]	; (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 030c 	and.w	r3, r3, #12
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d00d      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x40>
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	f200 80e1 	bhi.w	80046a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d003      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ee:	e0db      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f0:	4b73      	ldr	r3, [pc, #460]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044f4:	e0db      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f6:	4b73      	ldr	r3, [pc, #460]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80044f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044fa:	e0d8      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044fc:	4b6f      	ldr	r3, [pc, #444]	; (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004504:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004506:	4b6d      	ldr	r3, [pc, #436]	; (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d063      	beq.n	80045da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004512:	4b6a      	ldr	r3, [pc, #424]	; (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	2200      	movs	r2, #0
 800451a:	63bb      	str	r3, [r7, #56]	; 0x38
 800451c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004524:	633b      	str	r3, [r7, #48]	; 0x30
 8004526:	2300      	movs	r3, #0
 8004528:	637b      	str	r3, [r7, #52]	; 0x34
 800452a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800452e:	4622      	mov	r2, r4
 8004530:	462b      	mov	r3, r5
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	0159      	lsls	r1, r3, #5
 800453c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004540:	0150      	lsls	r0, r2, #5
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4621      	mov	r1, r4
 8004548:	1a51      	subs	r1, r2, r1
 800454a:	6139      	str	r1, [r7, #16]
 800454c:	4629      	mov	r1, r5
 800454e:	eb63 0301 	sbc.w	r3, r3, r1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004560:	4659      	mov	r1, fp
 8004562:	018b      	lsls	r3, r1, #6
 8004564:	4651      	mov	r1, sl
 8004566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800456a:	4651      	mov	r1, sl
 800456c:	018a      	lsls	r2, r1, #6
 800456e:	4651      	mov	r1, sl
 8004570:	ebb2 0801 	subs.w	r8, r2, r1
 8004574:	4659      	mov	r1, fp
 8004576:	eb63 0901 	sbc.w	r9, r3, r1
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458e:	4690      	mov	r8, r2
 8004590:	4699      	mov	r9, r3
 8004592:	4623      	mov	r3, r4
 8004594:	eb18 0303 	adds.w	r3, r8, r3
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	462b      	mov	r3, r5
 800459c:	eb49 0303 	adc.w	r3, r9, r3
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045ae:	4629      	mov	r1, r5
 80045b0:	024b      	lsls	r3, r1, #9
 80045b2:	4621      	mov	r1, r4
 80045b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045b8:	4621      	mov	r1, r4
 80045ba:	024a      	lsls	r2, r1, #9
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c2:	2200      	movs	r2, #0
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045cc:	f7fb fe68 	bl	80002a0 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4613      	mov	r3, r2
 80045d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d8:	e058      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045da:	4b38      	ldr	r3, [pc, #224]	; (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	2200      	movs	r2, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	4611      	mov	r1, r2
 80045e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
 80045f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	f04f 0000 	mov.w	r0, #0
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	0159      	lsls	r1, r3, #5
 8004602:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004606:	0150      	lsls	r0, r2, #5
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4641      	mov	r1, r8
 800460e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004612:	4649      	mov	r1, r9
 8004614:	eb63 0b01 	sbc.w	fp, r3, r1
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004624:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004628:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800462c:	ebb2 040a 	subs.w	r4, r2, sl
 8004630:	eb63 050b 	sbc.w	r5, r3, fp
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	00eb      	lsls	r3, r5, #3
 800463e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004642:	00e2      	lsls	r2, r4, #3
 8004644:	4614      	mov	r4, r2
 8004646:	461d      	mov	r5, r3
 8004648:	4643      	mov	r3, r8
 800464a:	18e3      	adds	r3, r4, r3
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	464b      	mov	r3, r9
 8004650:	eb45 0303 	adc.w	r3, r5, r3
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004662:	4629      	mov	r1, r5
 8004664:	028b      	lsls	r3, r1, #10
 8004666:	4621      	mov	r1, r4
 8004668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800466c:	4621      	mov	r1, r4
 800466e:	028a      	lsls	r2, r1, #10
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004676:	2200      	movs	r2, #0
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	61fa      	str	r2, [r7, #28]
 800467c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004680:	f7fb fe0e 	bl	80002a0 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4613      	mov	r3, r2
 800468a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800469c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800469e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046a6:	e002      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80046aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3750      	adds	r7, #80	; 0x50
 80046b4:	46bd      	mov	sp, r7
 80046b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ba:	bf00      	nop
 80046bc:	40023800 	.word	0x40023800
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	007a1200 	.word	0x007a1200

080046c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000004 	.word	0x20000004

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a9b      	lsrs	r3, r3, #10
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4903      	ldr	r1, [pc, #12]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40023800 	.word	0x40023800
 8004704:	08006d40 	.word	0x08006d40

08004708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800470c:	f7ff ffdc 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004710:	4602      	mov	r2, r0
 8004712:	4b05      	ldr	r3, [pc, #20]	; (8004728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	0b5b      	lsrs	r3, r3, #13
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	4903      	ldr	r1, [pc, #12]	; (800472c <HAL_RCC_GetPCLK2Freq+0x24>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40023800 	.word	0x40023800
 800472c:	08006d40 	.word	0x08006d40

08004730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10b      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004754:	2b00      	cmp	r3, #0
 8004756:	d105      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004760:	2b00      	cmp	r3, #0
 8004762:	d075      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004764:	4b91      	ldr	r3, [pc, #580]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800476a:	f7fc ff53 	bl	8001614 <HAL_GetTick>
 800476e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004770:	e008      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004772:	f7fc ff4f 	bl	8001614 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e189      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004784:	4b8a      	ldr	r3, [pc, #552]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f0      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d009      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	019a      	lsls	r2, r3, #6
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	071b      	lsls	r3, r3, #28
 80047a8:	4981      	ldr	r1, [pc, #516]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01f      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047bc:	4b7c      	ldr	r3, [pc, #496]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c2:	0f1b      	lsrs	r3, r3, #28
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	019a      	lsls	r2, r3, #6
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	061b      	lsls	r3, r3, #24
 80047d6:	431a      	orrs	r2, r3
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	071b      	lsls	r3, r3, #28
 80047dc:	4974      	ldr	r1, [pc, #464]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047e4:	4b72      	ldr	r3, [pc, #456]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ea:	f023 021f 	bic.w	r2, r3, #31
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	496e      	ldr	r1, [pc, #440]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	019a      	lsls	r2, r3, #6
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	071b      	lsls	r3, r3, #28
 800481c:	4964      	ldr	r1, [pc, #400]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004824:	4b61      	ldr	r3, [pc, #388]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800482a:	f7fc fef3 	bl	8001614 <HAL_GetTick>
 800482e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004830:	e008      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004832:	f7fc feef 	bl	8001614 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e129      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004844:	4b5a      	ldr	r3, [pc, #360]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d105      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004864:	2b00      	cmp	r3, #0
 8004866:	d079      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004868:	4b52      	ldr	r3, [pc, #328]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800486e:	f7fc fed1 	bl	8001614 <HAL_GetTick>
 8004872:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004876:	f7fc fecd 	bl	8001614 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e107      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004888:	4b49      	ldr	r3, [pc, #292]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004894:	d0ef      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d020      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048a2:	4b43      	ldr	r3, [pc, #268]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a8:	0f1b      	lsrs	r3, r3, #28
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	019a      	lsls	r2, r3, #6
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	431a      	orrs	r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	493b      	ldr	r1, [pc, #236]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048ca:	4b39      	ldr	r3, [pc, #228]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	3b01      	subs	r3, #1
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	4934      	ldr	r1, [pc, #208]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01e      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048f0:	4b2f      	ldr	r3, [pc, #188]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	0e1b      	lsrs	r3, r3, #24
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	019a      	lsls	r2, r3, #6
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	061b      	lsls	r3, r3, #24
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	071b      	lsls	r3, r3, #28
 8004910:	4927      	ldr	r1, [pc, #156]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004918:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800491a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800491e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	4922      	ldr	r1, [pc, #136]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800492e:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004934:	f7fc fe6e 	bl	8001614 <HAL_GetTick>
 8004938:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800493a:	e008      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800493c:	f7fc fe6a 	bl	8001614 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e0a4      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800494e:	4b18      	ldr	r3, [pc, #96]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800495a:	d1ef      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 808b 	beq.w	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6413      	str	r3, [r2, #64]	; 0x40
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004986:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a0b      	ldr	r2, [pc, #44]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800498c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004990:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004992:	f7fc fe3f 	bl	8001614 <HAL_GetTick>
 8004996:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004998:	e010      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800499a:	f7fc fe3b 	bl	8001614 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d909      	bls.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e075      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80049ac:	42470068 	.word	0x42470068
 80049b0:	40023800 	.word	0x40023800
 80049b4:	42470070 	.word	0x42470070
 80049b8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049bc:	4b38      	ldr	r3, [pc, #224]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0e8      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049c8:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d02f      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d028      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049e6:	4b2f      	ldr	r3, [pc, #188]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049f0:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049f6:	4b2c      	ldr	r3, [pc, #176]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049fc:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a02:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d114      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fc fe01 	bl	8001614 <HAL_GetTick>
 8004a12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	e00a      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fc fdfd 	bl	8001614 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e035      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2c:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ee      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a44:	d10d      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004a46:	4b17      	ldr	r3, [pc, #92]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5a:	4912      	ldr	r1, [pc, #72]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	608b      	str	r3, [r1, #8]
 8004a60:	e005      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	4a0f      	ldr	r2, [pc, #60]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a6c:	6093      	str	r3, [r2, #8]
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7a:	490a      	ldr	r1, [pc, #40]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004a92:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004a94:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	42470e40 	.word	0x42470e40
 8004aac:	424711e0 	.word	0x424711e0

08004ab0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e066      	b.n	8004b94 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	7f5b      	ldrb	r3, [r3, #29]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fc fb4c 	bl	8001174 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	22ca      	movs	r2, #202	; 0xca
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2253      	movs	r2, #83	; 0x53
 8004af0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f87a 	bl	8004bec <RTC_EnterInitMode>
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d12c      	bne.n	8004b5c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b14:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6899      	ldr	r1, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	68d2      	ldr	r2, [r2, #12]
 8004b3c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6919      	ldr	r1, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	041a      	lsls	r2, r3, #16
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f881 	bl	8004c5a <RTC_ExitInitMode>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d113      	bne.n	8004b8a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	22ff      	movs	r2, #255	; 0xff
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bb8:	f7fc fd2c 	bl	8001614 <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004bbe:	e009      	b.n	8004bd4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bc0:	f7fc fd28 	bl	8001614 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bce:	d901      	bls.n	8004bd4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e007      	b.n	8004be4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0ee      	beq.n	8004bc0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d122      	bne.n	8004c50 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c1a:	f7fc fcfb 	bl	8001614 <HAL_GetTick>
 8004c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c20:	e00c      	b.n	8004c3c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c22:	f7fc fcf7 	bl	8001614 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c30:	d904      	bls.n	8004c3c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2204      	movs	r2, #4
 8004c36:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d102      	bne.n	8004c50 <RTC_EnterInitMode+0x64>
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d1e8      	bne.n	8004c22 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c74:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ff89 	bl	8004b9c <HAL_RTC_WaitForSynchro>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d004      	beq.n	8004c9a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2204      	movs	r2, #4
 8004c94:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e03f      	b.n	8004d36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fc fb56 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2224      	movs	r2, #36	; 0x24
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fd7b 	bl	80057e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b08a      	sub	sp, #40	; 0x28
 8004d42:	af02      	add	r7, sp, #8
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d17c      	bne.n	8004e58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_UART_Transmit+0x2c>
 8004d64:	88fb      	ldrh	r3, [r7, #6]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e075      	b.n	8004e5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_UART_Transmit+0x3e>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e06e      	b.n	8004e5a <HAL_UART_Transmit+0x11c>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2221      	movs	r2, #33	; 0x21
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d92:	f7fc fc3f 	bl	8001614 <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	88fa      	ldrh	r2, [r7, #6]
 8004da2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dac:	d108      	bne.n	8004dc0 <HAL_UART_Transmit+0x82>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d104      	bne.n	8004dc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	e003      	b.n	8004dc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004dd0:	e02a      	b.n	8004e28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2180      	movs	r1, #128	; 0x80
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 faf9 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e036      	b.n	8004e5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10b      	bne.n	8004e0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	3302      	adds	r3, #2
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	e007      	b.n	8004e1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	781a      	ldrb	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	3301      	adds	r3, #1
 8004e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1cf      	bne.n	8004dd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2140      	movs	r1, #64	; 0x40
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fac9 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e006      	b.n	8004e5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e000      	b.n	8004e5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e58:	2302      	movs	r3, #2
  }
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b0ba      	sub	sp, #232	; 0xe8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10f      	bne.n	8004eca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <HAL_UART_IRQHandler+0x66>
 8004eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fbd3 	bl	800566e <UART_Receive_IT>
      return;
 8004ec8:	e256      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80de 	beq.w	8005090 <HAL_UART_IRQHandler+0x22c>
 8004ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80d1 	beq.w	8005090 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <HAL_UART_IRQHandler+0xae>
 8004efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f043 0201 	orr.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_UART_IRQHandler+0xd2>
 8004f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f043 0202 	orr.w	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <HAL_UART_IRQHandler+0xf6>
 8004f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f043 0204 	orr.w	r2, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d011      	beq.n	8004f8a <HAL_UART_IRQHandler+0x126>
 8004f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d105      	bne.n	8004f7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f043 0208 	orr.w	r2, r3, #8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 81ed 	beq.w	800536e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x14e>
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fb5e 	bl	800566e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b40      	cmp	r3, #64	; 0x40
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <HAL_UART_IRQHandler+0x17a>
 8004fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d04f      	beq.n	800507e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fa66 	bl	80054b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d141      	bne.n	8005076 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3314      	adds	r3, #20
 8004ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800500c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3314      	adds	r3, #20
 800501a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800501e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800502a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1d9      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	2b00      	cmp	r3, #0
 8005044:	d013      	beq.n	800506e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	4a7d      	ldr	r2, [pc, #500]	; (8005240 <HAL_UART_IRQHandler+0x3dc>)
 800504c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	4618      	mov	r0, r3
 8005054:	f7fd fa98 	bl	8002588 <HAL_DMA_Abort_IT>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d016      	beq.n	800508c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005068:	4610      	mov	r0, r2
 800506a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506c:	e00e      	b.n	800508c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f99a 	bl	80053a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	e00a      	b.n	800508c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f996 	bl	80053a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	e006      	b.n	800508c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f992 	bl	80053a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800508a:	e170      	b.n	800536e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	bf00      	nop
    return;
 800508e:	e16e      	b.n	800536e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	2b01      	cmp	r3, #1
 8005096:	f040 814a 	bne.w	800532e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8143 	beq.w	800532e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 813c 	beq.w	800532e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	f040 80b4 	bne.w	8005244 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8140 	beq.w	8005372 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050fa:	429a      	cmp	r2, r3
 80050fc:	f080 8139 	bcs.w	8005372 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005106:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005112:	f000 8088 	beq.w	8005226 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800512c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	330c      	adds	r3, #12
 800513e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005142:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800514e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800515a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1d9      	bne.n	8005116 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3314      	adds	r3, #20
 8005182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005186:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800518a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800518e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e1      	bne.n	8005162 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3314      	adds	r3, #20
 80051a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3314      	adds	r3, #20
 80051be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e3      	bne.n	800519e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f6:	f023 0310 	bic.w	r3, r3, #16
 80051fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	330c      	adds	r3, #12
 8005204:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005208:	65ba      	str	r2, [r7, #88]	; 0x58
 800520a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800520e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e3      	bne.n	80051e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	4618      	mov	r0, r3
 8005222:	f7fd f941 	bl	80024a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800522e:	b29b      	uxth	r3, r3
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	b29b      	uxth	r3, r3
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f8c0 	bl	80053bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800523c:	e099      	b.n	8005372 <HAL_UART_IRQHandler+0x50e>
 800523e:	bf00      	nop
 8005240:	08005577 	.word	0x08005577
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800524c:	b29b      	uxth	r3, r3
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 808b 	beq.w	8005376 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8086 	beq.w	8005376 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800528e:	647a      	str	r2, [r7, #68]	; 0x44
 8005290:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800529c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e3      	bne.n	800526a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3314      	adds	r3, #20
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	623b      	str	r3, [r7, #32]
   return(result);
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3314      	adds	r3, #20
 80052c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052c6:	633a      	str	r2, [r7, #48]	; 0x30
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e3      	bne.n	80052a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	330c      	adds	r3, #12
 80052ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0310 	bic.w	r3, r3, #16
 80052fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800530c:	61fa      	str	r2, [r7, #28]
 800530e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	69b9      	ldr	r1, [r7, #24]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	617b      	str	r3, [r7, #20]
   return(result);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e3      	bne.n	80052e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f848 	bl	80053bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800532c:	e023      	b.n	8005376 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_UART_IRQHandler+0x4ea>
 800533a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f929 	bl	800559e <UART_Transmit_IT>
    return;
 800534c:	e014      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800534e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00e      	beq.n	8005378 <HAL_UART_IRQHandler+0x514>
 800535a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f969 	bl	800563e <UART_EndTransmit_IT>
    return;
 800536c:	e004      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
    return;
 800536e:	bf00      	nop
 8005370:	e002      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
      return;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
      return;
 8005376:	bf00      	nop
  }
}
 8005378:	37e8      	adds	r7, #232	; 0xe8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop

08005380 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b090      	sub	sp, #64	; 0x40
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e4:	e050      	b.n	8005488 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d04c      	beq.n	8005488 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <UART_WaitOnFlagUntilTimeout+0x30>
 80053f4:	f7fc f90e 	bl	8001614 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005400:	429a      	cmp	r2, r3
 8005402:	d241      	bcs.n	8005488 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005424:	637a      	str	r2, [r7, #52]	; 0x34
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800542a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e5      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	613b      	str	r3, [r7, #16]
   return(result);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3314      	adds	r3, #20
 8005456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005458:	623a      	str	r2, [r7, #32]
 800545a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	69f9      	ldr	r1, [r7, #28]
 800545e:	6a3a      	ldr	r2, [r7, #32]
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	61bb      	str	r3, [r7, #24]
   return(result);
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e5      	bne.n	8005438 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e00f      	b.n	80054a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4013      	ands	r3, r2
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	429a      	cmp	r2, r3
 8005496:	bf0c      	ite	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	2300      	movne	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d09f      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3740      	adds	r7, #64	; 0x40
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b095      	sub	sp, #84	; 0x54
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054d8:	643a      	str	r2, [r7, #64]	; 0x40
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e5      	bne.n	80054b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3314      	adds	r3, #20
 80054f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	64bb      	str	r3, [r7, #72]	; 0x48
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3314      	adds	r3, #20
 800550a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800550c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e5      	bne.n	80054ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	2b01      	cmp	r3, #1
 8005526:	d119      	bne.n	800555c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	60bb      	str	r3, [r7, #8]
   return(result);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 0310 	bic.w	r3, r3, #16
 800553e:	647b      	str	r3, [r7, #68]	; 0x44
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005548:	61ba      	str	r2, [r7, #24]
 800554a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	613b      	str	r3, [r7, #16]
   return(result);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
}
 800556a:	bf00      	nop
 800556c:	3754      	adds	r7, #84	; 0x54
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff ff09 	bl	80053a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b21      	cmp	r3, #33	; 0x21
 80055b0:	d13e      	bne.n	8005630 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ba:	d114      	bne.n	80055e6 <UART_Transmit_IT+0x48>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d110      	bne.n	80055e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	1c9a      	adds	r2, r3, #2
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	621a      	str	r2, [r3, #32]
 80055e4:	e008      	b.n	80055f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	1c59      	adds	r1, r3, #1
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6211      	str	r1, [r2, #32]
 80055f0:	781a      	ldrb	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29b      	uxth	r3, r3
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4619      	mov	r1, r3
 8005606:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10f      	bne.n	800562c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800561a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800562a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	e000      	b.n	8005632 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005630:	2302      	movs	r3, #2
  }
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005654:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff fe8e 	bl	8005380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b08c      	sub	sp, #48	; 0x30
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b22      	cmp	r3, #34	; 0x22
 8005680:	f040 80ab 	bne.w	80057da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568c:	d117      	bne.n	80056be <UART_Receive_IT+0x50>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d113      	bne.n	80056be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	1c9a      	adds	r2, r3, #2
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	629a      	str	r2, [r3, #40]	; 0x28
 80056bc:	e026      	b.n	800570c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d0:	d007      	beq.n	80056e2 <UART_Receive_IT+0x74>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <UART_Receive_IT+0x82>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	e008      	b.n	8005702 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29b      	uxth	r3, r3
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4619      	mov	r1, r3
 800571a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800571c:	2b00      	cmp	r3, #0
 800571e:	d15a      	bne.n	80057d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0220 	bic.w	r2, r2, #32
 800572e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800573e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695a      	ldr	r2, [r3, #20]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	2b01      	cmp	r3, #1
 800575e:	d135      	bne.n	80057cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	613b      	str	r3, [r7, #16]
   return(result);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f023 0310 	bic.w	r3, r3, #16
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005786:	623a      	str	r2, [r7, #32]
 8005788:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	69f9      	ldr	r1, [r7, #28]
 800578c:	6a3a      	ldr	r2, [r7, #32]
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	61bb      	str	r3, [r7, #24]
   return(result);
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e5      	bne.n	8005766 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0310 	and.w	r3, r3, #16
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d10a      	bne.n	80057be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff fdf9 	bl	80053bc <HAL_UARTEx_RxEventCallback>
 80057ca:	e002      	b.n	80057d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fde1 	bl	8005394 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e002      	b.n	80057dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e000      	b.n	80057dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057da:	2302      	movs	r3, #2
  }
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3730      	adds	r7, #48	; 0x30
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e8:	b0c0      	sub	sp, #256	; 0x100
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	68d9      	ldr	r1, [r3, #12]
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	ea40 0301 	orr.w	r3, r0, r1
 800580c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	431a      	orrs	r2, r3
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	431a      	orrs	r2, r3
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800583c:	f021 010c 	bic.w	r1, r1, #12
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800584a:	430b      	orrs	r3, r1
 800584c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800584e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585e:	6999      	ldr	r1, [r3, #24]
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	ea40 0301 	orr.w	r3, r0, r1
 800586a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b8f      	ldr	r3, [pc, #572]	; (8005ab0 <UART_SetConfig+0x2cc>)
 8005874:	429a      	cmp	r2, r3
 8005876:	d005      	beq.n	8005884 <UART_SetConfig+0xa0>
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4b8d      	ldr	r3, [pc, #564]	; (8005ab4 <UART_SetConfig+0x2d0>)
 8005880:	429a      	cmp	r2, r3
 8005882:	d104      	bne.n	800588e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7fe ff40 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 8005888:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800588c:	e003      	b.n	8005896 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800588e:	f7fe ff27 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8005892:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a0:	f040 810c 	bne.w	8005abc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058b6:	4622      	mov	r2, r4
 80058b8:	462b      	mov	r3, r5
 80058ba:	1891      	adds	r1, r2, r2
 80058bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80058be:	415b      	adcs	r3, r3
 80058c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058c6:	4621      	mov	r1, r4
 80058c8:	eb12 0801 	adds.w	r8, r2, r1
 80058cc:	4629      	mov	r1, r5
 80058ce:	eb43 0901 	adc.w	r9, r3, r1
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058e6:	4690      	mov	r8, r2
 80058e8:	4699      	mov	r9, r3
 80058ea:	4623      	mov	r3, r4
 80058ec:	eb18 0303 	adds.w	r3, r8, r3
 80058f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058f4:	462b      	mov	r3, r5
 80058f6:	eb49 0303 	adc.w	r3, r9, r3
 80058fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800590a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800590e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005912:	460b      	mov	r3, r1
 8005914:	18db      	adds	r3, r3, r3
 8005916:	653b      	str	r3, [r7, #80]	; 0x50
 8005918:	4613      	mov	r3, r2
 800591a:	eb42 0303 	adc.w	r3, r2, r3
 800591e:	657b      	str	r3, [r7, #84]	; 0x54
 8005920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005924:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005928:	f7fa fcba 	bl	80002a0 <__aeabi_uldivmod>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4b61      	ldr	r3, [pc, #388]	; (8005ab8 <UART_SetConfig+0x2d4>)
 8005932:	fba3 2302 	umull	r2, r3, r3, r2
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	011c      	lsls	r4, r3, #4
 800593a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800593e:	2200      	movs	r2, #0
 8005940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005944:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005948:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800594c:	4642      	mov	r2, r8
 800594e:	464b      	mov	r3, r9
 8005950:	1891      	adds	r1, r2, r2
 8005952:	64b9      	str	r1, [r7, #72]	; 0x48
 8005954:	415b      	adcs	r3, r3
 8005956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005958:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800595c:	4641      	mov	r1, r8
 800595e:	eb12 0a01 	adds.w	sl, r2, r1
 8005962:	4649      	mov	r1, r9
 8005964:	eb43 0b01 	adc.w	fp, r3, r1
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800597c:	4692      	mov	sl, r2
 800597e:	469b      	mov	fp, r3
 8005980:	4643      	mov	r3, r8
 8005982:	eb1a 0303 	adds.w	r3, sl, r3
 8005986:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800598a:	464b      	mov	r3, r9
 800598c:	eb4b 0303 	adc.w	r3, fp, r3
 8005990:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059a8:	460b      	mov	r3, r1
 80059aa:	18db      	adds	r3, r3, r3
 80059ac:	643b      	str	r3, [r7, #64]	; 0x40
 80059ae:	4613      	mov	r3, r2
 80059b0:	eb42 0303 	adc.w	r3, r2, r3
 80059b4:	647b      	str	r3, [r7, #68]	; 0x44
 80059b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059be:	f7fa fc6f 	bl	80002a0 <__aeabi_uldivmod>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	4b3b      	ldr	r3, [pc, #236]	; (8005ab8 <UART_SetConfig+0x2d4>)
 80059ca:	fba3 2301 	umull	r2, r3, r3, r1
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	2264      	movs	r2, #100	; 0x64
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	1acb      	subs	r3, r1, r3
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059de:	4b36      	ldr	r3, [pc, #216]	; (8005ab8 <UART_SetConfig+0x2d4>)
 80059e0:	fba3 2302 	umull	r2, r3, r3, r2
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059ec:	441c      	add	r4, r3
 80059ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	1891      	adds	r1, r2, r2
 8005a06:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a08:	415b      	adcs	r3, r3
 8005a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a10:	4641      	mov	r1, r8
 8005a12:	1851      	adds	r1, r2, r1
 8005a14:	6339      	str	r1, [r7, #48]	; 0x30
 8005a16:	4649      	mov	r1, r9
 8005a18:	414b      	adcs	r3, r1
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a28:	4659      	mov	r1, fp
 8005a2a:	00cb      	lsls	r3, r1, #3
 8005a2c:	4651      	mov	r1, sl
 8005a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a32:	4651      	mov	r1, sl
 8005a34:	00ca      	lsls	r2, r1, #3
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a44:	464b      	mov	r3, r9
 8005a46:	460a      	mov	r2, r1
 8005a48:	eb42 0303 	adc.w	r3, r2, r3
 8005a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a64:	460b      	mov	r3, r1
 8005a66:	18db      	adds	r3, r3, r3
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	eb42 0303 	adc.w	r3, r2, r3
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a7a:	f7fa fc11 	bl	80002a0 <__aeabi_uldivmod>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <UART_SetConfig+0x2d4>)
 8005a84:	fba3 1302 	umull	r1, r3, r3, r2
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	2164      	movs	r1, #100	; 0x64
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	3332      	adds	r3, #50	; 0x32
 8005a96:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <UART_SetConfig+0x2d4>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f003 0207 	and.w	r2, r3, #7
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4422      	add	r2, r4
 8005aaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005aac:	e106      	b.n	8005cbc <UART_SetConfig+0x4d8>
 8005aae:	bf00      	nop
 8005ab0:	40011000 	.word	0x40011000
 8005ab4:	40011400 	.word	0x40011400
 8005ab8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ac6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005aca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ace:	4642      	mov	r2, r8
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	1891      	adds	r1, r2, r2
 8005ad4:	6239      	str	r1, [r7, #32]
 8005ad6:	415b      	adcs	r3, r3
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ade:	4641      	mov	r1, r8
 8005ae0:	1854      	adds	r4, r2, r1
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	eb43 0501 	adc.w	r5, r3, r1
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	00eb      	lsls	r3, r5, #3
 8005af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005af6:	00e2      	lsls	r2, r4, #3
 8005af8:	4614      	mov	r4, r2
 8005afa:	461d      	mov	r5, r3
 8005afc:	4643      	mov	r3, r8
 8005afe:	18e3      	adds	r3, r4, r3
 8005b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b04:	464b      	mov	r3, r9
 8005b06:	eb45 0303 	adc.w	r3, r5, r3
 8005b0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	008b      	lsls	r3, r1, #2
 8005b2e:	4621      	mov	r1, r4
 8005b30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b34:	4621      	mov	r1, r4
 8005b36:	008a      	lsls	r2, r1, #2
 8005b38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b3c:	f7fa fbb0 	bl	80002a0 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4b60      	ldr	r3, [pc, #384]	; (8005cc8 <UART_SetConfig+0x4e4>)
 8005b46:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	011c      	lsls	r4, r3, #4
 8005b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b60:	4642      	mov	r2, r8
 8005b62:	464b      	mov	r3, r9
 8005b64:	1891      	adds	r1, r2, r2
 8005b66:	61b9      	str	r1, [r7, #24]
 8005b68:	415b      	adcs	r3, r3
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b70:	4641      	mov	r1, r8
 8005b72:	1851      	adds	r1, r2, r1
 8005b74:	6139      	str	r1, [r7, #16]
 8005b76:	4649      	mov	r1, r9
 8005b78:	414b      	adcs	r3, r1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b88:	4659      	mov	r1, fp
 8005b8a:	00cb      	lsls	r3, r1, #3
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b92:	4651      	mov	r1, sl
 8005b94:	00ca      	lsls	r2, r1, #3
 8005b96:	4610      	mov	r0, r2
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	eb42 0303 	adc.w	r3, r2, r3
 8005bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005bc8:	4649      	mov	r1, r9
 8005bca:	008b      	lsls	r3, r1, #2
 8005bcc:	4641      	mov	r1, r8
 8005bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	008a      	lsls	r2, r1, #2
 8005bd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bda:	f7fa fb61 	bl	80002a0 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	4b38      	ldr	r3, [pc, #224]	; (8005cc8 <UART_SetConfig+0x4e4>)
 8005be6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	2264      	movs	r2, #100	; 0x64
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	1acb      	subs	r3, r1, r3
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	3332      	adds	r3, #50	; 0x32
 8005bf8:	4a33      	ldr	r2, [pc, #204]	; (8005cc8 <UART_SetConfig+0x4e4>)
 8005bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c04:	441c      	add	r4, r3
 8005c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	673b      	str	r3, [r7, #112]	; 0x70
 8005c0e:	677a      	str	r2, [r7, #116]	; 0x74
 8005c10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c14:	4642      	mov	r2, r8
 8005c16:	464b      	mov	r3, r9
 8005c18:	1891      	adds	r1, r2, r2
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	415b      	adcs	r3, r3
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c24:	4641      	mov	r1, r8
 8005c26:	1851      	adds	r1, r2, r1
 8005c28:	6039      	str	r1, [r7, #0]
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	414b      	adcs	r3, r1
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c3c:	4659      	mov	r1, fp
 8005c3e:	00cb      	lsls	r3, r1, #3
 8005c40:	4651      	mov	r1, sl
 8005c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c46:	4651      	mov	r1, sl
 8005c48:	00ca      	lsls	r2, r1, #3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4642      	mov	r2, r8
 8005c52:	189b      	adds	r3, r3, r2
 8005c54:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c56:	464b      	mov	r3, r9
 8005c58:	460a      	mov	r2, r1
 8005c5a:	eb42 0303 	adc.w	r3, r2, r3
 8005c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	663b      	str	r3, [r7, #96]	; 0x60
 8005c6a:	667a      	str	r2, [r7, #100]	; 0x64
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c78:	4649      	mov	r1, r9
 8005c7a:	008b      	lsls	r3, r1, #2
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c82:	4641      	mov	r1, r8
 8005c84:	008a      	lsls	r2, r1, #2
 8005c86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c8a:	f7fa fb09 	bl	80002a0 <__aeabi_uldivmod>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4b0d      	ldr	r3, [pc, #52]	; (8005cc8 <UART_SetConfig+0x4e4>)
 8005c94:	fba3 1302 	umull	r1, r3, r3, r2
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	2164      	movs	r1, #100	; 0x64
 8005c9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	3332      	adds	r3, #50	; 0x32
 8005ca6:	4a08      	ldr	r2, [pc, #32]	; (8005cc8 <UART_SetConfig+0x4e4>)
 8005ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	f003 020f 	and.w	r2, r3, #15
 8005cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4422      	add	r2, r4
 8005cba:	609a      	str	r2, [r3, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc8:	51eb851f 	.word	0x51eb851f

08005ccc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ccc:	b084      	sub	sp, #16
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	f107 001c 	add.w	r0, r7, #28
 8005cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d122      	bne.n	8005d2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d105      	bne.n	8005d1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 faa2 	bl	8006268 <USB_CoreReset>
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
 8005d28:	e01a      	b.n	8005d60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fa96 	bl	8006268 <USB_CoreReset>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
 8005d52:	e005      	b.n	8005d60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d10b      	bne.n	8005d7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f043 0206 	orr.w	r2, r3, #6
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f043 0220 	orr.w	r2, r3, #32
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d8a:	b004      	add	sp, #16
 8005d8c:	4770      	bx	lr

08005d8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f023 0201 	bic.w	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d115      	bne.n	8005dfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dde:	2001      	movs	r0, #1
 8005de0:	f7fb fc24 	bl	800162c <HAL_Delay>
      ms++;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3301      	adds	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa2e 	bl	800624c <USB_GetMode>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d01e      	beq.n	8005e34 <USB_SetCurrentMode+0x84>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b31      	cmp	r3, #49	; 0x31
 8005dfa:	d9f0      	bls.n	8005dde <USB_SetCurrentMode+0x2e>
 8005dfc:	e01a      	b.n	8005e34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d115      	bne.n	8005e30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e10:	2001      	movs	r0, #1
 8005e12:	f7fb fc0b 	bl	800162c <HAL_Delay>
      ms++;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fa15 	bl	800624c <USB_GetMode>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <USB_SetCurrentMode+0x84>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b31      	cmp	r3, #49	; 0x31
 8005e2c:	d9f0      	bls.n	8005e10 <USB_SetCurrentMode+0x60>
 8005e2e:	e001      	b.n	8005e34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e005      	b.n	8005e40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b32      	cmp	r3, #50	; 0x32
 8005e38:	d101      	bne.n	8005e3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e48:	b084      	sub	sp, #16
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b086      	sub	sp, #24
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	e009      	b.n	8005e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	3340      	adds	r3, #64	; 0x40
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	2200      	movs	r2, #0
 8005e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	2b0e      	cmp	r3, #14
 8005e80:	d9f2      	bls.n	8005e68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d11c      	bne.n	8005ec2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e96:	f043 0302 	orr.w	r3, r3, #2
 8005e9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8005ec0:	e00b      	b.n	8005eda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eec:	4619      	mov	r1, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	680b      	ldr	r3, [r1, #0]
 8005ef8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d10c      	bne.n	8005f1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d104      	bne.n	8005f10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f06:	2100      	movs	r1, #0
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f965 	bl	80061d8 <USB_SetDevSpeed>
 8005f0e:	e008      	b.n	8005f22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f10:	2101      	movs	r1, #1
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f960 	bl	80061d8 <USB_SetDevSpeed>
 8005f18:	e003      	b.n	8005f22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f1a:	2103      	movs	r1, #3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f95b 	bl	80061d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f22:	2110      	movs	r1, #16
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f8f3 	bl	8006110 <USB_FlushTxFifo>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f91f 	bl	8006178 <USB_FlushRxFifo>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f56:	461a      	mov	r2, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f62:	461a      	mov	r2, r3
 8005f64:	2300      	movs	r3, #0
 8005f66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	e043      	b.n	8005ff6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f84:	d118      	bne.n	8005fb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	e013      	b.n	8005fca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e008      	b.n	8005fca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d3b7      	bcc.n	8005f6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	e043      	b.n	800608c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006016:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800601a:	d118      	bne.n	800604e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	461a      	mov	r2, r3
 8006030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	e013      	b.n	8006060 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	461a      	mov	r2, r3
 8006046:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	e008      	b.n	8006060 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605a:	461a      	mov	r2, r3
 800605c:	2300      	movs	r3, #0
 800605e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	461a      	mov	r2, r3
 800606e:	2300      	movs	r3, #0
 8006070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607e:	461a      	mov	r2, r3
 8006080:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006084:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	3301      	adds	r3, #1
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	429a      	cmp	r2, r3
 8006092:	d3b7      	bcc.n	8006004 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d105      	bne.n	80060c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f043 0210 	orr.w	r2, r3, #16
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699a      	ldr	r2, [r3, #24]
 80060cc:	4b0f      	ldr	r3, [pc, #60]	; (800610c <USB_DevInit+0x2c4>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f043 0208 	orr.w	r2, r3, #8
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d107      	bne.n	80060fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060f4:	f043 0304 	orr.w	r3, r3, #4
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006108:	b004      	add	sp, #16
 800610a:	4770      	bx	lr
 800610c:	803c3800 	.word	0x803c3800

08006110 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3301      	adds	r3, #1
 8006122:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4a13      	ldr	r2, [pc, #76]	; (8006174 <USB_FlushTxFifo+0x64>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d901      	bls.n	8006130 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e01b      	b.n	8006168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	daf2      	bge.n	800611e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	019b      	lsls	r3, r3, #6
 8006140:	f043 0220 	orr.w	r2, r3, #32
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4a08      	ldr	r2, [pc, #32]	; (8006174 <USB_FlushTxFifo+0x64>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d901      	bls.n	800615a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e006      	b.n	8006168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b20      	cmp	r3, #32
 8006164:	d0f0      	beq.n	8006148 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	00030d40 	.word	0x00030d40

08006178 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a11      	ldr	r2, [pc, #68]	; (80061d4 <USB_FlushRxFifo+0x5c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d901      	bls.n	8006196 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e018      	b.n	80061c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	daf2      	bge.n	8006184 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2210      	movs	r2, #16
 80061a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4a08      	ldr	r2, [pc, #32]	; (80061d4 <USB_FlushRxFifo+0x5c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d901      	bls.n	80061ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e006      	b.n	80061c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d0f0      	beq.n	80061a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	00030d40 	.word	0x00030d40

080061d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	68f9      	ldr	r1, [r7, #12]
 80061f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061f8:	4313      	orrs	r3, r2
 80061fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006224:	f023 0303 	bic.w	r3, r3, #3
 8006228:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006238:	f043 0302 	orr.w	r3, r3, #2
 800623c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f003 0301 	and.w	r3, r3, #1
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3301      	adds	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a13      	ldr	r2, [pc, #76]	; (80062cc <USB_CoreReset+0x64>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d901      	bls.n	8006286 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e01b      	b.n	80062be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	daf2      	bge.n	8006274 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f043 0201 	orr.w	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3301      	adds	r3, #1
 80062a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4a09      	ldr	r2, [pc, #36]	; (80062cc <USB_CoreReset+0x64>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e006      	b.n	80062be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d0f0      	beq.n	800629e <USB_CoreReset+0x36>

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	00030d40 	.word	0x00030d40

080062d0 <sniprintf>:
 80062d0:	b40c      	push	{r2, r3}
 80062d2:	b530      	push	{r4, r5, lr}
 80062d4:	4b17      	ldr	r3, [pc, #92]	; (8006334 <sniprintf+0x64>)
 80062d6:	1e0c      	subs	r4, r1, #0
 80062d8:	681d      	ldr	r5, [r3, #0]
 80062da:	b09d      	sub	sp, #116	; 0x74
 80062dc:	da08      	bge.n	80062f0 <sniprintf+0x20>
 80062de:	238b      	movs	r3, #139	; 0x8b
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	f04f 30ff 	mov.w	r0, #4294967295
 80062e6:	b01d      	add	sp, #116	; 0x74
 80062e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062ec:	b002      	add	sp, #8
 80062ee:	4770      	bx	lr
 80062f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80062f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062f8:	bf14      	ite	ne
 80062fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80062fe:	4623      	moveq	r3, r4
 8006300:	9304      	str	r3, [sp, #16]
 8006302:	9307      	str	r3, [sp, #28]
 8006304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006308:	9002      	str	r0, [sp, #8]
 800630a:	9006      	str	r0, [sp, #24]
 800630c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006310:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006312:	ab21      	add	r3, sp, #132	; 0x84
 8006314:	a902      	add	r1, sp, #8
 8006316:	4628      	mov	r0, r5
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	f000 f9b3 	bl	8006684 <_svfiprintf_r>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	bfbc      	itt	lt
 8006322:	238b      	movlt	r3, #139	; 0x8b
 8006324:	602b      	strlt	r3, [r5, #0]
 8006326:	2c00      	cmp	r4, #0
 8006328:	d0dd      	beq.n	80062e6 <sniprintf+0x16>
 800632a:	9b02      	ldr	r3, [sp, #8]
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e7d9      	b.n	80062e6 <sniprintf+0x16>
 8006332:	bf00      	nop
 8006334:	2000005c 	.word	0x2000005c

08006338 <siprintf>:
 8006338:	b40e      	push	{r1, r2, r3}
 800633a:	b500      	push	{lr}
 800633c:	b09c      	sub	sp, #112	; 0x70
 800633e:	ab1d      	add	r3, sp, #116	; 0x74
 8006340:	9002      	str	r0, [sp, #8]
 8006342:	9006      	str	r0, [sp, #24]
 8006344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006348:	4809      	ldr	r0, [pc, #36]	; (8006370 <siprintf+0x38>)
 800634a:	9107      	str	r1, [sp, #28]
 800634c:	9104      	str	r1, [sp, #16]
 800634e:	4909      	ldr	r1, [pc, #36]	; (8006374 <siprintf+0x3c>)
 8006350:	f853 2b04 	ldr.w	r2, [r3], #4
 8006354:	9105      	str	r1, [sp, #20]
 8006356:	6800      	ldr	r0, [r0, #0]
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	a902      	add	r1, sp, #8
 800635c:	f000 f992 	bl	8006684 <_svfiprintf_r>
 8006360:	9b02      	ldr	r3, [sp, #8]
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	b01c      	add	sp, #112	; 0x70
 8006368:	f85d eb04 	ldr.w	lr, [sp], #4
 800636c:	b003      	add	sp, #12
 800636e:	4770      	bx	lr
 8006370:	2000005c 	.word	0x2000005c
 8006374:	ffff0208 	.word	0xffff0208

08006378 <memset>:
 8006378:	4402      	add	r2, r0
 800637a:	4603      	mov	r3, r0
 800637c:	4293      	cmp	r3, r2
 800637e:	d100      	bne.n	8006382 <memset+0xa>
 8006380:	4770      	bx	lr
 8006382:	f803 1b01 	strb.w	r1, [r3], #1
 8006386:	e7f9      	b.n	800637c <memset+0x4>

08006388 <__errno>:
 8006388:	4b01      	ldr	r3, [pc, #4]	; (8006390 <__errno+0x8>)
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	2000005c 	.word	0x2000005c

08006394 <__libc_init_array>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	4d0d      	ldr	r5, [pc, #52]	; (80063cc <__libc_init_array+0x38>)
 8006398:	4c0d      	ldr	r4, [pc, #52]	; (80063d0 <__libc_init_array+0x3c>)
 800639a:	1b64      	subs	r4, r4, r5
 800639c:	10a4      	asrs	r4, r4, #2
 800639e:	2600      	movs	r6, #0
 80063a0:	42a6      	cmp	r6, r4
 80063a2:	d109      	bne.n	80063b8 <__libc_init_array+0x24>
 80063a4:	4d0b      	ldr	r5, [pc, #44]	; (80063d4 <__libc_init_array+0x40>)
 80063a6:	4c0c      	ldr	r4, [pc, #48]	; (80063d8 <__libc_init_array+0x44>)
 80063a8:	f000 fc6a 	bl	8006c80 <_init>
 80063ac:	1b64      	subs	r4, r4, r5
 80063ae:	10a4      	asrs	r4, r4, #2
 80063b0:	2600      	movs	r6, #0
 80063b2:	42a6      	cmp	r6, r4
 80063b4:	d105      	bne.n	80063c2 <__libc_init_array+0x2e>
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063bc:	4798      	blx	r3
 80063be:	3601      	adds	r6, #1
 80063c0:	e7ee      	b.n	80063a0 <__libc_init_array+0xc>
 80063c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c6:	4798      	blx	r3
 80063c8:	3601      	adds	r6, #1
 80063ca:	e7f2      	b.n	80063b2 <__libc_init_array+0x1e>
 80063cc:	08006d84 	.word	0x08006d84
 80063d0:	08006d84 	.word	0x08006d84
 80063d4:	08006d84 	.word	0x08006d84
 80063d8:	08006d88 	.word	0x08006d88

080063dc <__retarget_lock_acquire_recursive>:
 80063dc:	4770      	bx	lr

080063de <__retarget_lock_release_recursive>:
 80063de:	4770      	bx	lr

080063e0 <_free_r>:
 80063e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063e2:	2900      	cmp	r1, #0
 80063e4:	d044      	beq.n	8006470 <_free_r+0x90>
 80063e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ea:	9001      	str	r0, [sp, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f1a1 0404 	sub.w	r4, r1, #4
 80063f2:	bfb8      	it	lt
 80063f4:	18e4      	addlt	r4, r4, r3
 80063f6:	f000 f8df 	bl	80065b8 <__malloc_lock>
 80063fa:	4a1e      	ldr	r2, [pc, #120]	; (8006474 <_free_r+0x94>)
 80063fc:	9801      	ldr	r0, [sp, #4]
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	b933      	cbnz	r3, 8006410 <_free_r+0x30>
 8006402:	6063      	str	r3, [r4, #4]
 8006404:	6014      	str	r4, [r2, #0]
 8006406:	b003      	add	sp, #12
 8006408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800640c:	f000 b8da 	b.w	80065c4 <__malloc_unlock>
 8006410:	42a3      	cmp	r3, r4
 8006412:	d908      	bls.n	8006426 <_free_r+0x46>
 8006414:	6825      	ldr	r5, [r4, #0]
 8006416:	1961      	adds	r1, r4, r5
 8006418:	428b      	cmp	r3, r1
 800641a:	bf01      	itttt	eq
 800641c:	6819      	ldreq	r1, [r3, #0]
 800641e:	685b      	ldreq	r3, [r3, #4]
 8006420:	1949      	addeq	r1, r1, r5
 8006422:	6021      	streq	r1, [r4, #0]
 8006424:	e7ed      	b.n	8006402 <_free_r+0x22>
 8006426:	461a      	mov	r2, r3
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	b10b      	cbz	r3, 8006430 <_free_r+0x50>
 800642c:	42a3      	cmp	r3, r4
 800642e:	d9fa      	bls.n	8006426 <_free_r+0x46>
 8006430:	6811      	ldr	r1, [r2, #0]
 8006432:	1855      	adds	r5, r2, r1
 8006434:	42a5      	cmp	r5, r4
 8006436:	d10b      	bne.n	8006450 <_free_r+0x70>
 8006438:	6824      	ldr	r4, [r4, #0]
 800643a:	4421      	add	r1, r4
 800643c:	1854      	adds	r4, r2, r1
 800643e:	42a3      	cmp	r3, r4
 8006440:	6011      	str	r1, [r2, #0]
 8006442:	d1e0      	bne.n	8006406 <_free_r+0x26>
 8006444:	681c      	ldr	r4, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	6053      	str	r3, [r2, #4]
 800644a:	440c      	add	r4, r1
 800644c:	6014      	str	r4, [r2, #0]
 800644e:	e7da      	b.n	8006406 <_free_r+0x26>
 8006450:	d902      	bls.n	8006458 <_free_r+0x78>
 8006452:	230c      	movs	r3, #12
 8006454:	6003      	str	r3, [r0, #0]
 8006456:	e7d6      	b.n	8006406 <_free_r+0x26>
 8006458:	6825      	ldr	r5, [r4, #0]
 800645a:	1961      	adds	r1, r4, r5
 800645c:	428b      	cmp	r3, r1
 800645e:	bf04      	itt	eq
 8006460:	6819      	ldreq	r1, [r3, #0]
 8006462:	685b      	ldreq	r3, [r3, #4]
 8006464:	6063      	str	r3, [r4, #4]
 8006466:	bf04      	itt	eq
 8006468:	1949      	addeq	r1, r1, r5
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	6054      	str	r4, [r2, #4]
 800646e:	e7ca      	b.n	8006406 <_free_r+0x26>
 8006470:	b003      	add	sp, #12
 8006472:	bd30      	pop	{r4, r5, pc}
 8006474:	20000a88 	.word	0x20000a88

08006478 <sbrk_aligned>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4e0e      	ldr	r6, [pc, #56]	; (80064b4 <sbrk_aligned+0x3c>)
 800647c:	460c      	mov	r4, r1
 800647e:	6831      	ldr	r1, [r6, #0]
 8006480:	4605      	mov	r5, r0
 8006482:	b911      	cbnz	r1, 800648a <sbrk_aligned+0x12>
 8006484:	f000 fba6 	bl	8006bd4 <_sbrk_r>
 8006488:	6030      	str	r0, [r6, #0]
 800648a:	4621      	mov	r1, r4
 800648c:	4628      	mov	r0, r5
 800648e:	f000 fba1 	bl	8006bd4 <_sbrk_r>
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	d00a      	beq.n	80064ac <sbrk_aligned+0x34>
 8006496:	1cc4      	adds	r4, r0, #3
 8006498:	f024 0403 	bic.w	r4, r4, #3
 800649c:	42a0      	cmp	r0, r4
 800649e:	d007      	beq.n	80064b0 <sbrk_aligned+0x38>
 80064a0:	1a21      	subs	r1, r4, r0
 80064a2:	4628      	mov	r0, r5
 80064a4:	f000 fb96 	bl	8006bd4 <_sbrk_r>
 80064a8:	3001      	adds	r0, #1
 80064aa:	d101      	bne.n	80064b0 <sbrk_aligned+0x38>
 80064ac:	f04f 34ff 	mov.w	r4, #4294967295
 80064b0:	4620      	mov	r0, r4
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
 80064b4:	20000a8c 	.word	0x20000a8c

080064b8 <_malloc_r>:
 80064b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064bc:	1ccd      	adds	r5, r1, #3
 80064be:	f025 0503 	bic.w	r5, r5, #3
 80064c2:	3508      	adds	r5, #8
 80064c4:	2d0c      	cmp	r5, #12
 80064c6:	bf38      	it	cc
 80064c8:	250c      	movcc	r5, #12
 80064ca:	2d00      	cmp	r5, #0
 80064cc:	4607      	mov	r7, r0
 80064ce:	db01      	blt.n	80064d4 <_malloc_r+0x1c>
 80064d0:	42a9      	cmp	r1, r5
 80064d2:	d905      	bls.n	80064e0 <_malloc_r+0x28>
 80064d4:	230c      	movs	r3, #12
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	2600      	movs	r6, #0
 80064da:	4630      	mov	r0, r6
 80064dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065b4 <_malloc_r+0xfc>
 80064e4:	f000 f868 	bl	80065b8 <__malloc_lock>
 80064e8:	f8d8 3000 	ldr.w	r3, [r8]
 80064ec:	461c      	mov	r4, r3
 80064ee:	bb5c      	cbnz	r4, 8006548 <_malloc_r+0x90>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4638      	mov	r0, r7
 80064f4:	f7ff ffc0 	bl	8006478 <sbrk_aligned>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	4604      	mov	r4, r0
 80064fc:	d155      	bne.n	80065aa <_malloc_r+0xf2>
 80064fe:	f8d8 4000 	ldr.w	r4, [r8]
 8006502:	4626      	mov	r6, r4
 8006504:	2e00      	cmp	r6, #0
 8006506:	d145      	bne.n	8006594 <_malloc_r+0xdc>
 8006508:	2c00      	cmp	r4, #0
 800650a:	d048      	beq.n	800659e <_malloc_r+0xe6>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	4631      	mov	r1, r6
 8006510:	4638      	mov	r0, r7
 8006512:	eb04 0903 	add.w	r9, r4, r3
 8006516:	f000 fb5d 	bl	8006bd4 <_sbrk_r>
 800651a:	4581      	cmp	r9, r0
 800651c:	d13f      	bne.n	800659e <_malloc_r+0xe6>
 800651e:	6821      	ldr	r1, [r4, #0]
 8006520:	1a6d      	subs	r5, r5, r1
 8006522:	4629      	mov	r1, r5
 8006524:	4638      	mov	r0, r7
 8006526:	f7ff ffa7 	bl	8006478 <sbrk_aligned>
 800652a:	3001      	adds	r0, #1
 800652c:	d037      	beq.n	800659e <_malloc_r+0xe6>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	442b      	add	r3, r5
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	f8d8 3000 	ldr.w	r3, [r8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d038      	beq.n	80065ae <_malloc_r+0xf6>
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	42a2      	cmp	r2, r4
 8006540:	d12b      	bne.n	800659a <_malloc_r+0xe2>
 8006542:	2200      	movs	r2, #0
 8006544:	605a      	str	r2, [r3, #4]
 8006546:	e00f      	b.n	8006568 <_malloc_r+0xb0>
 8006548:	6822      	ldr	r2, [r4, #0]
 800654a:	1b52      	subs	r2, r2, r5
 800654c:	d41f      	bmi.n	800658e <_malloc_r+0xd6>
 800654e:	2a0b      	cmp	r2, #11
 8006550:	d917      	bls.n	8006582 <_malloc_r+0xca>
 8006552:	1961      	adds	r1, r4, r5
 8006554:	42a3      	cmp	r3, r4
 8006556:	6025      	str	r5, [r4, #0]
 8006558:	bf18      	it	ne
 800655a:	6059      	strne	r1, [r3, #4]
 800655c:	6863      	ldr	r3, [r4, #4]
 800655e:	bf08      	it	eq
 8006560:	f8c8 1000 	streq.w	r1, [r8]
 8006564:	5162      	str	r2, [r4, r5]
 8006566:	604b      	str	r3, [r1, #4]
 8006568:	4638      	mov	r0, r7
 800656a:	f104 060b 	add.w	r6, r4, #11
 800656e:	f000 f829 	bl	80065c4 <__malloc_unlock>
 8006572:	f026 0607 	bic.w	r6, r6, #7
 8006576:	1d23      	adds	r3, r4, #4
 8006578:	1af2      	subs	r2, r6, r3
 800657a:	d0ae      	beq.n	80064da <_malloc_r+0x22>
 800657c:	1b9b      	subs	r3, r3, r6
 800657e:	50a3      	str	r3, [r4, r2]
 8006580:	e7ab      	b.n	80064da <_malloc_r+0x22>
 8006582:	42a3      	cmp	r3, r4
 8006584:	6862      	ldr	r2, [r4, #4]
 8006586:	d1dd      	bne.n	8006544 <_malloc_r+0x8c>
 8006588:	f8c8 2000 	str.w	r2, [r8]
 800658c:	e7ec      	b.n	8006568 <_malloc_r+0xb0>
 800658e:	4623      	mov	r3, r4
 8006590:	6864      	ldr	r4, [r4, #4]
 8006592:	e7ac      	b.n	80064ee <_malloc_r+0x36>
 8006594:	4634      	mov	r4, r6
 8006596:	6876      	ldr	r6, [r6, #4]
 8006598:	e7b4      	b.n	8006504 <_malloc_r+0x4c>
 800659a:	4613      	mov	r3, r2
 800659c:	e7cc      	b.n	8006538 <_malloc_r+0x80>
 800659e:	230c      	movs	r3, #12
 80065a0:	603b      	str	r3, [r7, #0]
 80065a2:	4638      	mov	r0, r7
 80065a4:	f000 f80e 	bl	80065c4 <__malloc_unlock>
 80065a8:	e797      	b.n	80064da <_malloc_r+0x22>
 80065aa:	6025      	str	r5, [r4, #0]
 80065ac:	e7dc      	b.n	8006568 <_malloc_r+0xb0>
 80065ae:	605b      	str	r3, [r3, #4]
 80065b0:	deff      	udf	#255	; 0xff
 80065b2:	bf00      	nop
 80065b4:	20000a88 	.word	0x20000a88

080065b8 <__malloc_lock>:
 80065b8:	4801      	ldr	r0, [pc, #4]	; (80065c0 <__malloc_lock+0x8>)
 80065ba:	f7ff bf0f 	b.w	80063dc <__retarget_lock_acquire_recursive>
 80065be:	bf00      	nop
 80065c0:	20000a84 	.word	0x20000a84

080065c4 <__malloc_unlock>:
 80065c4:	4801      	ldr	r0, [pc, #4]	; (80065cc <__malloc_unlock+0x8>)
 80065c6:	f7ff bf0a 	b.w	80063de <__retarget_lock_release_recursive>
 80065ca:	bf00      	nop
 80065cc:	20000a84 	.word	0x20000a84

080065d0 <__ssputs_r>:
 80065d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	688e      	ldr	r6, [r1, #8]
 80065d6:	461f      	mov	r7, r3
 80065d8:	42be      	cmp	r6, r7
 80065da:	680b      	ldr	r3, [r1, #0]
 80065dc:	4682      	mov	sl, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	4690      	mov	r8, r2
 80065e2:	d82c      	bhi.n	800663e <__ssputs_r+0x6e>
 80065e4:	898a      	ldrh	r2, [r1, #12]
 80065e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065ea:	d026      	beq.n	800663a <__ssputs_r+0x6a>
 80065ec:	6965      	ldr	r5, [r4, #20]
 80065ee:	6909      	ldr	r1, [r1, #16]
 80065f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065f4:	eba3 0901 	sub.w	r9, r3, r1
 80065f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065fc:	1c7b      	adds	r3, r7, #1
 80065fe:	444b      	add	r3, r9
 8006600:	106d      	asrs	r5, r5, #1
 8006602:	429d      	cmp	r5, r3
 8006604:	bf38      	it	cc
 8006606:	461d      	movcc	r5, r3
 8006608:	0553      	lsls	r3, r2, #21
 800660a:	d527      	bpl.n	800665c <__ssputs_r+0x8c>
 800660c:	4629      	mov	r1, r5
 800660e:	f7ff ff53 	bl	80064b8 <_malloc_r>
 8006612:	4606      	mov	r6, r0
 8006614:	b360      	cbz	r0, 8006670 <__ssputs_r+0xa0>
 8006616:	6921      	ldr	r1, [r4, #16]
 8006618:	464a      	mov	r2, r9
 800661a:	f000 faeb 	bl	8006bf4 <memcpy>
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006628:	81a3      	strh	r3, [r4, #12]
 800662a:	6126      	str	r6, [r4, #16]
 800662c:	6165      	str	r5, [r4, #20]
 800662e:	444e      	add	r6, r9
 8006630:	eba5 0509 	sub.w	r5, r5, r9
 8006634:	6026      	str	r6, [r4, #0]
 8006636:	60a5      	str	r5, [r4, #8]
 8006638:	463e      	mov	r6, r7
 800663a:	42be      	cmp	r6, r7
 800663c:	d900      	bls.n	8006640 <__ssputs_r+0x70>
 800663e:	463e      	mov	r6, r7
 8006640:	6820      	ldr	r0, [r4, #0]
 8006642:	4632      	mov	r2, r6
 8006644:	4641      	mov	r1, r8
 8006646:	f000 faab 	bl	8006ba0 <memmove>
 800664a:	68a3      	ldr	r3, [r4, #8]
 800664c:	1b9b      	subs	r3, r3, r6
 800664e:	60a3      	str	r3, [r4, #8]
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	4433      	add	r3, r6
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	2000      	movs	r0, #0
 8006658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665c:	462a      	mov	r2, r5
 800665e:	f000 fad7 	bl	8006c10 <_realloc_r>
 8006662:	4606      	mov	r6, r0
 8006664:	2800      	cmp	r0, #0
 8006666:	d1e0      	bne.n	800662a <__ssputs_r+0x5a>
 8006668:	6921      	ldr	r1, [r4, #16]
 800666a:	4650      	mov	r0, sl
 800666c:	f7ff feb8 	bl	80063e0 <_free_r>
 8006670:	230c      	movs	r3, #12
 8006672:	f8ca 3000 	str.w	r3, [sl]
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800667c:	81a3      	strh	r3, [r4, #12]
 800667e:	f04f 30ff 	mov.w	r0, #4294967295
 8006682:	e7e9      	b.n	8006658 <__ssputs_r+0x88>

08006684 <_svfiprintf_r>:
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	4698      	mov	r8, r3
 800668a:	898b      	ldrh	r3, [r1, #12]
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	b09d      	sub	sp, #116	; 0x74
 8006690:	4607      	mov	r7, r0
 8006692:	460d      	mov	r5, r1
 8006694:	4614      	mov	r4, r2
 8006696:	d50e      	bpl.n	80066b6 <_svfiprintf_r+0x32>
 8006698:	690b      	ldr	r3, [r1, #16]
 800669a:	b963      	cbnz	r3, 80066b6 <_svfiprintf_r+0x32>
 800669c:	2140      	movs	r1, #64	; 0x40
 800669e:	f7ff ff0b 	bl	80064b8 <_malloc_r>
 80066a2:	6028      	str	r0, [r5, #0]
 80066a4:	6128      	str	r0, [r5, #16]
 80066a6:	b920      	cbnz	r0, 80066b2 <_svfiprintf_r+0x2e>
 80066a8:	230c      	movs	r3, #12
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	e0d0      	b.n	8006854 <_svfiprintf_r+0x1d0>
 80066b2:	2340      	movs	r3, #64	; 0x40
 80066b4:	616b      	str	r3, [r5, #20]
 80066b6:	2300      	movs	r3, #0
 80066b8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ba:	2320      	movs	r3, #32
 80066bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066c4:	2330      	movs	r3, #48	; 0x30
 80066c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800686c <_svfiprintf_r+0x1e8>
 80066ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ce:	f04f 0901 	mov.w	r9, #1
 80066d2:	4623      	mov	r3, r4
 80066d4:	469a      	mov	sl, r3
 80066d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066da:	b10a      	cbz	r2, 80066e0 <_svfiprintf_r+0x5c>
 80066dc:	2a25      	cmp	r2, #37	; 0x25
 80066de:	d1f9      	bne.n	80066d4 <_svfiprintf_r+0x50>
 80066e0:	ebba 0b04 	subs.w	fp, sl, r4
 80066e4:	d00b      	beq.n	80066fe <_svfiprintf_r+0x7a>
 80066e6:	465b      	mov	r3, fp
 80066e8:	4622      	mov	r2, r4
 80066ea:	4629      	mov	r1, r5
 80066ec:	4638      	mov	r0, r7
 80066ee:	f7ff ff6f 	bl	80065d0 <__ssputs_r>
 80066f2:	3001      	adds	r0, #1
 80066f4:	f000 80a9 	beq.w	800684a <_svfiprintf_r+0x1c6>
 80066f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066fa:	445a      	add	r2, fp
 80066fc:	9209      	str	r2, [sp, #36]	; 0x24
 80066fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 80a1 	beq.w	800684a <_svfiprintf_r+0x1c6>
 8006708:	2300      	movs	r3, #0
 800670a:	f04f 32ff 	mov.w	r2, #4294967295
 800670e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006712:	f10a 0a01 	add.w	sl, sl, #1
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	9307      	str	r3, [sp, #28]
 800671a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800671e:	931a      	str	r3, [sp, #104]	; 0x68
 8006720:	4654      	mov	r4, sl
 8006722:	2205      	movs	r2, #5
 8006724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006728:	4850      	ldr	r0, [pc, #320]	; (800686c <_svfiprintf_r+0x1e8>)
 800672a:	f7f9 fd69 	bl	8000200 <memchr>
 800672e:	9a04      	ldr	r2, [sp, #16]
 8006730:	b9d8      	cbnz	r0, 800676a <_svfiprintf_r+0xe6>
 8006732:	06d0      	lsls	r0, r2, #27
 8006734:	bf44      	itt	mi
 8006736:	2320      	movmi	r3, #32
 8006738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800673c:	0711      	lsls	r1, r2, #28
 800673e:	bf44      	itt	mi
 8006740:	232b      	movmi	r3, #43	; 0x2b
 8006742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006746:	f89a 3000 	ldrb.w	r3, [sl]
 800674a:	2b2a      	cmp	r3, #42	; 0x2a
 800674c:	d015      	beq.n	800677a <_svfiprintf_r+0xf6>
 800674e:	9a07      	ldr	r2, [sp, #28]
 8006750:	4654      	mov	r4, sl
 8006752:	2000      	movs	r0, #0
 8006754:	f04f 0c0a 	mov.w	ip, #10
 8006758:	4621      	mov	r1, r4
 800675a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800675e:	3b30      	subs	r3, #48	; 0x30
 8006760:	2b09      	cmp	r3, #9
 8006762:	d94d      	bls.n	8006800 <_svfiprintf_r+0x17c>
 8006764:	b1b0      	cbz	r0, 8006794 <_svfiprintf_r+0x110>
 8006766:	9207      	str	r2, [sp, #28]
 8006768:	e014      	b.n	8006794 <_svfiprintf_r+0x110>
 800676a:	eba0 0308 	sub.w	r3, r0, r8
 800676e:	fa09 f303 	lsl.w	r3, r9, r3
 8006772:	4313      	orrs	r3, r2
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	46a2      	mov	sl, r4
 8006778:	e7d2      	b.n	8006720 <_svfiprintf_r+0x9c>
 800677a:	9b03      	ldr	r3, [sp, #12]
 800677c:	1d19      	adds	r1, r3, #4
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	9103      	str	r1, [sp, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	bfbb      	ittet	lt
 8006786:	425b      	neglt	r3, r3
 8006788:	f042 0202 	orrlt.w	r2, r2, #2
 800678c:	9307      	strge	r3, [sp, #28]
 800678e:	9307      	strlt	r3, [sp, #28]
 8006790:	bfb8      	it	lt
 8006792:	9204      	strlt	r2, [sp, #16]
 8006794:	7823      	ldrb	r3, [r4, #0]
 8006796:	2b2e      	cmp	r3, #46	; 0x2e
 8006798:	d10c      	bne.n	80067b4 <_svfiprintf_r+0x130>
 800679a:	7863      	ldrb	r3, [r4, #1]
 800679c:	2b2a      	cmp	r3, #42	; 0x2a
 800679e:	d134      	bne.n	800680a <_svfiprintf_r+0x186>
 80067a0:	9b03      	ldr	r3, [sp, #12]
 80067a2:	1d1a      	adds	r2, r3, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	9203      	str	r2, [sp, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bfb8      	it	lt
 80067ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80067b0:	3402      	adds	r4, #2
 80067b2:	9305      	str	r3, [sp, #20]
 80067b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800687c <_svfiprintf_r+0x1f8>
 80067b8:	7821      	ldrb	r1, [r4, #0]
 80067ba:	2203      	movs	r2, #3
 80067bc:	4650      	mov	r0, sl
 80067be:	f7f9 fd1f 	bl	8000200 <memchr>
 80067c2:	b138      	cbz	r0, 80067d4 <_svfiprintf_r+0x150>
 80067c4:	9b04      	ldr	r3, [sp, #16]
 80067c6:	eba0 000a 	sub.w	r0, r0, sl
 80067ca:	2240      	movs	r2, #64	; 0x40
 80067cc:	4082      	lsls	r2, r0
 80067ce:	4313      	orrs	r3, r2
 80067d0:	3401      	adds	r4, #1
 80067d2:	9304      	str	r3, [sp, #16]
 80067d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d8:	4825      	ldr	r0, [pc, #148]	; (8006870 <_svfiprintf_r+0x1ec>)
 80067da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067de:	2206      	movs	r2, #6
 80067e0:	f7f9 fd0e 	bl	8000200 <memchr>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d038      	beq.n	800685a <_svfiprintf_r+0x1d6>
 80067e8:	4b22      	ldr	r3, [pc, #136]	; (8006874 <_svfiprintf_r+0x1f0>)
 80067ea:	bb1b      	cbnz	r3, 8006834 <_svfiprintf_r+0x1b0>
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	3307      	adds	r3, #7
 80067f0:	f023 0307 	bic.w	r3, r3, #7
 80067f4:	3308      	adds	r3, #8
 80067f6:	9303      	str	r3, [sp, #12]
 80067f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fa:	4433      	add	r3, r6
 80067fc:	9309      	str	r3, [sp, #36]	; 0x24
 80067fe:	e768      	b.n	80066d2 <_svfiprintf_r+0x4e>
 8006800:	fb0c 3202 	mla	r2, ip, r2, r3
 8006804:	460c      	mov	r4, r1
 8006806:	2001      	movs	r0, #1
 8006808:	e7a6      	b.n	8006758 <_svfiprintf_r+0xd4>
 800680a:	2300      	movs	r3, #0
 800680c:	3401      	adds	r4, #1
 800680e:	9305      	str	r3, [sp, #20]
 8006810:	4619      	mov	r1, r3
 8006812:	f04f 0c0a 	mov.w	ip, #10
 8006816:	4620      	mov	r0, r4
 8006818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800681c:	3a30      	subs	r2, #48	; 0x30
 800681e:	2a09      	cmp	r2, #9
 8006820:	d903      	bls.n	800682a <_svfiprintf_r+0x1a6>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0c6      	beq.n	80067b4 <_svfiprintf_r+0x130>
 8006826:	9105      	str	r1, [sp, #20]
 8006828:	e7c4      	b.n	80067b4 <_svfiprintf_r+0x130>
 800682a:	fb0c 2101 	mla	r1, ip, r1, r2
 800682e:	4604      	mov	r4, r0
 8006830:	2301      	movs	r3, #1
 8006832:	e7f0      	b.n	8006816 <_svfiprintf_r+0x192>
 8006834:	ab03      	add	r3, sp, #12
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	462a      	mov	r2, r5
 800683a:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <_svfiprintf_r+0x1f4>)
 800683c:	a904      	add	r1, sp, #16
 800683e:	4638      	mov	r0, r7
 8006840:	f3af 8000 	nop.w
 8006844:	1c42      	adds	r2, r0, #1
 8006846:	4606      	mov	r6, r0
 8006848:	d1d6      	bne.n	80067f8 <_svfiprintf_r+0x174>
 800684a:	89ab      	ldrh	r3, [r5, #12]
 800684c:	065b      	lsls	r3, r3, #25
 800684e:	f53f af2d 	bmi.w	80066ac <_svfiprintf_r+0x28>
 8006852:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006854:	b01d      	add	sp, #116	; 0x74
 8006856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685a:	ab03      	add	r3, sp, #12
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	462a      	mov	r2, r5
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <_svfiprintf_r+0x1f4>)
 8006862:	a904      	add	r1, sp, #16
 8006864:	4638      	mov	r0, r7
 8006866:	f000 f879 	bl	800695c <_printf_i>
 800686a:	e7eb      	b.n	8006844 <_svfiprintf_r+0x1c0>
 800686c:	08006d48 	.word	0x08006d48
 8006870:	08006d52 	.word	0x08006d52
 8006874:	00000000 	.word	0x00000000
 8006878:	080065d1 	.word	0x080065d1
 800687c:	08006d4e 	.word	0x08006d4e

08006880 <_printf_common>:
 8006880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006884:	4616      	mov	r6, r2
 8006886:	4699      	mov	r9, r3
 8006888:	688a      	ldr	r2, [r1, #8]
 800688a:	690b      	ldr	r3, [r1, #16]
 800688c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006890:	4293      	cmp	r3, r2
 8006892:	bfb8      	it	lt
 8006894:	4613      	movlt	r3, r2
 8006896:	6033      	str	r3, [r6, #0]
 8006898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800689c:	4607      	mov	r7, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	b10a      	cbz	r2, 80068a6 <_printf_common+0x26>
 80068a2:	3301      	adds	r3, #1
 80068a4:	6033      	str	r3, [r6, #0]
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	0699      	lsls	r1, r3, #26
 80068aa:	bf42      	ittt	mi
 80068ac:	6833      	ldrmi	r3, [r6, #0]
 80068ae:	3302      	addmi	r3, #2
 80068b0:	6033      	strmi	r3, [r6, #0]
 80068b2:	6825      	ldr	r5, [r4, #0]
 80068b4:	f015 0506 	ands.w	r5, r5, #6
 80068b8:	d106      	bne.n	80068c8 <_printf_common+0x48>
 80068ba:	f104 0a19 	add.w	sl, r4, #25
 80068be:	68e3      	ldr	r3, [r4, #12]
 80068c0:	6832      	ldr	r2, [r6, #0]
 80068c2:	1a9b      	subs	r3, r3, r2
 80068c4:	42ab      	cmp	r3, r5
 80068c6:	dc26      	bgt.n	8006916 <_printf_common+0x96>
 80068c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068cc:	1e13      	subs	r3, r2, #0
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	bf18      	it	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	0692      	lsls	r2, r2, #26
 80068d6:	d42b      	bmi.n	8006930 <_printf_common+0xb0>
 80068d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068dc:	4649      	mov	r1, r9
 80068de:	4638      	mov	r0, r7
 80068e0:	47c0      	blx	r8
 80068e2:	3001      	adds	r0, #1
 80068e4:	d01e      	beq.n	8006924 <_printf_common+0xa4>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	6922      	ldr	r2, [r4, #16]
 80068ea:	f003 0306 	and.w	r3, r3, #6
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	bf02      	ittt	eq
 80068f2:	68e5      	ldreq	r5, [r4, #12]
 80068f4:	6833      	ldreq	r3, [r6, #0]
 80068f6:	1aed      	subeq	r5, r5, r3
 80068f8:	68a3      	ldr	r3, [r4, #8]
 80068fa:	bf0c      	ite	eq
 80068fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006900:	2500      	movne	r5, #0
 8006902:	4293      	cmp	r3, r2
 8006904:	bfc4      	itt	gt
 8006906:	1a9b      	subgt	r3, r3, r2
 8006908:	18ed      	addgt	r5, r5, r3
 800690a:	2600      	movs	r6, #0
 800690c:	341a      	adds	r4, #26
 800690e:	42b5      	cmp	r5, r6
 8006910:	d11a      	bne.n	8006948 <_printf_common+0xc8>
 8006912:	2000      	movs	r0, #0
 8006914:	e008      	b.n	8006928 <_printf_common+0xa8>
 8006916:	2301      	movs	r3, #1
 8006918:	4652      	mov	r2, sl
 800691a:	4649      	mov	r1, r9
 800691c:	4638      	mov	r0, r7
 800691e:	47c0      	blx	r8
 8006920:	3001      	adds	r0, #1
 8006922:	d103      	bne.n	800692c <_printf_common+0xac>
 8006924:	f04f 30ff 	mov.w	r0, #4294967295
 8006928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692c:	3501      	adds	r5, #1
 800692e:	e7c6      	b.n	80068be <_printf_common+0x3e>
 8006930:	18e1      	adds	r1, r4, r3
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	2030      	movs	r0, #48	; 0x30
 8006936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800693a:	4422      	add	r2, r4
 800693c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006944:	3302      	adds	r3, #2
 8006946:	e7c7      	b.n	80068d8 <_printf_common+0x58>
 8006948:	2301      	movs	r3, #1
 800694a:	4622      	mov	r2, r4
 800694c:	4649      	mov	r1, r9
 800694e:	4638      	mov	r0, r7
 8006950:	47c0      	blx	r8
 8006952:	3001      	adds	r0, #1
 8006954:	d0e6      	beq.n	8006924 <_printf_common+0xa4>
 8006956:	3601      	adds	r6, #1
 8006958:	e7d9      	b.n	800690e <_printf_common+0x8e>
	...

0800695c <_printf_i>:
 800695c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	7e0f      	ldrb	r7, [r1, #24]
 8006962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006964:	2f78      	cmp	r7, #120	; 0x78
 8006966:	4691      	mov	r9, r2
 8006968:	4680      	mov	r8, r0
 800696a:	460c      	mov	r4, r1
 800696c:	469a      	mov	sl, r3
 800696e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006972:	d807      	bhi.n	8006984 <_printf_i+0x28>
 8006974:	2f62      	cmp	r7, #98	; 0x62
 8006976:	d80a      	bhi.n	800698e <_printf_i+0x32>
 8006978:	2f00      	cmp	r7, #0
 800697a:	f000 80d4 	beq.w	8006b26 <_printf_i+0x1ca>
 800697e:	2f58      	cmp	r7, #88	; 0x58
 8006980:	f000 80c0 	beq.w	8006b04 <_printf_i+0x1a8>
 8006984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800698c:	e03a      	b.n	8006a04 <_printf_i+0xa8>
 800698e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006992:	2b15      	cmp	r3, #21
 8006994:	d8f6      	bhi.n	8006984 <_printf_i+0x28>
 8006996:	a101      	add	r1, pc, #4	; (adr r1, 800699c <_printf_i+0x40>)
 8006998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	08006a09 	.word	0x08006a09
 80069a4:	08006985 	.word	0x08006985
 80069a8:	08006985 	.word	0x08006985
 80069ac:	08006985 	.word	0x08006985
 80069b0:	08006985 	.word	0x08006985
 80069b4:	08006a09 	.word	0x08006a09
 80069b8:	08006985 	.word	0x08006985
 80069bc:	08006985 	.word	0x08006985
 80069c0:	08006985 	.word	0x08006985
 80069c4:	08006985 	.word	0x08006985
 80069c8:	08006b0d 	.word	0x08006b0d
 80069cc:	08006a35 	.word	0x08006a35
 80069d0:	08006ac7 	.word	0x08006ac7
 80069d4:	08006985 	.word	0x08006985
 80069d8:	08006985 	.word	0x08006985
 80069dc:	08006b2f 	.word	0x08006b2f
 80069e0:	08006985 	.word	0x08006985
 80069e4:	08006a35 	.word	0x08006a35
 80069e8:	08006985 	.word	0x08006985
 80069ec:	08006985 	.word	0x08006985
 80069f0:	08006acf 	.word	0x08006acf
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	1d1a      	adds	r2, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	602a      	str	r2, [r5, #0]
 80069fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a04:	2301      	movs	r3, #1
 8006a06:	e09f      	b.n	8006b48 <_printf_i+0x1ec>
 8006a08:	6820      	ldr	r0, [r4, #0]
 8006a0a:	682b      	ldr	r3, [r5, #0]
 8006a0c:	0607      	lsls	r7, r0, #24
 8006a0e:	f103 0104 	add.w	r1, r3, #4
 8006a12:	6029      	str	r1, [r5, #0]
 8006a14:	d501      	bpl.n	8006a1a <_printf_i+0xbe>
 8006a16:	681e      	ldr	r6, [r3, #0]
 8006a18:	e003      	b.n	8006a22 <_printf_i+0xc6>
 8006a1a:	0646      	lsls	r6, r0, #25
 8006a1c:	d5fb      	bpl.n	8006a16 <_printf_i+0xba>
 8006a1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a22:	2e00      	cmp	r6, #0
 8006a24:	da03      	bge.n	8006a2e <_printf_i+0xd2>
 8006a26:	232d      	movs	r3, #45	; 0x2d
 8006a28:	4276      	negs	r6, r6
 8006a2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a2e:	485a      	ldr	r0, [pc, #360]	; (8006b98 <_printf_i+0x23c>)
 8006a30:	230a      	movs	r3, #10
 8006a32:	e012      	b.n	8006a5a <_printf_i+0xfe>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	6820      	ldr	r0, [r4, #0]
 8006a38:	1d19      	adds	r1, r3, #4
 8006a3a:	6029      	str	r1, [r5, #0]
 8006a3c:	0605      	lsls	r5, r0, #24
 8006a3e:	d501      	bpl.n	8006a44 <_printf_i+0xe8>
 8006a40:	681e      	ldr	r6, [r3, #0]
 8006a42:	e002      	b.n	8006a4a <_printf_i+0xee>
 8006a44:	0641      	lsls	r1, r0, #25
 8006a46:	d5fb      	bpl.n	8006a40 <_printf_i+0xe4>
 8006a48:	881e      	ldrh	r6, [r3, #0]
 8006a4a:	4853      	ldr	r0, [pc, #332]	; (8006b98 <_printf_i+0x23c>)
 8006a4c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a4e:	bf0c      	ite	eq
 8006a50:	2308      	moveq	r3, #8
 8006a52:	230a      	movne	r3, #10
 8006a54:	2100      	movs	r1, #0
 8006a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a5a:	6865      	ldr	r5, [r4, #4]
 8006a5c:	60a5      	str	r5, [r4, #8]
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	bfa2      	ittt	ge
 8006a62:	6821      	ldrge	r1, [r4, #0]
 8006a64:	f021 0104 	bicge.w	r1, r1, #4
 8006a68:	6021      	strge	r1, [r4, #0]
 8006a6a:	b90e      	cbnz	r6, 8006a70 <_printf_i+0x114>
 8006a6c:	2d00      	cmp	r5, #0
 8006a6e:	d04b      	beq.n	8006b08 <_printf_i+0x1ac>
 8006a70:	4615      	mov	r5, r2
 8006a72:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a76:	fb03 6711 	mls	r7, r3, r1, r6
 8006a7a:	5dc7      	ldrb	r7, [r0, r7]
 8006a7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a80:	4637      	mov	r7, r6
 8006a82:	42bb      	cmp	r3, r7
 8006a84:	460e      	mov	r6, r1
 8006a86:	d9f4      	bls.n	8006a72 <_printf_i+0x116>
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d10b      	bne.n	8006aa4 <_printf_i+0x148>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	07de      	lsls	r6, r3, #31
 8006a90:	d508      	bpl.n	8006aa4 <_printf_i+0x148>
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	6861      	ldr	r1, [r4, #4]
 8006a96:	4299      	cmp	r1, r3
 8006a98:	bfde      	ittt	le
 8006a9a:	2330      	movle	r3, #48	; 0x30
 8006a9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006aa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006aa4:	1b52      	subs	r2, r2, r5
 8006aa6:	6122      	str	r2, [r4, #16]
 8006aa8:	f8cd a000 	str.w	sl, [sp]
 8006aac:	464b      	mov	r3, r9
 8006aae:	aa03      	add	r2, sp, #12
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	f7ff fee4 	bl	8006880 <_printf_common>
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d14a      	bne.n	8006b52 <_printf_i+0x1f6>
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	b004      	add	sp, #16
 8006ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	f043 0320 	orr.w	r3, r3, #32
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	4833      	ldr	r0, [pc, #204]	; (8006b9c <_printf_i+0x240>)
 8006ad0:	2778      	movs	r7, #120	; 0x78
 8006ad2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	6829      	ldr	r1, [r5, #0]
 8006ada:	061f      	lsls	r7, r3, #24
 8006adc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ae0:	d402      	bmi.n	8006ae8 <_printf_i+0x18c>
 8006ae2:	065f      	lsls	r7, r3, #25
 8006ae4:	bf48      	it	mi
 8006ae6:	b2b6      	uxthmi	r6, r6
 8006ae8:	07df      	lsls	r7, r3, #31
 8006aea:	bf48      	it	mi
 8006aec:	f043 0320 	orrmi.w	r3, r3, #32
 8006af0:	6029      	str	r1, [r5, #0]
 8006af2:	bf48      	it	mi
 8006af4:	6023      	strmi	r3, [r4, #0]
 8006af6:	b91e      	cbnz	r6, 8006b00 <_printf_i+0x1a4>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	f023 0320 	bic.w	r3, r3, #32
 8006afe:	6023      	str	r3, [r4, #0]
 8006b00:	2310      	movs	r3, #16
 8006b02:	e7a7      	b.n	8006a54 <_printf_i+0xf8>
 8006b04:	4824      	ldr	r0, [pc, #144]	; (8006b98 <_printf_i+0x23c>)
 8006b06:	e7e4      	b.n	8006ad2 <_printf_i+0x176>
 8006b08:	4615      	mov	r5, r2
 8006b0a:	e7bd      	b.n	8006a88 <_printf_i+0x12c>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	6826      	ldr	r6, [r4, #0]
 8006b10:	6961      	ldr	r1, [r4, #20]
 8006b12:	1d18      	adds	r0, r3, #4
 8006b14:	6028      	str	r0, [r5, #0]
 8006b16:	0635      	lsls	r5, r6, #24
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	d501      	bpl.n	8006b20 <_printf_i+0x1c4>
 8006b1c:	6019      	str	r1, [r3, #0]
 8006b1e:	e002      	b.n	8006b26 <_printf_i+0x1ca>
 8006b20:	0670      	lsls	r0, r6, #25
 8006b22:	d5fb      	bpl.n	8006b1c <_printf_i+0x1c0>
 8006b24:	8019      	strh	r1, [r3, #0]
 8006b26:	2300      	movs	r3, #0
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	4615      	mov	r5, r2
 8006b2c:	e7bc      	b.n	8006aa8 <_printf_i+0x14c>
 8006b2e:	682b      	ldr	r3, [r5, #0]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	602a      	str	r2, [r5, #0]
 8006b34:	681d      	ldr	r5, [r3, #0]
 8006b36:	6862      	ldr	r2, [r4, #4]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f7f9 fb60 	bl	8000200 <memchr>
 8006b40:	b108      	cbz	r0, 8006b46 <_printf_i+0x1ea>
 8006b42:	1b40      	subs	r0, r0, r5
 8006b44:	6060      	str	r0, [r4, #4]
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b50:	e7aa      	b.n	8006aa8 <_printf_i+0x14c>
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	462a      	mov	r2, r5
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d0ad      	beq.n	8006abc <_printf_i+0x160>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	079b      	lsls	r3, r3, #30
 8006b64:	d413      	bmi.n	8006b8e <_printf_i+0x232>
 8006b66:	68e0      	ldr	r0, [r4, #12]
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	4298      	cmp	r0, r3
 8006b6c:	bfb8      	it	lt
 8006b6e:	4618      	movlt	r0, r3
 8006b70:	e7a6      	b.n	8006ac0 <_printf_i+0x164>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4632      	mov	r2, r6
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	47d0      	blx	sl
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d09d      	beq.n	8006abc <_printf_i+0x160>
 8006b80:	3501      	adds	r5, #1
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	9903      	ldr	r1, [sp, #12]
 8006b86:	1a5b      	subs	r3, r3, r1
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	dcf2      	bgt.n	8006b72 <_printf_i+0x216>
 8006b8c:	e7eb      	b.n	8006b66 <_printf_i+0x20a>
 8006b8e:	2500      	movs	r5, #0
 8006b90:	f104 0619 	add.w	r6, r4, #25
 8006b94:	e7f5      	b.n	8006b82 <_printf_i+0x226>
 8006b96:	bf00      	nop
 8006b98:	08006d59 	.word	0x08006d59
 8006b9c:	08006d6a 	.word	0x08006d6a

08006ba0 <memmove>:
 8006ba0:	4288      	cmp	r0, r1
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	eb01 0402 	add.w	r4, r1, r2
 8006ba8:	d902      	bls.n	8006bb0 <memmove+0x10>
 8006baa:	4284      	cmp	r4, r0
 8006bac:	4623      	mov	r3, r4
 8006bae:	d807      	bhi.n	8006bc0 <memmove+0x20>
 8006bb0:	1e43      	subs	r3, r0, #1
 8006bb2:	42a1      	cmp	r1, r4
 8006bb4:	d008      	beq.n	8006bc8 <memmove+0x28>
 8006bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bbe:	e7f8      	b.n	8006bb2 <memmove+0x12>
 8006bc0:	4402      	add	r2, r0
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	428a      	cmp	r2, r1
 8006bc6:	d100      	bne.n	8006bca <memmove+0x2a>
 8006bc8:	bd10      	pop	{r4, pc}
 8006bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bd2:	e7f7      	b.n	8006bc4 <memmove+0x24>

08006bd4 <_sbrk_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4d06      	ldr	r5, [pc, #24]	; (8006bf0 <_sbrk_r+0x1c>)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4604      	mov	r4, r0
 8006bdc:	4608      	mov	r0, r1
 8006bde:	602b      	str	r3, [r5, #0]
 8006be0:	f7fa fb5a 	bl	8001298 <_sbrk>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <_sbrk_r+0x1a>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b103      	cbz	r3, 8006bee <_sbrk_r+0x1a>
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	20000a80 	.word	0x20000a80

08006bf4 <memcpy>:
 8006bf4:	440a      	add	r2, r1
 8006bf6:	4291      	cmp	r1, r2
 8006bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bfc:	d100      	bne.n	8006c00 <memcpy+0xc>
 8006bfe:	4770      	bx	lr
 8006c00:	b510      	push	{r4, lr}
 8006c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c0a:	4291      	cmp	r1, r2
 8006c0c:	d1f9      	bne.n	8006c02 <memcpy+0xe>
 8006c0e:	bd10      	pop	{r4, pc}

08006c10 <_realloc_r>:
 8006c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c14:	4680      	mov	r8, r0
 8006c16:	4614      	mov	r4, r2
 8006c18:	460e      	mov	r6, r1
 8006c1a:	b921      	cbnz	r1, 8006c26 <_realloc_r+0x16>
 8006c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c20:	4611      	mov	r1, r2
 8006c22:	f7ff bc49 	b.w	80064b8 <_malloc_r>
 8006c26:	b92a      	cbnz	r2, 8006c34 <_realloc_r+0x24>
 8006c28:	f7ff fbda 	bl	80063e0 <_free_r>
 8006c2c:	4625      	mov	r5, r4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c34:	f000 f81b 	bl	8006c6e <_malloc_usable_size_r>
 8006c38:	4284      	cmp	r4, r0
 8006c3a:	4607      	mov	r7, r0
 8006c3c:	d802      	bhi.n	8006c44 <_realloc_r+0x34>
 8006c3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c42:	d812      	bhi.n	8006c6a <_realloc_r+0x5a>
 8006c44:	4621      	mov	r1, r4
 8006c46:	4640      	mov	r0, r8
 8006c48:	f7ff fc36 	bl	80064b8 <_malloc_r>
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d0ed      	beq.n	8006c2e <_realloc_r+0x1e>
 8006c52:	42bc      	cmp	r4, r7
 8006c54:	4622      	mov	r2, r4
 8006c56:	4631      	mov	r1, r6
 8006c58:	bf28      	it	cs
 8006c5a:	463a      	movcs	r2, r7
 8006c5c:	f7ff ffca 	bl	8006bf4 <memcpy>
 8006c60:	4631      	mov	r1, r6
 8006c62:	4640      	mov	r0, r8
 8006c64:	f7ff fbbc 	bl	80063e0 <_free_r>
 8006c68:	e7e1      	b.n	8006c2e <_realloc_r+0x1e>
 8006c6a:	4635      	mov	r5, r6
 8006c6c:	e7df      	b.n	8006c2e <_realloc_r+0x1e>

08006c6e <_malloc_usable_size_r>:
 8006c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c72:	1f18      	subs	r0, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bfbc      	itt	lt
 8006c78:	580b      	ldrlt	r3, [r1, r0]
 8006c7a:	18c0      	addlt	r0, r0, r3
 8006c7c:	4770      	bx	lr
	...

08006c80 <_init>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr

08006c8c <_fini>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	bf00      	nop
 8006c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	469e      	mov	lr, r3
 8006c96:	4770      	bx	lr
