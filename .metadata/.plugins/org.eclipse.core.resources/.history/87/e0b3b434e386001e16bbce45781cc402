/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "eth.h"
#include "usart.h"
#include "usb_otg.h"
#include "gpio.h"
#include "main.h"
#include "adc.h"
#include "i2c.h"
#include "rtc.h"
#include "tim.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ETH_Init();
  MX_USART3_UART_Init();
  MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
_Direction getButton(){

	if(adc_value > 3700){
		return NONE;
	}else if(adc_value < 20 && button_before==NONE){
		return UP;
	}else if(adc_value > 800 && adc_value < 900 && button_before==NONE){
		return DOWN;
	}else if(adc_value > 1700 && adc_value < 2100 && button_before==NONE){
		return LEFT;
	}else if(adc_value > 2700 && adc_value < 3100 && button_before==NONE){
		return RIGHT;
	}else
		return UNKNOWN;
}

void move_cur_time(RTC_TimeTypeDef *Time, _Direction direction){
	switch(direction){
	case RIGHT:
		setmode++;
		if(setmode > SECOND_O) setmode = SECOND_O;
		break;
	case LEFT:
		if(setmode > AMPM) setmode--;
		break;
	case UP:
		if(setmode==AMPM){
			Time->TimeFormat ^= 1;
		}else if(setmode==HOUR_T){
			Time->Hours+=10;
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 1;
		}else if(setmode==HOUR_O){
			Time->Hours++;
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 1;
		}else if(setmode==MINUTE_T){
			Time->Minutes+=10;
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 0;
		}else if(setmode==MINUTE_O){
			Time->Minutes++;
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 0;
		}else if(setmode==SECOND_T){
			Time->Seconds+=10;
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
		}else if(setmode==SECOND_O){
			Time->Seconds++;
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 0;
		}
		break;
	case DOWN:
		if(setmode==AMPM){
			Time->TimeFormat ^= 1;
		}else if(setmode==HOUR_T){
			Time->Hours-=10;
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 12;
		}else if(setmode==HOUR_O){
			Time->Hours--;
			if(!IS_RTC_HOUR12(Time->Hours)) Time->Hours = 12;
		}else if(setmode==MINUTE_T){
			Time->Minutes-=10;
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 59;
		}else if(setmode==MINUTE_O){
			Time->Minutes--;
			if(!IS_RTC_MINUTES(Time->Minutes)) Time->Minutes = 59;
		}else if(setmode==SECOND_T){
			Time->Seconds-=10;
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
		}else if(setmode==SECOND_O){
			Time->Seconds--;
			if(!IS_RTC_SECONDS(Time->Seconds)) Time->Seconds = 59;
		}
		break;
	case NONE:
		break;
	case UNKNOWN:
		break;
	}


}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == GPIO_PIN_13){

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
			user_pulled_flag=0;
			user_pressed_flag=1;
			old_tick=HAL_GetTick();
			current_tick=HAL_GetTick();
		}else {
			user_pulled_flag=1;
			user_pressed_flag=0;
		}

	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
