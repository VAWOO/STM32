
EXTI_UP_DOWN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004774  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004994  08004994  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800499c  0800499c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a0  080049a0  000149a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080049a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000006c8  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000730  20000730  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cc2b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000236c  00000000  00000000  0002cd06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b08  00000000  00000000  0002f078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000862  00000000  00000000  0002fb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002473a  00000000  00000000  000303e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e47d  00000000  00000000  00054b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5bb4  00000000  00000000  00062f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003408  00000000  00000000  00138b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0013bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800490c 	.word	0x0800490c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	0800490c 	.word	0x0800490c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
 80005a6:	4b99      	ldr	r3, [pc, #612]	; (800080c <MX_GPIO_Init+0x280>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a98      	ldr	r2, [pc, #608]	; (800080c <MX_GPIO_Init+0x280>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b96      	ldr	r3, [pc, #600]	; (800080c <MX_GPIO_Init+0x280>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	61bb      	str	r3, [r7, #24]
 80005bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	4b92      	ldr	r3, [pc, #584]	; (800080c <MX_GPIO_Init+0x280>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a91      	ldr	r2, [pc, #580]	; (800080c <MX_GPIO_Init+0x280>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b8f      	ldr	r3, [pc, #572]	; (800080c <MX_GPIO_Init+0x280>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	4b8b      	ldr	r3, [pc, #556]	; (800080c <MX_GPIO_Init+0x280>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a8a      	ldr	r2, [pc, #552]	; (800080c <MX_GPIO_Init+0x280>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b88      	ldr	r3, [pc, #544]	; (800080c <MX_GPIO_Init+0x280>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b84      	ldr	r3, [pc, #528]	; (800080c <MX_GPIO_Init+0x280>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a83      	ldr	r2, [pc, #524]	; (800080c <MX_GPIO_Init+0x280>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b81      	ldr	r3, [pc, #516]	; (800080c <MX_GPIO_Init+0x280>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b7d      	ldr	r3, [pc, #500]	; (800080c <MX_GPIO_Init+0x280>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a7c      	ldr	r2, [pc, #496]	; (800080c <MX_GPIO_Init+0x280>)
 800061c:	f043 0320 	orr.w	r3, r3, #32
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b7a      	ldr	r3, [pc, #488]	; (800080c <MX_GPIO_Init+0x280>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0320 	and.w	r3, r3, #32
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b76      	ldr	r3, [pc, #472]	; (800080c <MX_GPIO_Init+0x280>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a75      	ldr	r2, [pc, #468]	; (800080c <MX_GPIO_Init+0x280>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b73      	ldr	r3, [pc, #460]	; (800080c <MX_GPIO_Init+0x280>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b6f      	ldr	r3, [pc, #444]	; (800080c <MX_GPIO_Init+0x280>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a6e      	ldr	r2, [pc, #440]	; (800080c <MX_GPIO_Init+0x280>)
 8000654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b6c      	ldr	r3, [pc, #432]	; (800080c <MX_GPIO_Init+0x280>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	21e0      	movs	r1, #224	; 0xe0
 800066a:	4869      	ldr	r0, [pc, #420]	; (8000810 <MX_GPIO_Init+0x284>)
 800066c:	f001 f918 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f244 0181 	movw	r1, #16513	; 0x4081
 8000676:	4867      	ldr	r0, [pc, #412]	; (8000814 <MX_GPIO_Init+0x288>)
 8000678:	f001 f912 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SEG_PIN1_Pin|SEG_PIN2_Pin|SEG_PIN3_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000682:	4865      	ldr	r0, [pc, #404]	; (8000818 <MX_GPIO_Init+0x28c>)
 8000684:	f001 f90c 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068e:	4863      	ldr	r0, [pc, #396]	; (800081c <MX_GPIO_Init+0x290>)
 8000690:	f001 f906 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	4861      	ldr	r0, [pc, #388]	; (8000820 <MX_GPIO_Init+0x294>)
 800069a:	f001 f901 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_up_Pin;
 800069e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_up_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	485b      	ldr	r0, [pc, #364]	; (8000824 <MX_GPIO_Init+0x298>)
 80006b6:	f000 ff47 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006ba:	2332      	movs	r3, #50	; 0x32
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ca:	230b      	movs	r3, #11
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	4853      	ldr	r0, [pc, #332]	; (8000824 <MX_GPIO_Init+0x298>)
 80006d6:	f000 ff37 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_down_Pin;
 80006da:	2308      	movs	r3, #8
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_down_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	484d      	ldr	r0, [pc, #308]	; (8000824 <MX_GPIO_Init+0x298>)
 80006f0:	f000 ff2a 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80006f4:	2306      	movs	r3, #6
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000704:	230b      	movs	r3, #11
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4840      	ldr	r0, [pc, #256]	; (8000810 <MX_GPIO_Init+0x284>)
 8000710:	f000 ff1a 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin;
 8000714:	23e0      	movs	r3, #224	; 0xe0
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4839      	ldr	r0, [pc, #228]	; (8000810 <MX_GPIO_Init+0x284>)
 800072c:	f000 ff0c 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000730:	f244 0381 	movw	r3, #16513	; 0x4081
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4832      	ldr	r0, [pc, #200]	; (8000814 <MX_GPIO_Init+0x288>)
 800074a:	f000 fefd 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SEG_PIN1_Pin|SEG_PIN2_Pin|SEG_PIN3_Pin;
 800074e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	482c      	ldr	r0, [pc, #176]	; (8000818 <MX_GPIO_Init+0x28c>)
 8000768:	f000 feee 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077e:	230b      	movs	r3, #11
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4822      	ldr	r0, [pc, #136]	; (8000814 <MX_GPIO_Init+0x288>)
 800078a:	f000 fedd 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 800078e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	481d      	ldr	r0, [pc, #116]	; (800081c <MX_GPIO_Init+0x290>)
 80007a8:	f000 fece 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007ac:	2340      	movs	r3, #64	; 0x40
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4817      	ldr	r0, [pc, #92]	; (8000820 <MX_GPIO_Init+0x294>)
 80007c4:	f000 fec0 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4811      	ldr	r0, [pc, #68]	; (8000820 <MX_GPIO_Init+0x294>)
 80007dc:	f000 feb4 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f2:	230b      	movs	r3, #11
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <MX_GPIO_Init+0x294>)
 80007fe:	f000 fea3 	bl	8001548 <HAL_GPIO_Init>

}
 8000802:	bf00      	nop
 8000804:	3730      	adds	r7, #48	; 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020000 	.word	0x40020000
 8000814:	40020400 	.word	0x40020400
 8000818:	40021400 	.word	0x40021400
 800081c:	40020c00 	.word	0x40020c00
 8000820:	40021800 	.word	0x40021800
 8000824:	40020800 	.word	0x40020800

08000828 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	b29a      	uxth	r2, r3
 8000838:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800083c:	68b9      	ldr	r1, [r7, #8]
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <_write+0x28>)
 8000840:	f001 fe63 	bl	800250a <HAL_UART_Transmit>
	return len;
 8000844:	687b      	ldr	r3, [r7, #4]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000090 	.word	0x20000090

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f000 fc3b 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f849 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f7ff fe93 	bl	800058c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000866:	f000 fb11 	bl	8000e8c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800086a:	f000 fb81 	bl	8000f70 <MX_USB_OTG_FS_PCD_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800086e:	f000 f8ab 	bl	80009c8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  uint8_t count[4] = {0,};
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  counter0to9999(count, counter);
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <main+0x94>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f9ab 	bl	8000bdc <counter0to9999>

	  DisplayFND(ttl7447(count[0]), 1);	// thousands
 8000886:	793b      	ldrb	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f913 	bl	8000ab4 <ttl7447>
 800088e:	4603      	mov	r3, r0
 8000890:	2101      	movs	r1, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f94a 	bl	8000b2c <DisplayFND>
	  DisplayFND(ttl7447(count[1]), 2);	// hundreds
 8000898:	797b      	ldrb	r3, [r7, #5]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f90a 	bl	8000ab4 <ttl7447>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2102      	movs	r1, #2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 f941 	bl	8000b2c <DisplayFND>
	  DisplayFND(ttl7447(count[2]), 3);	// tens
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f901 	bl	8000ab4 <ttl7447>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2103      	movs	r1, #3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f938 	bl	8000b2c <DisplayFND>
	  DisplayFND(ttl7447(count[3]), 4);	// ones
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f8f8 	bl	8000ab4 <ttl7447>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2104      	movs	r1, #4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f92f 	bl	8000b2c <DisplayFND>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	21e0      	movs	r1, #224	; 0xe0
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <main+0x98>)
 80008d4:	f000 ffe4 	bl	80018a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <main+0x9c>)
 80008e0:	f000 ffde 	bl	80018a0 <HAL_GPIO_WritePin>
	  counter0to9999(count, counter);
 80008e4:	e7c7      	b.n	8000876 <main+0x22>
 80008e6:	bf00      	nop
 80008e8:	20000084 	.word	0x20000084
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020c00 	.word	0x40020c00

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	; 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f003 f9e1 	bl	8003cca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <SystemClock_Config+0xcc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a27      	ldr	r2, [pc, #156]	; (80009c0 <SystemClock_Config+0xcc>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <SystemClock_Config+0xcc>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <SystemClock_Config+0xd0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <SystemClock_Config+0xd0>)
 800093e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <SystemClock_Config+0xd0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000954:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000964:	2304      	movs	r3, #4
 8000966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000968:	23a8      	movs	r3, #168	; 0xa8
 800096a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000970:	2307      	movs	r3, #7
 8000972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4618      	mov	r0, r3
 800097a:	f001 f8e1 	bl	8001b40 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000984:	f000 f976 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000994:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2105      	movs	r1, #5
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fb42 	bl	8002030 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009b2:	f000 f95f 	bl	8000c74 <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3750      	adds	r7, #80	; 0x50
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2009      	movs	r0, #9
 80009d2:	f000 fcf0 	bl	80013b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009d6:	2009      	movs	r0, #9
 80009d8:	f000 fd09 	bl	80013ee <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2028      	movs	r0, #40	; 0x28
 80009e2:	f000 fce8 	bl	80013b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e6:	2028      	movs	r0, #40	; 0x28
 80009e8:	f000 fd01 	bl	80013ee <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	2027      	movs	r0, #39	; 0x27
 80009f2:	f000 fce0 	bl	80013b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009f6:	2027      	movs	r0, #39	; 0x27
 80009f8:	f000 fcf9 	bl	80013ee <HAL_NVIC_EnableIRQ>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick = 0;

	if(GPIO_Pin == GPIO_PIN_13)
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a10:	d122      	bne.n	8000a58 <HAL_GPIO_EXTI_Callback+0x58>
	{
		if (HAL_GetTick() - before_tick >= 300)
 8000a12:	f000 fbc5 	bl	80011a0 <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a22:	d33d      	bcc.n	8000aa0 <HAL_GPIO_EXTI_Callback+0xa0>
		{
			before_tick = HAL_GetTick();
 8000a24:	f000 fbbc 	bl	80011a0 <HAL_GetTick>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a2c:	6013      	str	r3, [r2, #0]

			counter++;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <HAL_GPIO_EXTI_Callback+0xac>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <HAL_GPIO_EXTI_Callback+0xac>)
 8000a36:	6013      	str	r3, [r2, #0]

			if (counter > 9999)
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_GPIO_EXTI_Callback+0xac>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a40:	4293      	cmp	r3, r2
 8000a42:	dd02      	ble.n	8000a4a <HAL_GPIO_EXTI_Callback+0x4a>
			{
				counter = 0;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_GPIO_EXTI_Callback+0xac>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
			}

			printf("USART print 7segment number=%d\r\n", counter);
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_GPIO_EXTI_Callback+0xac>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000a52:	f003 f8e5 	bl	8003c20 <iprintf>
			}

			printf("USART print 7segment number=%d\r\n", counter);
		}
	}
}
 8000a56:	e023      	b.n	8000aa0 <HAL_GPIO_EXTI_Callback+0xa0>
	else if (GPIO_Pin == GPIO_PIN_3)
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	2b08      	cmp	r3, #8
 8000a5c:	d120      	bne.n	8000aa0 <HAL_GPIO_EXTI_Callback+0xa0>
		if (HAL_GetTick() - before_tick >= 300)
 8000a5e:	f000 fb9f 	bl	80011a0 <HAL_GetTick>
 8000a62:	4602      	mov	r2, r0
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a6e:	d317      	bcc.n	8000aa0 <HAL_GPIO_EXTI_Callback+0xa0>
			before_tick = HAL_GetTick();
 8000a70:	f000 fb96 	bl	80011a0 <HAL_GetTick>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a78:	6013      	str	r3, [r2, #0]
			counter--;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_GPIO_EXTI_Callback+0xac>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_GPIO_EXTI_Callback+0xac>)
 8000a82:	6013      	str	r3, [r2, #0]
			if (counter < 0)
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_GPIO_EXTI_Callback+0xac>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	da03      	bge.n	8000a94 <HAL_GPIO_EXTI_Callback+0x94>
				counter = 9999;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <HAL_GPIO_EXTI_Callback+0xac>)
 8000a8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a92:	601a      	str	r2, [r3, #0]
			printf("USART print 7segment number=%d\r\n", counter);
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_GPIO_EXTI_Callback+0xac>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000a9c:	f003 f8c0 	bl	8003c20 <iprintf>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000088 	.word	0x20000088
 8000aac:	20000084 	.word	0x20000084
 8000ab0:	08004924 	.word	0x08004924

08000ab4 <ttl7447>:

uint8_t ttl7447(uint8_t num){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	// for anode type
	switch(num){
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b09      	cmp	r3, #9
 8000ac2:	d82b      	bhi.n	8000b1c <ttl7447+0x68>
 8000ac4:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <ttl7447+0x18>)
 8000ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aca:	bf00      	nop
 8000acc:	08000af5 	.word	0x08000af5
 8000ad0:	08000af9 	.word	0x08000af9
 8000ad4:	08000afd 	.word	0x08000afd
 8000ad8:	08000b01 	.word	0x08000b01
 8000adc:	08000b05 	.word	0x08000b05
 8000ae0:	08000b09 	.word	0x08000b09
 8000ae4:	08000b0d 	.word	0x08000b0d
 8000ae8:	08000b11 	.word	0x08000b11
 8000aec:	08000b15 	.word	0x08000b15
 8000af0:	08000b19 	.word	0x08000b19
	case 0:
		return 0xc0;
 8000af4:	23c0      	movs	r3, #192	; 0xc0
 8000af6:	e012      	b.n	8000b1e <ttl7447+0x6a>
	case 1:
		return 0xf9;
 8000af8:	23f9      	movs	r3, #249	; 0xf9
 8000afa:	e010      	b.n	8000b1e <ttl7447+0x6a>
	case 2:
		return 0xa4;
 8000afc:	23a4      	movs	r3, #164	; 0xa4
 8000afe:	e00e      	b.n	8000b1e <ttl7447+0x6a>
	case 3:
		return 0xb0;
 8000b00:	23b0      	movs	r3, #176	; 0xb0
 8000b02:	e00c      	b.n	8000b1e <ttl7447+0x6a>
	case 4:
		return 0x99;
 8000b04:	2399      	movs	r3, #153	; 0x99
 8000b06:	e00a      	b.n	8000b1e <ttl7447+0x6a>
	case 5:
		return 0x92;
 8000b08:	2392      	movs	r3, #146	; 0x92
 8000b0a:	e008      	b.n	8000b1e <ttl7447+0x6a>
	case 6:
		return 0x82;
 8000b0c:	2382      	movs	r3, #130	; 0x82
 8000b0e:	e006      	b.n	8000b1e <ttl7447+0x6a>
	case 7:
		return 0xd8;
 8000b10:	23d8      	movs	r3, #216	; 0xd8
 8000b12:	e004      	b.n	8000b1e <ttl7447+0x6a>
	case 8:
		return 0x80;
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	e002      	b.n	8000b1e <ttl7447+0x6a>
	case 9:
		return 0x90;
 8000b18:	2390      	movs	r3, #144	; 0x90
 8000b1a:	e000      	b.n	8000b1e <ttl7447+0x6a>
	default:
		return 0xff;
 8000b1c:	23ff      	movs	r3, #255	; 0xff
	}
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <DisplayFND>:

void DisplayFND(uint8_t fnd, uint8_t location){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);	// latch clock pin off
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b42:	4825      	ldr	r0, [pc, #148]	; (8000bd8 <DisplayFND+0xac>)
 8000b44:	f000 feac 	bl	80018a0 <HAL_GPIO_WritePin>

	uint16_t data = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	817b      	strh	r3, [r7, #10]
	data = fnd << 8;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	817b      	strh	r3, [r7, #10]
	data |= 1 << (location-1);
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	2201      	movs	r2, #1
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	b21a      	sxth	r2, r3
 8000b60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	817b      	strh	r3, [r7, #10]


	// for example, to display 1 to first FND
	// MSB 1111 1001 dddd 0001 LSB	(d means don't care)

	for(int i=0 ; i<16; i++){
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	e025      	b.n	8000bbc <DisplayFND+0x90>

		if(data >> (15-i) & 1){	// MSB first in
 8000b70:	897a      	ldrh	r2, [r7, #10]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1c3 030f 	rsb	r3, r3, #15
 8000b78:	fa42 f303 	asr.w	r3, r2, r3
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <DisplayFND+0x66>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, 1);	// Data line
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b8a:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <DisplayFND+0xac>)
 8000b8c:	f000 fe88 	bl	80018a0 <HAL_GPIO_WritePin>
 8000b90:	e005      	b.n	8000b9e <DisplayFND+0x72>
		}else {
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, 0);	// Data line
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <DisplayFND+0xac>)
 8000b9a:	f000 fe81 	bl	80018a0 <HAL_GPIO_WritePin>
		}

		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);	// shift clock pin on
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <DisplayFND+0xac>)
 8000ba6:	f000 fe7b 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);	// shift clock pin off
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <DisplayFND+0xac>)
 8000bb2:	f000 fe75 	bl	80018a0 <HAL_GPIO_WritePin>
	for(int i=0 ; i<16; i++){
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	ddd6      	ble.n	8000b70 <DisplayFND+0x44>
	}


	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);	// latch clock pin on
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <DisplayFND+0xac>)
 8000bca:	f000 fe69 	bl	80018a0 <HAL_GPIO_WritePin>
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021400 	.word	0x40021400

08000bdc <counter0to9999>:

void counter0to9999(uint8_t num[4], uint32_t counter){
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
    num[0] = counter / 1000;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <counter0to9999+0x8c>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	099b      	lsrs	r3, r3, #6
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	701a      	strb	r2, [r3, #0]
    num[1] = (counter / 100) % 10;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <counter0to9999+0x90>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	0959      	lsrs	r1, r3, #5
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <counter0to9999+0x94>)
 8000c02:	fba3 2301 	umull	r2, r3, r3, r1
 8000c06:	08da      	lsrs	r2, r3, #3
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	1aca      	subs	r2, r1, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3301      	adds	r3, #1
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	701a      	strb	r2, [r3, #0]
    num[2] = (counter / 10) % 10;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <counter0to9999+0x94>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	08d9      	lsrs	r1, r3, #3
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <counter0to9999+0x94>)
 8000c26:	fba3 2301 	umull	r2, r3, r3, r1
 8000c2a:	08da      	lsrs	r2, r3, #3
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	1aca      	subs	r2, r1, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	701a      	strb	r2, [r3, #0]
    num[3] = counter % 10;
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <counter0to9999+0x94>)
 8000c42:	fba3 2301 	umull	r2, r3, r3, r1
 8000c46:	08da      	lsrs	r2, r3, #3
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	1aca      	subs	r2, r1, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3303      	adds	r3, #3
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	701a      	strb	r2, [r3, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	10624dd3 	.word	0x10624dd3
 8000c6c:	51eb851f 	.word	0x51eb851f
 8000c70:	cccccccd 	.word	0xcccccccd

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 fa2c 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_down_Pin);
 8000d28:	2008      	movs	r0, #8
 8000d2a:	f000 fdd3 	bl	80018d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <USART3_IRQHandler+0x10>)
 8000d3a:	f001 fc79 	bl	8002630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000090 	.word	0x20000090

08000d48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_up_Pin);
 8000d4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d50:	f000 fdc0 	bl	80018d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e00a      	b.n	8000d80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d6a:	f3af 8000 	nop.w
 8000d6e:	4601      	mov	r1, r0
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	b2ca      	uxtb	r2, r1
 8000d78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	dbf0      	blt.n	8000d6a <_read+0x12>
  }

  return len;
 8000d88:	687b      	ldr	r3, [r7, #4]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dba:	605a      	str	r2, [r3, #4]
  return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_isatty>:

int _isatty(int file)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f002 ff9c 	bl	8003d68 <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20030000 	.word	0x20030000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	2000008c 	.word	0x2000008c
 8000e64:	20000730 	.word	0x20000730

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_USART3_UART_Init+0x4c>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_USART3_UART_Init+0x50>)
 8000e94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <MX_USART3_UART_Init+0x4c>)
 8000e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_USART3_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_USART3_UART_Init+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_USART3_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_USART3_UART_Init+0x4c>)
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_USART3_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_USART3_UART_Init+0x4c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_USART3_UART_Init+0x4c>)
 8000ec4:	f001 fad4 	bl	8002470 <HAL_UART_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ece:	f7ff fed1 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000090 	.word	0x20000090
 8000edc:	40004800 	.word	0x40004800

08000ee0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <HAL_UART_MspInit+0x84>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d12c      	bne.n	8000f5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <HAL_UART_MspInit+0x8c>)
 8000f58:	f000 faf6 	bl	8001548 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40004800 	.word	0x40004800
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb4:	f000 fca6 	bl	8001904 <HAL_PCD_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fbe:	f7ff fe59 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000d4 	.word	0x200000d4

08000fcc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fec:	d13f      	bne.n	800106e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <HAL_PCD_MspInit+0xac>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a20      	ldr	r2, [pc, #128]	; (8001078 <HAL_PCD_MspInit+0xac>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <HAL_PCD_MspInit+0xac>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800100a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800101c:	230a      	movs	r3, #10
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4815      	ldr	r0, [pc, #84]	; (800107c <HAL_PCD_MspInit+0xb0>)
 8001028:	f000 fa8e 	bl	8001548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800102c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	480e      	ldr	r0, [pc, #56]	; (800107c <HAL_PCD_MspInit+0xb0>)
 8001042:	f000 fa81 	bl	8001548 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_PCD_MspInit+0xac>)
 8001048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_PCD_MspInit+0xac>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	6353      	str	r3, [r2, #52]	; 0x34
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_PCD_MspInit+0xac>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_PCD_MspInit+0xac>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_PCD_MspInit+0xac>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	; 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010aa:	f7ff fedd 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f002 fe61 	bl	8003d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fbcf 	bl	8000854 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010c4:	080049a4 	.word	0x080049a4
  ldr r2, =_sbss
 80010c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010cc:	20000730 	.word	0x20000730

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f94f 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fdba 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f967 	bl	800140a <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 f92f 	bl	80013b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	200005e0 	.word	0x200005e0

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200005e0 	.word	0x200005e0

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f7ff ff8e 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff29 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff3e 	bl	8001248 <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff8e 	bl	80012f4 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff31 	bl	8001264 <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa2 	bl	800135c <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff feb6 	bl	80011a0 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d008      	beq.n	8001454 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e052      	b.n	80014fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0216 	bic.w	r2, r2, #22
 8001462:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001472:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <HAL_DMA_Abort+0x62>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0208 	bic.w	r2, r2, #8
 8001492:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a4:	e013      	b.n	80014ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014a6:	f7ff fe7b 	bl	80011a0 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d90c      	bls.n	80014ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2220      	movs	r2, #32
 80014b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2203      	movs	r2, #3
 80014be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e015      	b.n	80014fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1e4      	bne.n	80014a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	223f      	movs	r2, #63	; 0x3f
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d004      	beq.n	8001520 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e00c      	b.n	800153a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2205      	movs	r2, #5
 8001524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e177      	b.n	8001854 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8166 	bne.w	800184e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d005      	beq.n	800159a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	2b02      	cmp	r3, #2
 8001598:	d130      	bne.n	80015fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 0201 	and.w	r2, r3, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b03      	cmp	r3, #3
 8001606:	d017      	beq.n	8001638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d123      	bne.n	800168c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	69b9      	ldr	r1, [r7, #24]
 8001688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0203 	and.w	r2, r3, #3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80c0 	beq.w	800184e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b66      	ldr	r3, [pc, #408]	; (800186c <HAL_GPIO_Init+0x324>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a65      	ldr	r2, [pc, #404]	; (800186c <HAL_GPIO_Init+0x324>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b63      	ldr	r3, [pc, #396]	; (800186c <HAL_GPIO_Init+0x324>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ea:	4a61      	ldr	r2, [pc, #388]	; (8001870 <HAL_GPIO_Init+0x328>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a58      	ldr	r2, [pc, #352]	; (8001874 <HAL_GPIO_Init+0x32c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d037      	beq.n	8001786 <HAL_GPIO_Init+0x23e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a57      	ldr	r2, [pc, #348]	; (8001878 <HAL_GPIO_Init+0x330>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d031      	beq.n	8001782 <HAL_GPIO_Init+0x23a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a56      	ldr	r2, [pc, #344]	; (800187c <HAL_GPIO_Init+0x334>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d02b      	beq.n	800177e <HAL_GPIO_Init+0x236>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a55      	ldr	r2, [pc, #340]	; (8001880 <HAL_GPIO_Init+0x338>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d025      	beq.n	800177a <HAL_GPIO_Init+0x232>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a54      	ldr	r2, [pc, #336]	; (8001884 <HAL_GPIO_Init+0x33c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01f      	beq.n	8001776 <HAL_GPIO_Init+0x22e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a53      	ldr	r2, [pc, #332]	; (8001888 <HAL_GPIO_Init+0x340>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d019      	beq.n	8001772 <HAL_GPIO_Init+0x22a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a52      	ldr	r2, [pc, #328]	; (800188c <HAL_GPIO_Init+0x344>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x226>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a51      	ldr	r2, [pc, #324]	; (8001890 <HAL_GPIO_Init+0x348>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x222>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a50      	ldr	r2, [pc, #320]	; (8001894 <HAL_GPIO_Init+0x34c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x21e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4f      	ldr	r2, [pc, #316]	; (8001898 <HAL_GPIO_Init+0x350>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x21a>
 800175e:	2309      	movs	r3, #9
 8001760:	e012      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001762:	230a      	movs	r3, #10
 8001764:	e010      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001766:	2308      	movs	r3, #8
 8001768:	e00e      	b.n	8001788 <HAL_GPIO_Init+0x240>
 800176a:	2307      	movs	r3, #7
 800176c:	e00c      	b.n	8001788 <HAL_GPIO_Init+0x240>
 800176e:	2306      	movs	r3, #6
 8001770:	e00a      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001772:	2305      	movs	r3, #5
 8001774:	e008      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001776:	2304      	movs	r3, #4
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x240>
 800177a:	2303      	movs	r3, #3
 800177c:	e004      	b.n	8001788 <HAL_GPIO_Init+0x240>
 800177e:	2302      	movs	r3, #2
 8001780:	e002      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001786:	2300      	movs	r3, #0
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f002 0203 	and.w	r2, r2, #3
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4093      	lsls	r3, r2
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001798:	4935      	ldr	r1, [pc, #212]	; (8001870 <HAL_GPIO_Init+0x328>)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_GPIO_Init+0x354>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ca:	4a34      	ldr	r2, [pc, #208]	; (800189c <HAL_GPIO_Init+0x354>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_GPIO_Init+0x354>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f4:	4a29      	ldr	r2, [pc, #164]	; (800189c <HAL_GPIO_Init+0x354>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017fa:	4b28      	ldr	r3, [pc, #160]	; (800189c <HAL_GPIO_Init+0x354>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800181e:	4a1f      	ldr	r2, [pc, #124]	; (800189c <HAL_GPIO_Init+0x354>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_GPIO_Init+0x354>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <HAL_GPIO_Init+0x354>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	f67f ae84 	bls.w	8001564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40013800 	.word	0x40013800
 8001874:	40020000 	.word	0x40020000
 8001878:	40020400 	.word	0x40020400
 800187c:	40020800 	.word	0x40020800
 8001880:	40020c00 	.word	0x40020c00
 8001884:	40021000 	.word	0x40021000
 8001888:	40021400 	.word	0x40021400
 800188c:	40021800 	.word	0x40021800
 8001890:	40021c00 	.word	0x40021c00
 8001894:	40022000 	.word	0x40022000
 8001898:	40022400 	.word	0x40022400
 800189c:	40013c00 	.word	0x40013c00

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	619a      	str	r2, [r3, #24]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f884 	bl	8000a00 <HAL_GPIO_EXTI_Callback>
  }
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40013c00 	.word	0x40013c00

08001904 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	b08f      	sub	sp, #60	; 0x3c
 8001908:	af0a      	add	r7, sp, #40	; 0x28
 800190a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e10f      	b.n	8001b36 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d106      	bne.n	8001936 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fb4b 	bl	8000fcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2203      	movs	r2, #3
 800193a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f001 fe00 	bl	800355a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	687e      	ldr	r6, [r7, #4]
 8001962:	466d      	mov	r5, sp
 8001964:	f106 0410 	add.w	r4, r6, #16
 8001968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001970:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001974:	e885 0003 	stmia.w	r5, {r0, r1}
 8001978:	1d33      	adds	r3, r6, #4
 800197a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f001 fd8b 	bl	8003498 <USB_CoreInit>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0d0      	b.n	8001b36 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f001 fdee 	bl	800357c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e04a      	b.n	8001a3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	333d      	adds	r3, #61	; 0x3d
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	333c      	adds	r3, #60	; 0x3c
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	b298      	uxth	r0, r3
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	3344      	adds	r3, #68	; 0x44
 80019e2:	4602      	mov	r2, r0
 80019e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	3340      	adds	r3, #64	; 0x40
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3348      	adds	r3, #72	; 0x48
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	334c      	adds	r3, #76	; 0x4c
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	3354      	adds	r3, #84	; 0x54
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3af      	bcc.n	80019a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	e044      	b.n	8001ad6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a74:	7bfa      	ldrb	r2, [r7, #15]
 8001a76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d3b5      	bcc.n	8001a4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	687e      	ldr	r6, [r7, #4]
 8001ae8:	466d      	mov	r5, sp
 8001aea:	f106 0410 	add.w	r4, r6, #16
 8001aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001afa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001afe:	1d33      	adds	r3, r6, #4
 8001b00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b02:	6838      	ldr	r0, [r7, #0]
 8001b04:	f001 fd86 	bl	8003614 <USB_DevInit>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2202      	movs	r2, #2
 8001b12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00d      	b.n	8001b36 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f001 ff51 	bl	80039d6 <USB_DevDisconnect>

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e267      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d075      	beq.n	8001c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b5e:	4b88      	ldr	r3, [pc, #544]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d00c      	beq.n	8001b84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b6a:	4b85      	ldr	r3, [pc, #532]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d112      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b76:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b82:	d10b      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	4b7e      	ldr	r3, [pc, #504]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d05b      	beq.n	8001c48 <HAL_RCC_OscConfig+0x108>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d157      	bne.n	8001c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e242      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba4:	d106      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x74>
 8001ba6:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a75      	ldr	r2, [pc, #468]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e01d      	b.n	8001bf0 <HAL_RCC_OscConfig+0xb0>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x98>
 8001bbe:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a6f      	ldr	r2, [pc, #444]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b6d      	ldr	r3, [pc, #436]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6c      	ldr	r2, [pc, #432]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e00b      	b.n	8001bf0 <HAL_RCC_OscConfig+0xb0>
 8001bd8:	4b69      	ldr	r3, [pc, #420]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a68      	ldr	r2, [pc, #416]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a65      	ldr	r2, [pc, #404]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fad2 	bl	80011a0 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff face 	bl	80011a0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e207      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b5b      	ldr	r3, [pc, #364]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0xc0>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fabe 	bl	80011a0 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff faba 	bl	80011a0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1f3      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0xe8>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d063      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c56:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00b      	beq.n	8001c7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c62:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d11c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6e:	4b44      	ldr	r3, [pc, #272]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d116      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_RCC_OscConfig+0x152>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e1c7      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4937      	ldr	r1, [pc, #220]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	e03a      	b.n	8001d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d020      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb0:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_RCC_OscConfig+0x244>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fa73 	bl	80011a0 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fa6f 	bl	80011a0 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e1a8      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4925      	ldr	r1, [pc, #148]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
 8001cf0:	e015      	b.n	8001d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <HAL_RCC_OscConfig+0x244>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fa52 	bl	80011a0 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d00:	f7ff fa4e 	bl	80011a0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e187      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d036      	beq.n	8001d98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d016      	beq.n	8001d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_RCC_OscConfig+0x248>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d38:	f7ff fa32 	bl	80011a0 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d40:	f7ff fa2e 	bl	80011a0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e167      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_OscConfig+0x240>)
 8001d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x200>
 8001d5e:	e01b      	b.n	8001d98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_OscConfig+0x248>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d66:	f7ff fa1b 	bl	80011a0 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6c:	e00e      	b.n	8001d8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fa17 	bl	80011a0 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d907      	bls.n	8001d8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e150      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
 8001d80:	40023800 	.word	0x40023800
 8001d84:	42470000 	.word	0x42470000
 8001d88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8c:	4b88      	ldr	r3, [pc, #544]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ea      	bne.n	8001d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8097 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001daa:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10f      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b7d      	ldr	r3, [pc, #500]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a7c      	ldr	r2, [pc, #496]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b7a      	ldr	r3, [pc, #488]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4b77      	ldr	r3, [pc, #476]	; (8001fb4 <HAL_RCC_OscConfig+0x474>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d118      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de2:	4b74      	ldr	r3, [pc, #464]	; (8001fb4 <HAL_RCC_OscConfig+0x474>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a73      	ldr	r2, [pc, #460]	; (8001fb4 <HAL_RCC_OscConfig+0x474>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dee:	f7ff f9d7 	bl	80011a0 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df6:	f7ff f9d3 	bl	80011a0 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e10c      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <HAL_RCC_OscConfig+0x474>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x2ea>
 8001e1c:	4b64      	ldr	r3, [pc, #400]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	4a63      	ldr	r2, [pc, #396]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6713      	str	r3, [r2, #112]	; 0x70
 8001e28:	e01c      	b.n	8001e64 <HAL_RCC_OscConfig+0x324>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x30c>
 8001e32:	4b5f      	ldr	r3, [pc, #380]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a5e      	ldr	r2, [pc, #376]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	4a5b      	ldr	r2, [pc, #364]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4a:	e00b      	b.n	8001e64 <HAL_RCC_OscConfig+0x324>
 8001e4c:	4b58      	ldr	r3, [pc, #352]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a57      	ldr	r2, [pc, #348]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
 8001e58:	4b55      	ldr	r3, [pc, #340]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	4a54      	ldr	r2, [pc, #336]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	f023 0304 	bic.w	r3, r3, #4
 8001e62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d015      	beq.n	8001e98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f998 	bl	80011a0 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e74:	f7ff f994 	bl	80011a0 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e0cb      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0ee      	beq.n	8001e74 <HAL_RCC_OscConfig+0x334>
 8001e96:	e014      	b.n	8001ec2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff f982 	bl	80011a0 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f97e 	bl	80011a0 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0b5      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb6:	4b3e      	ldr	r3, [pc, #248]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1ee      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d105      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec8:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	4a38      	ldr	r2, [pc, #224]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80a1 	beq.w	8002020 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ede:	4b34      	ldr	r3, [pc, #208]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d05c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d141      	bne.n	8001f76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_RCC_OscConfig+0x478>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f952 	bl	80011a0 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff f94e 	bl	80011a0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e087      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f12:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	019b      	lsls	r3, r3, #6
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	085b      	lsrs	r3, r3, #1
 8001f36:	3b01      	subs	r3, #1
 8001f38:	041b      	lsls	r3, r3, #16
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	061b      	lsls	r3, r3, #24
 8001f42:	491b      	ldr	r1, [pc, #108]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x478>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff f927 	bl	80011a0 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f56:	f7ff f923 	bl	80011a0 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e05c      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x416>
 8001f74:	e054      	b.n	8002020 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_RCC_OscConfig+0x478>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f910 	bl	80011a0 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff f90c 	bl	80011a0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e045      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RCC_OscConfig+0x470>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x444>
 8001fa2:	e03d      	b.n	8002020 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e038      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40007000 	.word	0x40007000
 8001fb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_RCC_OscConfig+0x4ec>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d028      	beq.n	800201c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d121      	bne.n	800201c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d11a      	bne.n	800201c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fec:	4013      	ands	r3, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d111      	bne.n	800201c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	085b      	lsrs	r3, r3, #1
 8002004:	3b01      	subs	r3, #1
 8002006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d107      	bne.n	800201c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800

08002030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0cc      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d90c      	bls.n	800206c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0b8      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4a58      	ldr	r2, [pc, #352]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800208e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800209c:	4b53      	ldr	r3, [pc, #332]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a52      	ldr	r2, [pc, #328]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b50      	ldr	r3, [pc, #320]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	494d      	ldr	r1, [pc, #308]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d044      	beq.n	8002150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d119      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e07f      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	4b3f      	ldr	r3, [pc, #252]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06f      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fe:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e067      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210e:	4b37      	ldr	r3, [pc, #220]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f023 0203 	bic.w	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4934      	ldr	r1, [pc, #208]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002120:	f7ff f83e 	bl	80011a0 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	e00a      	b.n	800213e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	f7ff f83a 	bl	80011a0 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e04f      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 020c 	and.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	429a      	cmp	r2, r3
 800214e:	d1eb      	bne.n	8002128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d20c      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e032      	b.n	80021de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4916      	ldr	r1, [pc, #88]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	490e      	ldr	r1, [pc, #56]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021b6:	f000 f821 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	490a      	ldr	r1, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	5ccb      	ldrb	r3, [r1, r3]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe ff9e 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023c00 	.word	0x40023c00
 80021ec:	40023800 	.word	0x40023800
 80021f0:	08004948 	.word	0x08004948
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002200:	b094      	sub	sp, #80	; 0x50
 8002202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	647b      	str	r3, [r7, #68]	; 0x44
 8002208:	2300      	movs	r3, #0
 800220a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800220c:	2300      	movs	r3, #0
 800220e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002214:	4b79      	ldr	r3, [pc, #484]	; (80023fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d00d      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x40>
 8002220:	2b08      	cmp	r3, #8
 8002222:	f200 80e1 	bhi.w	80023e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x34>
 800222a:	2b04      	cmp	r3, #4
 800222c:	d003      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x3a>
 800222e:	e0db      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002230:	4b73      	ldr	r3, [pc, #460]	; (8002400 <HAL_RCC_GetSysClockFreq+0x204>)
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002234:	e0db      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002236:	4b73      	ldr	r3, [pc, #460]	; (8002404 <HAL_RCC_GetSysClockFreq+0x208>)
 8002238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800223a:	e0d8      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800223c:	4b6f      	ldr	r3, [pc, #444]	; (80023fc <HAL_RCC_GetSysClockFreq+0x200>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002246:	4b6d      	ldr	r3, [pc, #436]	; (80023fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d063      	beq.n	800231a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002252:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	099b      	lsrs	r3, r3, #6
 8002258:	2200      	movs	r2, #0
 800225a:	63bb      	str	r3, [r7, #56]	; 0x38
 800225c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
 8002266:	2300      	movs	r3, #0
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
 800226a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800226e:	4622      	mov	r2, r4
 8002270:	462b      	mov	r3, r5
 8002272:	f04f 0000 	mov.w	r0, #0
 8002276:	f04f 0100 	mov.w	r1, #0
 800227a:	0159      	lsls	r1, r3, #5
 800227c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002280:	0150      	lsls	r0, r2, #5
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4621      	mov	r1, r4
 8002288:	1a51      	subs	r1, r2, r1
 800228a:	6139      	str	r1, [r7, #16]
 800228c:	4629      	mov	r1, r5
 800228e:	eb63 0301 	sbc.w	r3, r3, r1
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022a0:	4659      	mov	r1, fp
 80022a2:	018b      	lsls	r3, r1, #6
 80022a4:	4651      	mov	r1, sl
 80022a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022aa:	4651      	mov	r1, sl
 80022ac:	018a      	lsls	r2, r1, #6
 80022ae:	4651      	mov	r1, sl
 80022b0:	ebb2 0801 	subs.w	r8, r2, r1
 80022b4:	4659      	mov	r1, fp
 80022b6:	eb63 0901 	sbc.w	r9, r3, r1
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ce:	4690      	mov	r8, r2
 80022d0:	4699      	mov	r9, r3
 80022d2:	4623      	mov	r3, r4
 80022d4:	eb18 0303 	adds.w	r3, r8, r3
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	462b      	mov	r3, r5
 80022dc:	eb49 0303 	adc.w	r3, r9, r3
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022ee:	4629      	mov	r1, r5
 80022f0:	024b      	lsls	r3, r1, #9
 80022f2:	4621      	mov	r1, r4
 80022f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022f8:	4621      	mov	r1, r4
 80022fa:	024a      	lsls	r2, r1, #9
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002302:	2200      	movs	r2, #0
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
 8002306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800230c:	f7fd ffc0 	bl	8000290 <__aeabi_uldivmod>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4613      	mov	r3, r2
 8002316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002318:	e058      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231a:	4b38      	ldr	r3, [pc, #224]	; (80023fc <HAL_RCC_GetSysClockFreq+0x200>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	2200      	movs	r2, #0
 8002322:	4618      	mov	r0, r3
 8002324:	4611      	mov	r1, r2
 8002326:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800232a:	623b      	str	r3, [r7, #32]
 800232c:	2300      	movs	r3, #0
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
 8002330:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002334:	4642      	mov	r2, r8
 8002336:	464b      	mov	r3, r9
 8002338:	f04f 0000 	mov.w	r0, #0
 800233c:	f04f 0100 	mov.w	r1, #0
 8002340:	0159      	lsls	r1, r3, #5
 8002342:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002346:	0150      	lsls	r0, r2, #5
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4641      	mov	r1, r8
 800234e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002352:	4649      	mov	r1, r9
 8002354:	eb63 0b01 	sbc.w	fp, r3, r1
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002364:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002368:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800236c:	ebb2 040a 	subs.w	r4, r2, sl
 8002370:	eb63 050b 	sbc.w	r5, r3, fp
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	00eb      	lsls	r3, r5, #3
 800237e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002382:	00e2      	lsls	r2, r4, #3
 8002384:	4614      	mov	r4, r2
 8002386:	461d      	mov	r5, r3
 8002388:	4643      	mov	r3, r8
 800238a:	18e3      	adds	r3, r4, r3
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	464b      	mov	r3, r9
 8002390:	eb45 0303 	adc.w	r3, r5, r3
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023a2:	4629      	mov	r1, r5
 80023a4:	028b      	lsls	r3, r1, #10
 80023a6:	4621      	mov	r1, r4
 80023a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023ac:	4621      	mov	r1, r4
 80023ae:	028a      	lsls	r2, r1, #10
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b6:	2200      	movs	r2, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	61fa      	str	r2, [r7, #28]
 80023bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023c0:	f7fd ff66 	bl	8000290 <__aeabi_uldivmod>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4613      	mov	r3, r2
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_GetSysClockFreq+0x200>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	3301      	adds	r3, #1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023e6:	e002      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3750      	adds	r7, #80	; 0x50
 80023f4:	46bd      	mov	sp, r7
 80023f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	00f42400 	.word	0x00f42400
 8002404:	007a1200 	.word	0x007a1200

08002408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_RCC_GetHCLKFreq+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000000 	.word	0x20000000

08002420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002424:	f7ff fff0 	bl	8002408 <HAL_RCC_GetHCLKFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	0a9b      	lsrs	r3, r3, #10
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	4903      	ldr	r1, [pc, #12]	; (8002444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40023800 	.word	0x40023800
 8002444:	08004958 	.word	0x08004958

08002448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800244c:	f7ff ffdc 	bl	8002408 <HAL_RCC_GetHCLKFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0b5b      	lsrs	r3, r3, #13
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4903      	ldr	r1, [pc, #12]	; (800246c <HAL_RCC_GetPCLK2Freq+0x24>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40023800 	.word	0x40023800
 800246c:	08004958 	.word	0x08004958

08002470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e03f      	b.n	8002502 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fd22 	bl	8000ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2224      	movs	r2, #36	; 0x24
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fd7b 	bl	8002fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b08a      	sub	sp, #40	; 0x28
 800250e:	af02      	add	r7, sp, #8
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	4613      	mov	r3, r2
 8002518:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b20      	cmp	r3, #32
 8002528:	d17c      	bne.n	8002624 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_UART_Transmit+0x2c>
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e075      	b.n	8002626 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_UART_Transmit+0x3e>
 8002544:	2302      	movs	r3, #2
 8002546:	e06e      	b.n	8002626 <HAL_UART_Transmit+0x11c>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2221      	movs	r2, #33	; 0x21
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800255e:	f7fe fe1f 	bl	80011a0 <HAL_GetTick>
 8002562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	88fa      	ldrh	r2, [r7, #6]
 8002568:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	88fa      	ldrh	r2, [r7, #6]
 800256e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002578:	d108      	bne.n	800258c <HAL_UART_Transmit+0x82>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e003      	b.n	8002594 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800259c:	e02a      	b.n	80025f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2200      	movs	r2, #0
 80025a6:	2180      	movs	r1, #128	; 0x80
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 faf9 	bl	8002ba0 <UART_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e036      	b.n	8002626 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10b      	bne.n	80025d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	3302      	adds	r3, #2
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	e007      	b.n	80025e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	3301      	adds	r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1cf      	bne.n	800259e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fac9 	bl	8002ba0 <UART_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e006      	b.n	8002626 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	e000      	b.n	8002626 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
  }
}
 8002626:	4618      	mov	r0, r3
 8002628:	3720      	adds	r7, #32
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0ba      	sub	sp, #232	; 0xe8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800266e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_UART_IRQHandler+0x66>
 8002682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fbd3 	bl	8002e3a <UART_Receive_IT>
      return;
 8002694:	e256      	b.n	8002b44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 80de 	beq.w	800285c <HAL_UART_IRQHandler+0x22c>
 80026a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d106      	bne.n	80026ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80d1 	beq.w	800285c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_UART_IRQHandler+0xae>
 80026c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f043 0201 	orr.w	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_UART_IRQHandler+0xd2>
 80026ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f043 0202 	orr.w	r2, r3, #2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_UART_IRQHandler+0xf6>
 800270e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f043 0204 	orr.w	r2, r3, #4
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d011      	beq.n	8002756 <HAL_UART_IRQHandler+0x126>
 8002732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800273e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f043 0208 	orr.w	r2, r3, #8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 81ed 	beq.w	8002b3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_UART_IRQHandler+0x14e>
 800276c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fb5e 	bl	8002e3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <HAL_UART_IRQHandler+0x17a>
 80027a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d04f      	beq.n	800284a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fa66 	bl	8002c7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d141      	bne.n	8002842 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3314      	adds	r3, #20
 80027c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027cc:	e853 3f00 	ldrex	r3, [r3]
 80027d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3314      	adds	r3, #20
 80027e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027fa:	e841 2300 	strex	r3, r2, [r1]
 80027fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1d9      	bne.n	80027be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	2b00      	cmp	r3, #0
 8002810:	d013      	beq.n	800283a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	4a7d      	ldr	r2, [pc, #500]	; (8002a0c <HAL_UART_IRQHandler+0x3dc>)
 8002818:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fe6f 	bl	8001502 <HAL_DMA_Abort_IT>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d016      	beq.n	8002858 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002834:	4610      	mov	r0, r2
 8002836:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002838:	e00e      	b.n	8002858 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f99a 	bl	8002b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	e00a      	b.n	8002858 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f996 	bl	8002b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002848:	e006      	b.n	8002858 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f992 	bl	8002b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002856:	e170      	b.n	8002b3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002858:	bf00      	nop
    return;
 800285a:	e16e      	b.n	8002b3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	2b01      	cmp	r3, #1
 8002862:	f040 814a 	bne.w	8002afa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8143 	beq.w	8002afa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 813c 	beq.w	8002afa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	f040 80b4 	bne.w	8002a10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8140 	beq.w	8002b3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028c6:	429a      	cmp	r2, r3
 80028c8:	f080 8139 	bcs.w	8002b3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028de:	f000 8088 	beq.w	80029f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028f0:	e853 3f00 	ldrex	r3, [r3]
 80028f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002900:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	330c      	adds	r3, #12
 800290a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800290e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800291a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800291e:	e841 2300 	strex	r3, r2, [r1]
 8002922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1d9      	bne.n	80028e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3314      	adds	r3, #20
 8002934:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002938:	e853 3f00 	ldrex	r3, [r3]
 800293c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800293e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3314      	adds	r3, #20
 800294e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002952:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002956:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002958:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800295a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800295e:	e841 2300 	strex	r3, r2, [r1]
 8002962:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1e1      	bne.n	800292e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3314      	adds	r3, #20
 8002970:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002974:	e853 3f00 	ldrex	r3, [r3]
 8002978:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800297a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800297c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002980:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3314      	adds	r3, #20
 800298a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800298e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002990:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002992:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002994:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002996:	e841 2300 	strex	r3, r2, [r1]
 800299a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800299c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e3      	bne.n	800296a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	330c      	adds	r3, #12
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ba:	e853 3f00 	ldrex	r3, [r3]
 80029be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c2:	f023 0310 	bic.w	r3, r3, #16
 80029c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	330c      	adds	r3, #12
 80029d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80029d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029dc:	e841 2300 	strex	r3, r2, [r1]
 80029e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e3      	bne.n	80029b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe fd18 	bl	8001422 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f8c0 	bl	8002b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a08:	e099      	b.n	8002b3e <HAL_UART_IRQHandler+0x50e>
 8002a0a:	bf00      	nop
 8002a0c:	08002d43 	.word	0x08002d43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 808b 	beq.w	8002b42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8086 	beq.w	8002b42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	330c      	adds	r3, #12
 8002a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	330c      	adds	r3, #12
 8002a56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a5a:	647a      	str	r2, [r7, #68]	; 0x44
 8002a5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a62:	e841 2300 	strex	r3, r2, [r1]
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1e3      	bne.n	8002a36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3314      	adds	r3, #20
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3314      	adds	r3, #20
 8002a8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a92:	633a      	str	r2, [r7, #48]	; 0x30
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a9a:	e841 2300 	strex	r3, r2, [r1]
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e3      	bne.n	8002a6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	e853 3f00 	ldrex	r3, [r3]
 8002ac2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0310 	bic.w	r3, r3, #16
 8002aca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ad8:	61fa      	str	r2, [r7, #28]
 8002ada:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002adc:	69b9      	ldr	r1, [r7, #24]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	e841 2300 	strex	r3, r2, [r1]
 8002ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e3      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f848 	bl	8002b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002af8:	e023      	b.n	8002b42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_UART_IRQHandler+0x4ea>
 8002b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f929 	bl	8002d6a <UART_Transmit_IT>
    return;
 8002b18:	e014      	b.n	8002b44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00e      	beq.n	8002b44 <HAL_UART_IRQHandler+0x514>
 8002b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f969 	bl	8002e0a <UART_EndTransmit_IT>
    return;
 8002b38:	e004      	b.n	8002b44 <HAL_UART_IRQHandler+0x514>
    return;
 8002b3a:	bf00      	nop
 8002b3c:	e002      	b.n	8002b44 <HAL_UART_IRQHandler+0x514>
      return;
 8002b3e:	bf00      	nop
 8002b40:	e000      	b.n	8002b44 <HAL_UART_IRQHandler+0x514>
      return;
 8002b42:	bf00      	nop
  }
}
 8002b44:	37e8      	adds	r7, #232	; 0xe8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop

08002b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b090      	sub	sp, #64	; 0x40
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb0:	e050      	b.n	8002c54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d04c      	beq.n	8002c54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bc0:	f7fe faee 	bl	80011a0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d241      	bcs.n	8002c54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	e853 3f00 	ldrex	r3, [r3]
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf0:	637a      	str	r2, [r7, #52]	; 0x34
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf8:	e841 2300 	strex	r3, r2, [r1]
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e5      	bne.n	8002bd0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3314      	adds	r3, #20
 8002c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	e853 3f00 	ldrex	r3, [r3]
 8002c12:	613b      	str	r3, [r7, #16]
   return(result);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c24:	623a      	str	r2, [r7, #32]
 8002c26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	69f9      	ldr	r1, [r7, #28]
 8002c2a:	6a3a      	ldr	r2, [r7, #32]
 8002c2c:	e841 2300 	strex	r3, r2, [r1]
 8002c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e5      	bne.n	8002c04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e00f      	b.n	8002c74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d09f      	beq.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3740      	adds	r7, #64	; 0x40
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b095      	sub	sp, #84	; 0x54
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8e:	e853 3f00 	ldrex	r3, [r3]
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca4:	643a      	str	r2, [r7, #64]	; 0x40
 8002ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e5      	bne.n	8002c84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3314      	adds	r3, #20
 8002cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	e853 3f00 	ldrex	r3, [r3]
 8002cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3314      	adds	r3, #20
 8002cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce0:	e841 2300 	strex	r3, r2, [r1]
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1e5      	bne.n	8002cb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d119      	bne.n	8002d28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f023 0310 	bic.w	r3, r3, #16
 8002d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d14:	61ba      	str	r2, [r7, #24]
 8002d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	6979      	ldr	r1, [r7, #20]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	613b      	str	r3, [r7, #16]
   return(result);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e5      	bne.n	8002cf4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d36:	bf00      	nop
 8002d38:	3754      	adds	r7, #84	; 0x54
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff ff09 	bl	8002b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b21      	cmp	r3, #33	; 0x21
 8002d7c:	d13e      	bne.n	8002dfc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d86:	d114      	bne.n	8002db2 <UART_Transmit_IT+0x48>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d110      	bne.n	8002db2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002da4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	1c9a      	adds	r2, r3, #2
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	621a      	str	r2, [r3, #32]
 8002db0:	e008      	b.n	8002dc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	1c59      	adds	r1, r3, #1
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6211      	str	r1, [r2, #32]
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10f      	bne.n	8002df8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fe8e 	bl	8002b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b08c      	sub	sp, #48	; 0x30
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b22      	cmp	r3, #34	; 0x22
 8002e4c:	f040 80ab 	bne.w	8002fa6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e58:	d117      	bne.n	8002e8a <UART_Receive_IT+0x50>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d113      	bne.n	8002e8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	1c9a      	adds	r2, r3, #2
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
 8002e88:	e026      	b.n	8002ed8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9c:	d007      	beq.n	8002eae <UART_Receive_IT+0x74>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <UART_Receive_IT+0x82>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e008      	b.n	8002ece <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d15a      	bne.n	8002fa2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0220 	bic.w	r2, r2, #32
 8002efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d135      	bne.n	8002f98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	613b      	str	r3, [r7, #16]
   return(result);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f023 0310 	bic.w	r3, r3, #16
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	330c      	adds	r3, #12
 8002f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f52:	623a      	str	r2, [r7, #32]
 8002f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	69f9      	ldr	r1, [r7, #28]
 8002f58:	6a3a      	ldr	r2, [r7, #32]
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e5      	bne.n	8002f32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d10a      	bne.n	8002f8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fdf9 	bl	8002b88 <HAL_UARTEx_RxEventCallback>
 8002f96:	e002      	b.n	8002f9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff fde1 	bl	8002b60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e002      	b.n	8002fa8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3730      	adds	r7, #48	; 0x30
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb4:	b0c0      	sub	sp, #256	; 0x100
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	68d9      	ldr	r1, [r3, #12]
 8002fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	ea40 0301 	orr.w	r3, r0, r1
 8002fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003008:	f021 010c 	bic.w	r1, r1, #12
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003016:	430b      	orrs	r3, r1
 8003018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302a:	6999      	ldr	r1, [r3, #24]
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	ea40 0301 	orr.w	r3, r0, r1
 8003036:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4b8f      	ldr	r3, [pc, #572]	; (800327c <UART_SetConfig+0x2cc>)
 8003040:	429a      	cmp	r2, r3
 8003042:	d005      	beq.n	8003050 <UART_SetConfig+0xa0>
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4b8d      	ldr	r3, [pc, #564]	; (8003280 <UART_SetConfig+0x2d0>)
 800304c:	429a      	cmp	r2, r3
 800304e:	d104      	bne.n	800305a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003050:	f7ff f9fa 	bl	8002448 <HAL_RCC_GetPCLK2Freq>
 8003054:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003058:	e003      	b.n	8003062 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800305a:	f7ff f9e1 	bl	8002420 <HAL_RCC_GetPCLK1Freq>
 800305e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306c:	f040 810c 	bne.w	8003288 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003074:	2200      	movs	r2, #0
 8003076:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800307a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800307e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003082:	4622      	mov	r2, r4
 8003084:	462b      	mov	r3, r5
 8003086:	1891      	adds	r1, r2, r2
 8003088:	65b9      	str	r1, [r7, #88]	; 0x58
 800308a:	415b      	adcs	r3, r3
 800308c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800308e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003092:	4621      	mov	r1, r4
 8003094:	eb12 0801 	adds.w	r8, r2, r1
 8003098:	4629      	mov	r1, r5
 800309a:	eb43 0901 	adc.w	r9, r3, r1
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030b2:	4690      	mov	r8, r2
 80030b4:	4699      	mov	r9, r3
 80030b6:	4623      	mov	r3, r4
 80030b8:	eb18 0303 	adds.w	r3, r8, r3
 80030bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030c0:	462b      	mov	r3, r5
 80030c2:	eb49 0303 	adc.w	r3, r9, r3
 80030c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030de:	460b      	mov	r3, r1
 80030e0:	18db      	adds	r3, r3, r3
 80030e2:	653b      	str	r3, [r7, #80]	; 0x50
 80030e4:	4613      	mov	r3, r2
 80030e6:	eb42 0303 	adc.w	r3, r2, r3
 80030ea:	657b      	str	r3, [r7, #84]	; 0x54
 80030ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030f4:	f7fd f8cc 	bl	8000290 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4b61      	ldr	r3, [pc, #388]	; (8003284 <UART_SetConfig+0x2d4>)
 80030fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	011c      	lsls	r4, r3, #4
 8003106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800310a:	2200      	movs	r2, #0
 800310c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003110:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003114:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003118:	4642      	mov	r2, r8
 800311a:	464b      	mov	r3, r9
 800311c:	1891      	adds	r1, r2, r2
 800311e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003120:	415b      	adcs	r3, r3
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003124:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003128:	4641      	mov	r1, r8
 800312a:	eb12 0a01 	adds.w	sl, r2, r1
 800312e:	4649      	mov	r1, r9
 8003130:	eb43 0b01 	adc.w	fp, r3, r1
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003140:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003148:	4692      	mov	sl, r2
 800314a:	469b      	mov	fp, r3
 800314c:	4643      	mov	r3, r8
 800314e:	eb1a 0303 	adds.w	r3, sl, r3
 8003152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003156:	464b      	mov	r3, r9
 8003158:	eb4b 0303 	adc.w	r3, fp, r3
 800315c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800316c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003170:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003174:	460b      	mov	r3, r1
 8003176:	18db      	adds	r3, r3, r3
 8003178:	643b      	str	r3, [r7, #64]	; 0x40
 800317a:	4613      	mov	r3, r2
 800317c:	eb42 0303 	adc.w	r3, r2, r3
 8003180:	647b      	str	r3, [r7, #68]	; 0x44
 8003182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003186:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800318a:	f7fd f881 	bl	8000290 <__aeabi_uldivmod>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4611      	mov	r1, r2
 8003194:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <UART_SetConfig+0x2d4>)
 8003196:	fba3 2301 	umull	r2, r3, r3, r1
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2264      	movs	r2, #100	; 0x64
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	1acb      	subs	r3, r1, r3
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031aa:	4b36      	ldr	r3, [pc, #216]	; (8003284 <UART_SetConfig+0x2d4>)
 80031ac:	fba3 2302 	umull	r2, r3, r3, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031b8:	441c      	add	r4, r3
 80031ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031cc:	4642      	mov	r2, r8
 80031ce:	464b      	mov	r3, r9
 80031d0:	1891      	adds	r1, r2, r2
 80031d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80031d4:	415b      	adcs	r3, r3
 80031d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031dc:	4641      	mov	r1, r8
 80031de:	1851      	adds	r1, r2, r1
 80031e0:	6339      	str	r1, [r7, #48]	; 0x30
 80031e2:	4649      	mov	r1, r9
 80031e4:	414b      	adcs	r3, r1
 80031e6:	637b      	str	r3, [r7, #52]	; 0x34
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031f4:	4659      	mov	r1, fp
 80031f6:	00cb      	lsls	r3, r1, #3
 80031f8:	4651      	mov	r1, sl
 80031fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fe:	4651      	mov	r1, sl
 8003200:	00ca      	lsls	r2, r1, #3
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	4603      	mov	r3, r0
 8003208:	4642      	mov	r2, r8
 800320a:	189b      	adds	r3, r3, r2
 800320c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003210:	464b      	mov	r3, r9
 8003212:	460a      	mov	r2, r1
 8003214:	eb42 0303 	adc.w	r3, r2, r3
 8003218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003228:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800322c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003230:	460b      	mov	r3, r1
 8003232:	18db      	adds	r3, r3, r3
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
 8003236:	4613      	mov	r3, r2
 8003238:	eb42 0303 	adc.w	r3, r2, r3
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003242:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003246:	f7fd f823 	bl	8000290 <__aeabi_uldivmod>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <UART_SetConfig+0x2d4>)
 8003250:	fba3 1302 	umull	r1, r3, r3, r2
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	2164      	movs	r1, #100	; 0x64
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	3332      	adds	r3, #50	; 0x32
 8003262:	4a08      	ldr	r2, [pc, #32]	; (8003284 <UART_SetConfig+0x2d4>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	f003 0207 	and.w	r2, r3, #7
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4422      	add	r2, r4
 8003276:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003278:	e106      	b.n	8003488 <UART_SetConfig+0x4d8>
 800327a:	bf00      	nop
 800327c:	40011000 	.word	0x40011000
 8003280:	40011400 	.word	0x40011400
 8003284:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800328c:	2200      	movs	r2, #0
 800328e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003292:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003296:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800329a:	4642      	mov	r2, r8
 800329c:	464b      	mov	r3, r9
 800329e:	1891      	adds	r1, r2, r2
 80032a0:	6239      	str	r1, [r7, #32]
 80032a2:	415b      	adcs	r3, r3
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032aa:	4641      	mov	r1, r8
 80032ac:	1854      	adds	r4, r2, r1
 80032ae:	4649      	mov	r1, r9
 80032b0:	eb43 0501 	adc.w	r5, r3, r1
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	00eb      	lsls	r3, r5, #3
 80032be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032c2:	00e2      	lsls	r2, r4, #3
 80032c4:	4614      	mov	r4, r2
 80032c6:	461d      	mov	r5, r3
 80032c8:	4643      	mov	r3, r8
 80032ca:	18e3      	adds	r3, r4, r3
 80032cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032d0:	464b      	mov	r3, r9
 80032d2:	eb45 0303 	adc.w	r3, r5, r3
 80032d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032f6:	4629      	mov	r1, r5
 80032f8:	008b      	lsls	r3, r1, #2
 80032fa:	4621      	mov	r1, r4
 80032fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003300:	4621      	mov	r1, r4
 8003302:	008a      	lsls	r2, r1, #2
 8003304:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003308:	f7fc ffc2 	bl	8000290 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4b60      	ldr	r3, [pc, #384]	; (8003494 <UART_SetConfig+0x4e4>)
 8003312:	fba3 2302 	umull	r2, r3, r3, r2
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	011c      	lsls	r4, r3, #4
 800331a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800331e:	2200      	movs	r2, #0
 8003320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003324:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003328:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800332c:	4642      	mov	r2, r8
 800332e:	464b      	mov	r3, r9
 8003330:	1891      	adds	r1, r2, r2
 8003332:	61b9      	str	r1, [r7, #24]
 8003334:	415b      	adcs	r3, r3
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800333c:	4641      	mov	r1, r8
 800333e:	1851      	adds	r1, r2, r1
 8003340:	6139      	str	r1, [r7, #16]
 8003342:	4649      	mov	r1, r9
 8003344:	414b      	adcs	r3, r1
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003354:	4659      	mov	r1, fp
 8003356:	00cb      	lsls	r3, r1, #3
 8003358:	4651      	mov	r1, sl
 800335a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800335e:	4651      	mov	r1, sl
 8003360:	00ca      	lsls	r2, r1, #3
 8003362:	4610      	mov	r0, r2
 8003364:	4619      	mov	r1, r3
 8003366:	4603      	mov	r3, r0
 8003368:	4642      	mov	r2, r8
 800336a:	189b      	adds	r3, r3, r2
 800336c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003370:	464b      	mov	r3, r9
 8003372:	460a      	mov	r2, r1
 8003374:	eb42 0303 	adc.w	r3, r2, r3
 8003378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	67bb      	str	r3, [r7, #120]	; 0x78
 8003386:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003394:	4649      	mov	r1, r9
 8003396:	008b      	lsls	r3, r1, #2
 8003398:	4641      	mov	r1, r8
 800339a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800339e:	4641      	mov	r1, r8
 80033a0:	008a      	lsls	r2, r1, #2
 80033a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033a6:	f7fc ff73 	bl	8000290 <__aeabi_uldivmod>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4611      	mov	r1, r2
 80033b0:	4b38      	ldr	r3, [pc, #224]	; (8003494 <UART_SetConfig+0x4e4>)
 80033b2:	fba3 2301 	umull	r2, r3, r3, r1
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2264      	movs	r2, #100	; 0x64
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	1acb      	subs	r3, r1, r3
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	3332      	adds	r3, #50	; 0x32
 80033c4:	4a33      	ldr	r2, [pc, #204]	; (8003494 <UART_SetConfig+0x4e4>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d0:	441c      	add	r4, r3
 80033d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d6:	2200      	movs	r2, #0
 80033d8:	673b      	str	r3, [r7, #112]	; 0x70
 80033da:	677a      	str	r2, [r7, #116]	; 0x74
 80033dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	1891      	adds	r1, r2, r2
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	415b      	adcs	r3, r3
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f0:	4641      	mov	r1, r8
 80033f2:	1851      	adds	r1, r2, r1
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	4649      	mov	r1, r9
 80033f8:	414b      	adcs	r3, r1
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003408:	4659      	mov	r1, fp
 800340a:	00cb      	lsls	r3, r1, #3
 800340c:	4651      	mov	r1, sl
 800340e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003412:	4651      	mov	r1, sl
 8003414:	00ca      	lsls	r2, r1, #3
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	4603      	mov	r3, r0
 800341c:	4642      	mov	r2, r8
 800341e:	189b      	adds	r3, r3, r2
 8003420:	66bb      	str	r3, [r7, #104]	; 0x68
 8003422:	464b      	mov	r3, r9
 8003424:	460a      	mov	r2, r1
 8003426:	eb42 0303 	adc.w	r3, r2, r3
 800342a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	663b      	str	r3, [r7, #96]	; 0x60
 8003436:	667a      	str	r2, [r7, #100]	; 0x64
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003444:	4649      	mov	r1, r9
 8003446:	008b      	lsls	r3, r1, #2
 8003448:	4641      	mov	r1, r8
 800344a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800344e:	4641      	mov	r1, r8
 8003450:	008a      	lsls	r2, r1, #2
 8003452:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003456:	f7fc ff1b 	bl	8000290 <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <UART_SetConfig+0x4e4>)
 8003460:	fba3 1302 	umull	r1, r3, r3, r2
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	2164      	movs	r1, #100	; 0x64
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	3332      	adds	r3, #50	; 0x32
 8003472:	4a08      	ldr	r2, [pc, #32]	; (8003494 <UART_SetConfig+0x4e4>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	f003 020f 	and.w	r2, r3, #15
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4422      	add	r2, r4
 8003486:	609a      	str	r2, [r3, #8]
}
 8003488:	bf00      	nop
 800348a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800348e:	46bd      	mov	sp, r7
 8003490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003494:	51eb851f 	.word	0x51eb851f

08003498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003498:	b084      	sub	sp, #16
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	f107 001c 	add.w	r0, r7, #28
 80034a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d122      	bne.n	80034f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80034c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 faa2 	bl	8003a34 <USB_CoreReset>
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	e01a      	b.n	800352c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fa96 	bl	8003a34 <USB_CoreReset>
 8003508:	4603      	mov	r3, r0
 800350a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800350c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
 800351e:	e005      	b.n	800352c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10b      	bne.n	800354a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f043 0206 	orr.w	r2, r3, #6
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800354a:	7bfb      	ldrb	r3, [r7, #15]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003556:	b004      	add	sp, #16
 8003558:	4770      	bx	lr

0800355a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 0201 	bic.w	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d115      	bne.n	80035ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035aa:	2001      	movs	r0, #1
 80035ac:	f7fd fe04 	bl	80011b8 <HAL_Delay>
      ms++;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fa2e 	bl	8003a18 <USB_GetMode>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d01e      	beq.n	8003600 <USB_SetCurrentMode+0x84>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b31      	cmp	r3, #49	; 0x31
 80035c6:	d9f0      	bls.n	80035aa <USB_SetCurrentMode+0x2e>
 80035c8:	e01a      	b.n	8003600 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d115      	bne.n	80035fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035dc:	2001      	movs	r0, #1
 80035de:	f7fd fdeb 	bl	80011b8 <HAL_Delay>
      ms++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3301      	adds	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fa15 	bl	8003a18 <USB_GetMode>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <USB_SetCurrentMode+0x84>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b31      	cmp	r3, #49	; 0x31
 80035f8:	d9f0      	bls.n	80035dc <USB_SetCurrentMode+0x60>
 80035fa:	e001      	b.n	8003600 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e005      	b.n	800360c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b32      	cmp	r3, #50	; 0x32
 8003604:	d101      	bne.n	800360a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003614:	b084      	sub	sp, #16
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	e009      	b.n	8003648 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	3340      	adds	r3, #64	; 0x40
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	2200      	movs	r2, #0
 8003640:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	3301      	adds	r3, #1
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0e      	cmp	r3, #14
 800364c:	d9f2      	bls.n	8003634 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800364e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d11c      	bne.n	800368e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003662:	f043 0302 	orr.w	r3, r3, #2
 8003666:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
 800368c:	e00b      	b.n	80036a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036ac:	461a      	mov	r2, r3
 80036ae:	2300      	movs	r3, #0
 80036b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b8:	4619      	mov	r1, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c0:	461a      	mov	r2, r3
 80036c2:	680b      	ldr	r3, [r1, #0]
 80036c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10c      	bne.n	80036e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036d2:	2100      	movs	r1, #0
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f965 	bl	80039a4 <USB_SetDevSpeed>
 80036da:	e008      	b.n	80036ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036dc:	2101      	movs	r1, #1
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f960 	bl	80039a4 <USB_SetDevSpeed>
 80036e4:	e003      	b.n	80036ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036e6:	2103      	movs	r1, #3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f95b 	bl	80039a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036ee:	2110      	movs	r1, #16
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8f3 	bl	80038dc <USB_FlushTxFifo>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f91f 	bl	8003944 <USB_FlushRxFifo>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003716:	461a      	mov	r2, r3
 8003718:	2300      	movs	r3, #0
 800371a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003722:	461a      	mov	r2, r3
 8003724:	2300      	movs	r3, #0
 8003726:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372e:	461a      	mov	r2, r3
 8003730:	2300      	movs	r3, #0
 8003732:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	e043      	b.n	80037c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800374c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003750:	d118      	bne.n	8003784 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003764:	461a      	mov	r2, r3
 8003766:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	e013      	b.n	8003796 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377a:	461a      	mov	r2, r3
 800377c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e008      	b.n	8003796 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	461a      	mov	r2, r3
 8003792:	2300      	movs	r3, #0
 8003794:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	461a      	mov	r2, r3
 80037a4:	2300      	movs	r3, #0
 80037a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b4:	461a      	mov	r2, r3
 80037b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	3301      	adds	r3, #1
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3b7      	bcc.n	800373a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e043      	b.n	8003858 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e6:	d118      	bne.n	800381a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fa:	461a      	mov	r2, r3
 80037fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e013      	b.n	800382c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003810:	461a      	mov	r2, r3
 8003812:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	e008      	b.n	800382c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003826:	461a      	mov	r2, r3
 8003828:	2300      	movs	r3, #0
 800382a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003838:	461a      	mov	r2, r3
 800383a:	2300      	movs	r3, #0
 800383c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	461a      	mov	r2, r3
 800384c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003850:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	3301      	adds	r3, #1
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	d3b7      	bcc.n	80037d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003872:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003880:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f043 0210 	orr.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <USB_DevInit+0x2c4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f043 0208 	orr.w	r2, r3, #8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d107      	bne.n	80038c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038d4:	b004      	add	sp, #16
 80038d6:	4770      	bx	lr
 80038d8:	803c3800 	.word	0x803c3800

080038dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3301      	adds	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a13      	ldr	r2, [pc, #76]	; (8003940 <USB_FlushTxFifo+0x64>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e01b      	b.n	8003934 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	daf2      	bge.n	80038ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	019b      	lsls	r3, r3, #6
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3301      	adds	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a08      	ldr	r2, [pc, #32]	; (8003940 <USB_FlushTxFifo+0x64>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e006      	b.n	8003934 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b20      	cmp	r3, #32
 8003930:	d0f0      	beq.n	8003914 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	00030d40 	.word	0x00030d40

08003944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3301      	adds	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <USB_FlushRxFifo+0x5c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e018      	b.n	8003994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	daf2      	bge.n	8003950 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2210      	movs	r2, #16
 8003972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3301      	adds	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <USB_FlushRxFifo+0x5c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e006      	b.n	8003994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b10      	cmp	r3, #16
 8003990:	d0f0      	beq.n	8003974 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	00030d40 	.word	0x00030d40

080039a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	68f9      	ldr	r1, [r7, #12]
 80039c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80039f0:	f023 0303 	bic.w	r3, r3, #3
 80039f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a04:	f043 0302 	orr.w	r3, r3, #2
 8003a08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0301 	and.w	r3, r3, #1
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3301      	adds	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <USB_CoreReset+0x64>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e01b      	b.n	8003a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	daf2      	bge.n	8003a40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <USB_CoreReset+0x64>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e006      	b.n	8003a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d0f0      	beq.n	8003a6a <USB_CoreReset+0x36>

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	00030d40 	.word	0x00030d40

08003a9c <std>:
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	b510      	push	{r4, lr}
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	e9c0 3300 	strd	r3, r3, [r0]
 8003aa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003aaa:	6083      	str	r3, [r0, #8]
 8003aac:	8181      	strh	r1, [r0, #12]
 8003aae:	6643      	str	r3, [r0, #100]	; 0x64
 8003ab0:	81c2      	strh	r2, [r0, #14]
 8003ab2:	6183      	str	r3, [r0, #24]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	305c      	adds	r0, #92	; 0x5c
 8003aba:	f000 f906 	bl	8003cca <memset>
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <std+0x58>)
 8003ac0:	6263      	str	r3, [r4, #36]	; 0x24
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <std+0x5c>)
 8003ac4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <std+0x60>)
 8003ac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003aca:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <std+0x64>)
 8003acc:	6323      	str	r3, [r4, #48]	; 0x30
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <std+0x68>)
 8003ad0:	6224      	str	r4, [r4, #32]
 8003ad2:	429c      	cmp	r4, r3
 8003ad4:	d006      	beq.n	8003ae4 <std+0x48>
 8003ad6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003ada:	4294      	cmp	r4, r2
 8003adc:	d002      	beq.n	8003ae4 <std+0x48>
 8003ade:	33d0      	adds	r3, #208	; 0xd0
 8003ae0:	429c      	cmp	r4, r3
 8003ae2:	d105      	bne.n	8003af0 <std+0x54>
 8003ae4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aec:	f000 b966 	b.w	8003dbc <__retarget_lock_init_recursive>
 8003af0:	bd10      	pop	{r4, pc}
 8003af2:	bf00      	nop
 8003af4:	08003c45 	.word	0x08003c45
 8003af8:	08003c67 	.word	0x08003c67
 8003afc:	08003c9f 	.word	0x08003c9f
 8003b00:	08003cc3 	.word	0x08003cc3
 8003b04:	200005e4 	.word	0x200005e4

08003b08 <stdio_exit_handler>:
 8003b08:	4a02      	ldr	r2, [pc, #8]	; (8003b14 <stdio_exit_handler+0xc>)
 8003b0a:	4903      	ldr	r1, [pc, #12]	; (8003b18 <stdio_exit_handler+0x10>)
 8003b0c:	4803      	ldr	r0, [pc, #12]	; (8003b1c <stdio_exit_handler+0x14>)
 8003b0e:	f000 b869 	b.w	8003be4 <_fwalk_sglue>
 8003b12:	bf00      	nop
 8003b14:	2000000c 	.word	0x2000000c
 8003b18:	08004669 	.word	0x08004669
 8003b1c:	20000018 	.word	0x20000018

08003b20 <cleanup_stdio>:
 8003b20:	6841      	ldr	r1, [r0, #4]
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <cleanup_stdio+0x34>)
 8003b24:	4299      	cmp	r1, r3
 8003b26:	b510      	push	{r4, lr}
 8003b28:	4604      	mov	r4, r0
 8003b2a:	d001      	beq.n	8003b30 <cleanup_stdio+0x10>
 8003b2c:	f000 fd9c 	bl	8004668 <_fflush_r>
 8003b30:	68a1      	ldr	r1, [r4, #8]
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <cleanup_stdio+0x38>)
 8003b34:	4299      	cmp	r1, r3
 8003b36:	d002      	beq.n	8003b3e <cleanup_stdio+0x1e>
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f000 fd95 	bl	8004668 <_fflush_r>
 8003b3e:	68e1      	ldr	r1, [r4, #12]
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <cleanup_stdio+0x3c>)
 8003b42:	4299      	cmp	r1, r3
 8003b44:	d004      	beq.n	8003b50 <cleanup_stdio+0x30>
 8003b46:	4620      	mov	r0, r4
 8003b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b4c:	f000 bd8c 	b.w	8004668 <_fflush_r>
 8003b50:	bd10      	pop	{r4, pc}
 8003b52:	bf00      	nop
 8003b54:	200005e4 	.word	0x200005e4
 8003b58:	2000064c 	.word	0x2000064c
 8003b5c:	200006b4 	.word	0x200006b4

08003b60 <global_stdio_init.part.0>:
 8003b60:	b510      	push	{r4, lr}
 8003b62:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <global_stdio_init.part.0+0x30>)
 8003b64:	4c0b      	ldr	r4, [pc, #44]	; (8003b94 <global_stdio_init.part.0+0x34>)
 8003b66:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <global_stdio_init.part.0+0x38>)
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2104      	movs	r1, #4
 8003b70:	f7ff ff94 	bl	8003a9c <std>
 8003b74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003b78:	2201      	movs	r2, #1
 8003b7a:	2109      	movs	r1, #9
 8003b7c:	f7ff ff8e 	bl	8003a9c <std>
 8003b80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003b84:	2202      	movs	r2, #2
 8003b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b8a:	2112      	movs	r1, #18
 8003b8c:	f7ff bf86 	b.w	8003a9c <std>
 8003b90:	2000071c 	.word	0x2000071c
 8003b94:	200005e4 	.word	0x200005e4
 8003b98:	08003b09 	.word	0x08003b09

08003b9c <__sfp_lock_acquire>:
 8003b9c:	4801      	ldr	r0, [pc, #4]	; (8003ba4 <__sfp_lock_acquire+0x8>)
 8003b9e:	f000 b90e 	b.w	8003dbe <__retarget_lock_acquire_recursive>
 8003ba2:	bf00      	nop
 8003ba4:	20000725 	.word	0x20000725

08003ba8 <__sfp_lock_release>:
 8003ba8:	4801      	ldr	r0, [pc, #4]	; (8003bb0 <__sfp_lock_release+0x8>)
 8003baa:	f000 b909 	b.w	8003dc0 <__retarget_lock_release_recursive>
 8003bae:	bf00      	nop
 8003bb0:	20000725 	.word	0x20000725

08003bb4 <__sinit>:
 8003bb4:	b510      	push	{r4, lr}
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	f7ff fff0 	bl	8003b9c <__sfp_lock_acquire>
 8003bbc:	6a23      	ldr	r3, [r4, #32]
 8003bbe:	b11b      	cbz	r3, 8003bc8 <__sinit+0x14>
 8003bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bc4:	f7ff bff0 	b.w	8003ba8 <__sfp_lock_release>
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <__sinit+0x28>)
 8003bca:	6223      	str	r3, [r4, #32]
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <__sinit+0x2c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f5      	bne.n	8003bc0 <__sinit+0xc>
 8003bd4:	f7ff ffc4 	bl	8003b60 <global_stdio_init.part.0>
 8003bd8:	e7f2      	b.n	8003bc0 <__sinit+0xc>
 8003bda:	bf00      	nop
 8003bdc:	08003b21 	.word	0x08003b21
 8003be0:	2000071c 	.word	0x2000071c

08003be4 <_fwalk_sglue>:
 8003be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003be8:	4607      	mov	r7, r0
 8003bea:	4688      	mov	r8, r1
 8003bec:	4614      	mov	r4, r2
 8003bee:	2600      	movs	r6, #0
 8003bf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bf4:	f1b9 0901 	subs.w	r9, r9, #1
 8003bf8:	d505      	bpl.n	8003c06 <_fwalk_sglue+0x22>
 8003bfa:	6824      	ldr	r4, [r4, #0]
 8003bfc:	2c00      	cmp	r4, #0
 8003bfe:	d1f7      	bne.n	8003bf0 <_fwalk_sglue+0xc>
 8003c00:	4630      	mov	r0, r6
 8003c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c06:	89ab      	ldrh	r3, [r5, #12]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d907      	bls.n	8003c1c <_fwalk_sglue+0x38>
 8003c0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c10:	3301      	adds	r3, #1
 8003c12:	d003      	beq.n	8003c1c <_fwalk_sglue+0x38>
 8003c14:	4629      	mov	r1, r5
 8003c16:	4638      	mov	r0, r7
 8003c18:	47c0      	blx	r8
 8003c1a:	4306      	orrs	r6, r0
 8003c1c:	3568      	adds	r5, #104	; 0x68
 8003c1e:	e7e9      	b.n	8003bf4 <_fwalk_sglue+0x10>

08003c20 <iprintf>:
 8003c20:	b40f      	push	{r0, r1, r2, r3}
 8003c22:	b507      	push	{r0, r1, r2, lr}
 8003c24:	4906      	ldr	r1, [pc, #24]	; (8003c40 <iprintf+0x20>)
 8003c26:	ab04      	add	r3, sp, #16
 8003c28:	6808      	ldr	r0, [r1, #0]
 8003c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c2e:	6881      	ldr	r1, [r0, #8]
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	f000 f9e9 	bl	8004008 <_vfiprintf_r>
 8003c36:	b003      	add	sp, #12
 8003c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c3c:	b004      	add	sp, #16
 8003c3e:	4770      	bx	lr
 8003c40:	20000064 	.word	0x20000064

08003c44 <__sread>:
 8003c44:	b510      	push	{r4, lr}
 8003c46:	460c      	mov	r4, r1
 8003c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c4c:	f000 f868 	bl	8003d20 <_read_r>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	bfab      	itete	ge
 8003c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c56:	89a3      	ldrhlt	r3, [r4, #12]
 8003c58:	181b      	addge	r3, r3, r0
 8003c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c5e:	bfac      	ite	ge
 8003c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c62:	81a3      	strhlt	r3, [r4, #12]
 8003c64:	bd10      	pop	{r4, pc}

08003c66 <__swrite>:
 8003c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c6a:	461f      	mov	r7, r3
 8003c6c:	898b      	ldrh	r3, [r1, #12]
 8003c6e:	05db      	lsls	r3, r3, #23
 8003c70:	4605      	mov	r5, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	4616      	mov	r6, r2
 8003c76:	d505      	bpl.n	8003c84 <__swrite+0x1e>
 8003c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f000 f83c 	bl	8003cfc <_lseek_r>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	4632      	mov	r2, r6
 8003c92:	463b      	mov	r3, r7
 8003c94:	4628      	mov	r0, r5
 8003c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9a:	f000 b853 	b.w	8003d44 <_write_r>

08003c9e <__sseek>:
 8003c9e:	b510      	push	{r4, lr}
 8003ca0:	460c      	mov	r4, r1
 8003ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca6:	f000 f829 	bl	8003cfc <_lseek_r>
 8003caa:	1c43      	adds	r3, r0, #1
 8003cac:	89a3      	ldrh	r3, [r4, #12]
 8003cae:	bf15      	itete	ne
 8003cb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cba:	81a3      	strheq	r3, [r4, #12]
 8003cbc:	bf18      	it	ne
 8003cbe:	81a3      	strhne	r3, [r4, #12]
 8003cc0:	bd10      	pop	{r4, pc}

08003cc2 <__sclose>:
 8003cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cc6:	f000 b809 	b.w	8003cdc <_close_r>

08003cca <memset>:
 8003cca:	4402      	add	r2, r0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d100      	bne.n	8003cd4 <memset+0xa>
 8003cd2:	4770      	bx	lr
 8003cd4:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd8:	e7f9      	b.n	8003cce <memset+0x4>
	...

08003cdc <_close_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4d06      	ldr	r5, [pc, #24]	; (8003cf8 <_close_r+0x1c>)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	602b      	str	r3, [r5, #0]
 8003ce8:	f7fd f853 	bl	8000d92 <_close>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_close_r+0x1a>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_close_r+0x1a>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	20000720 	.word	0x20000720

08003cfc <_lseek_r>:
 8003cfc:	b538      	push	{r3, r4, r5, lr}
 8003cfe:	4d07      	ldr	r5, [pc, #28]	; (8003d1c <_lseek_r+0x20>)
 8003d00:	4604      	mov	r4, r0
 8003d02:	4608      	mov	r0, r1
 8003d04:	4611      	mov	r1, r2
 8003d06:	2200      	movs	r2, #0
 8003d08:	602a      	str	r2, [r5, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f7fd f868 	bl	8000de0 <_lseek>
 8003d10:	1c43      	adds	r3, r0, #1
 8003d12:	d102      	bne.n	8003d1a <_lseek_r+0x1e>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	b103      	cbz	r3, 8003d1a <_lseek_r+0x1e>
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
 8003d1c:	20000720 	.word	0x20000720

08003d20 <_read_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4d07      	ldr	r5, [pc, #28]	; (8003d40 <_read_r+0x20>)
 8003d24:	4604      	mov	r4, r0
 8003d26:	4608      	mov	r0, r1
 8003d28:	4611      	mov	r1, r2
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	602a      	str	r2, [r5, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f7fd f812 	bl	8000d58 <_read>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_read_r+0x1e>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_read_r+0x1e>
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	20000720 	.word	0x20000720

08003d44 <_write_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	4d07      	ldr	r5, [pc, #28]	; (8003d64 <_write_r+0x20>)
 8003d48:	4604      	mov	r4, r0
 8003d4a:	4608      	mov	r0, r1
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	602a      	str	r2, [r5, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f7fc fd68 	bl	8000828 <_write>
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	d102      	bne.n	8003d62 <_write_r+0x1e>
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	b103      	cbz	r3, 8003d62 <_write_r+0x1e>
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
 8003d64:	20000720 	.word	0x20000720

08003d68 <__errno>:
 8003d68:	4b01      	ldr	r3, [pc, #4]	; (8003d70 <__errno+0x8>)
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000064 	.word	0x20000064

08003d74 <__libc_init_array>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	4d0d      	ldr	r5, [pc, #52]	; (8003dac <__libc_init_array+0x38>)
 8003d78:	4c0d      	ldr	r4, [pc, #52]	; (8003db0 <__libc_init_array+0x3c>)
 8003d7a:	1b64      	subs	r4, r4, r5
 8003d7c:	10a4      	asrs	r4, r4, #2
 8003d7e:	2600      	movs	r6, #0
 8003d80:	42a6      	cmp	r6, r4
 8003d82:	d109      	bne.n	8003d98 <__libc_init_array+0x24>
 8003d84:	4d0b      	ldr	r5, [pc, #44]	; (8003db4 <__libc_init_array+0x40>)
 8003d86:	4c0c      	ldr	r4, [pc, #48]	; (8003db8 <__libc_init_array+0x44>)
 8003d88:	f000 fdc0 	bl	800490c <_init>
 8003d8c:	1b64      	subs	r4, r4, r5
 8003d8e:	10a4      	asrs	r4, r4, #2
 8003d90:	2600      	movs	r6, #0
 8003d92:	42a6      	cmp	r6, r4
 8003d94:	d105      	bne.n	8003da2 <__libc_init_array+0x2e>
 8003d96:	bd70      	pop	{r4, r5, r6, pc}
 8003d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9c:	4798      	blx	r3
 8003d9e:	3601      	adds	r6, #1
 8003da0:	e7ee      	b.n	8003d80 <__libc_init_array+0xc>
 8003da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da6:	4798      	blx	r3
 8003da8:	3601      	adds	r6, #1
 8003daa:	e7f2      	b.n	8003d92 <__libc_init_array+0x1e>
 8003dac:	0800499c 	.word	0x0800499c
 8003db0:	0800499c 	.word	0x0800499c
 8003db4:	0800499c 	.word	0x0800499c
 8003db8:	080049a0 	.word	0x080049a0

08003dbc <__retarget_lock_init_recursive>:
 8003dbc:	4770      	bx	lr

08003dbe <__retarget_lock_acquire_recursive>:
 8003dbe:	4770      	bx	lr

08003dc0 <__retarget_lock_release_recursive>:
 8003dc0:	4770      	bx	lr
	...

08003dc4 <_free_r>:
 8003dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dc6:	2900      	cmp	r1, #0
 8003dc8:	d044      	beq.n	8003e54 <_free_r+0x90>
 8003dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dce:	9001      	str	r0, [sp, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8003dd6:	bfb8      	it	lt
 8003dd8:	18e4      	addlt	r4, r4, r3
 8003dda:	f000 f8df 	bl	8003f9c <__malloc_lock>
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <_free_r+0x94>)
 8003de0:	9801      	ldr	r0, [sp, #4]
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	b933      	cbnz	r3, 8003df4 <_free_r+0x30>
 8003de6:	6063      	str	r3, [r4, #4]
 8003de8:	6014      	str	r4, [r2, #0]
 8003dea:	b003      	add	sp, #12
 8003dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003df0:	f000 b8da 	b.w	8003fa8 <__malloc_unlock>
 8003df4:	42a3      	cmp	r3, r4
 8003df6:	d908      	bls.n	8003e0a <_free_r+0x46>
 8003df8:	6825      	ldr	r5, [r4, #0]
 8003dfa:	1961      	adds	r1, r4, r5
 8003dfc:	428b      	cmp	r3, r1
 8003dfe:	bf01      	itttt	eq
 8003e00:	6819      	ldreq	r1, [r3, #0]
 8003e02:	685b      	ldreq	r3, [r3, #4]
 8003e04:	1949      	addeq	r1, r1, r5
 8003e06:	6021      	streq	r1, [r4, #0]
 8003e08:	e7ed      	b.n	8003de6 <_free_r+0x22>
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	b10b      	cbz	r3, 8003e14 <_free_r+0x50>
 8003e10:	42a3      	cmp	r3, r4
 8003e12:	d9fa      	bls.n	8003e0a <_free_r+0x46>
 8003e14:	6811      	ldr	r1, [r2, #0]
 8003e16:	1855      	adds	r5, r2, r1
 8003e18:	42a5      	cmp	r5, r4
 8003e1a:	d10b      	bne.n	8003e34 <_free_r+0x70>
 8003e1c:	6824      	ldr	r4, [r4, #0]
 8003e1e:	4421      	add	r1, r4
 8003e20:	1854      	adds	r4, r2, r1
 8003e22:	42a3      	cmp	r3, r4
 8003e24:	6011      	str	r1, [r2, #0]
 8003e26:	d1e0      	bne.n	8003dea <_free_r+0x26>
 8003e28:	681c      	ldr	r4, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	6053      	str	r3, [r2, #4]
 8003e2e:	440c      	add	r4, r1
 8003e30:	6014      	str	r4, [r2, #0]
 8003e32:	e7da      	b.n	8003dea <_free_r+0x26>
 8003e34:	d902      	bls.n	8003e3c <_free_r+0x78>
 8003e36:	230c      	movs	r3, #12
 8003e38:	6003      	str	r3, [r0, #0]
 8003e3a:	e7d6      	b.n	8003dea <_free_r+0x26>
 8003e3c:	6825      	ldr	r5, [r4, #0]
 8003e3e:	1961      	adds	r1, r4, r5
 8003e40:	428b      	cmp	r3, r1
 8003e42:	bf04      	itt	eq
 8003e44:	6819      	ldreq	r1, [r3, #0]
 8003e46:	685b      	ldreq	r3, [r3, #4]
 8003e48:	6063      	str	r3, [r4, #4]
 8003e4a:	bf04      	itt	eq
 8003e4c:	1949      	addeq	r1, r1, r5
 8003e4e:	6021      	streq	r1, [r4, #0]
 8003e50:	6054      	str	r4, [r2, #4]
 8003e52:	e7ca      	b.n	8003dea <_free_r+0x26>
 8003e54:	b003      	add	sp, #12
 8003e56:	bd30      	pop	{r4, r5, pc}
 8003e58:	20000728 	.word	0x20000728

08003e5c <sbrk_aligned>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4e0e      	ldr	r6, [pc, #56]	; (8003e98 <sbrk_aligned+0x3c>)
 8003e60:	460c      	mov	r4, r1
 8003e62:	6831      	ldr	r1, [r6, #0]
 8003e64:	4605      	mov	r5, r0
 8003e66:	b911      	cbnz	r1, 8003e6e <sbrk_aligned+0x12>
 8003e68:	f000 fcbc 	bl	80047e4 <_sbrk_r>
 8003e6c:	6030      	str	r0, [r6, #0]
 8003e6e:	4621      	mov	r1, r4
 8003e70:	4628      	mov	r0, r5
 8003e72:	f000 fcb7 	bl	80047e4 <_sbrk_r>
 8003e76:	1c43      	adds	r3, r0, #1
 8003e78:	d00a      	beq.n	8003e90 <sbrk_aligned+0x34>
 8003e7a:	1cc4      	adds	r4, r0, #3
 8003e7c:	f024 0403 	bic.w	r4, r4, #3
 8003e80:	42a0      	cmp	r0, r4
 8003e82:	d007      	beq.n	8003e94 <sbrk_aligned+0x38>
 8003e84:	1a21      	subs	r1, r4, r0
 8003e86:	4628      	mov	r0, r5
 8003e88:	f000 fcac 	bl	80047e4 <_sbrk_r>
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d101      	bne.n	8003e94 <sbrk_aligned+0x38>
 8003e90:	f04f 34ff 	mov.w	r4, #4294967295
 8003e94:	4620      	mov	r0, r4
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
 8003e98:	2000072c 	.word	0x2000072c

08003e9c <_malloc_r>:
 8003e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea0:	1ccd      	adds	r5, r1, #3
 8003ea2:	f025 0503 	bic.w	r5, r5, #3
 8003ea6:	3508      	adds	r5, #8
 8003ea8:	2d0c      	cmp	r5, #12
 8003eaa:	bf38      	it	cc
 8003eac:	250c      	movcc	r5, #12
 8003eae:	2d00      	cmp	r5, #0
 8003eb0:	4607      	mov	r7, r0
 8003eb2:	db01      	blt.n	8003eb8 <_malloc_r+0x1c>
 8003eb4:	42a9      	cmp	r1, r5
 8003eb6:	d905      	bls.n	8003ec4 <_malloc_r+0x28>
 8003eb8:	230c      	movs	r3, #12
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	2600      	movs	r6, #0
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ec4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f98 <_malloc_r+0xfc>
 8003ec8:	f000 f868 	bl	8003f9c <__malloc_lock>
 8003ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8003ed0:	461c      	mov	r4, r3
 8003ed2:	bb5c      	cbnz	r4, 8003f2c <_malloc_r+0x90>
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	f7ff ffc0 	bl	8003e5c <sbrk_aligned>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	4604      	mov	r4, r0
 8003ee0:	d155      	bne.n	8003f8e <_malloc_r+0xf2>
 8003ee2:	f8d8 4000 	ldr.w	r4, [r8]
 8003ee6:	4626      	mov	r6, r4
 8003ee8:	2e00      	cmp	r6, #0
 8003eea:	d145      	bne.n	8003f78 <_malloc_r+0xdc>
 8003eec:	2c00      	cmp	r4, #0
 8003eee:	d048      	beq.n	8003f82 <_malloc_r+0xe6>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	4631      	mov	r1, r6
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	eb04 0903 	add.w	r9, r4, r3
 8003efa:	f000 fc73 	bl	80047e4 <_sbrk_r>
 8003efe:	4581      	cmp	r9, r0
 8003f00:	d13f      	bne.n	8003f82 <_malloc_r+0xe6>
 8003f02:	6821      	ldr	r1, [r4, #0]
 8003f04:	1a6d      	subs	r5, r5, r1
 8003f06:	4629      	mov	r1, r5
 8003f08:	4638      	mov	r0, r7
 8003f0a:	f7ff ffa7 	bl	8003e5c <sbrk_aligned>
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d037      	beq.n	8003f82 <_malloc_r+0xe6>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	442b      	add	r3, r5
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	f8d8 3000 	ldr.w	r3, [r8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d038      	beq.n	8003f92 <_malloc_r+0xf6>
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	42a2      	cmp	r2, r4
 8003f24:	d12b      	bne.n	8003f7e <_malloc_r+0xe2>
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	e00f      	b.n	8003f4c <_malloc_r+0xb0>
 8003f2c:	6822      	ldr	r2, [r4, #0]
 8003f2e:	1b52      	subs	r2, r2, r5
 8003f30:	d41f      	bmi.n	8003f72 <_malloc_r+0xd6>
 8003f32:	2a0b      	cmp	r2, #11
 8003f34:	d917      	bls.n	8003f66 <_malloc_r+0xca>
 8003f36:	1961      	adds	r1, r4, r5
 8003f38:	42a3      	cmp	r3, r4
 8003f3a:	6025      	str	r5, [r4, #0]
 8003f3c:	bf18      	it	ne
 8003f3e:	6059      	strne	r1, [r3, #4]
 8003f40:	6863      	ldr	r3, [r4, #4]
 8003f42:	bf08      	it	eq
 8003f44:	f8c8 1000 	streq.w	r1, [r8]
 8003f48:	5162      	str	r2, [r4, r5]
 8003f4a:	604b      	str	r3, [r1, #4]
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	f104 060b 	add.w	r6, r4, #11
 8003f52:	f000 f829 	bl	8003fa8 <__malloc_unlock>
 8003f56:	f026 0607 	bic.w	r6, r6, #7
 8003f5a:	1d23      	adds	r3, r4, #4
 8003f5c:	1af2      	subs	r2, r6, r3
 8003f5e:	d0ae      	beq.n	8003ebe <_malloc_r+0x22>
 8003f60:	1b9b      	subs	r3, r3, r6
 8003f62:	50a3      	str	r3, [r4, r2]
 8003f64:	e7ab      	b.n	8003ebe <_malloc_r+0x22>
 8003f66:	42a3      	cmp	r3, r4
 8003f68:	6862      	ldr	r2, [r4, #4]
 8003f6a:	d1dd      	bne.n	8003f28 <_malloc_r+0x8c>
 8003f6c:	f8c8 2000 	str.w	r2, [r8]
 8003f70:	e7ec      	b.n	8003f4c <_malloc_r+0xb0>
 8003f72:	4623      	mov	r3, r4
 8003f74:	6864      	ldr	r4, [r4, #4]
 8003f76:	e7ac      	b.n	8003ed2 <_malloc_r+0x36>
 8003f78:	4634      	mov	r4, r6
 8003f7a:	6876      	ldr	r6, [r6, #4]
 8003f7c:	e7b4      	b.n	8003ee8 <_malloc_r+0x4c>
 8003f7e:	4613      	mov	r3, r2
 8003f80:	e7cc      	b.n	8003f1c <_malloc_r+0x80>
 8003f82:	230c      	movs	r3, #12
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	4638      	mov	r0, r7
 8003f88:	f000 f80e 	bl	8003fa8 <__malloc_unlock>
 8003f8c:	e797      	b.n	8003ebe <_malloc_r+0x22>
 8003f8e:	6025      	str	r5, [r4, #0]
 8003f90:	e7dc      	b.n	8003f4c <_malloc_r+0xb0>
 8003f92:	605b      	str	r3, [r3, #4]
 8003f94:	deff      	udf	#255	; 0xff
 8003f96:	bf00      	nop
 8003f98:	20000728 	.word	0x20000728

08003f9c <__malloc_lock>:
 8003f9c:	4801      	ldr	r0, [pc, #4]	; (8003fa4 <__malloc_lock+0x8>)
 8003f9e:	f7ff bf0e 	b.w	8003dbe <__retarget_lock_acquire_recursive>
 8003fa2:	bf00      	nop
 8003fa4:	20000724 	.word	0x20000724

08003fa8 <__malloc_unlock>:
 8003fa8:	4801      	ldr	r0, [pc, #4]	; (8003fb0 <__malloc_unlock+0x8>)
 8003faa:	f7ff bf09 	b.w	8003dc0 <__retarget_lock_release_recursive>
 8003fae:	bf00      	nop
 8003fb0:	20000724 	.word	0x20000724

08003fb4 <__sfputc_r>:
 8003fb4:	6893      	ldr	r3, [r2, #8]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	b410      	push	{r4}
 8003fbc:	6093      	str	r3, [r2, #8]
 8003fbe:	da08      	bge.n	8003fd2 <__sfputc_r+0x1e>
 8003fc0:	6994      	ldr	r4, [r2, #24]
 8003fc2:	42a3      	cmp	r3, r4
 8003fc4:	db01      	blt.n	8003fca <__sfputc_r+0x16>
 8003fc6:	290a      	cmp	r1, #10
 8003fc8:	d103      	bne.n	8003fd2 <__sfputc_r+0x1e>
 8003fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fce:	f000 bb73 	b.w	80046b8 <__swbuf_r>
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	1c58      	adds	r0, r3, #1
 8003fd6:	6010      	str	r0, [r2, #0]
 8003fd8:	7019      	strb	r1, [r3, #0]
 8003fda:	4608      	mov	r0, r1
 8003fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <__sfputs_r>:
 8003fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe4:	4606      	mov	r6, r0
 8003fe6:	460f      	mov	r7, r1
 8003fe8:	4614      	mov	r4, r2
 8003fea:	18d5      	adds	r5, r2, r3
 8003fec:	42ac      	cmp	r4, r5
 8003fee:	d101      	bne.n	8003ff4 <__sfputs_r+0x12>
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	e007      	b.n	8004004 <__sfputs_r+0x22>
 8003ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff8:	463a      	mov	r2, r7
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	f7ff ffda 	bl	8003fb4 <__sfputc_r>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d1f3      	bne.n	8003fec <__sfputs_r+0xa>
 8004004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004008 <_vfiprintf_r>:
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	460d      	mov	r5, r1
 800400e:	b09d      	sub	sp, #116	; 0x74
 8004010:	4614      	mov	r4, r2
 8004012:	4698      	mov	r8, r3
 8004014:	4606      	mov	r6, r0
 8004016:	b118      	cbz	r0, 8004020 <_vfiprintf_r+0x18>
 8004018:	6a03      	ldr	r3, [r0, #32]
 800401a:	b90b      	cbnz	r3, 8004020 <_vfiprintf_r+0x18>
 800401c:	f7ff fdca 	bl	8003bb4 <__sinit>
 8004020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004022:	07d9      	lsls	r1, r3, #31
 8004024:	d405      	bmi.n	8004032 <_vfiprintf_r+0x2a>
 8004026:	89ab      	ldrh	r3, [r5, #12]
 8004028:	059a      	lsls	r2, r3, #22
 800402a:	d402      	bmi.n	8004032 <_vfiprintf_r+0x2a>
 800402c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800402e:	f7ff fec6 	bl	8003dbe <__retarget_lock_acquire_recursive>
 8004032:	89ab      	ldrh	r3, [r5, #12]
 8004034:	071b      	lsls	r3, r3, #28
 8004036:	d501      	bpl.n	800403c <_vfiprintf_r+0x34>
 8004038:	692b      	ldr	r3, [r5, #16]
 800403a:	b99b      	cbnz	r3, 8004064 <_vfiprintf_r+0x5c>
 800403c:	4629      	mov	r1, r5
 800403e:	4630      	mov	r0, r6
 8004040:	f000 fb78 	bl	8004734 <__swsetup_r>
 8004044:	b170      	cbz	r0, 8004064 <_vfiprintf_r+0x5c>
 8004046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004048:	07dc      	lsls	r4, r3, #31
 800404a:	d504      	bpl.n	8004056 <_vfiprintf_r+0x4e>
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	b01d      	add	sp, #116	; 0x74
 8004052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004056:	89ab      	ldrh	r3, [r5, #12]
 8004058:	0598      	lsls	r0, r3, #22
 800405a:	d4f7      	bmi.n	800404c <_vfiprintf_r+0x44>
 800405c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800405e:	f7ff feaf 	bl	8003dc0 <__retarget_lock_release_recursive>
 8004062:	e7f3      	b.n	800404c <_vfiprintf_r+0x44>
 8004064:	2300      	movs	r3, #0
 8004066:	9309      	str	r3, [sp, #36]	; 0x24
 8004068:	2320      	movs	r3, #32
 800406a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800406e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004072:	2330      	movs	r3, #48	; 0x30
 8004074:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004228 <_vfiprintf_r+0x220>
 8004078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800407c:	f04f 0901 	mov.w	r9, #1
 8004080:	4623      	mov	r3, r4
 8004082:	469a      	mov	sl, r3
 8004084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004088:	b10a      	cbz	r2, 800408e <_vfiprintf_r+0x86>
 800408a:	2a25      	cmp	r2, #37	; 0x25
 800408c:	d1f9      	bne.n	8004082 <_vfiprintf_r+0x7a>
 800408e:	ebba 0b04 	subs.w	fp, sl, r4
 8004092:	d00b      	beq.n	80040ac <_vfiprintf_r+0xa4>
 8004094:	465b      	mov	r3, fp
 8004096:	4622      	mov	r2, r4
 8004098:	4629      	mov	r1, r5
 800409a:	4630      	mov	r0, r6
 800409c:	f7ff ffa1 	bl	8003fe2 <__sfputs_r>
 80040a0:	3001      	adds	r0, #1
 80040a2:	f000 80a9 	beq.w	80041f8 <_vfiprintf_r+0x1f0>
 80040a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040a8:	445a      	add	r2, fp
 80040aa:	9209      	str	r2, [sp, #36]	; 0x24
 80040ac:	f89a 3000 	ldrb.w	r3, [sl]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80a1 	beq.w	80041f8 <_vfiprintf_r+0x1f0>
 80040b6:	2300      	movs	r3, #0
 80040b8:	f04f 32ff 	mov.w	r2, #4294967295
 80040bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040c0:	f10a 0a01 	add.w	sl, sl, #1
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	9307      	str	r3, [sp, #28]
 80040c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040cc:	931a      	str	r3, [sp, #104]	; 0x68
 80040ce:	4654      	mov	r4, sl
 80040d0:	2205      	movs	r2, #5
 80040d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d6:	4854      	ldr	r0, [pc, #336]	; (8004228 <_vfiprintf_r+0x220>)
 80040d8:	f7fc f88a 	bl	80001f0 <memchr>
 80040dc:	9a04      	ldr	r2, [sp, #16]
 80040de:	b9d8      	cbnz	r0, 8004118 <_vfiprintf_r+0x110>
 80040e0:	06d1      	lsls	r1, r2, #27
 80040e2:	bf44      	itt	mi
 80040e4:	2320      	movmi	r3, #32
 80040e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ea:	0713      	lsls	r3, r2, #28
 80040ec:	bf44      	itt	mi
 80040ee:	232b      	movmi	r3, #43	; 0x2b
 80040f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040f4:	f89a 3000 	ldrb.w	r3, [sl]
 80040f8:	2b2a      	cmp	r3, #42	; 0x2a
 80040fa:	d015      	beq.n	8004128 <_vfiprintf_r+0x120>
 80040fc:	9a07      	ldr	r2, [sp, #28]
 80040fe:	4654      	mov	r4, sl
 8004100:	2000      	movs	r0, #0
 8004102:	f04f 0c0a 	mov.w	ip, #10
 8004106:	4621      	mov	r1, r4
 8004108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800410c:	3b30      	subs	r3, #48	; 0x30
 800410e:	2b09      	cmp	r3, #9
 8004110:	d94d      	bls.n	80041ae <_vfiprintf_r+0x1a6>
 8004112:	b1b0      	cbz	r0, 8004142 <_vfiprintf_r+0x13a>
 8004114:	9207      	str	r2, [sp, #28]
 8004116:	e014      	b.n	8004142 <_vfiprintf_r+0x13a>
 8004118:	eba0 0308 	sub.w	r3, r0, r8
 800411c:	fa09 f303 	lsl.w	r3, r9, r3
 8004120:	4313      	orrs	r3, r2
 8004122:	9304      	str	r3, [sp, #16]
 8004124:	46a2      	mov	sl, r4
 8004126:	e7d2      	b.n	80040ce <_vfiprintf_r+0xc6>
 8004128:	9b03      	ldr	r3, [sp, #12]
 800412a:	1d19      	adds	r1, r3, #4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	9103      	str	r1, [sp, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	bfbb      	ittet	lt
 8004134:	425b      	neglt	r3, r3
 8004136:	f042 0202 	orrlt.w	r2, r2, #2
 800413a:	9307      	strge	r3, [sp, #28]
 800413c:	9307      	strlt	r3, [sp, #28]
 800413e:	bfb8      	it	lt
 8004140:	9204      	strlt	r2, [sp, #16]
 8004142:	7823      	ldrb	r3, [r4, #0]
 8004144:	2b2e      	cmp	r3, #46	; 0x2e
 8004146:	d10c      	bne.n	8004162 <_vfiprintf_r+0x15a>
 8004148:	7863      	ldrb	r3, [r4, #1]
 800414a:	2b2a      	cmp	r3, #42	; 0x2a
 800414c:	d134      	bne.n	80041b8 <_vfiprintf_r+0x1b0>
 800414e:	9b03      	ldr	r3, [sp, #12]
 8004150:	1d1a      	adds	r2, r3, #4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	9203      	str	r2, [sp, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	bfb8      	it	lt
 800415a:	f04f 33ff 	movlt.w	r3, #4294967295
 800415e:	3402      	adds	r4, #2
 8004160:	9305      	str	r3, [sp, #20]
 8004162:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004238 <_vfiprintf_r+0x230>
 8004166:	7821      	ldrb	r1, [r4, #0]
 8004168:	2203      	movs	r2, #3
 800416a:	4650      	mov	r0, sl
 800416c:	f7fc f840 	bl	80001f0 <memchr>
 8004170:	b138      	cbz	r0, 8004182 <_vfiprintf_r+0x17a>
 8004172:	9b04      	ldr	r3, [sp, #16]
 8004174:	eba0 000a 	sub.w	r0, r0, sl
 8004178:	2240      	movs	r2, #64	; 0x40
 800417a:	4082      	lsls	r2, r0
 800417c:	4313      	orrs	r3, r2
 800417e:	3401      	adds	r4, #1
 8004180:	9304      	str	r3, [sp, #16]
 8004182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004186:	4829      	ldr	r0, [pc, #164]	; (800422c <_vfiprintf_r+0x224>)
 8004188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800418c:	2206      	movs	r2, #6
 800418e:	f7fc f82f 	bl	80001f0 <memchr>
 8004192:	2800      	cmp	r0, #0
 8004194:	d03f      	beq.n	8004216 <_vfiprintf_r+0x20e>
 8004196:	4b26      	ldr	r3, [pc, #152]	; (8004230 <_vfiprintf_r+0x228>)
 8004198:	bb1b      	cbnz	r3, 80041e2 <_vfiprintf_r+0x1da>
 800419a:	9b03      	ldr	r3, [sp, #12]
 800419c:	3307      	adds	r3, #7
 800419e:	f023 0307 	bic.w	r3, r3, #7
 80041a2:	3308      	adds	r3, #8
 80041a4:	9303      	str	r3, [sp, #12]
 80041a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a8:	443b      	add	r3, r7
 80041aa:	9309      	str	r3, [sp, #36]	; 0x24
 80041ac:	e768      	b.n	8004080 <_vfiprintf_r+0x78>
 80041ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80041b2:	460c      	mov	r4, r1
 80041b4:	2001      	movs	r0, #1
 80041b6:	e7a6      	b.n	8004106 <_vfiprintf_r+0xfe>
 80041b8:	2300      	movs	r3, #0
 80041ba:	3401      	adds	r4, #1
 80041bc:	9305      	str	r3, [sp, #20]
 80041be:	4619      	mov	r1, r3
 80041c0:	f04f 0c0a 	mov.w	ip, #10
 80041c4:	4620      	mov	r0, r4
 80041c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041ca:	3a30      	subs	r2, #48	; 0x30
 80041cc:	2a09      	cmp	r2, #9
 80041ce:	d903      	bls.n	80041d8 <_vfiprintf_r+0x1d0>
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0c6      	beq.n	8004162 <_vfiprintf_r+0x15a>
 80041d4:	9105      	str	r1, [sp, #20]
 80041d6:	e7c4      	b.n	8004162 <_vfiprintf_r+0x15a>
 80041d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80041dc:	4604      	mov	r4, r0
 80041de:	2301      	movs	r3, #1
 80041e0:	e7f0      	b.n	80041c4 <_vfiprintf_r+0x1bc>
 80041e2:	ab03      	add	r3, sp, #12
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	462a      	mov	r2, r5
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <_vfiprintf_r+0x22c>)
 80041ea:	a904      	add	r1, sp, #16
 80041ec:	4630      	mov	r0, r6
 80041ee:	f3af 8000 	nop.w
 80041f2:	4607      	mov	r7, r0
 80041f4:	1c78      	adds	r0, r7, #1
 80041f6:	d1d6      	bne.n	80041a6 <_vfiprintf_r+0x19e>
 80041f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041fa:	07d9      	lsls	r1, r3, #31
 80041fc:	d405      	bmi.n	800420a <_vfiprintf_r+0x202>
 80041fe:	89ab      	ldrh	r3, [r5, #12]
 8004200:	059a      	lsls	r2, r3, #22
 8004202:	d402      	bmi.n	800420a <_vfiprintf_r+0x202>
 8004204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004206:	f7ff fddb 	bl	8003dc0 <__retarget_lock_release_recursive>
 800420a:	89ab      	ldrh	r3, [r5, #12]
 800420c:	065b      	lsls	r3, r3, #25
 800420e:	f53f af1d 	bmi.w	800404c <_vfiprintf_r+0x44>
 8004212:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004214:	e71c      	b.n	8004050 <_vfiprintf_r+0x48>
 8004216:	ab03      	add	r3, sp, #12
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	462a      	mov	r2, r5
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <_vfiprintf_r+0x22c>)
 800421e:	a904      	add	r1, sp, #16
 8004220:	4630      	mov	r0, r6
 8004222:	f000 f879 	bl	8004318 <_printf_i>
 8004226:	e7e4      	b.n	80041f2 <_vfiprintf_r+0x1ea>
 8004228:	08004960 	.word	0x08004960
 800422c:	0800496a 	.word	0x0800496a
 8004230:	00000000 	.word	0x00000000
 8004234:	08003fe3 	.word	0x08003fe3
 8004238:	08004966 	.word	0x08004966

0800423c <_printf_common>:
 800423c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004240:	4616      	mov	r6, r2
 8004242:	4699      	mov	r9, r3
 8004244:	688a      	ldr	r2, [r1, #8]
 8004246:	690b      	ldr	r3, [r1, #16]
 8004248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800424c:	4293      	cmp	r3, r2
 800424e:	bfb8      	it	lt
 8004250:	4613      	movlt	r3, r2
 8004252:	6033      	str	r3, [r6, #0]
 8004254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004258:	4607      	mov	r7, r0
 800425a:	460c      	mov	r4, r1
 800425c:	b10a      	cbz	r2, 8004262 <_printf_common+0x26>
 800425e:	3301      	adds	r3, #1
 8004260:	6033      	str	r3, [r6, #0]
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	0699      	lsls	r1, r3, #26
 8004266:	bf42      	ittt	mi
 8004268:	6833      	ldrmi	r3, [r6, #0]
 800426a:	3302      	addmi	r3, #2
 800426c:	6033      	strmi	r3, [r6, #0]
 800426e:	6825      	ldr	r5, [r4, #0]
 8004270:	f015 0506 	ands.w	r5, r5, #6
 8004274:	d106      	bne.n	8004284 <_printf_common+0x48>
 8004276:	f104 0a19 	add.w	sl, r4, #25
 800427a:	68e3      	ldr	r3, [r4, #12]
 800427c:	6832      	ldr	r2, [r6, #0]
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	42ab      	cmp	r3, r5
 8004282:	dc26      	bgt.n	80042d2 <_printf_common+0x96>
 8004284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004288:	1e13      	subs	r3, r2, #0
 800428a:	6822      	ldr	r2, [r4, #0]
 800428c:	bf18      	it	ne
 800428e:	2301      	movne	r3, #1
 8004290:	0692      	lsls	r2, r2, #26
 8004292:	d42b      	bmi.n	80042ec <_printf_common+0xb0>
 8004294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004298:	4649      	mov	r1, r9
 800429a:	4638      	mov	r0, r7
 800429c:	47c0      	blx	r8
 800429e:	3001      	adds	r0, #1
 80042a0:	d01e      	beq.n	80042e0 <_printf_common+0xa4>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	6922      	ldr	r2, [r4, #16]
 80042a6:	f003 0306 	and.w	r3, r3, #6
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	bf02      	ittt	eq
 80042ae:	68e5      	ldreq	r5, [r4, #12]
 80042b0:	6833      	ldreq	r3, [r6, #0]
 80042b2:	1aed      	subeq	r5, r5, r3
 80042b4:	68a3      	ldr	r3, [r4, #8]
 80042b6:	bf0c      	ite	eq
 80042b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042bc:	2500      	movne	r5, #0
 80042be:	4293      	cmp	r3, r2
 80042c0:	bfc4      	itt	gt
 80042c2:	1a9b      	subgt	r3, r3, r2
 80042c4:	18ed      	addgt	r5, r5, r3
 80042c6:	2600      	movs	r6, #0
 80042c8:	341a      	adds	r4, #26
 80042ca:	42b5      	cmp	r5, r6
 80042cc:	d11a      	bne.n	8004304 <_printf_common+0xc8>
 80042ce:	2000      	movs	r0, #0
 80042d0:	e008      	b.n	80042e4 <_printf_common+0xa8>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4652      	mov	r2, sl
 80042d6:	4649      	mov	r1, r9
 80042d8:	4638      	mov	r0, r7
 80042da:	47c0      	blx	r8
 80042dc:	3001      	adds	r0, #1
 80042de:	d103      	bne.n	80042e8 <_printf_common+0xac>
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e8:	3501      	adds	r5, #1
 80042ea:	e7c6      	b.n	800427a <_printf_common+0x3e>
 80042ec:	18e1      	adds	r1, r4, r3
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	2030      	movs	r0, #48	; 0x30
 80042f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042f6:	4422      	add	r2, r4
 80042f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004300:	3302      	adds	r3, #2
 8004302:	e7c7      	b.n	8004294 <_printf_common+0x58>
 8004304:	2301      	movs	r3, #1
 8004306:	4622      	mov	r2, r4
 8004308:	4649      	mov	r1, r9
 800430a:	4638      	mov	r0, r7
 800430c:	47c0      	blx	r8
 800430e:	3001      	adds	r0, #1
 8004310:	d0e6      	beq.n	80042e0 <_printf_common+0xa4>
 8004312:	3601      	adds	r6, #1
 8004314:	e7d9      	b.n	80042ca <_printf_common+0x8e>
	...

08004318 <_printf_i>:
 8004318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800431c:	7e0f      	ldrb	r7, [r1, #24]
 800431e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004320:	2f78      	cmp	r7, #120	; 0x78
 8004322:	4691      	mov	r9, r2
 8004324:	4680      	mov	r8, r0
 8004326:	460c      	mov	r4, r1
 8004328:	469a      	mov	sl, r3
 800432a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800432e:	d807      	bhi.n	8004340 <_printf_i+0x28>
 8004330:	2f62      	cmp	r7, #98	; 0x62
 8004332:	d80a      	bhi.n	800434a <_printf_i+0x32>
 8004334:	2f00      	cmp	r7, #0
 8004336:	f000 80d4 	beq.w	80044e2 <_printf_i+0x1ca>
 800433a:	2f58      	cmp	r7, #88	; 0x58
 800433c:	f000 80c0 	beq.w	80044c0 <_printf_i+0x1a8>
 8004340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004348:	e03a      	b.n	80043c0 <_printf_i+0xa8>
 800434a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800434e:	2b15      	cmp	r3, #21
 8004350:	d8f6      	bhi.n	8004340 <_printf_i+0x28>
 8004352:	a101      	add	r1, pc, #4	; (adr r1, 8004358 <_printf_i+0x40>)
 8004354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004358:	080043b1 	.word	0x080043b1
 800435c:	080043c5 	.word	0x080043c5
 8004360:	08004341 	.word	0x08004341
 8004364:	08004341 	.word	0x08004341
 8004368:	08004341 	.word	0x08004341
 800436c:	08004341 	.word	0x08004341
 8004370:	080043c5 	.word	0x080043c5
 8004374:	08004341 	.word	0x08004341
 8004378:	08004341 	.word	0x08004341
 800437c:	08004341 	.word	0x08004341
 8004380:	08004341 	.word	0x08004341
 8004384:	080044c9 	.word	0x080044c9
 8004388:	080043f1 	.word	0x080043f1
 800438c:	08004483 	.word	0x08004483
 8004390:	08004341 	.word	0x08004341
 8004394:	08004341 	.word	0x08004341
 8004398:	080044eb 	.word	0x080044eb
 800439c:	08004341 	.word	0x08004341
 80043a0:	080043f1 	.word	0x080043f1
 80043a4:	08004341 	.word	0x08004341
 80043a8:	08004341 	.word	0x08004341
 80043ac:	0800448b 	.word	0x0800448b
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	1d1a      	adds	r2, r3, #4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	602a      	str	r2, [r5, #0]
 80043b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043c0:	2301      	movs	r3, #1
 80043c2:	e09f      	b.n	8004504 <_printf_i+0x1ec>
 80043c4:	6820      	ldr	r0, [r4, #0]
 80043c6:	682b      	ldr	r3, [r5, #0]
 80043c8:	0607      	lsls	r7, r0, #24
 80043ca:	f103 0104 	add.w	r1, r3, #4
 80043ce:	6029      	str	r1, [r5, #0]
 80043d0:	d501      	bpl.n	80043d6 <_printf_i+0xbe>
 80043d2:	681e      	ldr	r6, [r3, #0]
 80043d4:	e003      	b.n	80043de <_printf_i+0xc6>
 80043d6:	0646      	lsls	r6, r0, #25
 80043d8:	d5fb      	bpl.n	80043d2 <_printf_i+0xba>
 80043da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80043de:	2e00      	cmp	r6, #0
 80043e0:	da03      	bge.n	80043ea <_printf_i+0xd2>
 80043e2:	232d      	movs	r3, #45	; 0x2d
 80043e4:	4276      	negs	r6, r6
 80043e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043ea:	485a      	ldr	r0, [pc, #360]	; (8004554 <_printf_i+0x23c>)
 80043ec:	230a      	movs	r3, #10
 80043ee:	e012      	b.n	8004416 <_printf_i+0xfe>
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	6820      	ldr	r0, [r4, #0]
 80043f4:	1d19      	adds	r1, r3, #4
 80043f6:	6029      	str	r1, [r5, #0]
 80043f8:	0605      	lsls	r5, r0, #24
 80043fa:	d501      	bpl.n	8004400 <_printf_i+0xe8>
 80043fc:	681e      	ldr	r6, [r3, #0]
 80043fe:	e002      	b.n	8004406 <_printf_i+0xee>
 8004400:	0641      	lsls	r1, r0, #25
 8004402:	d5fb      	bpl.n	80043fc <_printf_i+0xe4>
 8004404:	881e      	ldrh	r6, [r3, #0]
 8004406:	4853      	ldr	r0, [pc, #332]	; (8004554 <_printf_i+0x23c>)
 8004408:	2f6f      	cmp	r7, #111	; 0x6f
 800440a:	bf0c      	ite	eq
 800440c:	2308      	moveq	r3, #8
 800440e:	230a      	movne	r3, #10
 8004410:	2100      	movs	r1, #0
 8004412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004416:	6865      	ldr	r5, [r4, #4]
 8004418:	60a5      	str	r5, [r4, #8]
 800441a:	2d00      	cmp	r5, #0
 800441c:	bfa2      	ittt	ge
 800441e:	6821      	ldrge	r1, [r4, #0]
 8004420:	f021 0104 	bicge.w	r1, r1, #4
 8004424:	6021      	strge	r1, [r4, #0]
 8004426:	b90e      	cbnz	r6, 800442c <_printf_i+0x114>
 8004428:	2d00      	cmp	r5, #0
 800442a:	d04b      	beq.n	80044c4 <_printf_i+0x1ac>
 800442c:	4615      	mov	r5, r2
 800442e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004432:	fb03 6711 	mls	r7, r3, r1, r6
 8004436:	5dc7      	ldrb	r7, [r0, r7]
 8004438:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800443c:	4637      	mov	r7, r6
 800443e:	42bb      	cmp	r3, r7
 8004440:	460e      	mov	r6, r1
 8004442:	d9f4      	bls.n	800442e <_printf_i+0x116>
 8004444:	2b08      	cmp	r3, #8
 8004446:	d10b      	bne.n	8004460 <_printf_i+0x148>
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	07de      	lsls	r6, r3, #31
 800444c:	d508      	bpl.n	8004460 <_printf_i+0x148>
 800444e:	6923      	ldr	r3, [r4, #16]
 8004450:	6861      	ldr	r1, [r4, #4]
 8004452:	4299      	cmp	r1, r3
 8004454:	bfde      	ittt	le
 8004456:	2330      	movle	r3, #48	; 0x30
 8004458:	f805 3c01 	strble.w	r3, [r5, #-1]
 800445c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004460:	1b52      	subs	r2, r2, r5
 8004462:	6122      	str	r2, [r4, #16]
 8004464:	f8cd a000 	str.w	sl, [sp]
 8004468:	464b      	mov	r3, r9
 800446a:	aa03      	add	r2, sp, #12
 800446c:	4621      	mov	r1, r4
 800446e:	4640      	mov	r0, r8
 8004470:	f7ff fee4 	bl	800423c <_printf_common>
 8004474:	3001      	adds	r0, #1
 8004476:	d14a      	bne.n	800450e <_printf_i+0x1f6>
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	b004      	add	sp, #16
 800447e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	f043 0320 	orr.w	r3, r3, #32
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	4833      	ldr	r0, [pc, #204]	; (8004558 <_printf_i+0x240>)
 800448c:	2778      	movs	r7, #120	; 0x78
 800448e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	6829      	ldr	r1, [r5, #0]
 8004496:	061f      	lsls	r7, r3, #24
 8004498:	f851 6b04 	ldr.w	r6, [r1], #4
 800449c:	d402      	bmi.n	80044a4 <_printf_i+0x18c>
 800449e:	065f      	lsls	r7, r3, #25
 80044a0:	bf48      	it	mi
 80044a2:	b2b6      	uxthmi	r6, r6
 80044a4:	07df      	lsls	r7, r3, #31
 80044a6:	bf48      	it	mi
 80044a8:	f043 0320 	orrmi.w	r3, r3, #32
 80044ac:	6029      	str	r1, [r5, #0]
 80044ae:	bf48      	it	mi
 80044b0:	6023      	strmi	r3, [r4, #0]
 80044b2:	b91e      	cbnz	r6, 80044bc <_printf_i+0x1a4>
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	f023 0320 	bic.w	r3, r3, #32
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	2310      	movs	r3, #16
 80044be:	e7a7      	b.n	8004410 <_printf_i+0xf8>
 80044c0:	4824      	ldr	r0, [pc, #144]	; (8004554 <_printf_i+0x23c>)
 80044c2:	e7e4      	b.n	800448e <_printf_i+0x176>
 80044c4:	4615      	mov	r5, r2
 80044c6:	e7bd      	b.n	8004444 <_printf_i+0x12c>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	6826      	ldr	r6, [r4, #0]
 80044cc:	6961      	ldr	r1, [r4, #20]
 80044ce:	1d18      	adds	r0, r3, #4
 80044d0:	6028      	str	r0, [r5, #0]
 80044d2:	0635      	lsls	r5, r6, #24
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	d501      	bpl.n	80044dc <_printf_i+0x1c4>
 80044d8:	6019      	str	r1, [r3, #0]
 80044da:	e002      	b.n	80044e2 <_printf_i+0x1ca>
 80044dc:	0670      	lsls	r0, r6, #25
 80044de:	d5fb      	bpl.n	80044d8 <_printf_i+0x1c0>
 80044e0:	8019      	strh	r1, [r3, #0]
 80044e2:	2300      	movs	r3, #0
 80044e4:	6123      	str	r3, [r4, #16]
 80044e6:	4615      	mov	r5, r2
 80044e8:	e7bc      	b.n	8004464 <_printf_i+0x14c>
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	1d1a      	adds	r2, r3, #4
 80044ee:	602a      	str	r2, [r5, #0]
 80044f0:	681d      	ldr	r5, [r3, #0]
 80044f2:	6862      	ldr	r2, [r4, #4]
 80044f4:	2100      	movs	r1, #0
 80044f6:	4628      	mov	r0, r5
 80044f8:	f7fb fe7a 	bl	80001f0 <memchr>
 80044fc:	b108      	cbz	r0, 8004502 <_printf_i+0x1ea>
 80044fe:	1b40      	subs	r0, r0, r5
 8004500:	6060      	str	r0, [r4, #4]
 8004502:	6863      	ldr	r3, [r4, #4]
 8004504:	6123      	str	r3, [r4, #16]
 8004506:	2300      	movs	r3, #0
 8004508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800450c:	e7aa      	b.n	8004464 <_printf_i+0x14c>
 800450e:	6923      	ldr	r3, [r4, #16]
 8004510:	462a      	mov	r2, r5
 8004512:	4649      	mov	r1, r9
 8004514:	4640      	mov	r0, r8
 8004516:	47d0      	blx	sl
 8004518:	3001      	adds	r0, #1
 800451a:	d0ad      	beq.n	8004478 <_printf_i+0x160>
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	079b      	lsls	r3, r3, #30
 8004520:	d413      	bmi.n	800454a <_printf_i+0x232>
 8004522:	68e0      	ldr	r0, [r4, #12]
 8004524:	9b03      	ldr	r3, [sp, #12]
 8004526:	4298      	cmp	r0, r3
 8004528:	bfb8      	it	lt
 800452a:	4618      	movlt	r0, r3
 800452c:	e7a6      	b.n	800447c <_printf_i+0x164>
 800452e:	2301      	movs	r3, #1
 8004530:	4632      	mov	r2, r6
 8004532:	4649      	mov	r1, r9
 8004534:	4640      	mov	r0, r8
 8004536:	47d0      	blx	sl
 8004538:	3001      	adds	r0, #1
 800453a:	d09d      	beq.n	8004478 <_printf_i+0x160>
 800453c:	3501      	adds	r5, #1
 800453e:	68e3      	ldr	r3, [r4, #12]
 8004540:	9903      	ldr	r1, [sp, #12]
 8004542:	1a5b      	subs	r3, r3, r1
 8004544:	42ab      	cmp	r3, r5
 8004546:	dcf2      	bgt.n	800452e <_printf_i+0x216>
 8004548:	e7eb      	b.n	8004522 <_printf_i+0x20a>
 800454a:	2500      	movs	r5, #0
 800454c:	f104 0619 	add.w	r6, r4, #25
 8004550:	e7f5      	b.n	800453e <_printf_i+0x226>
 8004552:	bf00      	nop
 8004554:	08004971 	.word	0x08004971
 8004558:	08004982 	.word	0x08004982

0800455c <__sflush_r>:
 800455c:	898a      	ldrh	r2, [r1, #12]
 800455e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004562:	4605      	mov	r5, r0
 8004564:	0710      	lsls	r0, r2, #28
 8004566:	460c      	mov	r4, r1
 8004568:	d458      	bmi.n	800461c <__sflush_r+0xc0>
 800456a:	684b      	ldr	r3, [r1, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	dc05      	bgt.n	800457c <__sflush_r+0x20>
 8004570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	dc02      	bgt.n	800457c <__sflush_r+0x20>
 8004576:	2000      	movs	r0, #0
 8004578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800457c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800457e:	2e00      	cmp	r6, #0
 8004580:	d0f9      	beq.n	8004576 <__sflush_r+0x1a>
 8004582:	2300      	movs	r3, #0
 8004584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004588:	682f      	ldr	r7, [r5, #0]
 800458a:	6a21      	ldr	r1, [r4, #32]
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	d032      	beq.n	80045f6 <__sflush_r+0x9a>
 8004590:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004592:	89a3      	ldrh	r3, [r4, #12]
 8004594:	075a      	lsls	r2, r3, #29
 8004596:	d505      	bpl.n	80045a4 <__sflush_r+0x48>
 8004598:	6863      	ldr	r3, [r4, #4]
 800459a:	1ac0      	subs	r0, r0, r3
 800459c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800459e:	b10b      	cbz	r3, 80045a4 <__sflush_r+0x48>
 80045a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045a2:	1ac0      	subs	r0, r0, r3
 80045a4:	2300      	movs	r3, #0
 80045a6:	4602      	mov	r2, r0
 80045a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045aa:	6a21      	ldr	r1, [r4, #32]
 80045ac:	4628      	mov	r0, r5
 80045ae:	47b0      	blx	r6
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	89a3      	ldrh	r3, [r4, #12]
 80045b4:	d106      	bne.n	80045c4 <__sflush_r+0x68>
 80045b6:	6829      	ldr	r1, [r5, #0]
 80045b8:	291d      	cmp	r1, #29
 80045ba:	d82b      	bhi.n	8004614 <__sflush_r+0xb8>
 80045bc:	4a29      	ldr	r2, [pc, #164]	; (8004664 <__sflush_r+0x108>)
 80045be:	410a      	asrs	r2, r1
 80045c0:	07d6      	lsls	r6, r2, #31
 80045c2:	d427      	bmi.n	8004614 <__sflush_r+0xb8>
 80045c4:	2200      	movs	r2, #0
 80045c6:	6062      	str	r2, [r4, #4]
 80045c8:	04d9      	lsls	r1, r3, #19
 80045ca:	6922      	ldr	r2, [r4, #16]
 80045cc:	6022      	str	r2, [r4, #0]
 80045ce:	d504      	bpl.n	80045da <__sflush_r+0x7e>
 80045d0:	1c42      	adds	r2, r0, #1
 80045d2:	d101      	bne.n	80045d8 <__sflush_r+0x7c>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	b903      	cbnz	r3, 80045da <__sflush_r+0x7e>
 80045d8:	6560      	str	r0, [r4, #84]	; 0x54
 80045da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045dc:	602f      	str	r7, [r5, #0]
 80045de:	2900      	cmp	r1, #0
 80045e0:	d0c9      	beq.n	8004576 <__sflush_r+0x1a>
 80045e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045e6:	4299      	cmp	r1, r3
 80045e8:	d002      	beq.n	80045f0 <__sflush_r+0x94>
 80045ea:	4628      	mov	r0, r5
 80045ec:	f7ff fbea 	bl	8003dc4 <_free_r>
 80045f0:	2000      	movs	r0, #0
 80045f2:	6360      	str	r0, [r4, #52]	; 0x34
 80045f4:	e7c0      	b.n	8004578 <__sflush_r+0x1c>
 80045f6:	2301      	movs	r3, #1
 80045f8:	4628      	mov	r0, r5
 80045fa:	47b0      	blx	r6
 80045fc:	1c41      	adds	r1, r0, #1
 80045fe:	d1c8      	bne.n	8004592 <__sflush_r+0x36>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0c5      	beq.n	8004592 <__sflush_r+0x36>
 8004606:	2b1d      	cmp	r3, #29
 8004608:	d001      	beq.n	800460e <__sflush_r+0xb2>
 800460a:	2b16      	cmp	r3, #22
 800460c:	d101      	bne.n	8004612 <__sflush_r+0xb6>
 800460e:	602f      	str	r7, [r5, #0]
 8004610:	e7b1      	b.n	8004576 <__sflush_r+0x1a>
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004618:	81a3      	strh	r3, [r4, #12]
 800461a:	e7ad      	b.n	8004578 <__sflush_r+0x1c>
 800461c:	690f      	ldr	r7, [r1, #16]
 800461e:	2f00      	cmp	r7, #0
 8004620:	d0a9      	beq.n	8004576 <__sflush_r+0x1a>
 8004622:	0793      	lsls	r3, r2, #30
 8004624:	680e      	ldr	r6, [r1, #0]
 8004626:	bf08      	it	eq
 8004628:	694b      	ldreq	r3, [r1, #20]
 800462a:	600f      	str	r7, [r1, #0]
 800462c:	bf18      	it	ne
 800462e:	2300      	movne	r3, #0
 8004630:	eba6 0807 	sub.w	r8, r6, r7
 8004634:	608b      	str	r3, [r1, #8]
 8004636:	f1b8 0f00 	cmp.w	r8, #0
 800463a:	dd9c      	ble.n	8004576 <__sflush_r+0x1a>
 800463c:	6a21      	ldr	r1, [r4, #32]
 800463e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004640:	4643      	mov	r3, r8
 8004642:	463a      	mov	r2, r7
 8004644:	4628      	mov	r0, r5
 8004646:	47b0      	blx	r6
 8004648:	2800      	cmp	r0, #0
 800464a:	dc06      	bgt.n	800465a <__sflush_r+0xfe>
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004652:	81a3      	strh	r3, [r4, #12]
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	e78e      	b.n	8004578 <__sflush_r+0x1c>
 800465a:	4407      	add	r7, r0
 800465c:	eba8 0800 	sub.w	r8, r8, r0
 8004660:	e7e9      	b.n	8004636 <__sflush_r+0xda>
 8004662:	bf00      	nop
 8004664:	dfbffffe 	.word	0xdfbffffe

08004668 <_fflush_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	690b      	ldr	r3, [r1, #16]
 800466c:	4605      	mov	r5, r0
 800466e:	460c      	mov	r4, r1
 8004670:	b913      	cbnz	r3, 8004678 <_fflush_r+0x10>
 8004672:	2500      	movs	r5, #0
 8004674:	4628      	mov	r0, r5
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	b118      	cbz	r0, 8004682 <_fflush_r+0x1a>
 800467a:	6a03      	ldr	r3, [r0, #32]
 800467c:	b90b      	cbnz	r3, 8004682 <_fflush_r+0x1a>
 800467e:	f7ff fa99 	bl	8003bb4 <__sinit>
 8004682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f3      	beq.n	8004672 <_fflush_r+0xa>
 800468a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800468c:	07d0      	lsls	r0, r2, #31
 800468e:	d404      	bmi.n	800469a <_fflush_r+0x32>
 8004690:	0599      	lsls	r1, r3, #22
 8004692:	d402      	bmi.n	800469a <_fflush_r+0x32>
 8004694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004696:	f7ff fb92 	bl	8003dbe <__retarget_lock_acquire_recursive>
 800469a:	4628      	mov	r0, r5
 800469c:	4621      	mov	r1, r4
 800469e:	f7ff ff5d 	bl	800455c <__sflush_r>
 80046a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046a4:	07da      	lsls	r2, r3, #31
 80046a6:	4605      	mov	r5, r0
 80046a8:	d4e4      	bmi.n	8004674 <_fflush_r+0xc>
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	059b      	lsls	r3, r3, #22
 80046ae:	d4e1      	bmi.n	8004674 <_fflush_r+0xc>
 80046b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046b2:	f7ff fb85 	bl	8003dc0 <__retarget_lock_release_recursive>
 80046b6:	e7dd      	b.n	8004674 <_fflush_r+0xc>

080046b8 <__swbuf_r>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	460e      	mov	r6, r1
 80046bc:	4614      	mov	r4, r2
 80046be:	4605      	mov	r5, r0
 80046c0:	b118      	cbz	r0, 80046ca <__swbuf_r+0x12>
 80046c2:	6a03      	ldr	r3, [r0, #32]
 80046c4:	b90b      	cbnz	r3, 80046ca <__swbuf_r+0x12>
 80046c6:	f7ff fa75 	bl	8003bb4 <__sinit>
 80046ca:	69a3      	ldr	r3, [r4, #24]
 80046cc:	60a3      	str	r3, [r4, #8]
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	071a      	lsls	r2, r3, #28
 80046d2:	d525      	bpl.n	8004720 <__swbuf_r+0x68>
 80046d4:	6923      	ldr	r3, [r4, #16]
 80046d6:	b31b      	cbz	r3, 8004720 <__swbuf_r+0x68>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	6922      	ldr	r2, [r4, #16]
 80046dc:	1a98      	subs	r0, r3, r2
 80046de:	6963      	ldr	r3, [r4, #20]
 80046e0:	b2f6      	uxtb	r6, r6
 80046e2:	4283      	cmp	r3, r0
 80046e4:	4637      	mov	r7, r6
 80046e6:	dc04      	bgt.n	80046f2 <__swbuf_r+0x3a>
 80046e8:	4621      	mov	r1, r4
 80046ea:	4628      	mov	r0, r5
 80046ec:	f7ff ffbc 	bl	8004668 <_fflush_r>
 80046f0:	b9e0      	cbnz	r0, 800472c <__swbuf_r+0x74>
 80046f2:	68a3      	ldr	r3, [r4, #8]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	60a3      	str	r3, [r4, #8]
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	6022      	str	r2, [r4, #0]
 80046fe:	701e      	strb	r6, [r3, #0]
 8004700:	6962      	ldr	r2, [r4, #20]
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	429a      	cmp	r2, r3
 8004706:	d004      	beq.n	8004712 <__swbuf_r+0x5a>
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	07db      	lsls	r3, r3, #31
 800470c:	d506      	bpl.n	800471c <__swbuf_r+0x64>
 800470e:	2e0a      	cmp	r6, #10
 8004710:	d104      	bne.n	800471c <__swbuf_r+0x64>
 8004712:	4621      	mov	r1, r4
 8004714:	4628      	mov	r0, r5
 8004716:	f7ff ffa7 	bl	8004668 <_fflush_r>
 800471a:	b938      	cbnz	r0, 800472c <__swbuf_r+0x74>
 800471c:	4638      	mov	r0, r7
 800471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004720:	4621      	mov	r1, r4
 8004722:	4628      	mov	r0, r5
 8004724:	f000 f806 	bl	8004734 <__swsetup_r>
 8004728:	2800      	cmp	r0, #0
 800472a:	d0d5      	beq.n	80046d8 <__swbuf_r+0x20>
 800472c:	f04f 37ff 	mov.w	r7, #4294967295
 8004730:	e7f4      	b.n	800471c <__swbuf_r+0x64>
	...

08004734 <__swsetup_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4b2a      	ldr	r3, [pc, #168]	; (80047e0 <__swsetup_r+0xac>)
 8004738:	4605      	mov	r5, r0
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	460c      	mov	r4, r1
 800473e:	b118      	cbz	r0, 8004748 <__swsetup_r+0x14>
 8004740:	6a03      	ldr	r3, [r0, #32]
 8004742:	b90b      	cbnz	r3, 8004748 <__swsetup_r+0x14>
 8004744:	f7ff fa36 	bl	8003bb4 <__sinit>
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800474e:	0718      	lsls	r0, r3, #28
 8004750:	d422      	bmi.n	8004798 <__swsetup_r+0x64>
 8004752:	06d9      	lsls	r1, r3, #27
 8004754:	d407      	bmi.n	8004766 <__swsetup_r+0x32>
 8004756:	2309      	movs	r3, #9
 8004758:	602b      	str	r3, [r5, #0]
 800475a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800475e:	81a3      	strh	r3, [r4, #12]
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	e034      	b.n	80047d0 <__swsetup_r+0x9c>
 8004766:	0758      	lsls	r0, r3, #29
 8004768:	d512      	bpl.n	8004790 <__swsetup_r+0x5c>
 800476a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800476c:	b141      	cbz	r1, 8004780 <__swsetup_r+0x4c>
 800476e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004772:	4299      	cmp	r1, r3
 8004774:	d002      	beq.n	800477c <__swsetup_r+0x48>
 8004776:	4628      	mov	r0, r5
 8004778:	f7ff fb24 	bl	8003dc4 <_free_r>
 800477c:	2300      	movs	r3, #0
 800477e:	6363      	str	r3, [r4, #52]	; 0x34
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	2300      	movs	r3, #0
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	6023      	str	r3, [r4, #0]
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	f043 0308 	orr.w	r3, r3, #8
 8004796:	81a3      	strh	r3, [r4, #12]
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	b94b      	cbnz	r3, 80047b0 <__swsetup_r+0x7c>
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a6:	d003      	beq.n	80047b0 <__swsetup_r+0x7c>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 f850 	bl	8004850 <__smakebuf_r>
 80047b0:	89a0      	ldrh	r0, [r4, #12]
 80047b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047b6:	f010 0301 	ands.w	r3, r0, #1
 80047ba:	d00a      	beq.n	80047d2 <__swsetup_r+0x9e>
 80047bc:	2300      	movs	r3, #0
 80047be:	60a3      	str	r3, [r4, #8]
 80047c0:	6963      	ldr	r3, [r4, #20]
 80047c2:	425b      	negs	r3, r3
 80047c4:	61a3      	str	r3, [r4, #24]
 80047c6:	6923      	ldr	r3, [r4, #16]
 80047c8:	b943      	cbnz	r3, 80047dc <__swsetup_r+0xa8>
 80047ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047ce:	d1c4      	bne.n	800475a <__swsetup_r+0x26>
 80047d0:	bd38      	pop	{r3, r4, r5, pc}
 80047d2:	0781      	lsls	r1, r0, #30
 80047d4:	bf58      	it	pl
 80047d6:	6963      	ldrpl	r3, [r4, #20]
 80047d8:	60a3      	str	r3, [r4, #8]
 80047da:	e7f4      	b.n	80047c6 <__swsetup_r+0x92>
 80047dc:	2000      	movs	r0, #0
 80047de:	e7f7      	b.n	80047d0 <__swsetup_r+0x9c>
 80047e0:	20000064 	.word	0x20000064

080047e4 <_sbrk_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4d06      	ldr	r5, [pc, #24]	; (8004800 <_sbrk_r+0x1c>)
 80047e8:	2300      	movs	r3, #0
 80047ea:	4604      	mov	r4, r0
 80047ec:	4608      	mov	r0, r1
 80047ee:	602b      	str	r3, [r5, #0]
 80047f0:	f7fc fb04 	bl	8000dfc <_sbrk>
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	d102      	bne.n	80047fe <_sbrk_r+0x1a>
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	b103      	cbz	r3, 80047fe <_sbrk_r+0x1a>
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
 8004800:	20000720 	.word	0x20000720

08004804 <__swhatbuf_r>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	460c      	mov	r4, r1
 8004808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480c:	2900      	cmp	r1, #0
 800480e:	b096      	sub	sp, #88	; 0x58
 8004810:	4615      	mov	r5, r2
 8004812:	461e      	mov	r6, r3
 8004814:	da0d      	bge.n	8004832 <__swhatbuf_r+0x2e>
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f013 0f80 	tst.w	r3, #128	; 0x80
 800481c:	f04f 0100 	mov.w	r1, #0
 8004820:	bf0c      	ite	eq
 8004822:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004826:	2340      	movne	r3, #64	; 0x40
 8004828:	2000      	movs	r0, #0
 800482a:	6031      	str	r1, [r6, #0]
 800482c:	602b      	str	r3, [r5, #0]
 800482e:	b016      	add	sp, #88	; 0x58
 8004830:	bd70      	pop	{r4, r5, r6, pc}
 8004832:	466a      	mov	r2, sp
 8004834:	f000 f848 	bl	80048c8 <_fstat_r>
 8004838:	2800      	cmp	r0, #0
 800483a:	dbec      	blt.n	8004816 <__swhatbuf_r+0x12>
 800483c:	9901      	ldr	r1, [sp, #4]
 800483e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004842:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004846:	4259      	negs	r1, r3
 8004848:	4159      	adcs	r1, r3
 800484a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800484e:	e7eb      	b.n	8004828 <__swhatbuf_r+0x24>

08004850 <__smakebuf_r>:
 8004850:	898b      	ldrh	r3, [r1, #12]
 8004852:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004854:	079d      	lsls	r5, r3, #30
 8004856:	4606      	mov	r6, r0
 8004858:	460c      	mov	r4, r1
 800485a:	d507      	bpl.n	800486c <__smakebuf_r+0x1c>
 800485c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	6123      	str	r3, [r4, #16]
 8004864:	2301      	movs	r3, #1
 8004866:	6163      	str	r3, [r4, #20]
 8004868:	b002      	add	sp, #8
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	ab01      	add	r3, sp, #4
 800486e:	466a      	mov	r2, sp
 8004870:	f7ff ffc8 	bl	8004804 <__swhatbuf_r>
 8004874:	9900      	ldr	r1, [sp, #0]
 8004876:	4605      	mov	r5, r0
 8004878:	4630      	mov	r0, r6
 800487a:	f7ff fb0f 	bl	8003e9c <_malloc_r>
 800487e:	b948      	cbnz	r0, 8004894 <__smakebuf_r+0x44>
 8004880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004884:	059a      	lsls	r2, r3, #22
 8004886:	d4ef      	bmi.n	8004868 <__smakebuf_r+0x18>
 8004888:	f023 0303 	bic.w	r3, r3, #3
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	e7e3      	b.n	800485c <__smakebuf_r+0xc>
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	6020      	str	r0, [r4, #0]
 8004898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489c:	81a3      	strh	r3, [r4, #12]
 800489e:	9b00      	ldr	r3, [sp, #0]
 80048a0:	6163      	str	r3, [r4, #20]
 80048a2:	9b01      	ldr	r3, [sp, #4]
 80048a4:	6120      	str	r0, [r4, #16]
 80048a6:	b15b      	cbz	r3, 80048c0 <__smakebuf_r+0x70>
 80048a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ac:	4630      	mov	r0, r6
 80048ae:	f000 f81d 	bl	80048ec <_isatty_r>
 80048b2:	b128      	cbz	r0, 80048c0 <__smakebuf_r+0x70>
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	431d      	orrs	r5, r3
 80048c4:	81a5      	strh	r5, [r4, #12]
 80048c6:	e7cf      	b.n	8004868 <__smakebuf_r+0x18>

080048c8 <_fstat_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d07      	ldr	r5, [pc, #28]	; (80048e8 <_fstat_r+0x20>)
 80048cc:	2300      	movs	r3, #0
 80048ce:	4604      	mov	r4, r0
 80048d0:	4608      	mov	r0, r1
 80048d2:	4611      	mov	r1, r2
 80048d4:	602b      	str	r3, [r5, #0]
 80048d6:	f7fc fa68 	bl	8000daa <_fstat>
 80048da:	1c43      	adds	r3, r0, #1
 80048dc:	d102      	bne.n	80048e4 <_fstat_r+0x1c>
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	b103      	cbz	r3, 80048e4 <_fstat_r+0x1c>
 80048e2:	6023      	str	r3, [r4, #0]
 80048e4:	bd38      	pop	{r3, r4, r5, pc}
 80048e6:	bf00      	nop
 80048e8:	20000720 	.word	0x20000720

080048ec <_isatty_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4d06      	ldr	r5, [pc, #24]	; (8004908 <_isatty_r+0x1c>)
 80048f0:	2300      	movs	r3, #0
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	602b      	str	r3, [r5, #0]
 80048f8:	f7fc fa67 	bl	8000dca <_isatty>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d102      	bne.n	8004906 <_isatty_r+0x1a>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	b103      	cbz	r3, 8004906 <_isatty_r+0x1a>
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	20000720 	.word	0x20000720

0800490c <_init>:
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	bf00      	nop
 8004910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004912:	bc08      	pop	{r3}
 8004914:	469e      	mov	lr, r3
 8004916:	4770      	bx	lr

08004918 <_fini>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr
